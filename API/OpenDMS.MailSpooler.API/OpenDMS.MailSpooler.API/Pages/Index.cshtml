@page
@inject IConfiguration Configuration;
@model OpenDMS.MailSpooler.API.Pages.IndexModel;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Invia messaggio";
}

<!DOCTYPE html>

<link href="~/bootstrap-italia/css/bootstrap-italia.min.css" rel="stylesheet" />
<script src="~/bootstrap-italia/js/bootstrap-italia.bundle.min.js"></script>
<script src="~/custom-input/dist/custom-input.js" type="module"></script>

<link href="~/FontAwesome/css/font-awesome.min.css" rel="stylesheet" />

<script src="~/custom/site.js"></script>
<link href="~/custom/site.min.css" rel="stylesheet" />

<script src="~/js/jquery/jquery.min.js"></script>
<script src="~/js/jquery/jquery-ui.min.js"></script>
<script src="~/js/jquery/jquery.tooltipster.js"></script>
<script src="~/js/jquery/jquery.mousewheel.min.js"></script>
<script src="~/js/jquery/jquery.tmpl.min.js" type="text/javascript"></script>
<script src="~/js/jquery/jquery.json.min.js" type="text/javascript"></script>
<script src="~/js/jquery/jquery.maskedinput.min.js" type="text/javascript"></script>
<script src="~/js/jquery/jquery.meio.mask.min.js"></script>

<script src="~/js/mustache.js"></script>

@* import tinymce *@
<script src="~/js/tinymce/tinymce.min.js"></script>
<script src="~/custom/inizializzatexteditor.js"></script>

@*language*@
<script src="~/js/tinymce/langs/it.js"></script>

@*plugins*@
<script src="~/js/tinymce/plugins/advlist/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/autolink/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/lists/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/link/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/image/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/charmap/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/preview/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/anchor/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/searchreplace/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/visualblocks/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/fullscreen/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/insertdatetime/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/media/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/table/plugin.min.js"></script>
<script src="~/js/tinymce/plugins/code/plugin.min.js"></script>

<html lang="en">
<head>
</head>
<body style="overflow-x: hidden;">

    <script>

        var Attachments = @Html.Raw(Json.Serialize(Model.Message.Attachments));
        var token = "@Model.token";
        AddRefreshTokenFilter();

        var textEditorSelector = ".textEditor";
        var UserId = "@Model.UserId";
        var UserAddresses = @Html.Raw(Json.Serialize(Model.UserAddresses));

        $(document).ready(function () {

            var BodyValue = $('<textarea/>').html("@Model.Message.Body").text();
            InizializzaTextEditor(textEditorSelector, BodyValue, null, "100%").then(function () {
                CaricaUpload();
            });

            $(function () {

                //FadeOutSuccessMessagge(3000);

                $("#sendButton").on("click", function () {
                    Send();
                });

            });
        });

        function DeleteFile(Id) {




            $.ajax({ //elimino il documento in caso di fallimento nel caricamento del file
                url: "@Model.DocumentApi" + "/Document/" + Id + "/FALLIMENTO_ATTACHMENTS_INVIO_MAIL",
                type: "DELETE",
                headers: { "Content-Type": "application/json", 'accept': 'text/plain', "Authorization": "Bearer " + token },
            }).done(function () {

                $("#Attachments_" + Id).remove();

            }).fail(function (err) {
                if (err.status == 401 || isTokenExpired(token)) {
                    ShowMessage("alert", "Autenticazione scaduta. Rieffettua il login.", 'Message_Target', window.location.href);
                }
                else ShowMessage("alert", "Non è stato possibile caricare il file del documento(id: " + Id + "). Errore: " + err.responseText, 'Message_Target', window.location.href);
            });



        }

        function CaricaUpload() {

            var UploadButton = `<div class="d-flex">
                                                                                                                                        <div id="FileArea" class="upload-file-list d-flex flex-wrap"></div>
                                                                                                                                                        <div class="ms-auto position-relative" style="width: 16rem;">
                                                                                                                                            <div class="float-end" style="width: 8.9rem;position: absolute;bottom: 0;right: 0;">
                                                                                                                                                <input type="file" name="upload1" id="upload1" class="upload" multiple="multiple" style="display: none;"/>
                                                                                                                                                <label for="upload1" class="m-2 float-end px-2">
                                                                                                                                                            <svg class="icon icon-sm me-0" aria-hidden="true"><use href="/bootstrap-italia/svg/sprites.svg#it-upload"></use></svg>
                                                                                                                                                    <span>Upload</span>
                                                                                                                                                </label>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>`
            $(".tox-sidebar-wrap").after(UploadButton); // inserisco il button per eseguire l'upload

            /* Al caricamento di un file-------------------------------------------------------------------------*/

            var InputUpload = document.getElementById("upload1");
            InputUpload.onchange = async (e) => {

                AggiungiFileLoadingSpinner();

                handleFileUpload(e) //leggo tutte le informazioni del file
                    .then(function (file) {

                        var body = JSON.stringify(CreateOrUpdateDocument(file)); //preparo l'oggetto per creare il documento

                        $.ajax({ //creao il documento
                            url: "@Model.DocumentApi" + "/Document",
                            type: "POST",
                            headers: { "Content-Type": "application/json", 'accept': 'text/plain', "Authorization": "Bearer " + token },
                            data: body
                        })
                            .done(function (DocumentInfo) {

                                var body = JSON.stringify(FileContent(file)); //preparo l'oggetto per caricare il file sul documento

                                $.ajax({ //carico il file del documento tramite base64
                                    url: "@Model.DocumentApi" + "/Content/" + DocumentInfo.id,
                                    type: "POST",
                                    headers: { "Content-Type": "application/json", 'accept': 'text/plain', "Authorization": "Bearer " + token },
                                    data: body
                                })
                                    .done(function (DocumentImage) {

                                        ShowMessage("success", "file caricato con successo.", 'Message_Target');
                                        Attachments.push(DocumentInfo.id); //conservo le informazioni del file caricato nell'array Attachments
                                        file.documentId = DocumentInfo.id; //aggiungo l'id del documento per poterlo usare nell' onclick del button della funzione di Delete
                                        AggiungiFileCaricato(file);

                                    }).fail(function (err) {
                                        RimuoviFileLoadingSpinner();
                                        $.ajax({ //elimino il documento in caso di fallimento nel caricamento del file
                                            url: "@Model.DocumentApi" + "/Document/" + DocumentInfo.id + "/FALLIMENTO_ATTACHMENTS_INVIO_MAIL",
                                            type: "DELETE",
                                            headers: { "Content-Type": "application/json", 'accept': 'text/plain', "Authorization": "Bearer " + token },
                                            data: body
                                        });

                                        if (err.status == 401 || isTokenExpired(token)) {
                                            ShowMessage("alert", "Autenticazione scaduta. Rieffettua il login.", 'Message_Target', window.location.href);
                                        }
                                        else ShowMessage("alert", "Non è stato possibile caricare il file del documento(id: " + DocumentInfo.id + "). Errore: " + err.responseText, 'Message_Target', window.location.href);
                                    });
                            }).fail(function (err) {
                                RimuoviFileLoadingSpinner();
                                if (err.status == 401 || isTokenExpired(token)) {
                                    ShowMessage("alert", "Autenticazione scaduta. Rieffettua il login.", 'Message_Target', window.location.href);
                                }
                                else ShowMessage("alert", "Non è stato possibile creare il documento. Errore: " + err.responseText, 'Message_Target', window.location.href);
                            });
                    }).catch(function (err) {
                        RimuoviFileLoadingSpinner();
                    })

            }

            //funzioni utili all'upload file
            function CreateOrUpdateDocument(file) {

                var CreateOrUpdateDocument = {
                    ContentType: 1,
                    Status: 255,
                    Description: file.name
                }

                return CreateOrUpdateDocument;
            }

            function FileContent(file) {

                var FileContent = {
                    FileName: file.name,
                    FileData: file.base64,
                    LinkToContent: false,
                    DataIsInBase64: true
                }

                return FileContent;
            }

            function AggiungiFileCaricato(file) {

                $("#file_loading_spinner").remove();

                var fileHTML = `<div id="Attachments_${file.documentId}" class="upload-file success border border-primary rounded m-1 ">
                                                                                            <svg class="icon icon-sm" aria-hidden="true"><use href="/bootstrap-italia/svg/sprites.svg#it-file"></use></svg>
                                                                                            <p>${file.name}</p>
                                                                                            <p class="ms-0">
                                                                                                <span class="upload-file-weight">${file.dimension} MB</span>
                                                                                            </p>
                                                                                            <button onclick="DeleteFile('${file.documentId}')">
                                                                                                <svg class="icon" aria-hidden="true"><use href="/bootstrap-italia/svg/sprites.svg#it-close"></use></svg>
                                                                                            </button>
                                                                                        </div>`

                $("#FileArea").append(fileHTML);
            }

            function AggiungiFileLoadingSpinner() {
                var spinnerHTML = `<div id="file_loading_spinner"  class="upload-file success border border-primary rounded m-1 px-1">
                                        <svg class="icon" style="width: 30px;height: 30px;" aria-hidden="true"><use href="/bootstrap-italia/svg/sprites.svg#it-file"></use></svg>
                                        <div class="lower-spinner p-2">
                                            <div class="progress-spinner progress-spinner-active size-sm custom-spinner">
                                            <span class="visually-hidden">Caricamento...</span>
                                            </div>
                                        </div>
                                    </div>`

                $("#FileArea").append(spinnerHTML);
            }
            
            function RimuoviFileLoadingSpinner() {
                $("#file_loading_spinner").remove();
            }

            function handleFileUpload(event) {
                return new Promise((resolve, reject) => {
                    const file = event.target.files[0]; // Ottieni il file caricato

                    const reader = new FileReader();

                    reader.onload = function (event) {
                        const base64Data = event.target.result.split(',')[1]; // Rappresentazione in base64
                        const fileSize = (file.size / (1024 * 1024)).toFixed(2); // Dimensione del file in MB
                        const fileName = file.name; // Nome del file
                        const fileExtension = fileName.split('.').pop(); // Estensione del file

                        const fileInfo = {
                            id: (fileName.replaceAll(' ', '')).replaceAll('.', ''),
                            base64: base64Data,
                            dimension: fileSize,
                            name: fileName,
                            ext: fileExtension
                        };

                        resolve(fileInfo);
                    };

                    reader.onerror = function (event) {
                        reject(event.target.error);
                    };

                    reader.readAsDataURL(file);
                });
            }

        }

        function Send() {

            var BodyValue = tinymce.activeEditor.getContent(textEditorSelector);
            $("#HiddenInputBody").val(BodyValue);

            var body = NewMailMessage(getFormValues("form_send"));

            ShowRequiredPopup("form_send");//faccio comparire i popup manualmente in caso di campi non validi

            if (document.forms["form_send"].reportValidity()) { //controllo la validità dei campi
                $.ajax({ //carico il file del documento tramite base64
                    url: "@Model.MailSpoolerApi" + "/Mail/Send",
                    type: "POST",
                    headers: { "Content-Type": "application/json", 'accept': 'text/plain', "Authorization": "Bearer " + token },
                    data: JSON.stringify(body)
                })
                    .done(function (DocumentImage) {

                        ShowMessage("success", "messaggio inviato con successo.", 'Message_Target');

                    }).fail(function (err) {
                        if (err.status == 401) {
                            ShowMessage("alert", "Autenticazione scaduta. Rieffettua il login.", 'Message_Target', window.location.href);
                        }
                        else ShowMessage("alert", "Non è stato possibile inviare il messaggio. Errore: " + err.responseText, 'Message_Target', window.location.href);
                    });
            }

            function NewMailMessage(messageInfo) {

                var NewMailMessage = {
                    FromAddress: messageInfo.mittente,
                    FromName: UserId,
                    FromUser: UserId,
                    To: (messageInfo.destinatari !== "" ) ? messageInfo.destinatari.split(",") : [],
                    CC: (messageInfo.cc !== "") ? messageInfo.cc.split(",") : [],
                    CCr: (messageInfo.ccr !== "") ? messageInfo.ccr.split(",") : [],
                    Subject: messageInfo.oggetto,
                    Body: messageInfo.body,
                    Attachments: Attachments,
                    LinkAttachments: true,
                    IncludePDFPreview: messageInfo.includePDFPreview,
                    SendDate: new Date().toISOString().split("T")[0],
                    Interactive: true,
                    AbortOnError: true
                }

                return NewMailMessage;
            }

            function getFormValues(formId) {
                var form = document.getElementById(formId);
                var inputs = form.querySelectorAll('input, select, custom-input');
                var formData = {};

                for (var i = 0; i < inputs.length; i++) {
                    var input = inputs[i];
                    var name = input.getAttribute('name');

                    if (input.tagName === 'CUSTOM-INPUT')
                        var value = input.getAttribute('value'); //TO DO:  aggiornare il custom input !!! quindi sostituire con "input.value"
                    else var value = input.value;

                    // Verifica se l'elemento è una select
                    if (input.tagName === 'SELECT') {
                        value = input.options[input.selectedIndex].value;
                    }

                    // Trasforma la prima lettera della chiave in minuscolo
                    var lowercaseKey = name.charAt(0).toLowerCase() + name.slice(1);
                    formData[lowercaseKey] = value;
                }
                if (formData.userId) {
                    formData.userName = formData.userId;
                }
                if (formData.roleId) {
                    formData.roleName = formData.roleId;
                }
                if (formData.notificationStrategy) formData.notificationStrategy = parseInt(formData.notificationStrategy);
                if (formData.notificationStrategyCC) formData.notificationStrategyCC = parseInt(formData.notificationStrategyCC);
                if (formData.visible || formData.visible === "") formData.visible = (formData.visible === "true") ? true : false;
                if (formData.taskReallocationStrategy) formData.taskReallocationStrategy = parseInt(formData.taskReallocationStrategy);

                return formData;
            }
        }

    </script>

    <div class="row-fluid backgroundMenu p-2" style="height: 90vh;">
        @*@{*@
        @*//if (!String.IsNullOrEmpty(Model.ErrorMessage))
        //{
        //    <div class="alert alert-danger mt-2" role="alert">
        //        <h6 class="alert-heading">Qualcosa è andato storto durente il caricamento dei dati: </h6>
        //        <p>@Model.ErrorMessage <a href="@Configuration["PATH_BASE"]/TemplateNotifiche/Index"><button type="button" class="btn btn-link ">Ricarica</button></a></p>
        //    </div>
        //}
        //else
        //{*@

        <div class="row">
            <div class="header pb-0">
                <div class="d-flex justify-content-start">
                    <i class="fa fa-lg fa-envelope align-self-center"></i>
                    <div class="row">
                        <h5>
                            @{
                                if (Model.NewMessage)
                                {
                                    <b>Nuovo messaggio...</b>
                                }
                                else
                                {
                                    <b>Modifica messaggio</b>
                                }
                            }

                        </h5>
                        <small>INVIA ED ARCHIVIA IL MESSAGGIO DI POSTA ALLEGANDOLO AL DOCUMENTO PRINCIPALE.</small>
                    </div>
                </div>
            </div>
        </div>

        <div id="Message_Target"></div>


        @*//if (!String.IsNullOrEmpty(Model.SuccessMessage))
        //{
        //    <div class="alert alert-success alert-dismissible fade show bg-white mt-2 mb-5" role="alert">
        //        <p>@Model.SuccessMessage</p>
        //        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Chiudi avviso">
        //            <svg class="icon">
        //                <use href="@($"{Configuration["PATH_BASE"]}/bootstrap-italia/svg/sprites.svg#it-close")"></use>
        //            </svg>
        //        </button>
        //    </div>
        //}*@

        <div class="row h-100 d-flex flex-column">
            <form id="form_send">
                <div class="row me-1">
                    <div class="form-group col-12 mb-0">
                        <div class="input-group d-flex">
                            <div class="input-group-prepend lower-input">
                                <div class="input-group-text">Mittente</div>
                            </div>
                            <div class="select-wrapper" id="select_mittente" style="flex-grow: 1;font-size: 0.8rem;">
                                <select asp-for="Message.FromAddress" asp-items="Model.UserAddresses" required id="select_mittente_input" name="mittente" class="lower-input pb-0" style="background-color: white;">
                                    <option value="">Scegli l'indirizzo da cui spedire</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-12 mt-0 mb-0">
                        <div class="input-group">
                            <div class="input-group-prepend lower-input">
                                <div class="input-group-text ">Destinatari</div>
                            </div>
                            <input type="text" class="form-control lower-input" placeholder="Destinatari" value="@(String.Join(',',@Model.Message.To))" name="Destinatari" id="Destinatari">

                            @*<custom-input id="Destinatari"
                                          name="Destinatari"
                                          type="lookup"
                                          value=""
                                          instanceId="$us"
                                          baseurl="@Configuration["EndPoint:SearchService"]"
                                          multiValue="true"
                                          visible="true"
                                          required="true"
                                          placeholder="Scegli i destinatari"></custom-input>*@
                        </div>
                    </div>



                    <div class="form-group col-12 mt-0 mb-0">
                        <div class="input-group">
                            <div class="input-group-prepend lower-input">
                                <div class="input-group-text ">C.C.</div>
                            </div>
                            <input type="text" class="form-control lower-input" placeholder="cc" value="@(String.Join(',',@Model.Message.CC))" name="cc" id="cc">

                            @*<custom-input id="cc"
                                          name="cc"
                                          type="lookup"
                                          value=""
                                          instanceId="$us"
                                          baseurl="@Configuration["EndPoint:SearchService"]"
                                          multiValue="true"
                                          visible="true"
                                          required="true"
                                          placeholder=""></custom-input>*@
                        </div>
                    </div>



                    <div class="form-group col-12 mt-0 mb-0">
                        <div class="input-group lower-input">
                            <div class="input-group-prepend lower-input">
                                <div class="input-group-text ">C.C.R.</div>
                            </div>
                            <input type="text" class="form-control lower-input" placeholder="ccr" value="@(String.Join(',',@Model.Message.CCr))" name="ccr" id="ccr">

                            @*<custom-input id="ccr"
                                          name="ccr"
                                          type="lookup"
                                          value=""
                                          instanceId="$us"
                                          baseurl="@Configuration["EndPoint:SearchService"]"
                                          multiValue="true"
                                          visible="true"
                                          required="true"
                                          placeholder=""></custom-input>*@
                        </div>
                    </div>



                    <div class="form-group col-12 mt-0 mb-0">
                        <div class="input-group">
                            <div class="input-group-prepend lower-input">
                                <div class="input-group-text ">Oggetto</div>
                            </div>

                            <input type="text" required class="form-control lower-input" value="@Model.Message.Subject" name="Oggetto" id="Oggetto">

                        </div>
                    </div>
                </div>
                <input type="hidden" name="Body" value="prova" id="HiddenInputBody">
            </form>
            <div class="row mt-1 table-overflow-y">
                <div class="form-group col-12 mb-1">
                    <div class="textEditor"></div>
                </div>
            </div>

            <div class="row lower-input">
                <div class="form-check col-12 m-0 d-flex justify-content-end">

                    <input id="IncludePDFPreview" name="IncludePDFPreview" type="checkbox" checked="@Model.Message.IncludePDFPreview">

                    <label class="mb-0" for="IncludePDFPreview"><p>INCLUDI UNA COPIA PDF DEGLI ALLEGATI</p></label>
                </div>
            </div>
            <div class="row mt-1">
                <div class="form-group mb-1">
                    <button id="sendButton" class="btn btn-primary btn-me py-1">
                        <i class="fa fa-send"></i>
                        <span class="ms-1">INVIA MESSAGGIO</span>
                    </button>
                    @*    <button class="btn btn-white btn-me text-primary py-1">
                        <i class="fa fa-pencil-square"></i>
                        <span class="ms-1">SALVA COME BOZZA</span>
                    </button>*@
                </div>
            </div>

        </div>

        @*//}

        @*}*@
    </div>
</body>
</html>
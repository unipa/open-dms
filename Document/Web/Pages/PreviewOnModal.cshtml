@page
@using OpenDMS.Domain.Constants;
@model PreviewOnModalModel
@{
    ViewData["Title"] = "Anteprima Documento";
}

<div class="MainWindow">
    <div class="Header">
        <i class="fa fa-upload"></i>
        <h1>
            <small class="DocumentType">@Model.Document.DocumentTypeName</small>
            <span class="Description">@Model.Document.Description</span>
        </h1>
        @*<div class="right-header">*@
        <a href="#" onclick="return CloseWindow()"><i class="fa fa-times"></i></a>
        @*</div>*@
    </div>

    <div id="Message_Target"></div>
    <div class="nav nav-toolbar-container">
        <ul class="nav nav-toolbar">
            <li>
                <a href="#" onclick="return AddFolder(@Model.Document.Id)">
                    <i class="fa fa-folder"></i> Fascicola...
                </a>
            </li>
            <li>
                <a href="#" onclick="return Share(@Model.Document.Id)">
                    <i class="fa fa-share"></i> Condividi...
                </a>
            </li>
            <li>
                <a href="#" onclick="return Send(@Model.Document.Id)">
                    <i class="fa fa-envelope"></i> Invia...
                </a>
            </li>
            <li>
                <a href="#" onclick="return DocTab(@Model.Document.Id)">
                    <i class="fa fa-file"></i> Vai alla scheda documento...
                </a>
            </li>
        </ul>
    </div>

    <div class="Page">
        <div class="MainPanel">
            @await  Component.InvokeAsync(Model.Viewer, Model.IndexModel)
        </div>
    </div>

    <nav class="Bottom">
        <a href="#" class="btn" onclick="return CloseWindow()">Esci</a>
    </nav>
</div>



<script type="text/html" id="Folders">
    {{#Folders}}
        <div class="FolderRow">
                {{#path}}
                    <a href="#" onclick="return ShowDocument({{id}})" title="{{annotation}}"><i class="fa fa-folder"></i> {{description}}</a>
                {{/path}}
                <a href="?id={{id}}" title="{{documentTypeName}}"><i class="fa fa-folder-open"></i> {{description}}</a>
                <a class="RemoveFolder" href="#" onclick="return RemoveFolder({{id}})" title="Rimuovi il documento da questo fascicolo..."><i class="fa fa-trash-o"></i></a>
        </div>
    {{/Folders}}
    {{^Folders}}
            <div class="InfoPanel">
                <i class="fa fa-folder"></i>
                <h3>Il documento non è presente in alcun fascicolo</h3>
                <p>Per inserire il documento su uno o più fascicoli premi il pulsante <strong>Aggiungi...</strong></p>
            </div>
    {{/Folders}}
</script>
<script type="text/html" id="Permissions">
    {{#Permissions}}
    <div class="Row">
    <label>
    <a href="#" onclick="EditPermissions('{{profile}}')">
        <img class="avatar" src="/internalapi/identity/avatar/{{profileType}}{{profileId}}" />
        {{profileName}}
        </a>
    </label>
    <span>
        {{#permissions}}
            <div class="CheckRow"><h4>{{label}}</h4><i class="Permission{{authorization}}"></i></div>
        {{/permissions}}
    </span>
    </div>
    {{/Permissions}}
</script>
<script type="text/html" id="Histories">
    {{#HistoryEntries}}
                <div class="HistoryItem" id="{{id}}">
                    <img class="avatar" src="/internalapi/identity/avatar/0{{userId}}" />
                    <div class="HistoryActor">
                        <label>{{userId}}</label>
                        {{#deputyUserId && deputyUserId != userId}}
                            <small>({{deputyUserId}})</small>
                        {{/deputyUserId && deputyUserId != userId}}
                    </div>
                    <div class="HistoryNote">
                        <label>{{eventType}}</label>
                        {{#recipients}}
                            <label>
                            A:
                            {{#recipients}}
                            <span>{{profileId}}</span>
                            {{/recipients}}
                        </label>
                        {{/recipients}}
                        <p>{{description}}</p>
                        <code>{{creationDate}}</code>
                    </div>
                </div>
    {{/HistoryEntries}}


</script>
<script type="text/html" id="Links">
    {{#Links}}
                <div class="PreviewRow" onclick="ShowPreview('Allegato: <b>{{documentType}}</b>{{description}}', {{id}}, {{imageId}}">
                    <div class="PreviewDocument">
                        <image-viewer type="compatto" id="link" pages="1" />
                    </div>
                    <span class="PreviewName">{{description}}<small>{{documentType}}</small></span>
                    <span class="PreviewDate">{{documentDate}}</span>
            {{#protocol}}
                            <span class="PreviewProtocol">PROT. {{protocol}}</span>
            {{/protocol}}
            <div class="PreviewButtons">
                    <a href="#" onclick="return ShowDocument({{id}},true)" class="PreviewOpen"><i class="fa fa-image" title="Apri la scheda del documento"></i></a>
                    <a href="#" onclick="return RemoveLink({{id}})" class="PreviewRemove"><i class="fa fa-trash-o" title="Rimuovi legame"></i></a>
                </div>
            </div>
    {{/Links}}
    {{^Links}}
            <div class="InfoPanel">
                <i class="fa fa-link small"></i>
                <h3>Questo documento non ha collegamenti con altri documenti</h3>
                <p>Per creare nuvi collegamenti premi il pulsante <strong>Aggiungi...</strong></p>
            </div>
    {{/Links}}
</script>
<script type="text/html" id="Attachments">
    {{#Attachments}}
                <div class="PreviewRow" onclick="ShowPreview('Allegato: <b>{{documentType}}</b>{{description}}', {{id}}, {{imageId}}">
                    <div class="PreviewDocument">
                        <image-viewer type="compatto" id="link" pages="1"  />
                    </div>
                    <span class="PreviewName">{{description}}<small>{{documentType}}</small></span>
                    <span class="PreviewDate">{{documentDate}}</span>
            {{#protocol}}
                            <span class="PreviewProtocol">PROT. {{protocol}}</span>
            {{/protocol}}
            <div class="PreviewButtons">
                    <a href="#" onclick="return ShowDocument({{id}},true)"><i class="fa fa-image" title="Apri la scheda del documento"></i></a>
            @if (Model.CanRemoveContent)
            {
                                                    <a href="#" onclick="return RemoveAttachment({{id}})"><i class="fa fa-trash-o" title="Rimuovi legame"></i></a>
            }
        </div>
    </div>
    {{/Attachments}}
    {{^Attachments}}
            <div class="InfoPanel">
                <i class="fa fa-link small"></i>
                <h3>Questo documento non ha allegati </h3>
                <p>Per allegare nuovi documenti premi il pulsante <strong>Aggiungi...</strong></p>
            </div>
    {{/Attachments}}
</script>


<script>




    $(document).ready(() => {
        const imageViewer = document.getElementById('documentImage');

        fileInput = document.getElementById("addfile");
        fileInput.onchange = () => {
            const selectedFiles = [...fileInput.files];
            selectedFiles.forEach((e, i) => {
                const reader = new FileReader();
                reader.onload = (data) => {
                    var b64 = btoa(data.target.result);
                    const formData = new URLSearchParams();
                    formData.append("documentId", @Model.DocumentId);
                    formData.append("filename", e.name);
                    formData.append("data", b64);
                    fetch("?handler=UploadFile", //&documentId=@Model.DocumentId&filename=" + e.name + "&data=" +escape(b64),
                        {
                            method: 'post',
                            headers: {
                                RequestVerificationToken: document.getElementsByName("__RequestVerificationToken")[0].value,
                                'Content-Type': 'application/json',
                                Accept: 'application/json',
                            },
                            body: JSON.stringify({
                                documentId: @Model.DocumentId,
                                filename: e.name,
                                data: b64
                            })
                        })
                        .then(response => {
                            return response.json();
                        })
                        .then(data => {
                            window.location.reload(true);
                        });
                };
                reader.readAsBinaryString(e);
            });
        }


        fileAInput = document.getElementById("addattachment");
        fileAInput.onchange = () => {
            const selectedFiles = [...fileAInput.files];
            selectedFiles.forEach((e, i) => {
                const reader = new FileReader();
                reader.onload = (data) => {
                    var b64 = btoa(data.target.result);
                    const formData = new URLSearchParams();
                    formData.append("documentId", @Model.DocumentId);
                    formData.append("filename", e.name);
                    formData.append("data", b64);
                    fetch("?handler=UploadAttachment", //&documentId=@Model.DocumentId&filename=" + e.name + "&data=" +escape(b64),
                        {
                            method: 'post',
                            headers: {
                                RequestVerificationToken: document.getElementsByName("__RequestVerificationToken")[0].value,
                                'Content-Type': 'application/json',
                                Accept: 'application/json',
                            },
                            body: JSON.stringify({
                                documentId: @Model.DocumentId,
                                filename: e.name,
                                data: b64
                            })
                        })
                        .then(response => {
                            return response.json();
                        })
                        .then(data => {
                            window.location.reload(true);
                        });
                };
                reader.readAsBinaryString(e);
            });
        }
    });

    function DocTab(DocId) {
        window.parent.location.href="/?id="+DocId;
    }
    
    function AddFile() {
        var f = $("#addfile");
        f.click();
    }

    function AddAttachment() {
        var f = $("#addattachment");
        f.click();
    }


    //var zoomFactor = 1;
    //function Zoom(factor) {
    //    var panel = $(".PreviewPanel");
    //    if (factor == 2) // larghezza
    //        zoomFactor = 1;
    //    else
    //        if (factor == 3) // altezza
    //            zoomFactor = 1;
    //        else
    //            zoomFactor = zoomFactor * (factor > 0 ? 1 / 2 : 2);
    //    panel.css("zoom", zoomFactor);
    //}


    function ShowPanel(panelToShow) {
        var panel = $(".LeftPanel");
        panel.addClass("hidden");
        $(".link-list li").removeClass("active");
        if (panelToShow) {
            $("." + panelToShow).removeClass("hidden");
            $(".Menu" + panelToShow).addClass("active");
            var RefreshCallback = "Update" + panelToShow;
            if (window[RefreshCallback] != undefined)
                window[RefreshCallback]();
        }
//        else {
            //ShowMainDocument();
//        }
        return false;
    }
    function ShowPreview(Title, documentId, imageId) {
        var name = $(".PreviewDocumentName");
        name[0].innerHtml = Title;
    }
    function ShowMainDocument() {
        var name = $(".PreviewDocumentName");
        name.val("");
    }



    function AddSign() {

    }
    function AddCheck() {

    }


    function DeleteDocument(documentId) {
        var justification = $("#DeleteJustification").val();
        var recursive = $("#DeleteRecursive:checked").length > 0;
        return Delete(documentId, justification, recursive);
    }


    function UpdateFolderPanel() {
        $(".Folders").html("Caricamento in corso...");
        fetch("?handler=Folders&documentId=@Model.DocumentId")
            .then(response => { return response.json(); })
            .then(data => {
                var template = $("#Folders").html();
                var html = Mustache.to_html(template, { Folders: data });
                $(".Folders").html(html);
                if (data.length > 0)
                    $(".badgeFolders").removeClass("hidden").html(data.length);
                else
                    $(".badgeFolders").addClass("hidden").html(data.length);
            })
    }
    function UpdateHistoryPanel() {
        $(".Histories").html("Caricamento in corso...");
        var searchText = $(".HistorySearchText").val();
        fetch("?handler=Histories&documentId=@Model.DocumentId&PageIndex=0&SearchText=" + searchText + "&Events=0")
            .then(response => { return response.json(); })
            .then(data => {
                var template = $("#Histories").html();
                var html = Mustache.to_html(template, { HistoryEntries: data });
                $(".Histories").html(html);
            })
    }
    function UpdateAuthPanel() {
        $(".Permissions").html("Caricamento in corso...");
        fetch("?handler=Permissions&documentId=@Model.DocumentId")
            .then(response => { return response.json(); })
            .then(data => {
                var template = $("#Permissions").html();
                var html = Mustache.to_html(template, { Permissions: data });
                $(".Permissions").html(html);
            })
    }
    function UpdateAttachmentPanel() {
        $(".Attachments").html("Caricamento in corso...");
        fetch("?handler=Attachments&documentId=@Model.DocumentId")
            .then(response => { return response.json(); })
            .then(data => {
                var template = $("#Attachments").html();
                var html = Mustache.to_html(template, { Attachments: data });
                $(".Attachments").html(html);
            })
    }
    function UpdateLinkPanel() {
        $(".Links").html("Caricamento in corso...");
        fetch("?handler=Links&documentId=@Model.DocumentId")
            .then(response => { return response.json(); })
            .then(data => {
                var template = $("#Links").html();
                var html = Mustache.to_html(template, { Links: data });
                $(".Links").html(html);
            })
    }
    function EditPermissions(profile) {
        OpenModal("/Permissions?id=@Model.DocumentId&Profile=" + profile, () => {
            // Dovrei ricaricare solo i permessi
        });

    }
    function ChangeDocumentType() {
        OpenModal("/ChooseType?IdCategoria=@Model.Document.DocumentType.CategoryId&DocId=@Model.DocumentId");
    }




    function SaveMeta() {
        //raccolgo i dati degli input , secondo la struttura CreateOrUpdateDocument
        var bodyObj = getFormValues("form");
        //raccolgo i metadati, secondo la struttura  AddOrUpdateDocumentField
        bodyObj['fieldList'] = CollectFields();
        //aggiungo dati aggiuntivi
        bodyObj["contentType"] = @((int)Model.Document.ContentType);
        bodyObj["documentTypeId"] = "@(Model.Document.DocumentType?.Id)";
        bodyObj["folderId"] = "@(Model.Document.FolderId)";

        var body = JSON.stringify(bodyObj);

        CheckRequiredPopupJS("form");//faccio comparire i popup manualmente in caso di campi non validi
        if (document.forms["form"].reportValidity()) { //controllo la validità dei campi
            $.ajax({
                url: "/internalapi/document/@Model.Document.Id",
                type: "PUT",
                headers: {
                    RequestVerificationToken: document.getElementsByName("__RequestVerificationToken")[0].value,
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                },
                data: body
            })
                .done(function (doc) {
                    window.location.reload();
                })
                .fail(function (err) {
                    if (err.status == 401) {
                        ShowMessage("alert", "Autenticazione scaduta. Rieffettua il login.", 'Message_Target', "");
                    }
                    else ShowMessage("alert", err.responseText, 'Message_Target', "");
                })
        }
    }





    // CALLBACK

    window.addEventListener("message", (event) => {
        if (event.data.op == "addfolder") {
            //alert("Fascicolo " + event.data.data + " aggiunto")
            UpdateFolderPanel();
        } else
            if (event.data.op == "addlink") {
                UpdateLinkPanel();
            }
            else
                if (event.data.op == "checkin") {
                    window.location.reload(true);
                } else
                    if (event.data.op == "addattachment") {
                        UpdateAttachmentPanel();
                    } else
                        if (event.data.op == "addauth") {
                            UpdateAuthPanel();
                        } else
                            if (event.data.op == "addauth") {
                                UpdateAuthPanel();
                            } else
                                if (event.data.op == "storicize") {
                                    window.location.reload(true);
                                } else
                                    if (event.data.op == "restore") {
                                        window.location.reload(true);
                                    } else
                                        if (event.data.op == "delete") {
                                            window.location.reload(true);
                                        } else
                                            if (event.data.op == "newdocument") {
                                                window.location.href = "?id=" + event.data.data;
                                            } else
                                                if (event.data.op == "digitalsign") {
                                                    window.location.href = "?id=" + event.data.data;
                                                } else
                                                    if (event.data.op == "removefolder") {
                                                        var template = $("#Folders").html();
                                                        // Se sono nella scheda documento...
                                                        if (template) {
                                                            var html = Mustache.to_html(template, { Folders: event.data.data });
                                                            $(".Folders").html(html);
                                                            if (event.data.data.length > 0)
                                                                $(".badgeFolders").removeClass("hidden").html(event.data.data.length);
                                                            else
                                                                $(".badgeFolders").addClass("hidden").html(event.data.data.length);
                                                        }
                                                    }
        if (!$(".HistoryPanel").hasClass("hidden"))
            UpdateHistoryPanel();

    })

</script>

<script src="/components/ImageViewer/dist/image-viewer.js" type="module"></script>



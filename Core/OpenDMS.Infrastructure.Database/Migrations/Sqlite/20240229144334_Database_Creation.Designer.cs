// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenDMS.Infrastructure.Database.DbContext;

#nullable disable

namespace OpenDMS.Infrastructure.Database.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20240229144334_Database_Creation")]
    partial class Database_Creation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ACLId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConsolidationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContentType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentFormattedNumber")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumberDataType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpirationStrategy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpirationTolerance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalProtocolURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalProtocolUid")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconColor")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MasterDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Owner")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PersonalData")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProtocolCustomProperties")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProtocolImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProtocolStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProtocolUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Referents")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferentsCC")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reserved")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("ImageId");

                    b.HasIndex("MasterDocumentId");

                    b.HasIndex("DocumentTypeId", "DocumentStatus");

                    b.HasIndex("ExternalId", "DocumentStatus");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chunk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Customized")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FieldName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldTypeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FormattedValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Internal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("LookupValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Tag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FieldTypeId", "FormattedValue");

                    b.HasIndex("DocumentId", "FieldIndex", "Chunk")
                        .IsUnique();

                    b.HasIndex("DocumentId", "FieldName", "Chunk")
                        .IsUnique();

                    b.ToTable("DocumentFields");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckOutUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletionUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileManager")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileNameHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("IndexingStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLinked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PreservationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreservationPDV")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreservationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreservationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreviewStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SendingIdentifier")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("SendingStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendingUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignatureSession")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("SignatureStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignatureUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Signatures")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoringStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Hash");

                    b.HasIndex("FileName", "FileNameHash");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentPermission", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileId")
                        .HasMaxLength(129)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Authorization")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId", "ProfileId", "ProfileType", "PermissionId");

                    b.ToTable("DocumentPermissions");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InitialProfileId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipientType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId", "RecipientType", "ProfileId", "ProfileType")
                        .IsUnique();

                    b.ToTable("DocumentRecipients");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttachmentImageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLinked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DocumentId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("DocumentRelationships");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.FolderContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FolderId");

                    b.HasIndex("FolderId", "DocumentId")
                        .IsUnique();

                    b.ToTable("FolderContents");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("HistoryDocuments");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeputyUserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkflowId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("HistoryRecipients");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.ImageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("DocumentId", "ImageId")
                        .IsUnique();

                    b.ToTable("ImageVersions");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Mails.MailEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ArchivingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArchivingUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletionUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalMailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalMailAddressCC")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalMailAddressCCr")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileManager")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("IMAPFolder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludePDFPreview")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InternalMailAddress")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInfected")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSPAM")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastException")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastRunningUpdate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LinkAttachments")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTitle")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageUID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfAttachments")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProtocolURL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PurgedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TransmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UIDL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("MailEntries");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Mails.MailServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("InboxProtocol")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InboxSSL")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InboxServer")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("InboxServerPort")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastConnectionStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("MailType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SMTPServer")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SMTPServerPort")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SMTPServerSSL")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("MailServers");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Mails.Mailbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysToRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DeleteDownloadedMail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadImapFolders")
                        .HasColumnType("TEXT");

                    b.Property<string>("DraftEnabledProfiles")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmptyTrash")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableDownload")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EraserWorkerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstReceivingMessageDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GracePeriod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdleTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastCredentialUpdate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastDeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReceivingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastReceivingError")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSendingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSendingError")
                        .HasColumnType("TEXT");

                    b.Property<string>("MailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MailServerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextEraserDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextReaderDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextSenderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadOnlyProfiles")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReaderWorkerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SaveAsDocument")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SaveToImapFolder")
                        .HasColumnType("TEXT");

                    b.Property<string>("SendEnabledProfiles")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderWorkerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserSignature")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Validated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MailAddress")
                        .IsUnique();

                    b.HasIndex("MailServerId");

                    b.ToTable("Mailboxes");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.OrganizationNode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClosingNote")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndISODate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeftBound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentUserGroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("RightBound")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartISODate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskReallocationProfile")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskReallocationStrategy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserGroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeftBound")
                        .IsUnique();

                    b.HasIndex("ParentUserGroupId");

                    b.HasIndex("RightBound")
                        .IsUnique();

                    b.HasIndex("UserGroupId");

                    b.HasIndex("StartISODate", "UserGroupId")
                        .IsUnique();

                    b.ToTable("OrganizationNodes");

                    b.HasData(
                        new
                        {
                            Id = "c89f2022-da46-436f-b120-5e40f88855df",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7916),
                            EndISODate = 99999999,
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7916),
                            LeftBound = 1,
                            RightBound = 2,
                            StartISODate = 0,
                            TaskReallocationStrategy = 0
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalApp")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7202),
                            Deleted = false,
                            ExternalApp = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7206),
                            RoleName = "Amministratore"
                        },
                        new
                        {
                            Id = "$service$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7217),
                            Deleted = false,
                            ExternalApp = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7217),
                            RoleName = "Servizio Applicativo"
                        },
                        new
                        {
                            Id = "workflow_architect",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7223),
                            Deleted = false,
                            ExternalApp = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7224),
                            RoleName = "Progettista di Workflow"
                        },
                        new
                        {
                            Id = "user",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7229),
                            Deleted = false,
                            ExternalApp = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7230),
                            RoleName = "Utente Interattivo"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.UserGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClosingUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalApp")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationProfile")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationStrategy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationStrategyCC")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId", "ExternalApp")
                        .IsUnique();

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.UserGroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndISODate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("StartISODate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserGroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("StartISODate", "UserGroupId", "UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserGroupRoles");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.ACL", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ACLs");

                    b.HasData(
                        new
                        {
                            Id = "$GLOBAL$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7493),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7498),
                            Name = "Permessi Globali"
                        },
                        new
                        {
                            Id = "$PROTOCOL$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7779),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7779),
                            Name = "Protocollo"
                        },
                        new
                        {
                            Id = "$ACCOUNTING$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7785),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7785),
                            Name = "Contabilità"
                        },
                        new
                        {
                            Id = "$MANAGEMENT$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7791),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7791),
                            Name = "Amministrazione"
                        },
                        new
                        {
                            Id = "$SALES$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7797),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7797),
                            Name = "Vendite"
                        },
                        new
                        {
                            Id = "$PURCHASE$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7804),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7804),
                            Name = "Acquisti"
                        },
                        new
                        {
                            Id = "$HR$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7810),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7810),
                            Name = "Personale"
                        },
                        new
                        {
                            Id = "$MAIL$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7815),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7816),
                            Name = "Corrispondenza"
                        },
                        new
                        {
                            Id = "$WORKFLOW$",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7817),
                            Description = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7817),
                            Name = "Workflow"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.ACLPermission", b =>
                {
                    b.Property<string>("ACLId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Authorization")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("ACLId", "ProfileId", "ProfileType", "PermissionId");

                    b.ToTable("ACLPermissions");

                    b.HasData(
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.View",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7522),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7522)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.ViewContent",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7533),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7533)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Create",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7538),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7539)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Edit",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7570),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7570)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Delete",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7576),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7576)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Authorize",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7581),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7582)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.AddContent",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7586),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7587)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.RemoveContent",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7592),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7592)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Share",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7596),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7597)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.History",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7602),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7602)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.CreateGenericDocument",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7608),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7608)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Execute",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7613),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7613)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Workflow.Dashboard",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7617),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7618)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.CanHavePersonalFolder",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7622),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7622)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.CanCeateRootFolder",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7627),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7627)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.ViewUp",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7632),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7632)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.ViewDown",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7637),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7637)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.ViewSide",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7643),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7643)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.ReadInbox",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7648),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7648)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.ReadInboxCC",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7653),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7653)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Task.View",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7659),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7659)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Task.Create",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7663),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7664)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Task.CreateMessage",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7668),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7668)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Team.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7672),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7673)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Roles.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7677),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7677)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "DocumentType.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7682),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7682)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "ACL.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7687),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7687)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Meta.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7692),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7692)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Company.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7696),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7696)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Datasource.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7701),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7701)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Tables.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7737),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7738)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "MailServer.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7743),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7743)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Template.Admin",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7747),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7748)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Mail.Console",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7753),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7753)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.SendMail",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7758),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7758)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.Signature",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7763),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7763)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.RemoteSignatureService",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7768),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7768)
                        },
                        new
                        {
                            ACLId = "$GLOBAL$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Profile.Client",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7773),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7773)
                        },
                        new
                        {
                            ACLId = "$WORKFLOW$",
                            ProfileId = "workflow_architect",
                            ProfileType = 2,
                            PermissionId = "Document.Create",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7827),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7827)
                        },
                        new
                        {
                            ACLId = "$WORKFLOW$",
                            ProfileId = "admin",
                            ProfileType = 2,
                            PermissionId = "Document.Create",
                            Authorization = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7833),
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7833)
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ACLId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("AcceptedExtensions")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContentType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConvertToPDF")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationFormKey")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionLabel")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DescriptionMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DetailPage")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentDateLabel")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumberDataType")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumberLabel")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DocumentNumberMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpirationDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpirationStrategy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpirationTolerance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileManager")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileNamingTemplate")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconColor")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("InitialStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Internal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxVersions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PersonalData")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reserved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ToBeIndexed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ToBePreserved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ToBePublished")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ToBeSigned")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ACLId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = "$NOTA-INGRESSO$",
                            ACLId = "$PROTOCOL$",
                            AcceptedExtensions = "",
                            CategoryId = "$PROTOCOL$",
                            CompanyId = 0,
                            ContentType = 1,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto di Protocollo",
                            DescriptionMandatory = true,
                            DetailPage = "",
                            Direction = 1,
                            DocumentDateLabel = "Data Documento",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Nota In Ingresso",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = false,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$NOTA-USCITA$",
                            ACLId = "$PROTOCOL$",
                            AcceptedExtensions = "",
                            CategoryId = "$PROTOCOL$",
                            CompanyId = 0,
                            ContentType = 1,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto di Protocollo",
                            DescriptionMandatory = true,
                            DetailPage = "",
                            Direction = 2,
                            DocumentDateLabel = "Data Documento",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Nota In Uscita",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$NOTA-INTERNA$",
                            ACLId = "$PROTOCOL$",
                            AcceptedExtensions = "",
                            CategoryId = "$PROTOCOL$",
                            CompanyId = 0,
                            ContentType = 1,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto di Protocollo",
                            DescriptionMandatory = true,
                            DetailPage = "",
                            Direction = 0,
                            DocumentDateLabel = "Data Documento",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Nota Interna",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = false,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$DIAGRAM$",
                            ACLId = "$WORKFLOW$",
                            AcceptedExtensions = ".bpmn",
                            CategoryId = "$WORKFLOW$",
                            CompanyId = 0,
                            ContentType = 3,
                            ConvertToPDF = false,
                            CreationFormKey = "$NEW-DIAGRAM-TEMPLATE$",
                            Description = "",
                            DescriptionLabel = "Descrizione",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Process",
                            Direction = 0,
                            DocumentDateLabel = "",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-cogs",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Processo",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = false,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$FORM$",
                            ACLId = "$WORKFLOW$",
                            AcceptedExtensions = ".form,.html,.formio",
                            CategoryId = "$WORKFLOW$",
                            CompanyId = 0,
                            ContentType = 4,
                            ConvertToPDF = false,
                            CreationFormKey = "$NEW-FORM-TEMPLATE$",
                            Description = "",
                            DescriptionLabel = "Descrizione",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Form",
                            Direction = 0,
                            DocumentDateLabel = "",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-table",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Modulo Digitale",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = false,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$TEMPLATE$",
                            ACLId = "$WORKFLOW$",
                            AcceptedExtensions = ".html,.txt,.docx,.xlsx,.pdf",
                            CategoryId = "$WORKFLOW$",
                            CompanyId = 0,
                            ContentType = 4,
                            ConvertToPDF = false,
                            CreationFormKey = "$NEW-TEMPLATE-TEMPLATE$",
                            Description = "",
                            DescriptionLabel = "Descrizione",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Template",
                            Direction = 0,
                            DocumentDateLabel = "",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-edit",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Template",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = false,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$DMN$",
                            ACLId = "$WORKFLOW$",
                            AcceptedExtensions = ".dmn",
                            CategoryId = "$WORKFLOW$",
                            CompanyId = 0,
                            ContentType = 5,
                            ConvertToPDF = false,
                            CreationFormKey = "$NEW-DMN-TEMPLATE$",
                            Description = "",
                            DescriptionLabel = "Descrizione",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/DMN",
                            Direction = 0,
                            DocumentDateLabel = "",
                            DocumentNumberLabel = "ID Univoco",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-question-circle",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "Matrice Decisionale",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = false,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$MAIL-INBOUND$",
                            ACLId = "$MAIL$",
                            AcceptedExtensions = ".eml",
                            CategoryId = "$MAIL$",
                            CompanyId = 0,
                            ContentType = 8,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Mail",
                            Direction = 0,
                            DocumentDateLabel = "Data Ricezione",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-envelope",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "EMail Ricevuta",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = false,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$MAIL-OUTBOUND$",
                            ACLId = "$MAIL$",
                            AcceptedExtensions = ".eml",
                            CategoryId = "$MAIL$",
                            CompanyId = 0,
                            ContentType = 8,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Mail",
                            Direction = 0,
                            DocumentDateLabel = "Data Invio",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-send",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "EMail Spedita",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$PEC-INBOUND$",
                            ACLId = "$MAIL$",
                            AcceptedExtensions = ".eml",
                            CategoryId = "$MAIL$",
                            CompanyId = 0,
                            ContentType = 8,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Mail",
                            Direction = 0,
                            DocumentDateLabel = "Data Ricezione",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-envelope",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "PEC Ricevuta",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = false,
                            ToBeSigned = false
                        },
                        new
                        {
                            Id = "$PEC-OUTBOUND$",
                            ACLId = "$MAIL$",
                            AcceptedExtensions = ".eml",
                            CategoryId = "$MAIL$",
                            CompanyId = 0,
                            ContentType = 8,
                            ConvertToPDF = false,
                            CreationFormKey = "",
                            Description = "",
                            DescriptionLabel = "Oggetto",
                            DescriptionMandatory = true,
                            DetailPage = "/Details/Mail",
                            Direction = 0,
                            DocumentDateLabel = "Data Invio",
                            DocumentNumberLabel = "",
                            DocumentNumberMandatory = false,
                            ExpirationDays = 0,
                            ExpirationStrategy = 0,
                            ExpirationTolerance = 0,
                            FileManager = "",
                            FileNamingTemplate = "",
                            Icon = "fa fa-send",
                            IconColor = "",
                            InitialStatus = 0,
                            Internal = false,
                            LabelPosition = 0,
                            LabelX = 0,
                            LabelY = 0,
                            MaxVersions = 0,
                            Name = "PEC Spedita",
                            Owner = "",
                            PersonalData = false,
                            Reserved = false,
                            ToBeIndexed = true,
                            ToBePreserved = false,
                            ToBePublished = true,
                            ToBeSigned = false
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentTypeField", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Editable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FieldName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldTypeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Preservable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Width")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("DocumentTypeId", "FieldName")
                        .IsUnique();

                    b.ToTable("DocumentTypeFields");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentTypeWorkflow", b =>
                {
                    b.Property<string>("DocumentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentTypeId", "EventName");

                    b.ToTable("DocumentTypeWorkflows");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.ExternalDatasource", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExternalDataSources");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.FieldType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColumnWidth")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlType")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomProperties")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Customized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Searchable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.AppSetting", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId", "Name");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Notification.Title",
                            Value = "Hai una nuova attività: {Task.Title}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Notification.Body",
                            Value = "{description}<br/><br/>{Sender.FullName}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Notification.CC.Title",
                            Value = "Hai un nuovo messaggio: {Task.Title}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Notification.CC.Body",
                            Value = "{description}<br/><br/>{Sender.FullName}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Exception.Title",
                            Value = "Si è verificato un errore"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Exception.Body",
                            Value = "{description}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.NewMail.Title",
                            Value = "Hai un messaggio di posta elettronica da gestire"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.NewMail.Body",
                            Value = "Ricordati di assegnarlo a chi di competenza o di gestirlo tu stesso."
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Attachment.Linked",
                            Value = ""
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Attachment.NotFound",
                            Value = ""
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Referents.Title",
                            Value = "Sei il nuovo referente di un fascicolo"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Referents.Body",
                            Value = "Il fascicolo è: {Document.Description}<br/><br/>{Task.Description}<br/> {Sender.FullName}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.NoReferents.Title",
                            Value = "Non sei più il referente di un fascicolo"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.NoReferents.Body",
                            Value = "Il fascicolo è: {Document.Description}<br/><br/>{Task.Description}<br/> {Sender.FullName}"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Referents.Changes.Title",
                            Value = "E' stato modificato un documento di cui sei il referente"
                        },
                        new
                        {
                            CompanyId = 0,
                            Name = "Template.Referents.Changes.Body",
                            Value = "Il documento modificato è: {Document.Description}<br/>"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AOO")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ERP")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("OffLine")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RootOrganizationNode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AOO = "",
                            Description = "Ambiente Principale",
                            ERP = "",
                            ExternalReference = "",
                            Logo = "",
                            OffLine = false,
                            RootOrganizationNode = "",
                            Theme = ""
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.Counter", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CounterId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyId", "CounterId", "Year");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.CustomPage", b =>
                {
                    b.Property<string>("PageId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Alignment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BadgeURL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeaderPageId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncludeSubMenus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentPageId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Target")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ToolTip")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("PageId");

                    b.HasIndex("ParentPageId", "Alignment", "Position");

                    b.ToTable("CustomPages");

                    b.HasData(
                        new
                        {
                            PageId = "Admin",
                            Alignment = -1,
                            BadgeURL = "",
                            HeaderPageId = "",
                            Icon = "fa fa-sliders",
                            IncludeSubMenus = false,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentPageId = "",
                            Permissions = ":admin",
                            Position = 0,
                            Target = "",
                            Title = "Amministrazione",
                            ToolTip = "Amministrazione",
                            URL = "/Admin/Home/Index"
                        },
                        new
                        {
                            PageId = "Tasks",
                            Alignment = 0,
                            BadgeURL = "/internalapi/tasklist/badge",
                            HeaderPageId = "",
                            Icon = "fa fa-bell",
                            IncludeSubMenus = false,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentPageId = "",
                            Permissions = "Task.View",
                            Position = 0,
                            Target = "",
                            Title = "Attività",
                            ToolTip = "Attività",
                            URL = "/tasks"
                        },
                        new
                        {
                            PageId = "Folders",
                            Alignment = 0,
                            BadgeURL = "",
                            HeaderPageId = "",
                            Icon = "fa fa-folder",
                            IncludeSubMenus = false,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentPageId = "",
                            Permissions = "",
                            Position = 1,
                            Target = "",
                            Title = "Documenti",
                            ToolTip = "Documenti",
                            URL = "/"
                        },
                        new
                        {
                            PageId = "Mail",
                            Alignment = 0,
                            BadgeURL = "/internalapi/mailentry/badge",
                            HeaderPageId = "",
                            Icon = "fa fa-envelope",
                            IncludeSubMenus = false,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentPageId = "",
                            Permissions = "Mail.Console",
                            Position = 2,
                            Target = "",
                            Title = "Posta Elettronica",
                            ToolTip = "Posta Elettronica",
                            URL = "/mail"
                        },
                        new
                        {
                            PageId = "WF",
                            Alignment = 0,
                            BadgeURL = "",
                            HeaderPageId = "",
                            Icon = "fa fa-sitemap",
                            IncludeSubMenus = false,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentPageId = "",
                            Permissions = "Workflow.Dashboard",
                            Position = 100,
                            Target = "",
                            Title = "Processi",
                            ToolTip = "Dashboard Processi",
                            URL = "/BPMMonitor"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.DistributedLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId", "RecordId")
                        .IsUnique();

                    b.ToTable("DistributedLocks");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.LookupTable", b =>
                {
                    b.Property<string>("TableId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Annotation")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("TableId", "Id");

                    b.ToTable("LookupTables");

                    b.HasData(
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$TABLES$",
                            Description = "Registro delle Tabelle"
                        },
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$CATEGORIES$",
                            Description = "Categorie Documentali"
                        },
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$PERMISSIONS$",
                            Description = "Permessi"
                        },
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$EVENTS$",
                            Description = "Eventi"
                        },
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$TASK.GROUPS$",
                            Description = "Categorie Task"
                        },
                        new
                        {
                            TableId = "$TABLES$",
                            Id = "$TASK.PRIORITIES$",
                            Description = "Priorità"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$PURCHASE$",
                            Description = "Acquisti"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$SALES$",
                            Description = "Vendite"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$HR$",
                            Description = "Personale"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$MANAGEMENT$",
                            Description = "Amministrazione"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$ACCOUNTING$",
                            Description = "Contabilità"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$TEMPLATES$",
                            Description = "Modelli"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$PROTOCOL$",
                            Description = "Protocollo"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$MAIL$",
                            Description = "Corrispondenza"
                        },
                        new
                        {
                            TableId = "$CATEGORIES$",
                            Id = "$WORKFLOW$",
                            Description = "Processi"
                        },
                        new
                        {
                            TableId = "$TASK.GROUPS$",
                            Id = "100.NONE",
                            Description = "Attività Generica"
                        },
                        new
                        {
                            TableId = "$TASK.PRIORITIES$",
                            Id = "100.LOW",
                            Description = "Bassa"
                        },
                        new
                        {
                            TableId = "$TASK.PRIORITIES$",
                            Id = "200.MEDIUM",
                            Description = "Media"
                        },
                        new
                        {
                            TableId = "$TASK.PRIORITIES$",
                            Id = "300.HIGH",
                            Description = "Alta"
                        },
                        new
                        {
                            TableId = "$TASK.PRIORITIES$",
                            Id = "400.URGENT",
                            Description = "Urgente"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.View",
                            Description = "Documento - Visibilità"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.ViewContent",
                            Description = "Documento - Visibilità Contenuto"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Create",
                            Description = "Documento - Creazione"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Edit",
                            Description = "Documento - Modifica Metadati"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Delete",
                            Description = "Documento - Cancellazione"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Authorize",
                            Description = "Documento - Gestione Permessi"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.AddContent",
                            Description = "Documento - Gestione Contenuti"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.RemoveContent",
                            Description = "Documento - Rimozione Contenuti"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Share",
                            Description = "Documento - Condivisione"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.History",
                            Description = "Documento - Accesso Registro Cronistoria"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.CreateGenericDocument",
                            Description = "Documento - Creazione Documento Generico"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Document.Execute",
                            Description = "Processo - Esecuzione flussi"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Workflow.Dashboard",
                            Description = "Processo - Accesso alla Dashboard"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.CanHavePersonalFolder",
                            Description = "Fascicolo - Gestione Fascicolo Personale"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.CanCeateRootFolder",
                            Description = "Fascicolo - Creazione Fascicoli Condivisi"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.ViewUp",
                            Description = "Organigramma - Visione Strutture Superiori"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.ViewDown",
                            Description = "Organigramma - Visione Strutture Inferiori"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.ViewSide",
                            Description = "Organigramma - Visione Strutture Paritetiche"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.ReadInbox",
                            Description = "Organigramma - Ricezione Notifiche di Struttura"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.ReadInboxCC",
                            Description = "Organigramma - Ricezione Notifche CC di Struttura"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Task.View",
                            Description = "Task - Accesso alla Dashboard"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Task.Create",
                            Description = "Task - Creazione Nuove Attività"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Task.CreateMessage",
                            Description = "Task - Creazione Nuovi Messaggi"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Team.Admin",
                            Description = "Amministrazione - Gestione Organigramma"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Roles.Admin",
                            Description = "Amministrazione - Gestione Ruoli"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "DocumentType.Admin",
                            Description = "Amministrazione - Gestione Tipologie"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "ACL.Admin",
                            Description = "Amministrazione - Gestione Permessi su Tipologie"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Meta.Admin",
                            Description = "Amministrazione - Gestione Metadati"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Company.Admin",
                            Description = "Amministrazione - Gestione Sistemi Informativi"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Datasource.Admin",
                            Description = "Amministrazione - Gestione Database Esterni"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Tables.Admin",
                            Description = "Amministrazione - Gestione Tabelle Interne"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "MailServer.Admin",
                            Description = "Amministrazione - Gestione MailServer"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Template.Admin",
                            Description = "Amministrazione - Gestione Template Notifiche"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Mail.Console",
                            Description = "Posta Elettronica - Accesso alla Dashboard"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.SendMail",
                            Description = "Posta Elettronica - Autorizzato all'invio"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.Signature",
                            Description = "Firme - Gestione Firma Autografa"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.RemoteSignatureService",
                            Description = "Firme - Accesso Firme Remote"
                        },
                        new
                        {
                            TableId = "$PERMISSIONS$",
                            Id = "Profile.Client",
                            Description = "App - Download Client di Firma e CheckIn/CheckOut"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Creation",
                            Annotation = "Document",
                            Description = "Creation"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Update",
                            Annotation = "Document",
                            Description = "Update"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Classification",
                            Annotation = "Document",
                            Description = "Classify"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Protocol",
                            Annotation = "Document",
                            Description = "Protocol"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.StatusChanged",
                            Annotation = "Document",
                            Description = "ChangeStatus"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Delete",
                            Annotation = "Document",
                            Description = "Delete"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Restore",
                            Annotation = "Document",
                            Description = "UnDelete"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Expiration",
                            Annotation = "Document",
                            Description = "Expiration"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Send",
                            Annotation = "Document",
                            Description = "EMail"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Share",
                            Annotation = "Document",
                            Description = "Share"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.PermissionChanged",
                            Annotation = "Document",
                            Description = "Authorize"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.CommentAdded",
                            Annotation = "Document",
                            Description = "Comment"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.ProcessStarted",
                            Annotation = "Document",
                            Description = "RunProcess"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddToFolder",
                            Annotation = "Document",
                            Description = "AddToFolder"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.RemoveFromFolder",
                            Annotation = "Document",
                            Description = "RemoveFromFolder"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.DefaultContent",
                            Annotation = "Document",
                            Description = "DefaultContent"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.ExpirationDateUpdated",
                            Annotation = "Document",
                            Description = "ExpirationUpdated"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.View",
                            Annotation = "Document",
                            Description = "View"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Download",
                            Annotation = "Document",
                            Description = "Download"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Print",
                            Annotation = "Document",
                            Description = "Print"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddVersion",
                            Annotation = "Document",
                            Description = "AddVersion"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddRevision",
                            Annotation = "Document",
                            Description = "AddRevision"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.RemoveVersion",
                            Annotation = "Document",
                            Description = "RemoveVersion"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.RemoveRevision",
                            Annotation = "Document",
                            Description = "RemoveRevision"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.NoContentUpdate",
                            Annotation = "Document",
                            Description = "NoContentUpdate"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Convert",
                            Annotation = "Document",
                            Description = "Convert"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.EraseContent",
                            Annotation = "Document",
                            Description = "EraseContent"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.ObscureContent",
                            Annotation = "Document",
                            Description = "ObscureContent"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.HighlightContent",
                            Annotation = "Document",
                            Description = "HighlightContent"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddTextToContent",
                            Annotation = "Document",
                            Description = "AddTextToContent"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddProtocolSign",
                            Annotation = "Document",
                            Description = "AddProtocolSign"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddStamp",
                            Annotation = "Document",
                            Description = "AddStamp"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddSignatureField",
                            Annotation = "Document",
                            Description = "AddSignatureField"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddCheckSign",
                            Annotation = "Document",
                            Description = "AddCheckSign"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddUserSignature",
                            Annotation = "Document",
                            Description = "AddUserSignature"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddDigitalSignature",
                            Annotation = "Document",
                            Description = "AddDigitalSignature"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddBiometricalSignature",
                            Annotation = "Document",
                            Description = "AddBiometricalSignature"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddRemoteDigitalSignature",
                            Annotation = "Document",
                            Description = "AddRemoteDigitalSignature"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Preservation",
                            Annotation = "Document",
                            Description = "Preservation"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddPreservationSignature",
                            Annotation = "Document",
                            Description = "AddPreservationSignature"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Publish",
                            Annotation = "Document",
                            Description = "Publish"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.PrepareForSending",
                            Annotation = "Document",
                            Description = "PrepareForSending"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.ExcludeFromSending",
                            Annotation = "Document",
                            Description = "ExcludeFromSending"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.CheckIn",
                            Annotation = "Document",
                            Description = "CheckIn"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.CheckOut",
                            Annotation = "Document",
                            Description = "CheckOut"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddLink",
                            Annotation = "Document",
                            Description = "AddLink"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.RemoveLink",
                            Annotation = "Document",
                            Description = "LinkRemoved"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.AddAttach",
                            Annotation = "Document",
                            Description = "AddAttach"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.RemoveAttach",
                            Annotation = "Document",
                            Description = "AttachRemoved"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Document.Copy",
                            Annotation = "Document",
                            Description = "Copy"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Application.Timer",
                            Annotation = "Application",
                            Description = "Timer"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Application.Exception",
                            Annotation = "Application",
                            Description = "Exception"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Created",
                            Annotation = "Task",
                            Description = "TaskCreated"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Running",
                            Annotation = "Task",
                            Description = "TaskRunning"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Executed",
                            Annotation = "Task",
                            Description = "TaskExecuted"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Expired",
                            Annotation = "Task",
                            Description = "TaskExpired"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Validated",
                            Annotation = "Task",
                            Description = "TaskValidated"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "Task.Deleted",
                            Annotation = "Task",
                            Description = "TaskDeleted"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Claimed",
                            Annotation = "UserTask",
                            Description = "UserTaskClaimed"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Released",
                            Annotation = "UserTask",
                            Description = "UserTaskReleased"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Rejected",
                            Annotation = "UserTask",
                            Description = "UserTaskRejected"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Reassigned",
                            Annotation = "UserTask",
                            Description = "UserTaskReassigned"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Executed",
                            Annotation = "UserTask",
                            Description = "UserTaskExecuted"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Approve",
                            Annotation = "UserTask",
                            Description = "Approval"
                        },
                        new
                        {
                            TableId = "$EVENTS$",
                            Id = "UserTask.Refuse",
                            Annotation = "UserTask",
                            Description = "Refuse"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Settings.TranslatedText", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("LanguageId", "CategoryId", "Text");

                    b.ToTable("TranslatedTexts");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLinked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskAttachments");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Duration")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExecutionPercentage")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FormKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromUserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobInstanceId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotifyExecution")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyExpiration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriorityId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessDefinitionKey")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessInstanceId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variables")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskListCustomFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializedFilters")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SystemFilter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserFilters");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("TaskProgress");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CC")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskRecipients");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CC")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variables")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Annotation")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ContactType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FiscalCode")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPACode")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("LicTradNum")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("SurName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateErrors")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FiscalCode");

                    b.HasIndex("ParentId");

                    b.HasIndex("SearchName");

                    b.HasIndex("CountryCode", "LicTradNum");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            ContactType = 1,
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7239),
                            Deleted = false,
                            FriendlyName = "Utente di Sistema",
                            FullName = "Utente di Sistema",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7240),
                            SearchName = "Utente di Sistema"
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("CAP")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactAddresses");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactAddressRule", b =>
                {
                    b.Property<int>("AddresType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("AddresType", "Address");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactAddressRules");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactDigitalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DigitalAddressType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("SearchName", "Address");

                    b.ToTable("ContactDigitalAddresses");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.UISetting", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId", "UserId", "Name");

                    b.ToTable("UISettings");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalApp")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "$system$",
                            ContactId = "00000000-0000-0000-0000-000000000000",
                            CreationDate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7294),
                            Deleted = false,
                            ExternalApp = "",
                            LastUpdate = new DateTime(2024, 2, 29, 14, 43, 34, 782, DateTimeKind.Utc).AddTicks(7294)
                        });
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.UserSetting", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId", "ContactId", "AttributeId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.V2.PostIt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Left")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("PageIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Postit");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskEndpoint", b =>
                {
                    b.Property<string>("Endpoint")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomTaskEndpointType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndPointDescriptor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tasks")
                        .HasColumnType("TEXT");

                    b.HasKey("Endpoint");

                    b.ToTable("CustomTaskEndpoints");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomTaskEndpointEndpoint")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndpointId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomTaskEndpointEndpoint");

                    b.ToTable("CustomTaskGroups");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndpointId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputVariables")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobWorker")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputVariables")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskGroupId");

                    b.ToTable("CustomTaskItems");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.Document", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Schemas.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("OpenDMS.Domain.Entities.Documents.DocumentImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("DocumentType");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentField", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany("Fields")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Schemas.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.Navigation("Document");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentPermission", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentRecipient", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentRelationship", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.FolderContent", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryDocument", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.HistoryEntry", "Entry")
                        .WithMany("Documents")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryRecipient", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.HistoryEntry", "Entry")
                        .WithMany("Recipients")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.ImageVersion", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Documents.DocumentImage", "Image")
                        .WithMany("Versions")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Mails.MailEntry", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Mails.MailEntry", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Mails.Mailbox", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Settings.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Mails.MailServer", "MailServer")
                        .WithMany()
                        .HasForeignKey("MailServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("MailServer");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.OrganizationNode", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.OrganizationUnits.UserGroup", "ParentUserGroup")
                        .WithMany()
                        .HasForeignKey("ParentUserGroupId");

                    b.HasOne("OpenDMS.Domain.Entities.OrganizationUnits.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.Navigation("ParentUserGroup");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.OrganizationUnits.UserGroupRole", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.OrganizationUnits.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("OpenDMS.Domain.Entities.OrganizationUnits.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.HasOne("OpenDMS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.ACLPermission", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Schemas.ACL", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ACLId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentType", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Schemas.ACL", "ACL")
                        .WithMany()
                        .HasForeignKey("ACLId");

                    b.Navigation("ACL");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentTypeField", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Schemas.DocumentType", "DocumentType")
                        .WithMany("Fields")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("OpenDMS.Domain.Entities.Schemas.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId");

                    b.Navigation("DocumentType");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskAttachment", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Tasks.TaskItem", "TaskItem")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskProgress", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Tasks.TaskItem", "TaskItem")
                        .WithMany("Progress")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenDMS.Domain.Entities.Tasks.UserTask", "UserTask")
                        .WithMany()
                        .HasForeignKey("UserTaskId");

                    b.Navigation("TaskItem");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskRecipient", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Tasks.TaskItem", "TaskItem")
                        .WithMany("Recipients")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.UserTask", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Tasks.TaskItem", "TaskItem")
                        .WithMany("UserTasks")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.Contact", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Users.Contact", "Parent")
                        .WithMany("Contacts")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactAddress", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Users.Contact", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactAddressRule", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Users.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.ContactDigitalAddress", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Users.Contact", "Contact")
                        .WithMany("DigitalAddresses")
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Users.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskGroup", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Workflow.CustomTaskEndpoint", "CustomTaskEndpoint")
                        .WithMany()
                        .HasForeignKey("CustomTaskEndpointEndpoint");

                    b.Navigation("CustomTaskEndpoint");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskItem", b =>
                {
                    b.HasOne("OpenDMS.Domain.Entities.Workflow.CustomTaskGroup", "TaskGroup")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskGroupId");

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.Document", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.DocumentImage", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Documents.HistoryEntry", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.ACL", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Schemas.DocumentType", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Tasks.TaskItem", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Progress");

                    b.Navigation("Recipients");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Users.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("DigitalAddresses");
                });

            modelBuilder.Entity("OpenDMS.Domain.Entities.Workflow.CustomTaskGroup", b =>
                {
                    b.Navigation("TaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}

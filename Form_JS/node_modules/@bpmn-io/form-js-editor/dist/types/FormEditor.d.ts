export function exportSchema(schema: any, exporter: any, schemaVersion: any): any;
/**
 * @typedef { import('./types').Injector } Injector
 * @typedef { import('./types').Module } Module
 * @typedef { import('./types').Schema } Schema
 *
 * @typedef { import('./types').FormEditorOptions } FormEditorOptions
 * @typedef { import('./types').FormEditorProperties } FormEditorProperties
 *
 * @typedef { {
 *   properties: FormEditorProperties,
 *   schema: Schema
 * } } State
 *
 * @typedef { (type:string, priority:number, handler:Function) => void } OnEventWithPriority
 * @typedef { (type:string, handler:Function) => void } OnEventWithOutPriority
 * @typedef { OnEventWithPriority & OnEventWithOutPriority } OnEventType
 */
/**
 * The form editor.
 */
export default class FormEditor {
    /**
     * @constructor
     * @param {FormEditorOptions} options
     */
    constructor(options?: FormEditorOptions);
    /**
     * @public
     * @type {OnEventType}
     */
    public on: OnEventType;
    /**
     * @public
     * @type {String}
     */
    public _id: string;
    /**
     * @private
     * @type {Element}
     */
    private _container;
    /**
     * @private
     * @type {any}
     */
    private exporter;
    /**
     * @private
     * @type {State}
     */
    private _state;
    get: <T>(name: string, strict?: boolean) => T;
    invoke: <T_1>(func: (...args: unknown[]) => T_1, context: unknown, locals: import("didi").LocalsMap) => T_1;
    clear(): void;
    destroy(): void;
    /**
     * @param {Schema} schema
     *
     * @return {Promise<{ warnings: Array<any> }>}
     */
    importSchema(schema: Schema): Promise<{
        warnings: Array<any>;
    }>;
    /**
     * @returns {Schema}
     */
    saveSchema(): Schema;
    /**
     * @returns {Schema}
     */
    getSchema(): Schema;
    /**
     * @param {Element|string} parentNode
     */
    attachTo(parentNode: Element | string): void;
    detach(): void;
    /**
     * @internal
     *
     * @param {boolean} [emit]
     */
    _detach(emit?: boolean): void;
    /**
     * @param {any} property
     * @param {any} value
     */
    setProperty(property: any, value: any): void;
    /**
     * @param {string} type
     * @param {Function} handler
     */
    off(type: string, handler: Function): void;
    /**
     * @internal
     *
     * @param {FormEditorOptions} options
     * @param {Element} container
     *
     * @returns {Injector}
     */
    _createInjector(options: FormEditorOptions, container: Element): Injector;
    /**
     * @internal
     */
    _emit(type: any, data: any): void;
    /**
     * @internal
     */
    _getState(): State;
    /**
     * @internal
     */
    _setState(state: any): void;
    /**
     * @internal
     */
    _getModules(): ({
        __depends__: any[];
        __init__: string[];
        modeling: (string | typeof import("./features/modeling/Modeling").default)[];
    } | {
        __depends__: any[];
        editorActions: (string | typeof import("./features/editor-actions/FormEditorActions").default)[];
    } | {
        __depends__: any[];
        __init__: string[];
        keyboardBindings: (string | typeof import("./features/keyboard/FormEditorKeyboardBindings").default)[];
    } | {
        __init__: string[];
        selection: (string | typeof import("./features/selection/Selection").default)[];
        selectionBehavior: (string | typeof import("./features/selection/SelectionBehavior").default)[];
    } | {
        palette: (string | typeof import("./features/palette/PaletteRenderer").default)[];
    } | {
        __init__: string[];
        propertiesPanel: (string | typeof import("./features/properties-panel/PropertiesPanelRenderer").default)[];
    })[];
    /**
     * @internal
     */
    _onEvent(type: any, priority: any, handler: any): void;
}
export type Injector = import('./types').Injector;
export type Module = import('./types').Module;
export type Schema = import('./types').Schema;
export type FormEditorOptions = import('./types').FormEditorOptions;
export type FormEditorProperties = import('./types').FormEditorProperties;
export type State = {
    properties: FormEditorProperties;
    schema: Schema;
};
export type OnEventWithPriority = (type: string, priority: number, handler: Function) => void;
export type OnEventWithOutPriority = (type: string, handler: Function) => void;
export type OnEventType = OnEventWithPriority & OnEventWithOutPriority;

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.FormPlayground = {}));
})(this, (function (exports) { 'use strict';

  var n$3,l$3,u$1,t$3,o$3,r$2,f$1,e$4={},c$1=[],s$2=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$2(n,l){for(var u in l)n[u]=l[u];return n}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,o,r,f={};for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n$3.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return y$1(l,f,t,o,null)}function y$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null!=l$3.vnode&&l$3.vnode(f),f}function p$2(){return {current:null}}function d$1(n){return n.children}function _$1(n,l){this.props=n,this.context=l;}function k$2(n,l){if(null==l)return n.__?k$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?k$2(n):null}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return b$1(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$3.push(n)&&!g$2.__r++||r$2!==l$3.debounceRendering)&&((r$2=l$3.debounceRendering)||o$3)(g$2);}function g$2(){for(var n;g$2.__r=t$3.length;)n=t$3.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$3=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=a$2({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?k$2(t):o,t.__h),z$1(u,t),t.__e!=o&&b$1(t)));});}function w$2(n,l,u,i,t,o,r,f,s,a){var h,v,p,_,b,m,g,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break}p=null;}j$2(n,_,p=p||e$4,t,o,r,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(g||(g=[]),p.ref&&g.push(p.ref,null,_),g.push(v,_.__c||b,_)),null!=b?(null==m&&(m=b),"function"==typeof _.type&&null!=_.__k&&_.__k===p.__k?_.__d=s=x$2(_,s,n):s=P$3(n,_,p,w,b,s),a||"option"!==u.type?"function"==typeof u.type&&(u.__d=s):n.value=""):s&&p.__e==s&&s.parentNode!=n&&(s=k$2(p));}for(u.__e=m,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=k$2(i,h+1)),N$1(w[h],w[h]));if(g)for(h=0;h<g.length;h++)M$1(g[h],g[++h],g[++h]);}function x$2(n,l,u){var i,t;for(i=0;i<n.__k.length;i++)(t=n.__k[i])&&(t.__=n,l="function"==typeof t.type?x$2(t,l,u):P$3(u,t,t,n.__k,t.__e,l));return l}function A$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$2(n,l);}):l.push(n)),l}function P$3(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else {for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling}function C$2(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s$2.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I$1,o):n.removeEventListener(l,o?T$2:I$1,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function I$1(n){this.l[n.type+!1](l$3.event?l$3.event(n):n);}function T$2(n){this.l[n.type+!0](l$3.event?l$3.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var s,h,v,y,p,k,b,m,g,x,A,P=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(s=l$3.__b)&&s(u);try{n:if("function"==typeof P){if(m=u.props,g=(s=P.contextType)&&t[s.__c],x=s?g?g.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in P&&P.prototype.render?u.__c=h=new P(m,x):(u.__c=h=new _$1(m,x),h.constructor=P,h.render=O$1),g&&g.sub(h),h.props=m,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=P.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$2({},h.__s)),a$2(h.__s,P.getDerivedStateFromProps(m,h.__s))),y=h.props,p=h.state,v)null==P.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==P.getDerivedStateFromProps&&m!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(m,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(m,h.__s,x)||u.__v===i.__v){h.props=m,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(m,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}h.context=x,h.props=m,h.state=h.__s,(s=l$3.__r)&&s(u),h.__d=!1,h.__v=u,h.__P=n,s=h.render(h.props,h.state,h.context),h.state=h.__s,null!=h.getChildContext&&(t=a$2(a$2({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),A=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(A)?A:[A],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(s=l$3.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$3.__e(n,u,i);}}function z$1(n,u){l$3.__c&&l$3.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$3.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(o=!0),null!=r)for(;_<r.length;_++)if((s=r[_])&&(s===l||(d?s.localName==d:3==s.nodeType))){l=s,r[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(r=r&&n$3.call(l.childNodes),a=(y=i.props||e$4).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$2(l,p,y,o,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,o&&"foreignObject"!==d,r,f,r?r[0]:i.__k&&k$2(i,0),c),null!=r)for(_=r.length;_--;)null!=r[_]&&h$1(r[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_)&&H$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&H$1(l,"checked",_,y.checked,!1));}return l}function M$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$3.__e(n,i);}}function N$1(n,u,i){var t,o;if(l$3.unmount&&l$3.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$3.__e(n,u);}t.base=t.__P=null;}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N$1(t[o],u,"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function S$1(u,i,t){var o,r,f;l$3.__&&l$3.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,f=[],j$2(i,u=(!o&&t||i).__k=v$1(d$1,null,[u]),r||e$4,e$4,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n$3.call(i.childNodes):null,f,!o&&t?t:r?r.__e:i.firstChild,o),z$1(f,u);}function q$1(n,l){S$1(n,l,q$1);}function B$1(l,u,i){var t,o,r,f=a$2({},l.props);for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];return arguments.length>2&&(f.children=arguments.length>3?n$3.call(arguments,2):i),y$1(l.type,f,t||l.key,o||l.ref,null)}function D$1(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(m$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n$3=c$1.slice,l$3={__e:function(n,l){for(var u,i,t;l=l.__;)if((u=l.__c)&&!u.__)try{if((i=u.constructor)&&null!=i.getDerivedStateFromError&&(u.setState(i.getDerivedStateFromError(n)),t=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),t=u.__d),t)return u.__E=u}catch(l){n=l;}throw n}},u$1=0,_$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$2({},this.state),"function"==typeof n&&(n=n(a$2({},u),this.props)),n&&a$2(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),m$1(this));},_$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},_$1.prototype.render=d$1,t$3=[],o$3="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,g$2.__r=0,f$1=0;

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */

  var proto = typeof Element !== 'undefined' ? Element.prototype : {};
  proto.matches
    || proto.matchesSelector
    || proto.webkitMatchesSelector
    || proto.mozMatchesSelector
    || proto.msMatchesSelector
    || proto.oMatchesSelector;

  /**
   * Expose `parse`.
   */

  var domify$3 = parse$5;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug$2 = false;
  var bugTestDiv$2;
  if (typeof document !== 'undefined') {
    bugTestDiv$2 = document.createElement('div');
    // Setup
    bugTestDiv$2.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug$2 = !bugTestDiv$2.getElementsByTagName('link').length;
    bugTestDiv$2 = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map$1$1 = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug$2 ? [1, 'X<div>', '</div>'] : [0, '', '']
  };

  map$1$1.td =
  map$1$1.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map$1$1.option =
  map$1$1.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map$1$1.thead =
  map$1$1.tbody =
  map$1$1.colgroup =
  map$1$1.caption =
  map$1$1.tfoot = [1, '<table>', '</table>'];

  map$1$1.polyline =
  map$1$1.ellipse =
  map$1$1.polygon =
  map$1$1.circle =
  map$1$1.text =
  map$1$1.line =
  map$1$1.path =
  map$1$1.rect =
  map$1$1.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse$5(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);

    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = map$1$1[tag] || map$1$1._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }

    return fragment;
  }

  var OVERLAY_HTML = '<div class="drop-overlay">' +
                       '<div class="box">' +
                          '<div class="label">{label}</div>' +
                       '</div>' +
                     '</div>';

  /**
   * Add file drop functionality to the given element,
   * calling fn(files...) on drop.
   *
   * @example
   *
   * var node = document.querySelector('#container');
   *
   * var dropHandler = fileDrop(handleFiles);
   *
   * node.addEventListener('dragover', dropHandler);
   *
   * @param {String} [label='Drop files here']
   * @param {Function} fn
   *
   * @return {Function} drag start callback function
   */
  function fileDrop(label, fn) {

    if (typeof label === 'function') {
      fn = label;
      label = 'Drop files here';
    }

    var self;
    var extraArgs;

    // we are bound, if overlay exists
    var overlay;

    function onDrop(event) {

      event.preventDefault();

      asyncMap(event.dataTransfer.files, readFile, function(err, files) {

        if (err) {
          console.warn('file drop failed', err);
        } else {

          var args = extraArgs.concat([ files, event ]);

          // cleanup on drop
          // onEnd(event);

          // call provided fn with extraArgs..., files, event
          fn.apply(self, args);
        }
      });
    }

    function isDragAllowed(dataTransfer) {

      if (!dataTransfer || !dataTransfer.items.length) {
        return false;
      }

      var hasFile = false;

      for (var i = 0; i < dataTransfer.items.length; i++) {
        if (dataTransfer.items[i].type === 'file' || dataTransfer.items[i].kind === 'file') {
          hasFile = true;
        }
      }

      return hasFile;
    }

    function onDragover() {

      // (0) extract extra arguments (extraArgs..., event)
      var args = slice$2(arguments),
          event = args.pop();

      var dataTransfer = event.dataTransfer,
          target = event.currentTarget || event.target;

      if (!isDragAllowed(dataTransfer)) {
        return;
      }

      // make us a drop zone
      event.preventDefault();

      dataTransfer.dropEffect = 'copy';

      // only register if we do not drag and drop already
      if (overlay) {
        return;
      }

      overlay = createOverlay(label);

      target.appendChild(overlay);

      self = this;
      extraArgs = args;


      // do not register events during testing
      if (!target) {
        return;
      }


      // (2) setup drag listeners

      function onLeave(event) {

        var relatedTarget = event.relatedTarget;

        if (target.contains(relatedTarget)) {
          return;
        }

        onEnd();
      }

      // (2.1) detach on end
      function onEnd(event) {

        document.removeEventListener('drop', onDrop);
        document.removeEventListener('drop', onEnd);
        document.removeEventListener('dragleave', onLeave);
        document.removeEventListener('dragend', onEnd);
        document.removeEventListener('dragover', preventDrop);

        if (overlay) {
          target.removeChild(overlay);
          overlay = null;
        }
      }

      // (2.0) attach drag + cleanup event
      document.addEventListener('drop', onDrop);
      document.addEventListener('drop', onEnd);
      document.addEventListener('dragleave', onLeave);
      document.addEventListener('dragend', onEnd);
      document.addEventListener('dragover', preventDrop);
    }

    onDragover.onDrop = onDrop;

    return onDragover;
  }


  // helpers ////////////////////////////////////

  function readFile(dropFile, done) {

    if (!window.FileReader) {
      return done();
    }

    var reader = new FileReader();

    // Closure to capture the file information.
    reader.onload = function(e) {

      done(null, {
        name: dropFile.name,
        path: dropFile.path,
        contents: e.target.result
      });
    };

    reader.onerror = function(event) {
      done(event.target.error);
    };

    // Read in the image file as a data URL.
    reader.readAsText(dropFile);
  }


  function asyncMap(elements, iterator, done) {

    var idx = 0,
        results = [];

    function next() {

      if (idx === elements.length) {
        done(null, results);
      } else {

        iterator(elements[idx], function(err, result) {

          if (err) {
            return done(err);
          } else {
            results[idx] = result;
            idx++;

            next();
          }
        });
      }
    }

    next();
  }

  function slice$2(arr) {
    return Array.prototype.slice.call(arr);
  }

  function createOverlay(label) {
    var markup = OVERLAY_HTML.replace('{label}', label);

    return domify$3(markup);
  }

  function preventDrop(event) {
    event.preventDefault();
  }

  function mitt(n){return {all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e]);},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]));},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e);}),(i=n.get("*"))&&i.slice().map(function(n){n(t,e);});}}}

  var t$2,u,r$1,o$2=0,i$2=[],c=l$3.__b,f=l$3.__r,e$3=l$3.diffed,a$1=l$3.__c,v=l$3.unmount;function m(t,r){l$3.__h&&l$3.__h(u,t,o$2||r),o$2=0;var i=u.__H||(u.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({}),i.__[t]}function l$2(n){return o$2=1,p$1(w$1,n)}function p$1(n,r,o){var i=m(t$2++,2);return i.t=n,i.__c||(i.__=[o?o(r):w$1(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}));}],i.__c=u),i.__}function y(r,o){var i=m(t$2++,3);!l$3.__s&&k$1(i.__H,o)&&(i.__=r,i.__H=o,u.__H.__h.push(i));}function h(r,o){var i=m(t$2++,4);!l$3.__s&&k$1(i.__H,o)&&(i.__=r,i.__H=o,u.__h.push(i));}function s$1(n){return o$2=5,d(function(){return {current:n}},[])}function _(n,t,u){o$2=6,h(function(){"function"==typeof n?n(t()):n&&(n.current=t());},null==u?u:u.concat(n));}function d(n,u){var r=m(t$2++,7);return k$1(r.__H,u)&&(r.__=n(),r.__H=u,r.__h=n),r.__}function A$1(n,t){return o$2=8,d(function(){return n},t)}function F$1(n){var r=u.context[n.__c],o=m(t$2++,9);return o.c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function T$1(t,u){l$3.useDebugValue&&l$3.useDebugValue(u?u(t):t);}function x$1(){i$2.forEach(function(t){if(t.__P)try{t.__H.__h.forEach(g$1),t.__H.__h.forEach(j$1),t.__H.__h=[];}catch(u){t.__H.__h=[],l$3.__e(u,t.__v);}}),i$2=[];}l$3.__b=function(n){u=null,c&&c(n);},l$3.__r=function(n){f&&f(n),t$2=0;var r=(u=n.__c).__H;r&&(r.__h.forEach(g$1),r.__h.forEach(j$1),r.__h=[]);},l$3.diffed=function(t){e$3&&e$3(t);var o=t.__c;o&&o.__H&&o.__H.__h.length&&(1!==i$2.push(o)&&r$1===l$3.requestAnimationFrame||((r$1=l$3.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),b&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);b&&(t=requestAnimationFrame(u));})(x$1)),u=void 0;},l$3.__c=function(t,u){u.some(function(t){try{t.__h.forEach(g$1),t.__h=t.__h.filter(function(n){return !n.__||j$1(n)});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],l$3.__e(r,t.__v);}}),a$1&&a$1(t,u);},l$3.unmount=function(t){v&&v(t);var u=t.__c;if(u&&u.__H)try{u.__H.__.forEach(g$1);}catch(t){l$3.__e(t,u.__v);}};var b="function"==typeof requestAnimationFrame;function g$1(n){var t=u;"function"==typeof n.__c&&n.__c(),u=t;}function j$1(n){var t=u;n.__c=n.__(),u=t;}function k$1(n,t){return !n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function w$1(n,t){return "function"==typeof t?t(n):t}

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var downloadExports = {};
  var download$1 = {
    get exports(){ return downloadExports; },
    set exports(v){ downloadExports = v; },
  };

  (function (module, exports) {
  	//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage
  	// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
  	// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
  	// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
  	// v4 adds AMD/UMD, commonJS, and plain browser support
  	// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
  	// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
  	// https://github.com/rndme/download

  	(function (root, factory) {
  		{
  			// Node. Does not work with strict CommonJS, but
  			// only CommonJS-like environments that support module.exports,
  			// like Node.
  			module.exports = factory();
  		}
  	}(commonjsGlobal, function () {

  		return function download(data, strFileName, strMimeType) {

  			var self = window, // this script is only for browsers anyway...
  				defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
  				mimeType = strMimeType || defaultMime,
  				payload = data,
  				url = !strFileName && !strMimeType && payload,
  				anchor = document.createElement("a"),
  				toString = function(a){return String(a);},
  				myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
  				fileName = strFileName || "download",
  				blob,
  				reader;
  				myBlob= myBlob.call ? myBlob.bind(self) : Blob ;
  		  
  			if(String(this)==="true"){ //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
  				payload=[payload, mimeType];
  				mimeType=payload[0];
  				payload=payload[1];
  			}


  			if(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument
  				fileName = url.split("/").pop().split("?")[0];
  				anchor.href = url; // assign href prop to temp anchor
  			  	if(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:
  	        		var ajax=new XMLHttpRequest();
  	        		ajax.open( "GET", url, true);
  	        		ajax.responseType = 'blob';
  	        		ajax.onload= function(e){ 
  					  download(e.target.response, fileName, defaultMime);
  					};
  	        		setTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:
  				    return ajax;
  				} // end if valid url?
  			} // end if url?


  			//go ahead and download dataURLs right away
  			if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)){
  			
  				if(payload.length > (1024*1024*1.999) && myBlob !== toString ){
  					payload=dataUrlToBlob(payload);
  					mimeType=payload.type || defaultMime;
  				}else {			
  					return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
  						navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
  						saver(payload) ; // everyone else can save dataURLs un-processed
  				}
  				
  			}else {//not data url, is it a string with special needs?
  				if(/([\x80-\xff])/.test(payload)){			  
  					var i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;
  					for(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);
  				 	payload=new myBlob([tempUiArr], {type: mimeType});
  				}		  
  			}
  			blob = payload instanceof myBlob ?
  				payload :
  				new myBlob([payload], {type: mimeType}) ;


  			function dataUrlToBlob(strUrl) {
  				var parts= strUrl.split(/[:;,]/),
  				type= parts[1],
  				decoder= parts[2] == "base64" ? atob : decodeURIComponent,
  				binData= decoder( parts.pop() ),
  				mx= binData.length,
  				i= 0,
  				uiArr= new Uint8Array(mx);

  				for(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);

  				return new myBlob([uiArr], {type: type});
  			 }

  			function saver(url, winMode){

  				if ('download' in anchor) { //html5 A[download]
  					anchor.href = url;
  					anchor.setAttribute("download", fileName);
  					anchor.className = "download-js-link";
  					anchor.innerHTML = "downloading...";
  					anchor.style.display = "none";
  					document.body.appendChild(anchor);
  					setTimeout(function() {
  						anchor.click();
  						document.body.removeChild(anchor);
  						if(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}
  					}, 66);
  					return true;
  				}

  				// handle non-a[download] safari as best we can:
  				if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
  					if(/^data:/.test(url))	url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
  					if(!window.open(url)){ // popup blocked, offer direct download:
  						if(confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")){ location.href=url; }
  					}
  					return true;
  				}

  				//do iframe dataURL download (old ch+FF):
  				var f = document.createElement("iframe");
  				document.body.appendChild(f);

  				if(!winMode && /^data:/.test(url)){ // force a mime that will download:
  					url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
  				}
  				f.src=url;
  				setTimeout(function(){ document.body.removeChild(f); }, 333);

  			}//end saver




  			if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
  				return navigator.msSaveBlob(blob, fileName);
  			}

  			if(self.URL){ // simple fast and modern way using Blob and URL:
  				saver(self.URL.createObjectURL(blob), true);
  			}else {
  				// handle non-Blob()+non-URL browsers:
  				if(typeof blob === "string" || blob.constructor===toString ){
  					try{
  						return saver( "data:" +  mimeType   + ";base64,"  +  self.btoa(blob)  );
  					}catch(y){
  						return saver( "data:" +  mimeType   + "," + encodeURIComponent(blob)  );
  					}
  				}

  				// Blob but not URL support:
  				reader=new FileReader();
  				reader.onload=function(e){
  					saver(this.result);
  				};
  				reader.readAsDataURL(blob);
  			}
  			return true;
  		}; /* end download() */
  	}));
  } (download$1));

  var download = downloadExports;

  var classnamesExports = {};
  var classnames = {
    get exports(){ return classnamesExports; },
    set exports(v){ classnamesExports = v; },
  };

  /*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  (function (module) {
  	/* global define */

  	(function () {

  		var hasOwn = {}.hasOwnProperty;

  		function classNames() {
  			var classes = [];

  			for (var i = 0; i < arguments.length; i++) {
  				var arg = arguments[i];
  				if (!arg) continue;

  				var argType = typeof arg;

  				if (argType === 'string' || argType === 'number') {
  					classes.push(arg);
  				} else if (Array.isArray(arg)) {
  					if (arg.length) {
  						var inner = classNames.apply(null, arg);
  						if (inner) {
  							classes.push(inner);
  						}
  					}
  				} else if (argType === 'object') {
  					if (arg.toString === Object.prototype.toString) {
  						for (var key in arg) {
  							if (hasOwn.call(arg, key) && arg[key]) {
  								classes.push(key);
  							}
  						}
  					} else {
  						classes.push(arg.toString());
  					}
  				}
  			}

  			return classes.join(' ');
  		}

  		if (module.exports) {
  			classNames.default = classNames;
  			module.exports = classNames;
  		} else {
  			window.classNames = classNames;
  		}
  	}());
  } (classnames));

  var classNames = classnamesExports;

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var hat_1 = createCommonjsModule(function (module) {
  var hat = module.exports = function (bits, base) {
      if (!base) base = 16;
      if (bits === undefined) bits = 128;
      if (bits <= 0) return '0';
      
      var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
      for (var i = 2; digits === Infinity; i *= 2) {
          digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
      }
      
      var rem = digits - Math.floor(digits);
      
      var res = '';
      
      for (var i = 0; i < Math.floor(digits); i++) {
          var x = Math.floor(Math.random() * base).toString(base);
          res = x + res;
      }
      
      if (rem) {
          var b = Math.pow(base, rem);
          var x = Math.floor(Math.random() * b).toString(base);
          res = x + res;
      }
      
      var parsed = parseInt(res, base);
      if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
          return hat(bits, base)
      }
      else return res;
  };

  hat.rack = function (bits, base, expandBy) {
      var fn = function (data) {
          var iters = 0;
          do {
              if (iters ++ > 10) {
                  if (expandBy) bits += expandBy;
                  else throw new Error('too many ID collisions, use more bits')
              }
              
              var id = hat(bits, base);
          } while (Object.hasOwnProperty.call(hats, id));
          
          hats[id] = data;
          return id;
      };
      var hats = fn.hats = {};
      
      fn.get = function (id) {
          return fn.hats[id];
      };
      
      fn.set = function (id, value) {
          fn.hats[id] = value;
          return fn;
      };
      
      fn.bits = bits || 128;
      fn.base = base || 16;
      return fn;
  };
  });

  /**
   * Create a new id generator / cache instance.
   *
   * You may optionally provide a seed that is used internally.
   *
   * @param {Seed} seed
   */

  function Ids(seed) {
    if (!(this instanceof Ids)) {
      return new Ids(seed);
    }

    seed = seed || [128, 36, 1];
    this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
  }
  /**
   * Generate a next id.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */

  Ids.prototype.next = function (element) {
    return this._seed(element || true);
  };
  /**
   * Generate a next id with a given prefix.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */


  Ids.prototype.nextPrefixed = function (prefix, element) {
    var id;

    do {
      id = prefix + this.next(true);
    } while (this.assigned(id)); // claim {prefix}{random}


    this.claim(id, element); // return

    return id;
  };
  /**
   * Manually claim an existing id.
   *
   * @param {String} id
   * @param {String} [element] element the id is claimed by
   */


  Ids.prototype.claim = function (id, element) {
    this._seed.set(id, element || true);
  };
  /**
   * Returns true if the given id has already been assigned.
   *
   * @param  {String} id
   * @return {Boolean}
   */


  Ids.prototype.assigned = function (id) {
    return this._seed.get(id) || false;
  };
  /**
   * Unclaim an id.
   *
   * @param  {String} id the id to unclaim
   */


  Ids.prototype.unclaim = function (id) {
    delete this._seed.hats[id];
  };
  /**
   * Clear all claimed ids.
   */


  Ids.prototype.clear = function () {
    var hats = this._seed.hats,
        id;

    for (id in hats) {
      this.unclaim(id);
    }
  };

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */

  const nativeToString$1 = Object.prototype.toString;
  const nativeHasOwnProperty$1 = Object.prototype.hasOwnProperty;

  function isUndefined$2(obj) {
    return obj === undefined;
  }

  function isDefined$1(obj) {
    return obj !== undefined;
  }

  function isNil$1(obj) {
    return obj == null;
  }

  function isArray$3(obj) {
    return nativeToString$1.call(obj) === '[object Array]';
  }

  function isObject$1(obj) {
    return nativeToString$1.call(obj) === '[object Object]';
  }

  function isNumber$3(obj) {
    return nativeToString$1.call(obj) === '[object Number]';
  }

  function isFunction$1(obj) {
    const tag = nativeToString$1.call(obj);

    return (
      tag === '[object Function]' ||
      tag === '[object AsyncFunction]' ||
      tag === '[object GeneratorFunction]' ||
      tag === '[object AsyncGeneratorFunction]' ||
      tag === '[object Proxy]'
    );
  }

  function isString$3(obj) {
    return nativeToString$1.call(obj) === '[object String]';
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has$1(target, key) {
    return nativeHasOwnProperty$1.call(target, key);
  }


  /**
   * Find element index in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function} matcher
   *
   * @return {Object}
   */
  function findIndex(collection, matcher) {

    matcher = toMatcher$1(matcher);

    let idx = isArray$3(collection) ? -1 : undefined;

    forEach$1(collection, function(val, key) {
      if (matcher(val, key)) {
        idx = key;

        return false;
      }
    });

    return idx;
  }


  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */
  function forEach$1(collection, iterator) {

    let val,
        result;

    if (isUndefined$2(collection)) {
      return;
    }

    const convertKey = isArray$3(collection) ? toNum$1 : identity$1;

    for (let key in collection) {

      if (has$1(collection, key)) {
        val = collection[key];

        result = iterator(val, convertKey(key));

        if (result === false) {
          return val;
        }
      }
    }
  }


  function toMatcher$1(matcher) {
    return isFunction$1(matcher) ? matcher : (e) => {
      return e === matcher;
    };
  }


  function identity$1(arg) {
    return arg;
  }

  function toNum$1(arg) {
    return Number(arg);
  }

  /**
   * Bind function against target <this>.
   *
   * @param  {Function} fn
   * @param  {Object}   target
   *
   * @return {Function} bound function
   */
  function bind$2(fn, target) {
    return fn.bind(target);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */
  function assign$1(target, ...others) {
    return Object.assign(target, ...others);
  }

  /**
   * Sets a nested property of a given object to the specified value.
   *
   * This mutates the object and returns it.
   *
   * @param {Object} target The target of the set operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} value The value to set.
   */
  function set$2(target, path, value) {

    let currentTarget = target;

    forEach$1(path, function(key, idx) {

      if (typeof key !== 'number' && typeof key !== 'string') {
        throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
      }

      if (key === 'constructor') {
        throw new Error('illegal key: constructor');
      }

      if (key === '__proto__') {
        throw new Error('illegal key: __proto__');
      }

      let nextKey = path[idx + 1];
      let nextTarget = currentTarget[key];

      if (isDefined$1(nextKey) && isNil$1(nextTarget)) {
        nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
      }

      if (isUndefined$2(nextKey)) {
        if (isUndefined$2(value)) {
          delete currentTarget[key];
        } else {
          currentTarget[key] = value;
        }
      } else {
        currentTarget = nextTarget;
      }
    });

    return target;
  }


  /**
   * Gets a nested property of a given object.
   *
   * @param {Object} target The target of the get operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} [defaultValue] The value to return if no value exists.
   */
  function get$1(target, path, defaultValue) {

    let currentTarget = target;

    forEach$1(path, function(key) {

      // accessing nil property yields <undefined>
      if (isNil$1(currentTarget)) {
        currentTarget = undefined;

        return false;
      }

      currentTarget = currentTarget[key];
    });

    return isUndefined$2(currentTarget) ? defaultValue : currentTarget;
  }

  // these aren't really private, but nor are they really useful to document

  /**
   * @private
   */
  class LuxonError extends Error {}

  /**
   * @private
   */
  class InvalidDateTimeError extends LuxonError {
    constructor(reason) {
      super(`Invalid DateTime: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class InvalidIntervalError extends LuxonError {
    constructor(reason) {
      super(`Invalid Interval: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class InvalidDurationError extends LuxonError {
    constructor(reason) {
      super(`Invalid Duration: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class ConflictingSpecificationError extends LuxonError {}

  /**
   * @private
   */
  class InvalidUnitError extends LuxonError {
    constructor(unit) {
      super(`Invalid unit ${unit}`);
    }
  }

  /**
   * @private
   */
  class InvalidArgumentError extends LuxonError {}

  /**
   * @private
   */
  class ZoneIsAbstractError extends LuxonError {
    constructor() {
      super("Zone is an abstract class");
    }
  }

  /**
   * @private
   */

  const n$2 = "numeric",
    s = "short",
    l$1 = "long";

  const DATE_SHORT = {
    year: n$2,
    month: n$2,
    day: n$2,
  };

  const DATE_MED = {
    year: n$2,
    month: s,
    day: n$2,
  };

  const DATE_MED_WITH_WEEKDAY = {
    year: n$2,
    month: s,
    day: n$2,
    weekday: s,
  };

  const DATE_FULL = {
    year: n$2,
    month: l$1,
    day: n$2,
  };

  const DATE_HUGE = {
    year: n$2,
    month: l$1,
    day: n$2,
    weekday: l$1,
  };

  const TIME_SIMPLE = {
    hour: n$2,
    minute: n$2,
  };

  const TIME_WITH_SECONDS = {
    hour: n$2,
    minute: n$2,
    second: n$2,
  };

  const TIME_WITH_SHORT_OFFSET = {
    hour: n$2,
    minute: n$2,
    second: n$2,
    timeZoneName: s,
  };

  const TIME_WITH_LONG_OFFSET = {
    hour: n$2,
    minute: n$2,
    second: n$2,
    timeZoneName: l$1,
  };

  const TIME_24_SIMPLE = {
    hour: n$2,
    minute: n$2,
    hourCycle: "h23",
  };

  const TIME_24_WITH_SECONDS = {
    hour: n$2,
    minute: n$2,
    second: n$2,
    hourCycle: "h23",
  };

  const TIME_24_WITH_SHORT_OFFSET = {
    hour: n$2,
    minute: n$2,
    second: n$2,
    hourCycle: "h23",
    timeZoneName: s,
  };

  const TIME_24_WITH_LONG_OFFSET = {
    hour: n$2,
    minute: n$2,
    second: n$2,
    hourCycle: "h23",
    timeZoneName: l$1,
  };

  const DATETIME_SHORT = {
    year: n$2,
    month: n$2,
    day: n$2,
    hour: n$2,
    minute: n$2,
  };

  const DATETIME_SHORT_WITH_SECONDS = {
    year: n$2,
    month: n$2,
    day: n$2,
    hour: n$2,
    minute: n$2,
    second: n$2,
  };

  const DATETIME_MED = {
    year: n$2,
    month: s,
    day: n$2,
    hour: n$2,
    minute: n$2,
  };

  const DATETIME_MED_WITH_SECONDS = {
    year: n$2,
    month: s,
    day: n$2,
    hour: n$2,
    minute: n$2,
    second: n$2,
  };

  const DATETIME_MED_WITH_WEEKDAY = {
    year: n$2,
    month: s,
    day: n$2,
    weekday: s,
    hour: n$2,
    minute: n$2,
  };

  const DATETIME_FULL = {
    year: n$2,
    month: l$1,
    day: n$2,
    hour: n$2,
    minute: n$2,
    timeZoneName: s,
  };

  const DATETIME_FULL_WITH_SECONDS = {
    year: n$2,
    month: l$1,
    day: n$2,
    hour: n$2,
    minute: n$2,
    second: n$2,
    timeZoneName: s,
  };

  const DATETIME_HUGE = {
    year: n$2,
    month: l$1,
    day: n$2,
    weekday: l$1,
    hour: n$2,
    minute: n$2,
    timeZoneName: l$1,
  };

  const DATETIME_HUGE_WITH_SECONDS = {
    year: n$2,
    month: l$1,
    day: n$2,
    weekday: l$1,
    hour: n$2,
    minute: n$2,
    second: n$2,
    timeZoneName: l$1,
  };

  /**
   * @interface
   */
  class Zone {
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get type() {
      throw new ZoneIsAbstractError();
    }

    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
    get name() {
      throw new ZoneIsAbstractError();
    }

    get ianaName() {
      return this.name;
    }

    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
    get isUniversal() {
      throw new ZoneIsAbstractError();
    }

    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts, opts) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts, format) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return whether this Zone is valid.
     * @abstract
     * @type {boolean}
     */
    get isValid() {
      throw new ZoneIsAbstractError();
    }
  }

  let singleton$1 = null;

  /**
   * Represents the local zone for this JavaScript environment.
   * @implements {Zone}
   */
  class SystemZone extends Zone {
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    static get instance() {
      if (singleton$1 === null) {
        singleton$1 = new SystemZone();
      }
      return singleton$1;
    }

    /** @override **/
    get type() {
      return "system";
    }

    /** @override **/
    get name() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }

    /** @override **/
    get isUniversal() {
      return false;
    }

    /** @override **/
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale);
    }

    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }

    /** @override **/
    offset(ts) {
      return -new Date(ts).getTimezoneOffset();
    }

    /** @override **/
    equals(otherZone) {
      return otherZone.type === "system";
    }

    /** @override **/
    get isValid() {
      return true;
    }
  }

  let dtfCache = {};
  function makeDTF(zone) {
    if (!dtfCache[zone]) {
      dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short",
      });
    }
    return dtfCache[zone];
  }

  const typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6,
  };

  function hackyOffset(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
      [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
  }

  function partsOffset(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for (let i = 0; i < formatted.length; i++) {
      const { type, value } = formatted[i];
      const pos = typeToPos[type];

      if (type === "era") {
        filled[pos] = value;
      } else if (!isUndefined$1(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }
    return filled;
  }

  let ianaZoneCache = {};
  /**
   * A zone identified by an IANA identifier, like America/New_York
   * @implements {Zone}
   */
  class IANAZone extends Zone {
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    static create(name) {
      if (!ianaZoneCache[name]) {
        ianaZoneCache[name] = new IANAZone(name);
      }
      return ianaZoneCache[name];
    }

    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCache() {
      ianaZoneCache = {};
      dtfCache = {};
    }

    /**
     * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
     * @return {boolean}
     */
    static isValidSpecifier(s) {
      return this.isValidZone(s);
    }

    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    static isValidZone(zone) {
      if (!zone) {
        return false;
      }
      try {
        new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
        return true;
      } catch (e) {
        return false;
      }
    }

    constructor(name) {
      super();
      /** @private **/
      this.zoneName = name;
      /** @private **/
      this.valid = IANAZone.isValidZone(name);
    }

    /** @override **/
    get type() {
      return "iana";
    }

    /** @override **/
    get name() {
      return this.zoneName;
    }

    /** @override **/
    get isUniversal() {
      return false;
    }

    /** @override **/
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale, this.name);
    }

    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }

    /** @override **/
    offset(ts) {
      const date = new Date(ts);

      if (isNaN(date)) return NaN;

      const dtf = makeDTF(this.name);
      let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
        ? partsOffset(dtf, date)
        : hackyOffset(dtf, date);

      if (adOrBc === "BC") {
        year = -Math.abs(year) + 1;
      }

      // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
      const adjustedHour = hour === 24 ? 0 : hour;

      const asUTC = objToLocalTS({
        year,
        month,
        day,
        hour: adjustedHour,
        minute,
        second,
        millisecond: 0,
      });

      let asTS = +date;
      const over = asTS % 1000;
      asTS -= over >= 0 ? over : 1000 + over;
      return (asUTC - asTS) / (60 * 1000);
    }

    /** @override **/
    equals(otherZone) {
      return otherZone.type === "iana" && otherZone.name === this.name;
    }

    /** @override **/
    get isValid() {
      return this.valid;
    }
  }

  // todo - remap caching

  let intlLFCache = {};
  function getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlLFCache[key];
    if (!dtf) {
      dtf = new Intl.ListFormat(locString, opts);
      intlLFCache[key] = dtf;
    }
    return dtf;
  }

  let intlDTCache = {};
  function getCachedDTF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlDTCache[key];
    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache[key] = dtf;
    }
    return dtf;
  }

  let intlNumCache = {};
  function getCachedINF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let inf = intlNumCache[key];
    if (!inf) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache[key] = inf;
    }
    return inf;
  }

  let intlRelCache = {};
  function getCachedRTF(locString, opts = {}) {
    const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
    const key = JSON.stringify([locString, cacheKeyOpts]);
    let inf = intlRelCache[key];
    if (!inf) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache[key] = inf;
    }
    return inf;
  }

  let sysLocaleCache = null;
  function systemLocale() {
    if (sysLocaleCache) {
      return sysLocaleCache;
    } else {
      sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
      return sysLocaleCache;
    }
  }

  function parseLocaleString(localeStr) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:

    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u

    // private subtags and unicode subtags have ordering requirements,
    // and we're not properly parsing this, so just strip out the
    // private ones if they exist.
    const xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
      localeStr = localeStr.substring(0, xIndex);
    }

    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
      return [localeStr];
    } else {
      let options;
      let selectedStr;
      try {
        options = getCachedDTF(localeStr).resolvedOptions();
        selectedStr = localeStr;
      } catch (e) {
        const smaller = localeStr.substring(0, uIndex);
        options = getCachedDTF(smaller).resolvedOptions();
        selectedStr = smaller;
      }

      const { numberingSystem, calendar } = options;
      return [selectedStr, numberingSystem, calendar];
    }
  }

  function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
      if (!localeStr.includes("-u-")) {
        localeStr += "-u";
      }

      if (outputCalendar) {
        localeStr += `-ca-${outputCalendar}`;
      }

      if (numberingSystem) {
        localeStr += `-nu-${numberingSystem}`;
      }
      return localeStr;
    } else {
      return localeStr;
    }
  }

  function mapMonths(f) {
    const ms = [];
    for (let i = 1; i <= 12; i++) {
      const dt = DateTime.utc(2016, i, 1);
      ms.push(f(dt));
    }
    return ms;
  }

  function mapWeekdays(f) {
    const ms = [];
    for (let i = 1; i <= 7; i++) {
      const dt = DateTime.utc(2016, 11, 13 + i);
      ms.push(f(dt));
    }
    return ms;
  }

  function listStuff(loc, length, defaultOK, englishFn, intlFn) {
    const mode = loc.listingMode(defaultOK);

    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }

  function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return (
        loc.numberingSystem === "latn" ||
        !loc.locale ||
        loc.locale.startsWith("en") ||
        new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
      );
    }
  }

  /**
   * @private
   */

  class PolyNumberFormatter {
    constructor(intl, forceSimple, opts) {
      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;

      const { padTo, floor, ...otherOpts } = opts;

      if (!forceSimple || Object.keys(otherOpts).length > 0) {
        const intlOpts = { useGrouping: false, ...opts };
        if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF(intl, intlOpts);
      }
    }

    format(i) {
      if (this.inf) {
        const fixed = this.floor ? Math.floor(i) : i;
        return this.inf.format(fixed);
      } else {
        // to match the browser's numberformatter defaults
        const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
        return padStart(fixed, this.padTo);
      }
    }
  }

  /**
   * @private
   */

  class PolyDateFormatter {
    constructor(dt, intl, opts) {
      this.opts = opts;

      let z = undefined;
      if (dt.zone.isUniversal) {
        // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
        // That is why fixed-offset TZ is set to that unless it is:
        // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
        // 2. Unsupported by the browser:
        //    - some do not support Etc/
        //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
        const gmtOffset = -1 * (dt.offset / 60);
        const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
        if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
          z = offsetZ;
          this.dt = dt;
        } else {
          // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.
          // So we have to make do. Two cases:
          // 1. The format options tell us to show the zone. We can't do that, so the best
          // we can do is format the date in UTC.
          // 2. The format options don't tell us to show the zone. Then we can adjust them
          // the time and tell the formatter to show it to us in UTC, so that the time is right
          // and the bad zone doesn't show up.
          z = "UTC";
          if (opts.timeZoneName) {
            this.dt = dt;
          } else {
            this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
          }
        }
      } else if (dt.zone.type === "system") {
        this.dt = dt;
      } else {
        this.dt = dt;
        z = dt.zone.name;
      }

      const intlOpts = { ...this.opts };
      intlOpts.timeZone = intlOpts.timeZone || z;
      this.dtf = getCachedDTF(intl, intlOpts);
    }

    format() {
      return this.dtf.format(this.dt.toJSDate());
    }

    formatToParts() {
      return this.dtf.formatToParts(this.dt.toJSDate());
    }

    resolvedOptions() {
      return this.dtf.resolvedOptions();
    }
  }

  /**
   * @private
   */
  class PolyRelFormatter {
    constructor(intl, isEnglish, opts) {
      this.opts = { style: "long", ...opts };
      if (!isEnglish && hasRelative()) {
        this.rtf = getCachedRTF(intl, opts);
      }
    }

    format(count, unit) {
      if (this.rtf) {
        return this.rtf.format(count, unit);
      } else {
        return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
      }
    }

    formatToParts(count, unit) {
      if (this.rtf) {
        return this.rtf.formatToParts(count, unit);
      } else {
        return [];
      }
    }
  }

  /**
   * @private
   */

  class Locale {
    static fromOpts(opts) {
      return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
    }

    static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
      const specifiedLocale = locale || Settings.defaultLocale;
      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
      const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
      const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
      const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
      return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
    }

    static resetCache() {
      sysLocaleCache = null;
      intlDTCache = {};
      intlNumCache = {};
      intlRelCache = {};
    }

    static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
      return Locale.create(locale, numberingSystem, outputCalendar);
    }

    constructor(locale, numbering, outputCalendar, specifiedLocale) {
      const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

      this.weekdaysCache = { format: {}, standalone: {} };
      this.monthsCache = { format: {}, standalone: {} };
      this.meridiemCache = null;
      this.eraCache = {};

      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }

    get fastNumbers() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }

    listingMode() {
      const isActuallyEn = this.isEnglish();
      const hasNoWeirdness =
        (this.numberingSystem === null || this.numberingSystem === "latn") &&
        (this.outputCalendar === null || this.outputCalendar === "gregory");
      return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }

    clone(alts) {
      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
        return this;
      } else {
        return Locale.create(
          alts.locale || this.specifiedLocale,
          alts.numberingSystem || this.numberingSystem,
          alts.outputCalendar || this.outputCalendar,
          alts.defaultToEN || false
        );
      }
    }

    redefaultToEN(alts = {}) {
      return this.clone({ ...alts, defaultToEN: true });
    }

    redefaultToSystem(alts = {}) {
      return this.clone({ ...alts, defaultToEN: false });
    }

    months(length, format = false, defaultOK = true) {
      return listStuff(this, length, defaultOK, months, () => {
        const intl = format ? { month: length, day: "numeric" } : { month: length },
          formatStr = format ? "format" : "standalone";
        if (!this.monthsCache[formatStr][length]) {
          this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
        }
        return this.monthsCache[formatStr][length];
      });
    }

    weekdays(length, format = false, defaultOK = true) {
      return listStuff(this, length, defaultOK, weekdays, () => {
        const intl = format
            ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
            : { weekday: length },
          formatStr = format ? "format" : "standalone";
        if (!this.weekdaysCache[formatStr][length]) {
          this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
            this.extract(dt, intl, "weekday")
          );
        }
        return this.weekdaysCache[formatStr][length];
      });
    }

    meridiems(defaultOK = true) {
      return listStuff(
        this,
        undefined,
        defaultOK,
        () => meridiems,
        () => {
          // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
          // for AM and PM. This is probably wrong, but it's makes parsing way easier.
          if (!this.meridiemCache) {
            const intl = { hour: "numeric", hourCycle: "h12" };
            this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
              (dt) => this.extract(dt, intl, "dayperiod")
            );
          }

          return this.meridiemCache;
        }
      );
    }

    eras(length, defaultOK = true) {
      return listStuff(this, length, defaultOK, eras, () => {
        const intl = { era: length };

        // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
        // to definitely enumerate them.
        if (!this.eraCache[length]) {
          this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
            this.extract(dt, intl, "era")
          );
        }

        return this.eraCache[length];
      });
    }

    extract(dt, intlOpts, field) {
      const df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find((m) => m.type.toLowerCase() === field);
      return matching ? matching.value : null;
    }

    numberFormatter(opts = {}) {
      // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
      // (in contrast, the rest of the condition is used heavily)
      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }

    dtFormatter(dt, intlOpts = {}) {
      return new PolyDateFormatter(dt, this.intl, intlOpts);
    }

    relFormatter(opts = {}) {
      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
    }

    listFormatter(opts = {}) {
      return getCachedLF(this.intl, opts);
    }

    isEnglish() {
      return (
        this.locale === "en" ||
        this.locale.toLowerCase() === "en-us" ||
        new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
      );
    }

    equals(other) {
      return (
        this.locale === other.locale &&
        this.numberingSystem === other.numberingSystem &&
        this.outputCalendar === other.outputCalendar
      );
    }
  }

  let singleton = null;

  /**
   * A zone with a fixed offset (meaning no DST)
   * @implements {Zone}
   */
  class FixedOffsetZone extends Zone {
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    static get utcInstance() {
      if (singleton === null) {
        singleton = new FixedOffsetZone(0);
      }
      return singleton;
    }

    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    static instance(offset) {
      return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
    }

    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    static parseSpecifier(s) {
      if (s) {
        const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
        if (r) {
          return new FixedOffsetZone(signedOffset(r[1], r[2]));
        }
      }
      return null;
    }

    constructor(offset) {
      super();
      /** @private **/
      this.fixed = offset;
    }

    /** @override **/
    get type() {
      return "fixed";
    }

    /** @override **/
    get name() {
      return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }

    get ianaName() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
      }
    }

    /** @override **/
    offsetName() {
      return this.name;
    }

    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.fixed, format);
    }

    /** @override **/
    get isUniversal() {
      return true;
    }

    /** @override **/
    offset() {
      return this.fixed;
    }

    /** @override **/
    equals(otherZone) {
      return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }

    /** @override **/
    get isValid() {
      return true;
    }
  }

  /**
   * A zone that failed to parse. You should never need to instantiate this.
   * @implements {Zone}
   */
  class InvalidZone extends Zone {
    constructor(zoneName) {
      super();
      /**  @private */
      this.zoneName = zoneName;
    }

    /** @override **/
    get type() {
      return "invalid";
    }

    /** @override **/
    get name() {
      return this.zoneName;
    }

    /** @override **/
    get isUniversal() {
      return false;
    }

    /** @override **/
    offsetName() {
      return null;
    }

    /** @override **/
    formatOffset() {
      return "";
    }

    /** @override **/
    offset() {
      return NaN;
    }

    /** @override **/
    equals() {
      return false;
    }

    /** @override **/
    get isValid() {
      return false;
    }
  }

  /**
   * @private
   */

  function normalizeZone(input, defaultZone) {
    if (isUndefined$1(input) || input === null) {
      return defaultZone;
    } else if (input instanceof Zone) {
      return input;
    } else if (isString$2(input)) {
      const lowered = input.toLowerCase();
      if (lowered === "default") return defaultZone;
      else if (lowered === "local" || lowered === "system") return SystemZone.instance;
      else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
      else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
    } else if (isNumber$2(input)) {
      return FixedOffsetZone.instance(input);
    } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
      // This is dumb, but the instanceof check above doesn't seem to really work
      // so we're duck checking it
      return input;
    } else {
      return new InvalidZone(input);
    }
  }

  let now = () => Date.now(),
    defaultZone = "system",
    defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    twoDigitCutoffYear = 60,
    throwOnInvalid;

  /**
   * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
   */
  class Settings {
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    static get now() {
      return now;
    }

    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    static set now(n) {
      now = n;
    }

    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
    static set defaultZone(zone) {
      defaultZone = zone;
    }

    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    static get defaultZone() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }

    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultLocale() {
      return defaultLocale;
    }

    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultLocale(locale) {
      defaultLocale = locale;
    }

    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultNumberingSystem() {
      return defaultNumberingSystem;
    }

    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultNumberingSystem(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }

    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultOutputCalendar() {
      return defaultOutputCalendar;
    }

    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultOutputCalendar(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }

    /**
     * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     */
    static get twoDigitCutoffYear() {
      return twoDigitCutoffYear;
    }

    /**
     * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
     * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
     */
    static set twoDigitCutoffYear(cutoffYear) {
      twoDigitCutoffYear = cutoffYear % 100;
    }

    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static get throwOnInvalid() {
      return throwOnInvalid;
    }

    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static set throwOnInvalid(t) {
      throwOnInvalid = t;
    }

    /**
     * Reset Luxon's global caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCaches() {
      Locale.resetCache();
      IANAZone.resetCache();
    }
  }

  /*
    This is just a junk drawer, containing anything used across multiple classes.
    Because Luxon is small(ish), this should stay small and we won't worry about splitting
    it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
  */

  /**
   * @private
   */

  // TYPES

  function isUndefined$1(o) {
    return typeof o === "undefined";
  }

  function isNumber$2(o) {
    return typeof o === "number";
  }

  function isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
  }

  function isString$2(o) {
    return typeof o === "string";
  }

  function isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
  }

  // CAPABILITIES

  function hasRelative() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
      return false;
    }
  }

  // OBJECTS AND ARRAYS

  function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }

  function bestBy(arr, by, compare) {
    if (arr.length === 0) {
      return undefined;
    }
    return arr.reduce((best, next) => {
      const pair = [by(next), next];
      if (!best) {
        return pair;
      } else if (compare(best[0], pair[0]) === best[0]) {
        return best;
      } else {
        return pair;
      }
    }, null)[1];
  }

  function pick(obj, keys) {
    return keys.reduce((a, k) => {
      a[k] = obj[k];
      return a;
    }, {});
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  // NUMBERS AND STRINGS

  function integerBetween(thing, bottom, top) {
    return isInteger(thing) && thing >= bottom && thing <= top;
  }

  // x % n but takes the sign of n instead of x
  function floorMod(x, n) {
    return x - n * Math.floor(x / n);
  }

  function padStart(input, n = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
      padded = "-" + ("" + -input).padStart(n, "0");
    } else {
      padded = ("" + input).padStart(n, "0");
    }
    return padded;
  }

  function parseInteger(string) {
    if (isUndefined$1(string) || string === null || string === "") {
      return undefined;
    } else {
      return parseInt(string, 10);
    }
  }

  function parseFloating(string) {
    if (isUndefined$1(string) || string === null || string === "") {
      return undefined;
    } else {
      return parseFloat(string);
    }
  }

  function parseMillis(fraction) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if (isUndefined$1(fraction) || fraction === null || fraction === "") {
      return undefined;
    } else {
      const f = parseFloat("0." + fraction) * 1000;
      return Math.floor(f);
    }
  }

  function roundTo(number, digits, towardZero = false) {
    const factor = 10 ** digits,
      rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
  }

  // DATE BASICS

  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function daysInMonth(year, month) {
    const modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

    if (modMonth === 2) {
      return isLeapYear(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  }

  // covert a calendar object to a local timestamp (epoch, but with the offset baked in)
  function objToLocalTS(obj) {
    let d = Date.UTC(
      obj.year,
      obj.month - 1,
      obj.day,
      obj.hour,
      obj.minute,
      obj.second,
      obj.millisecond
    );

    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj.year < 100 && obj.year >= 0) {
      d = new Date(d);
      d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }
    return +d;
  }

  function weeksInWeekYear(weekYear) {
    const p1 =
        (weekYear +
          Math.floor(weekYear / 4) -
          Math.floor(weekYear / 100) +
          Math.floor(weekYear / 400)) %
        7,
      last = weekYear - 1,
      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
    return p1 === 4 || p2 === 3 ? 53 : 52;
  }

  function untruncateYear(year) {
    if (year > 99) {
      return year;
    } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
  }

  // PARSING

  function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
    const date = new Date(ts),
      intlOpts = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      };

    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }

    const modified = { timeZoneName: offsetFormat, ...intlOpts };

    const parsed = new Intl.DateTimeFormat(locale, modified)
      .formatToParts(date)
      .find((m) => m.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
  }

  // signedOffset('-5', '30') -> -330
  function signedOffset(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);

    // don't || this because we want to preserve -0
    if (Number.isNaN(offHour)) {
      offHour = 0;
    }

    const offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  }

  // COERCION

  function asNumber(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
      throw new InvalidArgumentError(`Invalid unit value ${value}`);
    return numericValue;
  }

  function normalizeObject(obj, normalizer) {
    const normalized = {};
    for (const u in obj) {
      if (hasOwnProperty(obj, u)) {
        const v = obj[u];
        if (v === undefined || v === null) continue;
        normalized[normalizer(u)] = asNumber(v);
      }
    }
    return normalized;
  }

  function formatOffset(offset, format) {
    const hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

    switch (format) {
      case "short":
        return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
      case "narrow":
        return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
      case "techie":
        return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
      default:
        throw new RangeError(`Value format ${format} is out of range for property format`);
    }
  }

  function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
  }

  /**
   * @private
   */

  const monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

  function months(length) {
    switch (length) {
      case "narrow":
        return [...monthsNarrow];
      case "short":
        return [...monthsShort];
      case "long":
        return [...monthsLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
      default:
        return null;
    }
  }

  const weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

  const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

  function weekdays(length) {
    switch (length) {
      case "narrow":
        return [...weekdaysNarrow];
      case "short":
        return [...weekdaysShort];
      case "long":
        return [...weekdaysLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];
      default:
        return null;
    }
  }

  const meridiems = ["AM", "PM"];

  const erasLong = ["Before Christ", "Anno Domini"];

  const erasShort = ["BC", "AD"];

  const erasNarrow = ["B", "A"];

  function eras(length) {
    switch (length) {
      case "narrow":
        return [...erasNarrow];
      case "short":
        return [...erasShort];
      case "long":
        return [...erasLong];
      default:
        return null;
    }
  }

  function meridiemForDateTime(dt) {
    return meridiems[dt.hour < 12 ? 0 : 1];
  }

  function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
  }

  function monthForDateTime(dt, length) {
    return months(length)[dt.month - 1];
  }

  function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
  }

  function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
    const units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."],
    };

    const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

    if (numeric === "auto" && lastable) {
      const isDay = unit === "days";
      switch (count) {
        case 1:
          return isDay ? "tomorrow" : `next ${units[unit][0]}`;
        case -1:
          return isDay ? "yesterday" : `last ${units[unit][0]}`;
        case 0:
          return isDay ? "today" : `this ${units[unit][0]}`;
      }
    }

    const isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow
        ? singular
          ? lilUnits[1]
          : lilUnits[2] || lilUnits[1]
        : singular
        ? units[unit][0]
        : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
  }

  function stringifyTokens(splits, tokenToString) {
    let s = "";
    for (const token of splits) {
      if (token.literal) {
        s += token.val;
      } else {
        s += tokenToString(token.val);
      }
    }
    return s;
  }

  const macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS,
  };

  /**
   * @private
   */

  class Formatter {
    static create(locale, opts = {}) {
      return new Formatter(locale, opts);
    }

    static parseFormat(fmt) {
      let current = null,
        currentFull = "",
        bracketed = false;
      const splits = [];
      for (let i = 0; i < fmt.length; i++) {
        const c = fmt.charAt(i);
        if (c === "'") {
          if (currentFull.length > 0) {
            splits.push({ literal: bracketed, val: currentFull });
          }
          current = null;
          currentFull = "";
          bracketed = !bracketed;
        } else if (bracketed) {
          currentFull += c;
        } else if (c === current) {
          currentFull += c;
        } else {
          if (currentFull.length > 0) {
            splits.push({ literal: false, val: currentFull });
          }
          currentFull = c;
          current = c;
        }
      }

      if (currentFull.length > 0) {
        splits.push({ literal: bracketed, val: currentFull });
      }

      return splits;
    }

    static macroTokenToFormatOpts(token) {
      return macroTokenToFormatOpts[token];
    }

    constructor(locale, formatOpts) {
      this.opts = formatOpts;
      this.loc = locale;
      this.systemLoc = null;
    }

    formatWithSystemDefault(dt, opts) {
      if (this.systemLoc === null) {
        this.systemLoc = this.loc.redefaultToSystem();
      }
      const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.format();
    }

    formatDateTime(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.format();
    }

    formatDateTimeParts(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.formatToParts();
    }

    formatInterval(interval, opts = {}) {
      const df = this.loc.dtFormatter(interval.start, { ...this.opts, ...opts });
      return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    }

    resolvedOptions(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.resolvedOptions();
    }

    num(n, p = 0) {
      // we get some perf out of doing this here, annoyingly
      if (this.opts.forceSimple) {
        return padStart(n, p);
      }

      const opts = { ...this.opts };

      if (p > 0) {
        opts.padTo = p;
      }

      return this.loc.numberFormatter(opts).format(n);
    }

    formatDateTimeFromString(dt, fmt) {
      const knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
        string = (opts, extract) => this.loc.extract(dt, opts, extract),
        formatOffset = (opts) => {
          if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
            return "Z";
          }

          return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        },
        meridiem = () =>
          knownEnglish
            ? meridiemForDateTime(dt)
            : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
        month = (length, standalone) =>
          knownEnglish
            ? monthForDateTime(dt, length)
            : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
        weekday = (length, standalone) =>
          knownEnglish
            ? weekdayForDateTime(dt, length)
            : string(
                standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
                "weekday"
              ),
        maybeMacro = (token) => {
          const formatOpts = Formatter.macroTokenToFormatOpts(token);
          if (formatOpts) {
            return this.formatWithSystemDefault(dt, formatOpts);
          } else {
            return token;
          }
        },
        era = (length) =>
          knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
        tokenToString = (token) => {
          // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
          switch (token) {
            // ms
            case "S":
              return this.num(dt.millisecond);
            case "u":
            // falls through
            case "SSS":
              return this.num(dt.millisecond, 3);
            // seconds
            case "s":
              return this.num(dt.second);
            case "ss":
              return this.num(dt.second, 2);
            // fractional seconds
            case "uu":
              return this.num(Math.floor(dt.millisecond / 10), 2);
            case "uuu":
              return this.num(Math.floor(dt.millisecond / 100));
            // minutes
            case "m":
              return this.num(dt.minute);
            case "mm":
              return this.num(dt.minute, 2);
            // hours
            case "h":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
            case "hh":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
            case "H":
              return this.num(dt.hour);
            case "HH":
              return this.num(dt.hour, 2);
            // offset
            case "Z":
              // like +6
              return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
            case "ZZ":
              // like +06:00
              return formatOffset({ format: "short", allowZ: this.opts.allowZ });
            case "ZZZ":
              // like +0600
              return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
            case "ZZZZ":
              // like EST
              return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
            case "ZZZZZ":
              // like Eastern Standard Time
              return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
            // zone
            case "z":
              // like America/New_York
              return dt.zoneName;
            // meridiems
            case "a":
              return meridiem();
            // dates
            case "d":
              return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
            case "dd":
              return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
            // weekdays - standalone
            case "c":
              // like 1
              return this.num(dt.weekday);
            case "ccc":
              // like 'Tues'
              return weekday("short", true);
            case "cccc":
              // like 'Tuesday'
              return weekday("long", true);
            case "ccccc":
              // like 'T'
              return weekday("narrow", true);
            // weekdays - format
            case "E":
              // like 1
              return this.num(dt.weekday);
            case "EEE":
              // like 'Tues'
              return weekday("short", false);
            case "EEEE":
              // like 'Tuesday'
              return weekday("long", false);
            case "EEEEE":
              // like 'T'
              return weekday("narrow", false);
            // months - standalone
            case "L":
              // like 1
              return useDateTimeFormatter
                ? string({ month: "numeric", day: "numeric" }, "month")
                : this.num(dt.month);
            case "LL":
              // like 01, doesn't seem to work
              return useDateTimeFormatter
                ? string({ month: "2-digit", day: "numeric" }, "month")
                : this.num(dt.month, 2);
            case "LLL":
              // like Jan
              return month("short", true);
            case "LLLL":
              // like January
              return month("long", true);
            case "LLLLL":
              // like J
              return month("narrow", true);
            // months - format
            case "M":
              // like 1
              return useDateTimeFormatter
                ? string({ month: "numeric" }, "month")
                : this.num(dt.month);
            case "MM":
              // like 01
              return useDateTimeFormatter
                ? string({ month: "2-digit" }, "month")
                : this.num(dt.month, 2);
            case "MMM":
              // like Jan
              return month("short", false);
            case "MMMM":
              // like January
              return month("long", false);
            case "MMMMM":
              // like J
              return month("narrow", false);
            // years
            case "y":
              // like 2014
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
            case "yy":
              // like 14
              return useDateTimeFormatter
                ? string({ year: "2-digit" }, "year")
                : this.num(dt.year.toString().slice(-2), 2);
            case "yyyy":
              // like 0012
              return useDateTimeFormatter
                ? string({ year: "numeric" }, "year")
                : this.num(dt.year, 4);
            case "yyyyyy":
              // like 000012
              return useDateTimeFormatter
                ? string({ year: "numeric" }, "year")
                : this.num(dt.year, 6);
            // eras
            case "G":
              // like AD
              return era("short");
            case "GG":
              // like Anno Domini
              return era("long");
            case "GGGGG":
              return era("narrow");
            case "kk":
              return this.num(dt.weekYear.toString().slice(-2), 2);
            case "kkkk":
              return this.num(dt.weekYear, 4);
            case "W":
              return this.num(dt.weekNumber);
            case "WW":
              return this.num(dt.weekNumber, 2);
            case "o":
              return this.num(dt.ordinal);
            case "ooo":
              return this.num(dt.ordinal, 3);
            case "q":
              // like 1
              return this.num(dt.quarter);
            case "qq":
              // like 01
              return this.num(dt.quarter, 2);
            case "X":
              return this.num(Math.floor(dt.ts / 1000));
            case "x":
              return this.num(dt.ts);
            default:
              return maybeMacro(token);
          }
        };

      return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    }

    formatDurationFromString(dur, fmt) {
      const tokenToField = (token) => {
          switch (token[0]) {
            case "S":
              return "millisecond";
            case "s":
              return "second";
            case "m":
              return "minute";
            case "h":
              return "hour";
            case "d":
              return "day";
            case "w":
              return "week";
            case "M":
              return "month";
            case "y":
              return "year";
            default:
              return null;
          }
        },
        tokenToString = (lildur) => (token) => {
          const mapped = tokenToField(token);
          if (mapped) {
            return this.num(lildur.get(mapped), token.length);
          } else {
            return token;
          }
        },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(
          (found, { literal, val }) => (literal ? found : found.concat(val)),
          []
        ),
        collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
      return stringifyTokens(tokens, tokenToString(collapsed));
    }
  }

  class Invalid {
    constructor(reason, explanation) {
      this.reason = reason;
      this.explanation = explanation;
    }

    toMessage() {
      if (this.explanation) {
        return `${this.reason}: ${this.explanation}`;
      } else {
        return this.reason;
      }
    }
  }

  /*
   * This file handles parsing for well-specified formats. Here's how it works:
   * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
   * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
   * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
   * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
   * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
   * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
   */

  const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

  function combineRegexes(...regexes) {
    const full = regexes.reduce((f, r) => f + r.source, "");
    return RegExp(`^${full}$`);
  }

  function combineExtractors(...extractors) {
    return (m) =>
      extractors
        .reduce(
          ([mergedVals, mergedZone, cursor], ex) => {
            const [val, zone, next] = ex(m, cursor);
            return [{ ...mergedVals, ...val }, zone || mergedZone, next];
          },
          [{}, null, 1]
        )
        .slice(0, 2);
  }

  function parse$4(s, ...patterns) {
    if (s == null) {
      return [null, null];
    }

    for (const [regex, extractor] of patterns) {
      const m = regex.exec(s);
      if (m) {
        return extractor(m);
      }
    }
    return [null, null];
  }

  function simpleParse(...keys) {
    return (match, cursor) => {
      const ret = {};
      let i;

      for (i = 0; i < keys.length; i++) {
        ret[keys[i]] = parseInteger(match[cursor + i]);
      }
      return [ret, null, cursor + i];
    };
  }

  // ISO and SQL parsing
  const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
  const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
  const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
  const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
  const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
  const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
  const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
  const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
  const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
  const extractISOOrdinalData = simpleParse("year", "ordinal");
  const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
  const sqlTimeRegex = RegExp(
    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
  );
  const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

  function int$1(match, pos, fallback) {
    const m = match[pos];
    return isUndefined$1(m) ? fallback : parseInteger(m);
  }

  function extractISOYmd(match, cursor) {
    const item = {
      year: int$1(match, cursor),
      month: int$1(match, cursor + 1, 1),
      day: int$1(match, cursor + 2, 1),
    };

    return [item, null, cursor + 3];
  }

  function extractISOTime(match, cursor) {
    const item = {
      hours: int$1(match, cursor, 0),
      minutes: int$1(match, cursor + 1, 0),
      seconds: int$1(match, cursor + 2, 0),
      milliseconds: parseMillis(match[cursor + 3]),
    };

    return [item, null, cursor + 4];
  }

  function extractISOOffset(match, cursor) {
    const local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }

  function extractIANAZone(match, cursor) {
    const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
    return [{}, zone, cursor + 1];
  }

  // ISO time parsing

  const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

  // ISO duration parsing

  const isoDuration =
    /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

  function extractISODuration(match) {
    const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
      match;

    const hasNegativePrefix = s[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";

    const maybeNegate = (num, force = false) =>
      num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

    return [
      {
        years: maybeNegate(parseFloating(yearStr)),
        months: maybeNegate(parseFloating(monthStr)),
        weeks: maybeNegate(parseFloating(weekStr)),
        days: maybeNegate(parseFloating(dayStr)),
        hours: maybeNegate(parseFloating(hourStr)),
        minutes: maybeNegate(parseFloating(minuteStr)),
        seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
        milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
      },
    ];
  }

  // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
  // and not just that we're in -240 *right now*. But since I don't think these are used that often
  // I'm just going to ignore that
  const obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60,
  };

  function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
      year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
      month: monthsShort.indexOf(monthStr) + 1,
      day: parseInteger(dayStr),
      hour: parseInteger(hourStr),
      minute: parseInteger(minuteStr),
    };

    if (secondStr) result.second = parseInteger(secondStr);
    if (weekdayStr) {
      result.weekday =
        weekdayStr.length > 3
          ? weekdaysLong.indexOf(weekdayStr) + 1
          : weekdaysShort.indexOf(weekdayStr) + 1;
    }

    return result;
  }

  // RFC 2822/5322
  const rfc2822 =
    /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

  function extractRFC2822(match) {
    const [
        ,
        weekdayStr,
        dayStr,
        monthStr,
        yearStr,
        hourStr,
        minuteStr,
        secondStr,
        obsOffset,
        milOffset,
        offHourStr,
        offMinuteStr,
      ] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

    let offset;
    if (obsOffset) {
      offset = obsOffsets[obsOffset];
    } else if (milOffset) {
      offset = 0;
    } else {
      offset = signedOffset(offHourStr, offMinuteStr);
    }

    return [result, new FixedOffsetZone(offset)];
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s
      .replace(/\([^()]*\)|[\n\t]/g, " ")
      .replace(/(\s\s+)/g, " ")
      .trim();
  }

  // http date

  const rfc1123 =
      /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 =
      /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii =
      /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

  function extractRFC1123Or850(match) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }

  function extractASCII(match) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }

  const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
  const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
  const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
  const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

  const extractISOYmdTimeAndOffset = combineExtractors(
    extractISOYmd,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOWeekTimeAndOffset = combineExtractors(
    extractISOWeekData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOOrdinalDateAndTime = combineExtractors(
    extractISOOrdinalData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOTimeAndOffset = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );

  /*
   * @private
   */

  function parseISODate(s) {
    return parse$4(
      s,
      [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
      [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
      [isoTimeCombinedRegex, extractISOTimeAndOffset]
    );
  }

  function parseRFC2822Date(s) {
    return parse$4(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
  }

  function parseHTTPDate(s) {
    return parse$4(
      s,
      [rfc1123, extractRFC1123Or850],
      [rfc850, extractRFC1123Or850],
      [ascii, extractASCII]
    );
  }

  function parseISODuration(s) {
    return parse$4(s, [isoDuration, extractISODuration]);
  }

  const extractISOTimeOnly = combineExtractors(extractISOTime);

  function parseISOTimeOnly(s) {
    return parse$4(s, [isoTimeOnly, extractISOTimeOnly]);
  }

  const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
  const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

  const extractISOTimeOffsetAndIANAZone = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );

  function parseSQL(s) {
    return parse$4(
      s,
      [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
    );
  }

  const INVALID$4 = "Invalid Duration";

  // unit conversion constants
  const lowOrderMatrix = {
      weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1000,
      },
      days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1000,
      },
      hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
      minutes: { seconds: 60, milliseconds: 60 * 1000 },
      seconds: { milliseconds: 1000 },
    },
    casualMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1000,
      },
      quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1000,
      },
      months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1000,
      },

      ...lowOrderMatrix,
    },
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
      },
      quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: (daysInYearAccurate * 24) / 4,
        minutes: (daysInYearAccurate * 24 * 60) / 4,
        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
      },
      months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
      },
      ...lowOrderMatrix,
    };

  // units ordered by size
  const orderedUnits$1 = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
  ];

  const reverseUnits = orderedUnits$1.slice(0).reverse();

  // clone really means "create another instance just like this one, but with these changes"
  function clone$2(dur, alts, clear = false) {
    // deep merge for vals
    const conf = {
      values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
      matrix: alts.matrix || dur.matrix,
    };
    return new Duration(conf);
  }

  function antiTrunc(n) {
    return n < 0 ? Math.floor(n) : Math.ceil(n);
  }

  // NB: mutates parameters
  function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
    const conv = matrix[toUnit][fromUnit],
      raw = fromMap[fromUnit] / conv,
      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
      // ok, so this is wild, but see the matrix in the tests
      added =
        !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
    toMap[toUnit] += added;
    fromMap[fromUnit] -= added * conv;
  }

  // NB: mutates parameters
  function normalizeValues(matrix, vals) {
    reverseUnits.reduce((previous, current) => {
      if (!isUndefined$1(vals[current])) {
        if (previous) {
          convert(matrix, vals, previous, vals, current);
        }
        return current;
      } else {
        return previous;
      }
    }, null);
  }

  // Remove all properties with a value of 0 from an object
  function removeZeroes(vals) {
    const newVals = {};
    for (const [key, value] of Object.entries(vals)) {
      if (value !== 0) {
        newVals[key] = value;
      }
    }
    return newVals;
  }

  /**
   * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
   *
   * Here is a brief overview of commonly used methods and getters in Duration:
   *
   * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
   * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
   * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
   * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
   * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
   *
   * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
   */
  class Duration {
    /**
     * @private
     */
    constructor(config) {
      const accurate = config.conversionAccuracy === "longterm" || false;
      let matrix = accurate ? accurateMatrix : casualMatrix;

      if (config.matrix) {
        matrix = config.matrix;
      }

      /**
       * @access private
       */
      this.values = config.values;
      /**
       * @access private
       */
      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */
      this.conversionAccuracy = accurate ? "longterm" : "casual";
      /**
       * @access private
       */
      this.invalid = config.invalid || null;
      /**
       * @access private
       */
      this.matrix = matrix;
      /**
       * @access private
       */
      this.isLuxonDuration = true;
    }

    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    static fromMillis(count, opts) {
      return Duration.fromObject({ milliseconds: count }, opts);
    }

    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    static fromObject(obj, opts = {}) {
      if (obj == null || typeof obj !== "object") {
        throw new InvalidArgumentError(
          `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
        );
      }

      return new Duration({
        values: normalizeObject(obj, Duration.normalizeUnit),
        loc: Locale.fromObject(opts),
        conversionAccuracy: opts.conversionAccuracy,
        matrix: opts.matrix,
      });
    }

    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    static fromDurationLike(durationLike) {
      if (isNumber$2(durationLike)) {
        return Duration.fromMillis(durationLike);
      } else if (Duration.isDuration(durationLike)) {
        return durationLike;
      } else if (typeof durationLike === "object") {
        return Duration.fromObject(durationLike);
      } else {
        throw new InvalidArgumentError(
          `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
        );
      }
    }

    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    static fromISO(text, opts) {
      const [parsed] = parseISODuration(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }

    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    static fromISOTime(text, opts) {
      const [parsed] = parseISOTimeOnly(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }

    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidDurationError(invalid);
      } else {
        return new Duration({ invalid });
      }
    }

    /**
     * @private
     */
    static normalizeUnit(unit) {
      const normalized = {
        year: "years",
        years: "years",
        quarter: "quarters",
        quarters: "quarters",
        month: "months",
        months: "months",
        week: "weeks",
        weeks: "weeks",
        day: "days",
        days: "days",
        hour: "hours",
        hours: "hours",
        minute: "minutes",
        minutes: "minutes",
        second: "seconds",
        seconds: "seconds",
        millisecond: "milliseconds",
        milliseconds: "milliseconds",
      }[unit ? unit.toLowerCase() : unit];

      if (!normalized) throw new InvalidUnitError(unit);

      return normalized;
    }

    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDuration(o) {
      return (o && o.isLuxonDuration) || false;
    }

    /**
     * Get  the locale of a Duration, such 'en-GB'
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }

    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      // reverse-compat since 1.2; we always round down now, never up, and we do it by default
      const fmtOpts = {
        ...opts,
        floor: opts.round !== false && opts.floor !== false,
      };
      return this.isValid
        ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
        : INVALID$4;
    }

    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
     * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
     * @example
     * ```js
     * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
     * ```
     */
    toHuman(opts = {}) {
      const l = orderedUnits$1
        .map((unit) => {
          const val = this.values[unit];
          if (isUndefined$1(val)) {
            return null;
          }
          return this.loc
            .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
            .format(val);
        })
        .filter((n) => n);

      return this.loc
        .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
        .format(l);
    }

    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    toObject() {
      if (!this.isValid) return {};
      return { ...this.values };
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    toISO() {
      // we could use the formatter, but this is an easier way to get the minimum string
      if (!this.isValid) return null;

      let s = "P";
      if (this.years !== 0) s += this.years + "Y";
      if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
      if (this.weeks !== 0) s += this.weeks + "W";
      if (this.days !== 0) s += this.days + "D";
      if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
        s += "T";
      if (this.hours !== 0) s += this.hours + "H";
      if (this.minutes !== 0) s += this.minutes + "M";
      if (this.seconds !== 0 || this.milliseconds !== 0)
        // this will handle "floating point madness" by removing extra decimal places
        // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
        s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
      if (s === "P") s += "T0S";
      return s;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    toISOTime(opts = {}) {
      if (!this.isValid) return null;

      const millis = this.toMillis();
      if (millis < 0 || millis >= 86400000) return null;

      opts = {
        suppressMilliseconds: false,
        suppressSeconds: false,
        includePrefix: false,
        format: "extended",
        ...opts,
      };

      const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");

      let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";

      if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
        fmt += opts.format === "basic" ? "ss" : ":ss";
        if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
          fmt += ".SSS";
        }
      }

      let str = value.toFormat(fmt);

      if (opts.includePrefix) {
        str = "T" + str;
      }

      return str;
    }

    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }

    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    toString() {
      return this.toISO();
    }

    /**
     * Returns an milliseconds value of this Duration.
     * @return {number}
     */
    toMillis() {
      return this.as("milliseconds");
    }

    /**
     * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }

    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    plus(duration) {
      if (!this.isValid) return this;

      const dur = Duration.fromDurationLike(duration),
        result = {};

      for (const k of orderedUnits$1) {
        if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
          result[k] = dur.get(k) + this.get(k);
        }
      }

      return clone$2(this, { values: result }, true);
    }

    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    minus(duration) {
      if (!this.isValid) return this;

      const dur = Duration.fromDurationLike(duration);
      return this.plus(dur.negate());
    }

    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    mapUnits(fn) {
      if (!this.isValid) return this;
      const result = {};
      for (const k of Object.keys(this.values)) {
        result[k] = asNumber(fn(this.values[k], k));
      }
      return clone$2(this, { values: result }, true);
    }

    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    get(unit) {
      return this[Duration.normalizeUnit(unit)];
    }

    /**
     * "Set" the values of specified units. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    set(values) {
      if (!this.isValid) return this;

      const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
      return clone$2(this, { values: mixed });
    }

    /**
     * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem });
      const opts = { loc, matrix, conversionAccuracy };
      return clone$2(this, opts);
    }

    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    as(unit) {
      return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }

    /**
     * Reduce this Duration to its canonical representation in its current units.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @return {Duration}
     */
    normalize() {
      if (!this.isValid) return this;
      const vals = this.toObject();
      normalizeValues(this.matrix, vals);
      return clone$2(this, { values: vals }, true);
    }

    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    rescale() {
      if (!this.isValid) return this;
      const vals = removeZeroes(this.normalize().shiftToAll().toObject());
      return clone$2(this, { values: vals }, true);
    }

    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    shiftTo(...units) {
      if (!this.isValid) return this;

      if (units.length === 0) {
        return this;
      }

      units = units.map((u) => Duration.normalizeUnit(u));

      const built = {},
        accumulated = {},
        vals = this.toObject();
      let lastUnit;

      for (const k of orderedUnits$1) {
        if (units.indexOf(k) >= 0) {
          lastUnit = k;

          let own = 0;

          // anything we haven't boiled down yet should get boiled to this unit
          for (const ak in accumulated) {
            own += this.matrix[ak][k] * accumulated[ak];
            accumulated[ak] = 0;
          }

          // plus anything that's already in this unit
          if (isNumber$2(vals[k])) {
            own += vals[k];
          }

          const i = Math.trunc(own);
          built[k] = i;
          accumulated[k] = (own * 1000 - i * 1000) / 1000;

          // plus anything further down the chain that should be rolled up in to this
          for (const down in vals) {
            if (orderedUnits$1.indexOf(down) > orderedUnits$1.indexOf(k)) {
              convert(this.matrix, vals, down, built, k);
            }
          }
          // otherwise, keep it in the wings to boil it later
        } else if (isNumber$2(vals[k])) {
          accumulated[k] = vals[k];
        }
      }

      // anything leftover becomes the decimal for the last unit
      // lastUnit must be defined since units is not empty
      for (const key in accumulated) {
        if (accumulated[key] !== 0) {
          built[lastUnit] +=
            key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        }
      }

      return clone$2(this, { values: built }, true).normalize();
    }

    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    shiftToAll() {
      if (!this.isValid) return this;
      return this.shiftTo(
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      );
    }

    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    negate() {
      if (!this.isValid) return this;
      const negated = {};
      for (const k of Object.keys(this.values)) {
        negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
      }
      return clone$2(this, { values: negated }, true);
    }

    /**
     * Get the years.
     * @type {number}
     */
    get years() {
      return this.isValid ? this.values.years || 0 : NaN;
    }

    /**
     * Get the quarters.
     * @type {number}
     */
    get quarters() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }

    /**
     * Get the months.
     * @type {number}
     */
    get months() {
      return this.isValid ? this.values.months || 0 : NaN;
    }

    /**
     * Get the weeks
     * @type {number}
     */
    get weeks() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }

    /**
     * Get the days.
     * @type {number}
     */
    get days() {
      return this.isValid ? this.values.days || 0 : NaN;
    }

    /**
     * Get the hours.
     * @type {number}
     */
    get hours() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }

    /**
     * Get the minutes.
     * @type {number}
     */
    get minutes() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }

    /**
     * Get the seconds.
     * @return {number}
     */
    get seconds() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }

    /**
     * Get the milliseconds.
     * @return {number}
     */
    get milliseconds() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }

    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }

      if (!this.loc.equals(other.loc)) {
        return false;
      }

      function eq(v1, v2) {
        // Consider 0 and undefined as equal
        if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
        return v1 === v2;
      }

      for (const u of orderedUnits$1) {
        if (!eq(this.values[u], other.values[u])) {
          return false;
        }
      }
      return true;
    }
  }

  const INVALID$3 = "Invalid Interval";

  // checks if the start is equal to or before the end
  function validateStartEnd(start, end) {
    if (!start || !start.isValid) {
      return Interval.invalid("missing or invalid start");
    } else if (!end || !end.isValid) {
      return Interval.invalid("missing or invalid end");
    } else if (end < start) {
      return Interval.invalid(
        "end before start",
        `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
      );
    } else {
      return null;
    }
  }

  /**
   * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
   *
   * Here is a brief overview of the most commonly used methods and getters in Interval:
   *
   * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
   * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
   * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
   * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
   * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
   * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
   */
  class Interval {
    /**
     * @private
     */
    constructor(config) {
      /**
       * @access private
       */
      this.s = config.start;
      /**
       * @access private
       */
      this.e = config.end;
      /**
       * @access private
       */
      this.invalid = config.invalid || null;
      /**
       * @access private
       */
      this.isLuxonInterval = true;
    }

    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidIntervalError(invalid);
      } else {
        return new Interval({ invalid });
      }
    }

    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     * @return {Interval}
     */
    static fromDateTimes(start, end) {
      const builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);

      const validateError = validateStartEnd(builtStart, builtEnd);

      if (validateError == null) {
        return new Interval({
          start: builtStart,
          end: builtEnd,
        });
      } else {
        return validateError;
      }
    }

    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static after(start, duration) {
      const dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(start);
      return Interval.fromDateTimes(dt, dt.plus(dur));
    }

    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static before(end, duration) {
      const dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(end);
      return Interval.fromDateTimes(dt.minus(dur), dt);
    }

    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {Interval}
     */
    static fromISO(text, opts) {
      const [s, e] = (text || "").split("/", 2);
      if (s && e) {
        let start, startIsValid;
        try {
          start = DateTime.fromISO(s, opts);
          startIsValid = start.isValid;
        } catch (e) {
          startIsValid = false;
        }

        let end, endIsValid;
        try {
          end = DateTime.fromISO(e, opts);
          endIsValid = end.isValid;
        } catch (e) {
          endIsValid = false;
        }

        if (startIsValid && endIsValid) {
          return Interval.fromDateTimes(start, end);
        }

        if (startIsValid) {
          const dur = Duration.fromISO(e, opts);
          if (dur.isValid) {
            return Interval.after(start, dur);
          }
        } else if (endIsValid) {
          const dur = Duration.fromISO(s, opts);
          if (dur.isValid) {
            return Interval.before(end, dur);
          }
        }
      }
      return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }

    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isInterval(o) {
      return (o && o.isLuxonInterval) || false;
    }

    /**
     * Returns the start of the Interval
     * @type {DateTime}
     */
    get start() {
      return this.isValid ? this.s : null;
    }

    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */
    get end() {
      return this.isValid ? this.e : null;
    }

    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
    get isValid() {
      return this.invalidReason === null;
    }

    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
     * @return {number}
     */
    length(unit = "milliseconds") {
      return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
    }

    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @return {number}
     */
    count(unit = "milliseconds") {
      if (!this.isValid) return NaN;
      const start = this.start.startOf(unit),
        end = this.end.startOf(unit);
      return Math.floor(end.diff(start, unit).get(unit)) + 1;
    }

    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    hasSame(unit) {
      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }

    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    isEmpty() {
      return this.s.valueOf() === this.e.valueOf();
    }

    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isAfter(dateTime) {
      if (!this.isValid) return false;
      return this.s > dateTime;
    }

    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isBefore(dateTime) {
      if (!this.isValid) return false;
      return this.e <= dateTime;
    }

    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    contains(dateTime) {
      if (!this.isValid) return false;
      return this.s <= dateTime && this.e > dateTime;
    }

    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    set({ start, end } = {}) {
      if (!this.isValid) return this;
      return Interval.fromDateTimes(start || this.s, end || this.e);
    }

    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...DateTime} dateTimes - the unit of time to count.
     * @return {Array}
     */
    splitAt(...dateTimes) {
      if (!this.isValid) return [];
      const sorted = dateTimes
          .map(friendlyDateTime)
          .filter((d) => this.contains(d))
          .sort(),
        results = [];
      let { s } = this,
        i = 0;

      while (s < this.e) {
        const added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s, next));
        s = next;
        i += 1;
      }

      return results;
    }

    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object|number} duration - The length of each resulting interval.
     * @return {Array}
     */
    splitBy(duration) {
      const dur = Duration.fromDurationLike(duration);

      if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
        return [];
      }

      let { s } = this,
        idx = 1,
        next;

      const results = [];
      while (s < this.e) {
        const added = this.start.plus(dur.mapUnits((x) => x * idx));
        next = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s, next));
        s = next;
        idx += 1;
      }

      return results;
    }

    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Array}
     */
    divideEqually(numberOfParts) {
      if (!this.isValid) return [];
      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }

    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    overlaps(other) {
      return this.e > other.s && this.s < other.e;
    }

    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsStart(other) {
      if (!this.isValid) return false;
      return +this.e === +other.s;
    }

    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsEnd(other) {
      if (!this.isValid) return false;
      return +other.e === +this.s;
    }

    /**
     * Return whether this Interval engulfs the start and end of the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    engulfs(other) {
      if (!this.isValid) return false;
      return this.s <= other.s && this.e >= other.e;
    }

    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }

      return this.s.equals(other.s) && this.e.equals(other.e);
    }

    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval}
     */
    intersection(other) {
      if (!this.isValid) return this;
      const s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

      if (s >= e) {
        return null;
      } else {
        return Interval.fromDateTimes(s, e);
      }
    }

    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    union(other) {
      if (!this.isValid) return this;
      const s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
      return Interval.fromDateTimes(s, e);
    }

    /**
     * Merge an array of Intervals into a equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static merge(intervals) {
      const [found, final] = intervals
        .sort((a, b) => a.s - b.s)
        .reduce(
          ([sofar, current], item) => {
            if (!current) {
              return [sofar, item];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
              return [sofar, current.union(item)];
            } else {
              return [sofar.concat([current]), item];
            }
          },
          [[], null]
        );
      if (final) {
        found.push(final);
      }
      return found;
    }

    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static xor(intervals) {
      let start = null,
        currentCount = 0;
      const results = [],
        ends = intervals.map((i) => [
          { time: i.s, type: "s" },
          { time: i.e, type: "e" },
        ]),
        flattened = Array.prototype.concat(...ends),
        arr = flattened.sort((a, b) => a.time - b.time);

      for (const i of arr) {
        currentCount += i.type === "s" ? 1 : -1;

        if (currentCount === 1) {
          start = i.time;
        } else {
          if (start && +start !== +i.time) {
            results.push(Interval.fromDateTimes(start, i.time));
          }

          start = null;
        }
      }

      return Interval.merge(results);
    }

    /**
     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Array}
     */
    difference(...intervals) {
      return Interval.xor([this].concat(intervals))
        .map((i) => this.intersection(i))
        .filter((i) => i && !i.isEmpty());
    }

    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    toString() {
      if (!this.isValid) return INVALID$3;
      return `[${this.s.toISO()} – ${this.e.toISO()})`;
    }

    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid
        ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
        : INVALID$3;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISO(opts) {
      if (!this.isValid) return INVALID$3;
      return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }

    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    toISODate() {
      if (!this.isValid) return INVALID$3;
      return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }

    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISOTime(opts) {
      if (!this.isValid) return INVALID$3;
      return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }

    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    toFormat(dateFormat, { separator = " – " } = {}) {
      if (!this.isValid) return INVALID$3;
      return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
    }

    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    toDuration(unit, opts) {
      if (!this.isValid) {
        return Duration.invalid(this.invalidReason);
      }
      return this.e.diff(this.s, unit, opts);
    }

    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    mapEndpoints(mapFn) {
      return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
  }

  /**
   * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
   */
  class Info {
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    static hasDST(zone = Settings.defaultZone) {
      const proto = DateTime.now().setZone(zone).set({ month: 12 });

      return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    }

    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    static isValidIANAZone(zone) {
      return IANAZone.isValidZone(zone);
    }

    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    static normalizeZone(input) {
      return normalizeZone(input, Settings.defaultZone);
    }

    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {Array}
     */
    static months(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    }

    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info#months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {Array}
     */
    static monthsFormat(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    }

    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {Array}
     */
    static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
    }

    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale=null] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @return {Array}
     */
    static weekdaysFormat(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
    }

    /**
     * Return an array of meridiems.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {Array}
     */
    static meridiems({ locale = null } = {}) {
      return Locale.create(locale).meridiems();
    }

    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {Array}
     */
    static eras(length = "short", { locale = null } = {}) {
      return Locale.create(locale, null, "gregory").eras(length);
    }

    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * @example Info.features() //=> { relative: false }
     * @return {Object}
     */
    static features() {
      return { relative: hasRelative() };
    }
  }

  function dayDiff(earlier, later) {
    const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
      ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration.fromMillis(ms).as("days"));
  }

  function highOrderDiffs(cursor, later, units) {
    const differs = [
      ["years", (a, b) => b.year - a.year],
      ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
      ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
      [
        "weeks",
        (a, b) => {
          const days = dayDiff(a, b);
          return (days - (days % 7)) / 7;
        },
      ],
      ["days", dayDiff],
    ];

    const results = {};
    const earlier = cursor;
    let lowestOrder, highWater;

    for (const [unit, differ] of differs) {
      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;

        results[unit] = differ(cursor, later);
        highWater = earlier.plus(results);

        if (highWater > later) {
          results[unit]--;
          cursor = earlier.plus(results);
        } else {
          cursor = highWater;
        }
      }
    }

    return [cursor, results, highWater, lowestOrder];
  }

  function diff (earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

    const remainingMillis = later - cursor;

    const lowerOrderUnits = units.filter(
      (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
    );

    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus({ [lowestOrder]: 1 });
      }

      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }

    const duration = Duration.fromObject(results, opts);

    if (lowerOrderUnits.length > 0) {
      return Duration.fromMillis(remainingMillis, opts)
        .shiftTo(...lowerOrderUnits)
        .plus(duration);
    } else {
      return duration;
    }
  }

  const numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d",
  };

  const numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881],
  };

  const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

  function parseDigits(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
      value = "";
      for (let i = 0; i < str.length; i++) {
        const code = str.charCodeAt(i);

        if (str[i].search(numberingSystems.hanidec) !== -1) {
          value += hanidecChars.indexOf(str[i]);
        } else {
          for (const key in numberingSystemsUTF16) {
            const [min, max] = numberingSystemsUTF16[key];
            if (code >= min && code <= max) {
              value += code - min;
            }
          }
        }
      }
      return parseInt(value, 10);
    } else {
      return value;
    }
  }

  function digitRegex({ numberingSystem }, append = "") {
    return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
  }

  const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

  function intUnit(regex, post = (i) => i) {
    return { regex, deser: ([s]) => post(parseDigits(s)) };
  }

  const NBSP = String.fromCharCode(160);
  const spaceOrNBSP = `[ ${NBSP}]`;
  const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

  function fixListRegex(s) {
    // make dots optional and also make them literal
    // make space and non breakable space characters interchangeable
    return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
  }

  function stripInsensitivities(s) {
    return s
      .replace(/\./g, "") // ignore dots that were made optional
      .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
      .toLowerCase();
  }

  function oneOf(strings, startIndex) {
    if (strings === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings.map(fixListRegex).join("|")),
        deser: ([s]) =>
          strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
      };
    }
  }

  function offset(regex, groups) {
    return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
  }

  function simple(regex) {
    return { regex, deser: ([s]) => s };
  }

  function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  function unitForToken(token, loc) {
    const one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
      unitate = (t) => {
        if (token.literal) {
          return literal(t);
        }
        switch (t.val) {
          // era
          case "G":
            return oneOf(loc.eras("short", false), 0);
          case "GG":
            return oneOf(loc.eras("long", false), 0);
          // years
          case "y":
            return intUnit(oneToSix);
          case "yy":
            return intUnit(twoToFour, untruncateYear);
          case "yyyy":
            return intUnit(four);
          case "yyyyy":
            return intUnit(fourToSix);
          case "yyyyyy":
            return intUnit(six);
          // months
          case "M":
            return intUnit(oneOrTwo);
          case "MM":
            return intUnit(two);
          case "MMM":
            return oneOf(loc.months("short", true, false), 1);
          case "MMMM":
            return oneOf(loc.months("long", true, false), 1);
          case "L":
            return intUnit(oneOrTwo);
          case "LL":
            return intUnit(two);
          case "LLL":
            return oneOf(loc.months("short", false, false), 1);
          case "LLLL":
            return oneOf(loc.months("long", false, false), 1);
          // dates
          case "d":
            return intUnit(oneOrTwo);
          case "dd":
            return intUnit(two);
          // ordinals
          case "o":
            return intUnit(oneToThree);
          case "ooo":
            return intUnit(three);
          // time
          case "HH":
            return intUnit(two);
          case "H":
            return intUnit(oneOrTwo);
          case "hh":
            return intUnit(two);
          case "h":
            return intUnit(oneOrTwo);
          case "mm":
            return intUnit(two);
          case "m":
            return intUnit(oneOrTwo);
          case "q":
            return intUnit(oneOrTwo);
          case "qq":
            return intUnit(two);
          case "s":
            return intUnit(oneOrTwo);
          case "ss":
            return intUnit(two);
          case "S":
            return intUnit(oneToThree);
          case "SSS":
            return intUnit(three);
          case "u":
            return simple(oneToNine);
          case "uu":
            return simple(oneOrTwo);
          case "uuu":
            return intUnit(one);
          // meridiem
          case "a":
            return oneOf(loc.meridiems(), 0);
          // weekYear (k)
          case "kkkk":
            return intUnit(four);
          case "kk":
            return intUnit(twoToFour, untruncateYear);
          // weekNumber (W)
          case "W":
            return intUnit(oneOrTwo);
          case "WW":
            return intUnit(two);
          // weekdays
          case "E":
          case "c":
            return intUnit(one);
          case "EEE":
            return oneOf(loc.weekdays("short", false, false), 1);
          case "EEEE":
            return oneOf(loc.weekdays("long", false, false), 1);
          case "ccc":
            return oneOf(loc.weekdays("short", true, false), 1);
          case "cccc":
            return oneOf(loc.weekdays("long", true, false), 1);
          // offset/zone
          case "Z":
          case "ZZ":
            return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
          case "ZZZ":
            return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
          // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
          // because we don't have any way to figure out what they are
          case "z":
            return simple(/[a-z_+-/]{1,256}?/i);
          default:
            return literal(t);
        }
      };

    const unit = unitate(token) || {
      invalidReason: MISSING_FTP,
    };

    unit.token = token;

    return unit;
  }

  const partTypeStyleToTokenVal = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy",
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM",
    },
    day: {
      numeric: "d",
      "2-digit": "dd",
    },
    weekday: {
      short: "EEE",
      long: "EEEE",
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
      numeric: "h",
      "2-digit": "hh",
    },
    minute: {
      numeric: "m",
      "2-digit": "mm",
    },
    second: {
      numeric: "s",
      "2-digit": "ss",
    },
    timeZoneName: {
      long: "ZZZZZ",
      short: "ZZZ",
    },
  };

  function tokenForPart(part, formatOpts) {
    const { type, value } = part;

    if (type === "literal") {
      return {
        literal: true,
        val: value,
      };
    }

    const style = formatOpts[type];

    let val = partTypeStyleToTokenVal[type];
    if (typeof val === "object") {
      val = val[style];
    }

    if (val) {
      return {
        literal: false,
        val,
      };
    }

    return undefined;
  }

  function buildRegex(units) {
    const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
    return [`^${re}$`, units];
  }

  function match(input, regex, handlers) {
    const matches = input.match(regex);

    if (matches) {
      const all = {};
      let matchIndex = 1;
      for (const i in handlers) {
        if (hasOwnProperty(handlers, i)) {
          const h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;
          if (!h.literal && h.token) {
            all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
          }
          matchIndex += groups;
        }
      }
      return [matches, all];
    } else {
      return [matches, {}];
    }
  }

  function dateTimeFromMatches(matches) {
    const toField = (token) => {
      switch (token) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
        case "H":
          return "hour";
        case "d":
          return "day";
        case "o":
          return "ordinal";
        case "L":
        case "M":
          return "month";
        case "y":
          return "year";
        case "E":
        case "c":
          return "weekday";
        case "W":
          return "weekNumber";
        case "k":
          return "weekYear";
        case "q":
          return "quarter";
        default:
          return null;
      }
    };

    let zone = null;
    let specificOffset;
    if (!isUndefined$1(matches.z)) {
      zone = IANAZone.create(matches.z);
    }

    if (!isUndefined$1(matches.Z)) {
      if (!zone) {
        zone = new FixedOffsetZone(matches.Z);
      }
      specificOffset = matches.Z;
    }

    if (!isUndefined$1(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }

    if (!isUndefined$1(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }

    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }

    if (!isUndefined$1(matches.u)) {
      matches.S = parseMillis(matches.u);
    }

    const vals = Object.keys(matches).reduce((r, k) => {
      const f = toField(k);
      if (f) {
        r[f] = matches[k];
      }

      return r;
    }, {});

    return [vals, zone, specificOffset];
  }

  let dummyDateTimeCache = null;

  function getDummyDateTime() {
    if (!dummyDateTimeCache) {
      dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }

    return dummyDateTimeCache;
  }

  function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
      return token;
    }

    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
    const tokens = formatOptsToTokens(formatOpts, locale);

    if (tokens == null || tokens.includes(undefined)) {
      return token;
    }

    return tokens;
  }

  function expandMacroTokens(tokens, locale) {
    return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
  }

  /**
   * @private
   */

  function explainFromTokens(locale, input, format) {
    const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
      units = tokens.map((t) => unitForToken(t, locale)),
      disqualifyingUnit = units.find((t) => t.invalidReason);

    if (disqualifyingUnit) {
      return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
    } else {
      const [regexString, handlers] = buildRegex(units),
        regex = RegExp(regexString, "i"),
        [rawMatches, matches] = match(input, regex, handlers),
        [result, zone, specificOffset] = matches
          ? dateTimeFromMatches(matches)
          : [null, null, undefined];
      if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
        throw new ConflictingSpecificationError(
          "Can't include meridiem when specifying 24-hour format"
        );
      }
      return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
    }
  }

  function parseFromTokens(locale, input, format) {
    const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
    return [result, zone, specificOffset, invalidReason];
  }

  function formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) {
      return null;
    }

    const formatter = Formatter.create(locale, formatOpts);
    const parts = formatter.formatDateTimeParts(getDummyDateTime());
    return parts.map((p) => tokenForPart(p, formatOpts));
  }

  const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

  function unitOutOfRange(unit, value) {
    return new Invalid(
      "unit out of range",
      `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
    );
  }

  function dayOfWeek(year, month, day) {
    const d = new Date(Date.UTC(year, month - 1, day));

    if (year < 100 && year >= 0) {
      d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }

    const js = d.getUTCDay();

    return js === 0 ? 7 : js;
  }

  function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
  }

  function uncomputeOrdinal(year, ordinal) {
    const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex((i) => i < ordinal),
      day = ordinal - table[month0];
    return { month: month0 + 1, day };
  }

  /**
   * @private
   */

  function gregorianToWeek(gregObj) {
    const { year, month, day } = gregObj,
      ordinal = computeOrdinal(year, month, day),
      weekday = dayOfWeek(year, month, day);

    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),
      weekYear;

    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear(weekYear);
    } else if (weekNumber > weeksInWeekYear(year)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }

    return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
  }

  function weekToGregorian(weekData) {
    const { weekYear, weekNumber, weekday } = weekData,
      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
      yearInDays = daysInYear(weekYear);

    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
      year;

    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear(weekYear);
    } else {
      year = weekYear;
    }

    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(weekData) };
  }

  function gregorianToOrdinal(gregData) {
    const { year, month, day } = gregData;
    const ordinal = computeOrdinal(year, month, day);
    return { year, ordinal, ...timeObject(gregData) };
  }

  function ordinalToGregorian(ordinalData) {
    const { year, ordinal } = ordinalData;
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(ordinalData) };
  }

  function hasInvalidWeekData(obj) {
    const validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
      validWeekday = integerBetween(obj.weekday, 1, 7);

    if (!validYear) {
      return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange("week", obj.week);
    } else if (!validWeekday) {
      return unitOutOfRange("weekday", obj.weekday);
    } else return false;
  }

  function hasInvalidOrdinalData(obj) {
    const validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange("ordinal", obj.ordinal);
    } else return false;
  }

  function hasInvalidGregorianData(obj) {
    const validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange("day", obj.day);
    } else return false;
  }

  function hasInvalidTimeData(obj) {
    const { hour, minute, second, millisecond } = obj;
    const validHour =
        integerBetween(hour, 0, 23) ||
        (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

    if (!validHour) {
      return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange("millisecond", millisecond);
    } else return false;
  }

  const INVALID$2 = "Invalid DateTime";
  const MAX_DATE = 8.64e15;

  function unsupportedZone(zone) {
    return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
  }

  // we cache week data on the DT object and this intermediates the cache
  function possiblyCachedWeekData(dt) {
    if (dt.weekData === null) {
      dt.weekData = gregorianToWeek(dt.c);
    }
    return dt.weekData;
  }

  // clone really means, "make a new object with these modifications". all "setters" really use this
  // to create a new object while only changing some of the properties
  function clone$1(inst, alts) {
    const current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid,
    };
    return new DateTime({ ...current, ...alts, old: current });
  }

  // find the right offset a given local time. The o input is our guess, which determines which
  // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
  function fixOffset(localTS, o, tz) {
    // Our UTC time is just a guess because our offset is just a guess
    let utcGuess = localTS - o * 60 * 1000;

    // Test whether the zone matches the offset for this ts
    const o2 = tz.offset(utcGuess);

    // If so, offset didn't change and we're done
    if (o === o2) {
      return [utcGuess, o];
    }

    // If not, change the ts by the difference in the offset
    utcGuess -= (o2 - o) * 60 * 1000;

    // If that gives us the local time we want, we're done
    const o3 = tz.offset(utcGuess);
    if (o2 === o3) {
      return [utcGuess, o2];
    }

    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
    return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
  }

  // convert an epoch timestamp into a calendar object with the given offset
  function tsToObj(ts, offset) {
    ts += offset * 60 * 1000;

    const d = new Date(ts);

    return {
      year: d.getUTCFullYear(),
      month: d.getUTCMonth() + 1,
      day: d.getUTCDate(),
      hour: d.getUTCHours(),
      minute: d.getUTCMinutes(),
      second: d.getUTCSeconds(),
      millisecond: d.getUTCMilliseconds(),
    };
  }

  // convert a calendar object to a epoch timestamp
  function objToTS(obj, offset, zone) {
    return fixOffset(objToLocalTS(obj), offset, zone);
  }

  // create a new DT instance by adding a duration, adjusting for DSTs
  function adjustTime(inst, dur) {
    const oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = {
        ...inst.c,
        year,
        month,
        day:
          Math.min(inst.c.day, daysInMonth(year, month)) +
          Math.trunc(dur.days) +
          Math.trunc(dur.weeks) * 7,
      },
      millisToAdd = Duration.fromObject({
        years: dur.years - Math.trunc(dur.years),
        quarters: dur.quarters - Math.trunc(dur.quarters),
        months: dur.months - Math.trunc(dur.months),
        weeks: dur.weeks - Math.trunc(dur.weeks),
        days: dur.days - Math.trunc(dur.days),
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds,
        milliseconds: dur.milliseconds,
      }).as("milliseconds"),
      localTS = objToLocalTS(c);

    let [ts, o] = fixOffset(localTS, oPre, inst.zone);

    if (millisToAdd !== 0) {
      ts += millisToAdd;
      // that could have changed the offset by going over a DST, but we want to keep the ts the same
      o = inst.zone.offset(ts);
    }

    return { ts, o };
  }

  // helper useful in turning the results of parsing into real dates
  // by handling the zone options
  function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    const { setZone, zone } = opts;
    if (parsed && Object.keys(parsed).length !== 0) {
      const interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(parsed, {
          ...opts,
          zone: interpretationZone,
          specificOffset,
        });
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime.invalid(
        new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
      );
    }
  }

  // if you want to output a technical format (e.g. RFC 2822), this helper
  // helps handle the details
  function toTechFormat(dt, format, allowZ = true) {
    return dt.isValid
      ? Formatter.create(Locale.create("en-US"), {
          allowZ,
          forceSimple: true,
        }).formatDateTimeFromString(dt, format)
      : null;
  }

  function toISODate(o, extended) {
    const longFormat = o.c.year > 9999 || o.c.year < 0;
    let c = "";
    if (longFormat && o.c.year >= 0) c += "+";
    c += padStart(o.c.year, longFormat ? 6 : 4);

    if (extended) {
      c += "-";
      c += padStart(o.c.month);
      c += "-";
      c += padStart(o.c.day);
    } else {
      c += padStart(o.c.month);
      c += padStart(o.c.day);
    }
    return c;
  }

  function toISOTime(
    o,
    extended,
    suppressSeconds,
    suppressMilliseconds,
    includeOffset,
    extendedZone
  ) {
    let c = padStart(o.c.hour);
    if (extended) {
      c += ":";
      c += padStart(o.c.minute);
      if (o.c.second !== 0 || !suppressSeconds) {
        c += ":";
      }
    } else {
      c += padStart(o.c.minute);
    }

    if (o.c.second !== 0 || !suppressSeconds) {
      c += padStart(o.c.second);

      if (o.c.millisecond !== 0 || !suppressMilliseconds) {
        c += ".";
        c += padStart(o.c.millisecond, 3);
      }
    }

    if (includeOffset) {
      if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
        c += "Z";
      } else if (o.o < 0) {
        c += "-";
        c += padStart(Math.trunc(-o.o / 60));
        c += ":";
        c += padStart(Math.trunc(-o.o % 60));
      } else {
        c += "+";
        c += padStart(Math.trunc(o.o / 60));
        c += ":";
        c += padStart(Math.trunc(o.o % 60));
      }
    }

    if (extendedZone) {
      c += "[" + o.zone.ianaName + "]";
    }
    return c;
  }

  // defaults for unspecified units in the supported calendars
  const defaultUnitValues = {
      month: 1,
      day: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    },
    defaultWeekUnitValues = {
      weekNumber: 1,
      weekday: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    },
    defaultOrdinalUnitValues = {
      ordinal: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    };

  // Units in the supported calendars, sorted by bigness
  const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = [
      "weekYear",
      "weekNumber",
      "weekday",
      "hour",
      "minute",
      "second",
      "millisecond",
    ],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

  // standardize case and plurality in units
  function normalizeUnit(unit) {
    const normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal",
    }[unit.toLowerCase()];

    if (!normalized) throw new InvalidUnitError(unit);

    return normalized;
  }

  // this is a dumbed down version of fromObject() that runs about 60% faster
  // but doesn't do any validation, makes a bunch of assumptions about what units
  // are present, and so on.
  function quickDT(obj, opts) {
    const zone = normalizeZone(opts.zone, Settings.defaultZone),
      loc = Locale.fromObject(opts),
      tsNow = Settings.now();

    let ts, o;

    // assume we have the higher-order units
    if (!isUndefined$1(obj.year)) {
      for (const u of orderedUnits) {
        if (isUndefined$1(obj[u])) {
          obj[u] = defaultUnitValues[u];
        }
      }

      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
      if (invalid) {
        return DateTime.invalid(invalid);
      }

      const offsetProvis = zone.offset(tsNow);
      [ts, o] = objToTS(obj, offsetProvis, zone);
    } else {
      ts = tsNow;
    }

    return new DateTime({ ts, zone, loc, o });
  }

  function diffRelative(start, end, opts) {
    const round = isUndefined$1(opts.round) ? true : opts.round,
      format = (c, unit) => {
        c = roundTo(c, round || opts.calendary ? 0 : 2, true);
        const formatter = end.loc.clone(opts).relFormatter(opts);
        return formatter.format(c, unit);
      },
      differ = (unit) => {
        if (opts.calendary) {
          if (!end.hasSame(start, unit)) {
            return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
          } else return 0;
        } else {
          return end.diff(start, unit).get(unit);
        }
      };

    if (opts.unit) {
      return format(differ(opts.unit), opts.unit);
    }

    for (const unit of opts.units) {
      const count = differ(unit);
      if (Math.abs(count) >= 1) {
        return format(count, unit);
      }
    }
    return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
  }

  function lastOpts(argList) {
    let opts = {},
      args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
      opts = argList[argList.length - 1];
      args = Array.from(argList).slice(0, argList.length - 1);
    } else {
      args = Array.from(argList);
    }
    return [opts, args];
  }

  /**
   * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
   *
   * A DateTime comprises of:
   * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
   * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
   * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
   *
   * Here is a brief overview of the most commonly used functionality it provides:
   *
   * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
   * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
   * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
   * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
   * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
   * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
   * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
   *
   * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
   */
  class DateTime {
    /**
     * @access private
     */
    constructor(config) {
      const zone = config.zone || Settings.defaultZone;

      let invalid =
        config.invalid ||
        (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
        (!zone.isValid ? unsupportedZone(zone) : null);
      /**
       * @access private
       */
      this.ts = isUndefined$1(config.ts) ? Settings.now() : config.ts;

      let c = null,
        o = null;
      if (!invalid) {
        const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

        if (unchanged) {
          [c, o] = [config.old.c, config.old.o];
        } else {
          const ot = zone.offset(this.ts);
          c = tsToObj(this.ts, ot);
          invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
          c = invalid ? null : c;
          o = invalid ? null : ot;
        }
      }

      /**
       * @access private
       */
      this._zone = zone;
      /**
       * @access private
       */
      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */
      this.invalid = invalid;
      /**
       * @access private
       */
      this.weekData = null;
      /**
       * @access private
       */
      this.c = c;
      /**
       * @access private
       */
      this.o = o;
      /**
       * @access private
       */
      this.isLuxonDateTime = true;
    }

    // CONSTRUCT

    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    static now() {
      return new DateTime({});
    }

    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month, 1-indexed
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                  //~> now
     * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    static local() {
      const [opts, args] = lastOpts(arguments),
        [year, month, day, hour, minute, second, millisecond] = args;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }

    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    static utc() {
      const [opts, args] = lastOpts(arguments),
        [year, month, day, hour, minute, second, millisecond] = args;

      opts.zone = FixedOffsetZone.utcInstance;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }

    /**
     * Create a DateTime from a JavaScript Date object. Uses the default zone.
     * @param {Date} date - a JavaScript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @return {DateTime}
     */
    static fromJSDate(date, options = {}) {
      const ts = isDate(date) ? date.valueOf() : NaN;
      if (Number.isNaN(ts)) {
        return DateTime.invalid("invalid input");
      }

      const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }

      return new DateTime({
        ts: ts,
        zone: zoneToUse,
        loc: Locale.fromObject(options),
      });
    }

    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromMillis(milliseconds, options = {}) {
      if (!isNumber$2(milliseconds)) {
        throw new InvalidArgumentError(
          `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
        );
      } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
        // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
        return DateTime.invalid("Timestamp out of range");
      } else {
        return new DateTime({
          ts: milliseconds,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options),
        });
      }
    }

    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromSeconds(seconds, options = {}) {
      if (!isNumber$2(seconds)) {
        throw new InvalidArgumentError("fromSeconds requires a numerical input");
      } else {
        return new DateTime({
          ts: seconds * 1000,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options),
        });
      }
    }

    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @return {DateTime}
     */
    static fromObject(obj, opts = {}) {
      obj = obj || {};
      const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }

      const tsNow = Settings.now(),
        offsetProvis = !isUndefined$1(opts.specificOffset)
          ? opts.specificOffset
          : zoneToUse.offset(tsNow),
        normalized = normalizeObject(obj, normalizeUnit),
        containsOrdinal = !isUndefined$1(normalized.ordinal),
        containsGregorYear = !isUndefined$1(normalized.year),
        containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber,
        loc = Locale.fromObject(opts);

      // cases:
      // just a weekday -> this week's instance of that weekday, no worries
      // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
      // (gregorian month or day) + ordinal -> error
      // otherwise just use weeks or ordinals or gregorian, depending on what's specified

      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }

      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }

      const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

      // configure ourselves to deal with gregorian dates or week stuff
      let units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);
      if (useWeekData) {
        units = orderedWeekUnits;
        defaultValues = defaultWeekUnitValues;
        objNow = gregorianToWeek(objNow);
      } else if (containsOrdinal) {
        units = orderedOrdinalUnits;
        defaultValues = defaultOrdinalUnitValues;
        objNow = gregorianToOrdinal(objNow);
      } else {
        units = orderedUnits;
        defaultValues = defaultUnitValues;
      }

      // set default values for missing stuff
      let foundFirst = false;
      for (const u of units) {
        const v = normalized[u];
        if (!isUndefined$1(v)) {
          foundFirst = true;
        } else if (foundFirst) {
          normalized[u] = defaultValues[u];
        } else {
          normalized[u] = objNow[u];
        }
      }

      // make sure the values we have are in range
      const higherOrderInvalid = useWeekData
          ? hasInvalidWeekData(normalized)
          : containsOrdinal
          ? hasInvalidOrdinalData(normalized)
          : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

      if (invalid) {
        return DateTime.invalid(invalid);
      }

      // compute the actual time
      const gregorian = useWeekData
          ? weekToGregorian(normalized)
          : containsOrdinal
          ? ordinalToGregorian(normalized)
          : normalized,
        [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
        inst = new DateTime({
          ts: tsFinal,
          zone: zoneToUse,
          o: offsetFinal,
          loc,
        });

      // gregorian data + weekday serves only to validate
      if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
        return DateTime.invalid(
          "mismatched weekday",
          `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
        );
      }

      return inst;
    }

    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    static fromISO(text, opts = {}) {
      const [vals, parsedZone] = parseISODate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    }

    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     * @return {DateTime}
     */
    static fromRFC2822(text, opts = {}) {
      const [vals, parsedZone] = parseRFC2822Date(text);
      return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    }

    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     * @return {DateTime}
     */
    static fromHTTP(text, opts = {}) {
      const [vals, parsedZone] = parseHTTPDate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    }

    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromFormat(text, fmt, opts = {}) {
      if (isUndefined$1(text) || isUndefined$1(fmt)) {
        throw new InvalidArgumentError("fromFormat requires an input string and a format");
      }

      const { locale = null, numberingSystem = null } = opts,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        }),
        [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
      if (invalid) {
        return DateTime.invalid(invalid);
      } else {
        return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
      }
    }

    /**
     * @deprecated use fromFormat instead
     */
    static fromString(text, fmt, opts = {}) {
      return DateTime.fromFormat(text, fmt, opts);
    }

    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     * @return {DateTime}
     */
    static fromSQL(text, opts = {}) {
      const [vals, parsedZone] = parseSQL(text);
      return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    }

    /**
     * Create an invalid DateTime.
     * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {DateTime}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidDateTimeError(invalid);
      } else {
        return new DateTime({ invalid });
      }
    }

    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDateTime(o) {
      return (o && o.isLuxonDateTime) || false;
    }

    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
      const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
      return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
    }

    /**
     * Produce the the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     * @returns {string}
     */
    static expandFormat(fmt, localeOpts = {}) {
      const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
      return expanded.map((t) => t.val).join("");
    }

    // INFO

    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    get(unit) {
      return this[unit];
    }

    /**
     * Returns whether the DateTime is valid. Invalid DateTimes occur when:
     * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
     * * The DateTime was created by an operation on another invalid date
     * @type {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }

    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
    get outputCalendar() {
      return this.isValid ? this.loc.outputCalendar : null;
    }

    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
    get zone() {
      return this._zone;
    }

    /**
     * Get the name of the time zone.
     * @type {string}
     */
    get zoneName() {
      return this.isValid ? this.zone.name : null;
    }

    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
    get year() {
      return this.isValid ? this.c.year : NaN;
    }

    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
    get quarter() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }

    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
    get month() {
      return this.isValid ? this.c.month : NaN;
    }

    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
    get day() {
      return this.isValid ? this.c.day : NaN;
    }

    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
    get hour() {
      return this.isValid ? this.c.hour : NaN;
    }

    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
    get minute() {
      return this.isValid ? this.c.minute : NaN;
    }

    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
    get second() {
      return this.isValid ? this.c.second : NaN;
    }

    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
    get millisecond() {
      return this.isValid ? this.c.millisecond : NaN;
    }

    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
    get weekYear() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }

    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
    get weekNumber() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }

    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
    get weekday() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }

    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
    get ordinal() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }

    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
    get monthShort() {
      return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
    }

    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
    get monthLong() {
      return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
    }

    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
    get weekdayShort() {
      return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
    }

    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
    get weekdayLong() {
      return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
    }

    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
    get offset() {
      return this.isValid ? +this.o : NaN;
    }

    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameShort() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale,
        });
      } else {
        return null;
      }
    }

    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameLong() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale,
        });
      } else {
        return null;
      }
    }

    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
    get isOffsetFixed() {
      return this.isValid ? this.zone.isUniversal : null;
    }

    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
    get isInDST() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return (
          this.offset > this.set({ month: 1, day: 1 }).offset ||
          this.offset > this.set({ month: 5 }).offset
        );
      }
    }

    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
    get isInLeapYear() {
      return isLeapYear(this.year);
    }

    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
    get daysInMonth() {
      return daysInMonth(this.year, this.month);
    }

    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
    get daysInYear() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }

    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
    get weeksInWeekYear() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }

    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    resolvedLocaleOptions(opts = {}) {
      const { locale, numberingSystem, calendar } = Formatter.create(
        this.loc.clone(opts),
        opts
      ).resolvedOptions(this);
      return { locale, numberingSystem, outputCalendar: calendar };
    }

    // TRANSFORM

    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link DateTime#setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    toUTC(offset = 0, opts = {}) {
      return this.setZone(FixedOffsetZone.instance(offset), opts);
    }

    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    toLocal() {
      return this.setZone(Settings.defaultZone);
    }

    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
      zone = normalizeZone(zone, Settings.defaultZone);
      if (zone.equals(this.zone)) {
        return this;
      } else if (!zone.isValid) {
        return DateTime.invalid(unsupportedZone(zone));
      } else {
        let newTS = this.ts;
        if (keepLocalTime || keepCalendarTime) {
          const offsetGuess = zone.offset(this.ts);
          const asObj = this.toObject();
          [newTS] = objToTS(asObj, offsetGuess, zone);
        }
        return clone$1(this, { ts: newTS, zone });
      }
    }

    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} properties - the properties to set
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
      return clone$1(this, { loc });
    }

    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    setLocale(locale) {
      return this.reconfigure({ locale });
    }

    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     * @return {DateTime}
     */
    set(values) {
      if (!this.isValid) return this;

      const normalized = normalizeObject(values, normalizeUnit),
        settingWeekStuff =
          !isUndefined$1(normalized.weekYear) ||
          !isUndefined$1(normalized.weekNumber) ||
          !isUndefined$1(normalized.weekday),
        containsOrdinal = !isUndefined$1(normalized.ordinal),
        containsGregorYear = !isUndefined$1(normalized.year),
        containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber;

      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }

      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }

      let mixed;
      if (settingWeekStuff) {
        mixed = weekToGregorian({ ...gregorianToWeek(this.c), ...normalized });
      } else if (!isUndefined$1(normalized.ordinal)) {
        mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
      } else {
        mixed = { ...this.toObject(), ...normalized };

        // if we didn't set the day but we ended up on an overflow date,
        // use the last day of the right month
        if (isUndefined$1(normalized.day)) {
          mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
        }
      }

      const [ts, o] = objToTS(mixed, this.o, this.zone);
      return clone$1(this, { ts, o });
    }

    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration);
      return clone$1(this, adjustTime(this, dur));
    }

    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration).negate();
      return clone$1(this, adjustTime(this, dur));
    }

    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     * @return {DateTime}
     */
    startOf(unit) {
      if (!this.isValid) return this;
      const o = {},
        normalizedUnit = Duration.normalizeUnit(unit);
      switch (normalizedUnit) {
        case "years":
          o.month = 1;
        // falls through
        case "quarters":
        case "months":
          o.day = 1;
        // falls through
        case "weeks":
        case "days":
          o.hour = 0;
        // falls through
        case "hours":
          o.minute = 0;
        // falls through
        case "minutes":
          o.second = 0;
        // falls through
        case "seconds":
          o.millisecond = 0;
          break;
        // no default, invalid units throw in normalizeUnit()
      }

      if (normalizedUnit === "weeks") {
        o.weekday = 1;
      }

      if (normalizedUnit === "quarters") {
        const q = Math.ceil(this.month / 3);
        o.month = (q - 1) * 3 + 1;
      }

      return this.set(o);
    }

    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    endOf(unit) {
      return this.isValid
        ? this.plus({ [unit]: 1 })
            .startOf(unit)
            .minus(1)
        : this;
    }

    // OUTPUT

    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
        : INVALID$2;
    }

    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
        : INVALID$2;
    }

    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: 'day', value: '25' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'year', value: '1982' }
     *                                   //=> ]
     */
    toLocaleParts(opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
        : [];
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @return {string}
     */
    toISO({
      format = "extended",
      suppressSeconds = false,
      suppressMilliseconds = false,
      includeOffset = true,
      extendedZone = false,
    } = {}) {
      if (!this.isValid) {
        return null;
      }

      const ext = format === "extended";

      let c = toISODate(this, ext);
      c += "T";
      c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
      return c;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} opts - options
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @return {string}
     */
    toISODate({ format = "extended" } = {}) {
      if (!this.isValid) {
        return null;
      }

      return toISODate(this, format === "extended");
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    toISOWeekDate() {
      return toTechFormat(this, "kkkk-'W'WW-c");
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @return {string}
     */
    toISOTime({
      suppressMilliseconds = false,
      suppressSeconds = false,
      includeOffset = true,
      includePrefix = false,
      extendedZone = false,
      format = "extended",
    } = {}) {
      if (!this.isValid) {
        return null;
      }

      let c = includePrefix ? "T" : "";
      return (
        c +
        toISOTime(
          this,
          format === "extended",
          suppressSeconds,
          suppressMilliseconds,
          includeOffset,
          extendedZone
        )
      );
    }

    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    toRFC2822() {
      return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    toHTTP() {
      return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string}
     */
    toSQLDate() {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, true);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
     * @return {string}
     */
    toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
      let fmt = "HH:mm:ss.SSS";

      if (includeZone || includeOffset) {
        if (includeOffsetSpace) {
          fmt += " ";
        }
        if (includeZone) {
          fmt += "z";
        } else if (includeOffset) {
          fmt += "ZZ";
        }
      }

      return toTechFormat(this, fmt, true);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    toSQL(opts = {}) {
      if (!this.isValid) {
        return null;
      }

      return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }

    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    toString() {
      return this.isValid ? this.toISO() : INVALID$2;
    }

    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }

    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    toMillis() {
      return this.isValid ? this.ts : NaN;
    }

    /**
     * Returns the epoch seconds of this DateTime.
     * @return {number}
     */
    toSeconds() {
      return this.isValid ? this.ts / 1000 : NaN;
    }

    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    toUnixInteger() {
      return this.isValid ? Math.floor(this.ts / 1000) : NaN;
    }

    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }

    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    toBSON() {
      return this.toJSDate();
    }

    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    toObject(opts = {}) {
      if (!this.isValid) return {};

      const base = { ...this.c };

      if (opts.includeConfig) {
        base.outputCalendar = this.outputCalendar;
        base.numberingSystem = this.loc.numberingSystem;
        base.locale = this.loc.locale;
      }
      return base;
    }

    /**
     * Returns a JavaScript Date equivalent to this DateTime.
     * @return {Date}
     */
    toJSDate() {
      return new Date(this.isValid ? this.ts : NaN);
    }

    // COMPARE

    /**
     * Return the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
      if (!this.isValid || !otherDateTime.isValid) {
        return Duration.invalid("created by diffing an invalid DateTime");
      }

      const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

      const units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = diff(earlier, later, units, durOpts);

      return otherIsLater ? diffed.negate() : diffed;
    }

    /**
     * Return the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    diffNow(unit = "milliseconds", opts = {}) {
      return this.diff(DateTime.now(), unit, opts);
    }

    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval}
     */
    until(otherDateTime) {
      return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
    }

    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     * @return {boolean}
     */
    hasSame(otherDateTime, unit) {
      if (!this.isValid) return false;

      const inputMs = otherDateTime.valueOf();
      const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
      return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
    }

    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     * @return {boolean}
     */
    equals(other) {
      return (
        this.isValid &&
        other.isValid &&
        this.valueOf() === other.valueOf() &&
        this.zone.equals(other.zone) &&
        this.loc.equals(other.loc)
      );
    }

    /**
     * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds down by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    toRelative(options = {}) {
      if (!this.isValid) return null;
      const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
        padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
      let units = ["years", "months", "days", "hours", "minutes", "seconds"];
      let unit = options.unit;
      if (Array.isArray(options.unit)) {
        units = options.unit;
        unit = undefined;
      }
      return diffRelative(base, this.plus(padding), {
        ...options,
        numeric: "always",
        units,
        unit,
      });
    }

    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    toRelativeCalendar(options = {}) {
      if (!this.isValid) return null;

      return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
        ...options,
        numeric: "auto",
        units: ["years", "months", "days"],
        calendary: true,
      });
    }

    /**
     * Return the min of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
     * @return {DateTime} the min DateTime, or undefined if called with no argument
     */
    static min(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("min requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
    }

    /**
     * Return the max of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
     * @return {DateTime} the max DateTime, or undefined if called with no argument
     */
    static max(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("max requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
    }

    // MISC

    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {Object} options - options taken by fromFormat()
     * @return {Object}
     */
    static fromFormatExplain(text, fmt, options = {}) {
      const { locale = null, numberingSystem = null } = options,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        });
      return explainFromTokens(localeToUse, text, fmt);
    }

    /**
     * @deprecated use fromFormatExplain instead
     */
    static fromStringExplain(text, fmt, options = {}) {
      return DateTime.fromFormatExplain(text, fmt, options);
    }

    // FORMAT PRESETS

    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     * @type {Object}
     */
    static get DATE_SHORT() {
      return DATE_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED() {
      return DATE_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED_WITH_WEEKDAY() {
      return DATE_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
    static get DATE_FULL() {
      return DATE_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
    static get DATE_HUGE() {
      return DATE_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_SIMPLE() {
      return TIME_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SECONDS() {
      return TIME_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SHORT_OFFSET() {
      return TIME_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_LONG_OFFSET() {
      return TIME_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_SIMPLE() {
      return TIME_24_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SECONDS() {
      return TIME_24_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SHORT_OFFSET() {
      return TIME_24_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_LONG_OFFSET() {
      return TIME_24_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT() {
      return DATETIME_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT_WITH_SECONDS() {
      return DATETIME_SHORT_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED() {
      return DATETIME_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_SECONDS() {
      return DATETIME_MED_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_WEEKDAY() {
      return DATETIME_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL() {
      return DATETIME_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL_WITH_SECONDS() {
      return DATETIME_FULL_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE() {
      return DATETIME_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE_WITH_SECONDS() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }

  /**
   * @private
   */
  function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber$2(dateTimeish.valueOf())) {
      return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
      return DateTime.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError(
        `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
      );
    }
  }

  // FIXME profile adding a per-Tree TreeNode cache, validating it by
  // parent pointer
  /// The default maximum length of a `TreeBuffer` node.
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  let Range$2 = class Range {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  };
  /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  /// can have metadata associated with it in props. Instances of this
  /// class represent prop names.
  class NodeProp {
      /// Create a new node prop type.
      constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
              throw new Error("This node type doesn't define a deserialize function");
          });
      }
      /// This is meant to be used with
      /// [`NodeSet.extend`](#common.NodeSet.extend) or
      /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
      /// prop values for each node type in the set. Takes a [match
      /// object](#common.NodeType^match) or function that returns undefined
      /// if the node type doesn't get this prop, and the prop's value if
      /// it does.
      add(match) {
          if (this.perNode)
              throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
              match = NodeType.match(match);
          return (type) => {
              let result = match(type);
              return result === undefined ? null : [this, result];
          };
      }
  }
  /// Prop that is used to describe matching delimiters. For opening
  /// delimiters, this holds an array of node names (written as a
  /// space-separated string when declaring this prop in a grammar)
  /// for the node types of closing delimiters that match it.
  NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  /// attached to closing delimiters, holding an array of node names
  /// of types of matching opening delimiters.
  NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /// Used to assign node types to groups (for example, all node
  /// types that represent an expression could be tagged with an
  /// `"Expression"` group).
  NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
  /// The hash of the [context](#lr.ContextTracker.constructor)
  /// that the node was parsed in, if any. Used to limit reuse of
  /// contextual nodes.
  NodeProp.contextHash = new NodeProp({ perNode: true });
  /// The distance beyond the end of the node that the tokenizer
  /// looked ahead for any of the tokens inside the node. (The LR
  /// parser only stores this when it is larger than 25, for
  /// efficiency reasons.)
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  /// This per-node prop is used to replace a given node, or part of a
  /// node, with another tree. This is useful to include trees from
  /// different languages in mixed-language parsers.
  NodeProp.mounted = new NodeProp({ perNode: true });
  const noProps = Object.create(null);
  /// Each node in a syntax tree has a node type associated with it.
  class NodeType {
      /// @internal
      constructor(
      /// The name of the node type. Not necessarily unique, but if the
      /// grammar was written properly, different node types with the
      /// same name within a node set should play the same semantic
      /// role.
      name, 
      /// @internal
      props, 
      /// The id of this node in its set. Corresponds to the term ids
      /// used in the parser.
      id, 
      /// @internal
      flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
      }
      /// Define a node type.
      static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
              (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
              for (let src of spec.props) {
                  if (!Array.isArray(src))
                      src = src(type);
                  if (src) {
                      if (src[0].perNode)
                          throw new RangeError("Can't store a per-node prop on a node type");
                      props[src[0].id] = src[1];
                  }
              }
          return type;
      }
      /// Retrieves a node prop for this type. Will return `undefined` if
      /// the prop isn't present on this node.
      prop(prop) { return this.props[prop.id]; }
      /// True when this is the top node of a grammar.
      get isTop() { return (this.flags & 1 /* Top */) > 0; }
      /// True when this node is produced by a skip rule.
      get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
      /// Indicates whether this is an error node.
      get isError() { return (this.flags & 4 /* Error */) > 0; }
      /// When true, this node type doesn't correspond to a user-declared
      /// named node, for example because it is used to cache repetition.
      get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
      /// Returns true when this node's name or one of its
      /// [groups](#common.NodeProp^group) matches the given string.
      is(name) {
          if (typeof name == 'string') {
              if (this.name == name)
                  return true;
              let group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
      }
      /// Create a function from node types to arbitrary values by
      /// specifying an object whose property names are node or
      /// [group](#common.NodeProp^group) names. Often useful with
      /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      /// names, separated by spaces, in a single property name to map
      /// multiple node names to a single value.
      static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
              for (let name of prop.split(" "))
                  direct[name] = map[prop];
          return (node) => {
              for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                  let found = direct[i < 0 ? node.name : groups[i]];
                  if (found)
                      return found;
              }
          };
      }
  }
  /// An empty dummy node type to use when no actual type is available.
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
  /// A node set holds a collection of node types. It is used to
  /// compactly represent trees by storing their type ids, rather than a
  /// full pointer to the type object, in a numeric array. Each parser
  /// [has](#lr.LRParser.nodeSet) a node set, and [tree
  /// buffers](#common.TreeBuffer) can only store collections of nodes
  /// from the same set. A set can have a maximum of 2**16 (65536) node
  /// types in it, so that the ids fit into 16-bit typed array slots.
  class NodeSet {
      /// Create a set with the given types. The `id` property of each
      /// type should correspond to its position within the array.
      constructor(
      /// The node types in this set, by id.
      types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
              if (types[i].id != i)
                  throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /// Create a copy of this set with some node properties added. The
      /// arguments to this method can be created with
      /// [`NodeProp.add`](#common.NodeProp.add).
      extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
              let newProps = null;
              for (let source of props) {
                  let add = source(type);
                  if (add) {
                      if (!newProps)
                          newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                  }
              }
              newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
      }
  }
  const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
  /// Options that control iteration. Can be combined with the `|`
  /// operator to enable multiple ones.
  var IterMode;
  (function (IterMode) {
      /// When enabled, iteration will only visit [`Tree`](#common.Tree)
      /// objects, not nodes packed into
      /// [`TreeBuffer`](#common.TreeBuffer)s.
      IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      /// Enable this to make iteration include anonymous nodes (such as
      /// the nodes that wrap repeated grammar constructs into a balanced
      /// tree).
      IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      /// By default, regular [mounted](#common.NodeProp^mounted) nodes
      /// replace their base node in iteration. Enable this to ignore them
      /// instead.
      IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
      /// This option only applies in
      /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
      /// library to not enter mounted overlays if one covers the given
      /// position.
      IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /// A piece of syntax tree. There are two ways to approach these
  /// trees: the way they are actually stored in memory, and the
  /// convenient way.
  ///
  /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  /// objects. By packing detail information into `TreeBuffer` leaf
  /// nodes, the representation is made a lot more memory-efficient.
  ///
  /// However, when you want to actually work with tree nodes, this
  /// representation is very awkward, so most client code will want to
  /// use the [`TreeCursor`](#common.TreeCursor) or
  /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  /// a view on some part of this data structure, and can be used to
  /// move around to adjacent nodes.
  class Tree {
      /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      constructor(
      /// The type of the top node.
      type, 
      /// This node's child nodes.
      children, 
      /// The positions (offsets relative to the start of this tree) of
      /// the children.
      positions, 
      /// The total length of this tree
      length, 
      /// Per-node [node props](#common.NodeProp) to associate with this node.
      props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          /// @internal
          this.props = null;
          if (props && props.length) {
              this.props = Object.create(null);
              for (let [prop, value] of props)
                  this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
      }
      /// @internal
      toString() {
          let mounted = this.prop(NodeProp.mounted);
          if (mounted && !mounted.overlay)
              return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
              let str = ch.toString();
              if (str) {
                  if (children)
                      children += ",";
                  children += str;
              }
          }
          return !this.type.name ? children :
              (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                  (children.length ? "(" + children + ")" : "");
      }
      /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
      /// the tree. Mode can be used to [control](#common.IterMode) which
      /// nodes the cursor visits.
      cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
      }
      /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
      /// at the given position and side (see
      /// [`moveTo`](#common.TreeCursor.moveTo).
      cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
      }
      /// Get a [syntax node](#common.SyntaxNode) object for the top of the
      /// tree.
      get topNode() {
          return new TreeNode(this, 0, 0, null);
      }
      /// Get the [syntax node](#common.SyntaxNode) at the given position.
      /// If `side` is -1, this will move into nodes that end at the
      /// position. If 1, it'll move into nodes that start at the
      /// position. With 0, it'll only enter nodes that cover the position
      /// from both sides.
      ///
      /// Note that this will not enter
      /// [overlays](#common.MountedTree.overlay), and you often want
      /// [`resolveInner`](#common.Tree.resolveInner) instead.
      resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
      }
      /// Like [`resolve`](#common.Tree.resolve), but will enter
      /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      /// pointing into the innermost overlaid tree at the given position
      /// (with parent links going through all parent structure, including
      /// the host trees).
      resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
      }
      /// Iterate over the tree and its children, calling `enter` for any
      /// node that touches the `from`/`to` region (if given) before
      /// running over such a node's children, and `leave` (if given) when
      /// leaving the node. When `enter` returns `false`, that node will
      /// not have its children iterated over (or `leave` called).
      iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
              let entered = false;
              if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
                  if (c.firstChild())
                      continue;
                  entered = true;
              }
              for (;;) {
                  if (entered && leave && !c.type.isAnonymous)
                      leave(c);
                  if (c.nextSibling())
                      break;
                  if (!c.parent())
                      return;
                  entered = true;
              }
          }
      }
      /// Get the value of the given [node prop](#common.NodeProp) for this
      /// node. Works with both per-node and per-type props.
      prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
      }
      /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
      /// format that can be passed to the [`Tree`](#common.Tree)
      /// constructor.
      get propValues() {
          let result = [];
          if (this.props)
              for (let id in this.props)
                  result.push([+id, this.props[id]]);
          return result;
      }
      /// Balance the direct children of this tree, producing a copy of
      /// which may have children grouped into subtrees with type
      /// [`NodeType.none`](#common.NodeType^none).
      balance(config = {}) {
          return this.children.length <= 8 /* BranchFactor */ ? this :
              balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
      }
      /// Build a tree from a postfix-ordered buffer of node information,
      /// or a cursor over such a buffer.
      static build(data) { return buildTree(data); }
  }
  /// The empty tree
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
      constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      get pos() { return this.index; }
      next() { this.index -= 4; }
      fork() { return new FlatBufferCursor(this.buffer, this.index); }
  }
  /// Tree buffers contain (type, start, end, endIndex) quads for each
  /// node. In such a buffer, nodes are stored in prefix order (parents
  /// before children, with the endIndex of the parent indicating which
  /// children belong to it).
  class TreeBuffer {
      /// Create a tree buffer.
      constructor(
      /// The buffer's content.
      buffer, 
      /// The total length of the group of nodes in the buffer.
      length, 
      /// The node set used in this buffer.
      set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
      }
      /// @internal
      get type() { return NodeType.none; }
      /// @internal
      toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result.join(",");
      }
      /// @internal
      childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
              result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
              return result;
          let children = [];
          while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
      }
      /// @internal
      findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
              if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                  pick = i;
                  if (dir > 0)
                      break;
              }
          }
          return pick;
      }
      /// @internal
      slice(startI, endI, from, to) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI);
          for (let i = startI, j = 0; i < endI;) {
              copy[j++] = b[i++];
              copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - startI;
          }
          return new TreeBuffer(copy, to - from, this.set);
      }
  }
  function checkSide(side, pos, from, to) {
      switch (side) {
          case -2 /* Before */: return from < pos;
          case -1 /* AtOrBefore */: return to >= pos && from < pos;
          case 0 /* Around */: return from < pos && to > pos;
          case 1 /* AtOrAfter */: return from <= pos && to > pos;
          case 2 /* After */: return to > pos;
          case 4 /* DontCare */: return true;
      }
  }
  function enterUnfinishedNodesBefore(node, pos) {
      let scan = node.childBefore(pos);
      while (scan) {
          let last = scan.lastChild;
          if (!last || last.to != scan.to)
              break;
          if (last.type.isError && last.from == last.to) {
              node = scan;
              scan = last.prevSibling;
          }
          else {
              scan = last;
          }
      }
      return node;
  }
  function resolveNode(node, pos, side, overlays) {
      var _a;
      // Move up to a node that actually holds the position, if possible
      while (node.from == node.to ||
          (side < 1 ? node.from >= pos : node.from > pos) ||
          (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
              return node;
          node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      // Must go up out of overlays when those do not overlap with pos
      if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
              if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                  node = parent;
          }
      for (;;) {
          let inner = node.enter(pos, side, mode);
          if (!inner)
              return node;
          node = inner;
      }
  }
  class TreeNode {
      constructor(_tree, from, 
      // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
      index, _parent) {
          this._tree = _tree;
          this.from = from;
          this.index = index;
          this._parent = _parent;
      }
      get type() { return this._tree.type; }
      get name() { return this._tree.type.name; }
      get to() { return this.from + this._tree.length; }
      nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this;;) {
              for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                  let next = children[i], start = positions[i] + parent.from;
                  if (!checkSide(side, pos, start, start + next.length))
                      continue;
                  if (next instanceof TreeBuffer) {
                      if (mode & IterMode.ExcludeBuffers)
                          continue;
                      let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                      if (index > -1)
                          return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                  }
                  else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                      let mounted;
                      if (!(mode & IterMode.IgnoreMounts) &&
                          next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                          return new TreeNode(mounted.tree, start, i, parent);
                      let inner = new TreeNode(next, start, i, parent);
                      return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                          : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                  }
              }
              if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                  return null;
              if (parent.index >= 0)
                  i = parent.index + dir;
              else
                  i = dir < 0 ? -1 : parent._parent._tree.children.length;
              parent = parent._parent;
              if (!parent)
                  return null;
          }
      }
      get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
      get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }
      childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
      childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }
      enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
              let rPos = pos - this.from;
              for (let { from, to } of mounted.overlay) {
                  if ((side > 0 ? from <= rPos : from < rPos) &&
                      (side < 0 ? to >= rPos : to > rPos))
                      return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
              }
          }
          return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
              val = val._parent;
          return val;
      }
      get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
      }
      get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
      }
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      get tree() { return this._tree; }
      toTree() { return this._tree; }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      /// @internal
      toString() { return this._tree.toString(); }
      get node() { return this; }
      matchContext(context) { return matchNodeContext(this, context); }
  }
  function getChildren(node, type, before, after) {
      let cur = node.cursor(), result = [];
      if (!cur.firstChild())
          return result;
      if (before != null)
          while (!cur.type.is(before))
              if (!cur.nextSibling())
                  return result;
      for (;;) {
          if (after != null && cur.type.is(after))
              return result;
          if (cur.type.is(type))
              result.push(cur.node);
          if (!cur.nextSibling())
              return after == null ? result : [];
      }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
      for (let p = node.parent; i >= 0; p = p.parent) {
          if (!p)
              return false;
          if (!p.type.isAnonymous) {
              if (context[i] && context[i] != p.name)
                  return false;
              i--;
          }
      }
      return true;
  }
  class BufferContext {
      constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
      }
  }
  class BufferNode {
      constructor(context, _parent, index) {
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      get name() { return this.type.name; }
      get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
      get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
      child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
      get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
      childAfter(pos) { return this.child(1, pos, 2 /* After */); }
      childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
      enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
              return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
      }
      get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
              return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
      }
      get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
              return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
      }
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      get tree() { return null; }
      toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
              let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
              children.push(buffer.slice(startI, endI, from, to));
              positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
      }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
      /// @internal
      toString() { return this.context.buffer.childString(this.index); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      get node() { return this; }
      matchContext(context) { return matchNodeContext(this, context); }
  }
  /// A tree cursor object focuses on a given node in a syntax tree, and
  /// allows you to move to adjacent nodes.
  class TreeCursor {
      /// @internal
      constructor(node, 
      /// @internal
      mode = 0) {
          this.mode = mode;
          /// @internal
          this.buffer = null;
          this.stack = [];
          /// @internal
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
              this.yieldNode(node);
          }
          else {
              this._tree = node.context.parent;
              this.buffer = node.context;
              for (let n = node._parent; n; n = n._parent)
                  this.stack.unshift(n.index);
              this.bufferNode = node;
              this.yieldBuf(node.index);
          }
      }
      /// Shorthand for `.type.name`.
      get name() { return this.type.name; }
      yieldNode(node) {
          if (!node)
              return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
      }
      yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
      }
      yield(node) {
          if (!node)
              return false;
          if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
      }
      /// @internal
      toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /// @internal
      enterChild(dir, pos, side) {
          if (!this.buffer)
              return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
              return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
      }
      /// Move the cursor to this node's first child. When this returns
      /// false, the node has no child, and the cursor has not been moved.
      firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
      /// Move the cursor to this node's last child.
      lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
      /// Move the cursor to the first child that ends after `pos`.
      childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
      /// Move to the last child that starts before `pos`.
      childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
      /// Move the cursor to the child around `pos`. If side is -1 the
      /// child may end at that position, when 1 it may start there. This
      /// will also enter [overlaid](#common.MountedTree.overlay)
      /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      /// set to false.
      enter(pos, side, mode = this.mode) {
          if (!this.buffer)
              return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /// Move to the node's parent node, if this isn't the top node.
      parent() {
          if (!this.buffer)
              return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
              return this.yieldBuf(this.stack.pop());
          let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
      }
      /// @internal
      sibling(dir) {
          if (!this.buffer)
              return !this._tree._parent ? false
                  : this.yield(this._tree.index < 0 ? null
                      : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
              let parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart)
                  return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
          }
          else {
              let after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                  return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
      }
      /// Move to this node's next sibling, if any.
      nextSibling() { return this.sibling(1); }
      /// Move to this node's previous sibling, if any.
      prevSibling() { return this.sibling(-1); }
      atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
              if (dir > 0) {
                  if (this.index < buffer.buffer.buffer.length)
                      return false;
              }
              else {
                  for (let i = 0; i < this.index; i++)
                      if (buffer.buffer.buffer[i + 3] < this.index)
                          return false;
              }
              ({ index, parent } = buffer);
          }
          else {
              ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
              if (index > -1)
                  for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                      let child = parent._tree.children[i];
                      if ((this.mode & IterMode.IncludeAnonymous) ||
                          child instanceof TreeBuffer ||
                          !child.type.isAnonymous ||
                          hasChild(child))
                          return false;
                  }
          }
          return true;
      }
      move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
              return true;
          for (;;) {
              if (this.sibling(dir))
                  return true;
              if (this.atLastNode(dir) || !this.parent())
                  return false;
          }
      }
      /// Move to the next node in a
      /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
      /// traversal, going from a node to its first child or, if the
      /// current node is empty or `enter` is false, its next sibling or
      /// the next sibling of the first parent node that has one.
      next(enter = true) { return this.move(1, enter); }
      /// Move to the next node in a last-to-first pre-order traveral. A
      /// node is followed by its last child or, if it has none, its
      /// previous sibling or the previous sibling of the first parent
      /// node that has one.
      prev(enter = true) { return this.move(-1, enter); }
      /// Move the cursor to the innermost node that covers `pos`. If
      /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      /// it will enter nodes that start at `pos`.
      moveTo(pos, side = 0) {
          // Move up to a node that actually holds the position, if possible
          while (this.from == this.to ||
              (side < 1 ? this.from >= pos : this.from > pos) ||
              (side > -1 ? this.to <= pos : this.to < pos))
              if (!this.parent())
                  break;
          // Then scan down into child nodes as far as possible
          while (this.enterChild(1, pos, side)) { }
          return this;
      }
      /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
      /// position.
      get node() {
          if (!this.buffer)
              return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
              scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                  for (let c = cache; c; c = c._parent)
                      if (c.index == index) {
                          if (index == this.index)
                              return c;
                          result = c;
                          depth = d + 1;
                          break scan;
                      }
                  index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
              result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /// Get the [tree](#common.Tree) that represents the current node, if
      /// any. Will return null when the node is in a [tree
      /// buffer](#common.TreeBuffer).
      get tree() {
          return this.buffer ? null : this._tree._tree;
      }
      /// Iterate over the current node and all its descendants, calling
      /// `enter` when entering a node and `leave`, if given, when leaving
      /// one. When `enter` returns `false`, any children of that node are
      /// skipped, and `leave` isn't called for it.
      iterate(enter, leave) {
          for (let depth = 0;;) {
              let mustLeave = false;
              if (this.type.isAnonymous || enter(this) !== false) {
                  if (this.firstChild()) {
                      depth++;
                      continue;
                  }
                  if (!this.type.isAnonymous)
                      mustLeave = true;
              }
              for (;;) {
                  if (mustLeave && leave)
                      leave(this);
                  mustLeave = this.type.isAnonymous;
                  if (this.nextSibling())
                      break;
                  if (!depth)
                      return;
                  this.parent();
                  depth--;
                  mustLeave = true;
              }
          }
      }
      /// Test whether the current node matches a given context—a sequence
      /// of direct parent node names. Empty strings in the context array
      /// are treated as wildcards.
      matchContext(context) {
          if (!this.buffer)
              return matchNodeContext(this.node, context);
          let { buffer } = this.buffer, { types } = buffer.set;
          for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
              if (d < 0)
                  return matchNodeContext(this.node, context, i);
              let type = types[buffer.buffer[this.stack[d]]];
              if (!type.isAnonymous) {
                  if (context[i] && context[i] != type.name)
                      return false;
                  i--;
              }
          }
          return true;
      }
  }
  function hasChild(tree) {
      return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
      var _a;
      let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
      let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
      let types = nodeSet.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children, positions, inRepeat) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead;
          while (size < 0) {
              cursor.next();
              if (size == -1 /* Reuse */) {
                  let node = reused[id];
                  children.push(node);
                  positions.push(start - parentStart);
                  return;
              }
              else if (size == -3 /* ContextChange */) { // Context change
                  contextHash = id;
                  return;
              }
              else if (size == -4 /* LookAhead */) {
                  lookAhead = id;
                  return;
              }
              else {
                  throw new RangeError(`Unrecognized record size: ${size}`);
              }
          }
          let type = types[id], node, buffer;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
              // Small enough for a buffer, and no reused nodes inside
              let data = new Uint16Array(buffer.size - buffer.skip);
              let endPos = cursor.pos - buffer.size, index = data.length;
              while (cursor.pos > endPos)
                  index = copyToBuffer(buffer.start, data, index);
              node = new TreeBuffer(data, end - buffer.start, nodeSet);
              startPos = buffer.start - parentStart;
          }
          else { // Make it a node
              let endPos = cursor.pos - size;
              cursor.next();
              let localChildren = [], localPositions = [];
              let localInRepeat = id >= minRepeatType ? id : -1;
              let lastGroup = 0, lastEnd = end;
              while (cursor.pos > endPos) {
                  if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                      if (cursor.end <= lastEnd - maxBufferLength) {
                          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                          lastGroup = localChildren.length;
                          lastEnd = cursor.end;
                      }
                      cursor.next();
                  }
                  else {
                      takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                  }
              }
              if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
              localChildren.reverse();
              localPositions.reverse();
              if (localInRepeat > -1 && lastGroup > 0) {
                  let make = makeBalanced(type);
                  node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
              }
              else {
                  node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
              }
          }
          children.push(node);
          positions.push(startPos);
      }
      function makeBalanced(type) {
          return (children, positions, length) => {
              let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
              if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                  if (!lastI && last.type == type && last.length == length)
                      return last;
                  if (lookAheadProp = last.prop(NodeProp.lookAhead))
                      lookAhead = positions[lastI] + last.length + lookAheadProp;
              }
              return makeTree(type, children, positions, length, lookAhead);
          };
      }
      function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
          let localChildren = [], localPositions = [];
          while (children.length > i) {
              localChildren.push(children.pop());
              localPositions.push(positions.pop() + base - from);
          }
          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
          positions.push(from - base);
      }
      function makeTree(type, children, positions, length, lookAhead = 0, props) {
          if (contextHash) {
              let pair = [NodeProp.contextHash, contextHash];
              props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead > 25) {
              let pair = [NodeProp.lookAhead, lookAhead];
              props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children, positions, length, props);
      }
      function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
              let nodeSize = fork.size;
              // Pretend nested repeat nodes of the same type don't exist
              if (fork.id == inRepeat && nodeSize >= 0) {
                  // Except that we store the current state as a valid return
                  // value.
                  result.size = size;
                  result.start = start;
                  result.skip = skip;
                  skip += 4;
                  size += 4;
                  fork.next();
                  continue;
              }
              let startPos = fork.pos - nodeSize;
              if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                  break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                  if (fork.size < 0) {
                      if (fork.size == -3 /* ContextChange */)
                          localSkipped += 4;
                      else
                          break scan;
                  }
                  else if (fork.id >= minRepeatType) {
                      localSkipped += 4;
                  }
                  fork.next();
              }
              start = nodeStart;
              size += nodeSize;
              skip += localSkipped;
          }
          if (inRepeat < 0 || size == maxSize) {
              result.size = size;
              result.start = start;
              result.skip = skip;
          }
          return result.size > 4 ? result : undefined;
      }
      function copyToBuffer(bufferStart, buffer, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
              let startIndex = index;
              if (size > 4) {
                  let endPos = cursor.pos - (size - 4);
                  while (cursor.pos > endPos)
                      index = copyToBuffer(bufferStart, buffer, index);
              }
              buffer[--index] = startIndex;
              buffer[--index] = end - bufferStart;
              buffer[--index] = start - bufferStart;
              buffer[--index] = id;
          }
          else if (size == -3 /* ContextChange */) {
              contextHash = id;
          }
          else if (size == -4 /* LookAhead */) {
              lookAhead = id;
          }
          return index;
      }
      let children = [], positions = [];
      while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
      let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
      return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap;
  function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
          size = 1;
          for (let child of node.children) {
              if (child.type != balanceType || !(child instanceof Tree)) {
                  size = 1;
                  break;
              }
              size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
      }
      return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType, 
  // The direct children and their positions
  children, positions, 
  // The index range in children/positions to use
  from, to, 
  // The start position of the nodes, relative to their parent.
  start, 
  // Length of the outer node
  length, 
  // Function to build the top node of the balanced tree
  mkTop, 
  // Function to build internal nodes for the balanced tree
  mkTree) {
      let total = 0;
      for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
      let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
      let localChildren = [], localPositions = [];
      function divide(children, positions, from, to, offset) {
          for (let i = from; i < to;) {
              let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
              i++;
              for (; i < to; i++) {
                  let nextSize = nodeSize(balanceType, children[i]);
                  if (groupSize + nextSize >= maxChild)
                      break;
                  groupSize += nextSize;
              }
              if (i == groupFrom + 1) {
                  if (groupSize > maxChild) {
                      let only = children[groupFrom]; // Only trees can have a size > 1
                      divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                      continue;
                  }
                  localChildren.push(children[groupFrom]);
              }
              else {
                  let length = positions[i - 1] + children[i - 1].length - groupStart;
                  localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
              }
              localPositions.push(groupStart + offset - start);
          }
      }
      divide(children, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
  }

  /// Tree fragments are used during [incremental
  /// parsing](#common.Parser.startParse) to track parts of old trees
  /// that can be reused in a new parse. An array of fragments is used
  /// to track regions of an old tree whose nodes might be reused in new
  /// parses. Use the static
  /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
  /// update fragments for document changes.
  class TreeFragment {
      /// Construct a tree fragment. You'll usually want to use
      /// [`addTree`](#common.TreeFragment^addTree) and
      /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      /// calling this directly.
      constructor(
      /// The start of the unchanged range pointed to by this fragment.
      /// This refers to an offset in the _updated_ document (as opposed
      /// to the original tree).
      from, 
      /// The end of the unchanged range.
      to, 
      /// The tree that this fragment is based on.
      tree, 
      /// The offset between the fragment's tree and the document that
      /// this fragment can be used against. Add this when going from
      /// document to tree positions, subtract it to go from tree to
      /// document positions.
      offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
      }
      /// Whether the start of the fragment represents the start of a
      /// parse, or the end of a change. (In the second case, it may not
      /// be safe to reuse some nodes at the start, depending on the
      /// parsing algorithm.)
      get openStart() { return (this.open & 1 /* Start */) > 0; }
      /// Whether the end of the fragment represents the end of a
      /// full-document parse, or the start of a change.
      get openEnd() { return (this.open & 2 /* End */) > 0; }
      /// Create a set of fragments from a freshly parsed tree, or update
      /// an existing set of fragments by replacing the ones that overlap
      /// with a tree with content from the new tree. When `partial` is
      /// true, the parse is treated as incomplete, and the resulting
      /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      /// true.
      static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
              if (f.to > tree.length)
                  result.push(f);
          return result;
      }
      /// Apply a set of edits to an array of fragments, removing or
      /// splitting fragments as necessary to remove edited ranges, and
      /// adjusting offsets for fragments that moved.
      static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
              return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0;; cI++) {
              let nextC = cI < changes.length ? changes[cI] : null;
              let nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap)
                  while (nextF && nextF.from < nextPos) {
                      let cut = nextF;
                      if (pos >= cut.from || nextPos <= cut.to || off) {
                          let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                      }
                      if (cut)
                          result.push(cut);
                      if (nextF.to > nextPos)
                          break;
                      nextF = fI < fragments.length ? fragments[fI++] : null;
                  }
              if (!nextC)
                  break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
          }
          return result;
      }
  }
  /// A superclass that parsers should extend.
  class Parser {
      /// Start a parse, returning a [partial parse](#common.PartialParse)
      /// object. [`fragments`](#common.TreeFragment) can be passed in to
      /// make the parse incremental.
      ///
      /// By default, the entire input is parsed. You can pass `ranges`,
      /// which should be a sorted array of non-empty, non-overlapping
      /// ranges, to parse only those ranges. The tree returned in that
      /// case will start at `ranges[0].from`.
      startParse(input, fragments, ranges) {
          if (typeof input == "string")
              input = new StringInput(input);
          ranges = !ranges ? [new Range$2(0, input.length)] : ranges.length ? ranges.map(r => new Range$2(r.from, r.to)) : [new Range$2(0, 0)];
          return this.createParse(input, fragments || [], ranges);
      }
      /// Run a full parse, returning the resulting tree.
      parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (;;) {
              let done = parse.advance();
              if (done)
                  return done;
          }
      }
  }
  class StringInput {
      constructor(string) {
          this.string = string;
      }
      get length() { return this.string.length; }
      chunk(from) { return this.string.slice(from); }
      get lineChunks() { return false; }
      read(from, to) { return this.string.slice(from, to); }
  }
  new NodeProp({ perNode: true });

  /// A parse stack. These are used internally by the parser to track
  /// parsing progress. They also provide some properties and methods
  /// that external code such as a tokenizer can use to get information
  /// about the parse state.
  class Stack {
      /// @internal
      constructor(
      /// The parse that this stack is part of @internal
      p, 
      /// Holds state, input pos, buffer index triplets for all but the
      /// top state @internal
      stack, 
      /// The current parse state @internal
      state, 
      // The position at which the next reduce should take place. This
      // can be less than `this.pos` when skipped expressions have been
      // added to the stack (which should be moved outside of the next
      // reduction)
      /// @internal
      reducePos, 
      /// The input position up to which this stack has parsed.
      pos, 
      /// The dynamic score of the stack, including dynamic precedence
      /// and error-recovery penalties
      /// @internal
      score, 
      // The output buffer. Holds (type, start, end, size) quads
      // representing nodes created by the parser, where `size` is
      // amount of buffer array entries covered by this node.
      /// @internal
      buffer, 
      // The base offset of the buffer. When stacks are split, the split
      // instance shared the buffer history with its parent up to
      // `bufferBase`, which is the absolute offset (including the
      // offset of previous splits) into the buffer at which this stack
      // starts writing.
      /// @internal
      bufferBase, 
      /// @internal
      curContext, 
      /// @internal
      lookAhead = 0, 
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /// @internal
      parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
      }
      /// @internal
      toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /// @internal
      static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
      /// The stack's current [context](#lr.ContextTracker) value, if
      /// any. Its type will depend on the context tracker's type
      /// parameter, or it will be `null` if there is no context
      /// tracker.
      get context() { return this.curContext ? this.curContext.context : null; }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /// @internal
      pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
      }
      // Apply a reduce action
      /// @internal
      reduce(action) {
          let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
          let { parser } = this.p;
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
              this.score += dPrec;
          if (depth == 0) {
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm)
                  this.storeNode(type, this.reducePos, this.reducePos, 4, true);
              this.reduceContext(type, this.reducePos);
              return;
          }
          // Find the base index into `this.stack`, content after which will
          // be dropped. Note that with `StayFlag` reductions we need to
          // consume two extra frames (the dummy parent node for the skipped
          // expression and the state that we'll be staying in, which should
          // be moved to `this.state`).
          let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
          let start = this.stack[base - 2];
          let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
          // Store normal terms or `R -> R R` repeat reductions
          if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
              let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144 /* StayFlag */) {
              this.state = this.stack[base];
          }
          else {
              let baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
              this.stack.pop();
          this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /// @internal
      storeNode(term, start, end, size = 4, isReduce = false) {
          if (term == 0 /* Err */ &&
              (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
              // Try to omit/merge adjacent error nodes
              let cur = this, top = this.buffer.length;
              if (top == 0 && cur.parent) {
                  top = cur.bufferBase - cur.parent.bufferBase;
                  cur = cur.parent;
              }
              if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                  if (start == end)
                      return;
                  if (cur.buffer[top - 2] >= start) {
                      cur.buffer[top - 2] = end;
                      return;
                  }
              }
          }
          if (!isReduce || this.pos == end) { // Simple case, just append
              this.buffer.push(term, start, end, size);
          }
          else { // There may be skipped nodes that have to be moved forward
              let index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                  while (index > 0 && this.buffer[index - 2] > end) {
                      // Move this record forward
                      this.buffer[index] = this.buffer[index - 4];
                      this.buffer[index + 1] = this.buffer[index - 3];
                      this.buffer[index + 2] = this.buffer[index - 2];
                      this.buffer[index + 3] = this.buffer[index - 1];
                      index -= 4;
                      if (size > 4)
                          size -= 4;
                  }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
          }
      }
      // Apply a shift action
      /// @internal
      shift(action, next, nextEnd) {
          let start = this.pos;
          if (action & 131072 /* GotoFlag */) {
              this.pushState(action & 65535 /* ValueMask */, this.pos);
          }
          else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
              let nextState = action, { parser } = this.p;
              if (nextEnd > this.pos || next <= parser.maxNode) {
                  this.pos = nextEnd;
                  if (!parser.stateFlag(nextState, 1 /* Skipped */))
                      this.reducePos = nextEnd;
              }
              this.pushState(nextState, start);
              this.shiftContext(next, start);
              if (next <= parser.maxNode)
                  this.buffer.push(next, start, nextEnd, 4);
          }
          else { // Shift-and-stay, which means this is a skipped token
              this.pos = nextEnd;
              this.shiftContext(next, start);
              if (next <= this.p.parser.maxNode)
                  this.buffer.push(next, start, nextEnd, 4);
          }
      }
      // Apply an action
      /// @internal
      apply(action, next, nextEnd) {
          if (action & 65536 /* ReduceFlag */)
              this.reduce(action);
          else
              this.shift(action, next, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /// @internal
      useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /// @internal
      split() {
          let parent = this;
          let off = parent.buffer.length;
          // Because the top of the buffer (after this.pos) may be mutated
          // to reorder reductions and skipped tokens, and shared buffers
          // should be immutable, this copies any outstanding skipped tokens
          // to the new buffer, and puts the base pointer before them.
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
              off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          // Make sure parent points to an actual parent with content, if there is such a parent.
          while (parent && base == parent.bufferBase)
              parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /// @internal
      recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
              this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190 /* Delete */;
      }
      /// Check if the given term would be able to be shifted (optionally
      /// after some reductions) on this stack. This can be useful for
      /// external tokenizers that want to make sure they only provide a
      /// given token when it applies.
      canShift(term) {
          for (let sim = new SimulatedStack(this);;) {
              let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
              if (action == 0)
                  return false;
              if ((action & 65536 /* ReduceFlag */) == 0)
                  return true;
              sim.reduce(action);
          }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /// @internal
      recoverByInsert(next) {
          if (this.stack.length >= 300 /* MaxInsertStackDepth */)
              return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
              let best = [];
              for (let i = 0, s; i < nextStates.length; i += 2) {
                  if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                      best.push(nextStates[i], s);
              }
              if (this.stack.length < 120 /* DampenInsertStackDepth */)
                  for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                      let s = nextStates[i + 1];
                      if (!best.some((v, i) => (i & 1) && v == s))
                          best.push(nextStates[i], s);
                  }
              nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
              let s = nextStates[i + 1];
              if (s == this.state)
                  continue;
              let stack = this.split();
              stack.pushState(s, this.pos);
              stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
              stack.shiftContext(nextStates[i], this.pos);
              stack.score -= 200 /* Insert */;
              result.push(stack);
          }
          return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /// @internal
      forceReduce() {
          let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
          if ((reduce & 65536 /* ReduceFlag */) == 0)
              return false;
          let { parser } = this.p;
          if (!parser.validAction(this.state, reduce)) {
              let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;
              let target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
                  return false;
              this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
              this.score -= 100 /* Reduce */;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
      }
      /// @internal
      forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {
              if (!this.forceReduce()) {
                  this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);
                  break;
              }
          }
          return this;
      }
      /// Check whether this state has no further actions (assumed to be a direct descendant of the
      /// top state, since any other states must be able to continue
      /// somehow). @internal
      get deadEnd() {
          if (this.stack.length != 3)
              return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
              !parser.stateSlot(this.state, 4 /* DefaultReduce */);
      }
      /// Restart the stack (put it back in its start state). Only safe
      /// when this.stack.length == 3 (state is directly below the top
      /// state). @internal
      restart() {
          this.state = this.stack[0];
          this.stack.length = 0;
      }
      /// @internal
      sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
              return false;
          for (let i = 0; i < this.stack.length; i += 3)
              if (this.stack[i] != other.stack[i])
                  return false;
          return true;
      }
      /// Get the parser used by this stack.
      get parser() { return this.p.parser; }
      /// Test whether a given dialect (by numeric ID, as exported from
      /// the terms file) is enabled.
      dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
      shiftContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      reduceContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /// @internal
      emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
              this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
      }
      /// @internal
      emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
              this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
      }
      updateContext(context) {
          if (context != this.curContext.context) {
              let newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash)
                  this.emitContext();
              this.curContext = newCx;
          }
      }
      /// @internal
      setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
          }
      }
      /// @internal
      close() {
          if (this.curContext && this.curContext.tracker.strict)
              this.emitContext();
          if (this.lookAhead > 0)
              this.emitLookAhead();
      }
  }
  class StackContext {
      constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
  }
  var Recover;
  (function (Recover) {
      Recover[Recover["Insert"] = 200] = "Insert";
      Recover[Recover["Delete"] = 190] = "Delete";
      Recover[Recover["Reduce"] = 100] = "Reduce";
      Recover[Recover["MaxNext"] = 4] = "MaxNext";
      Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
      Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
  })(Recover || (Recover = {}));
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
      constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
      }
      reduce(action) {
          let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
          if (depth == 0) {
              if (this.stack == this.start.stack)
                  this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
          }
          else {
              this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
      }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
      constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
              this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
          }
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
              this.maybeNext();
      }
      fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
      }
  }

  class CachedToken {
      constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
      }
  }
  const nullToken = new CachedToken;
  /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
  /// through this interface. It presents the input as a stream of
  /// characters, tracking lookahead and hiding the complexity of
  /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
  class InputStream {
      /// @internal
      constructor(
      /// @internal
      input, 
      /// @internal
      ranges) {
          this.input = input;
          this.ranges = ranges;
          /// @internal
          this.chunk = "";
          /// @internal
          this.chunkOff = 0;
          /// Backup chunk
          this.chunk2 = "";
          this.chunk2Pos = 0;
          /// The character code of the next code unit in the input, or -1
          /// when the stream is at the end of the input.
          this.next = -1;
          /// @internal
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
      }
      /// @internal
      resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
              if (!index)
                  return null;
              let next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1)
                  return null;
              let next = this.ranges[++index];
              pos += next.from - range.to;
              range = next;
          }
          return pos;
      }
      /// @internal
      clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
              return pos;
          for (let range of this.ranges)
              if (range.to > pos)
                  return Math.max(pos, range.from);
          return this.end;
      }
      /// Look at a code unit near the stream position. `.peek(0)` equals
      /// `.next`, `.peek(-1)` gives you the previous character, and so
      /// on.
      ///
      /// Note that looking around during tokenizing creates dependencies
      /// on potentially far-away content, which may reduce the
      /// effectiveness incremental parsing—when looking forward—or even
      /// cause invalid reparses when looking backward more than 25 code
      /// units, since the library does not track lookbehind.
      peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
          }
          else {
              let resolved = this.resolveOffset(offset, 1);
              if (resolved == null)
                  return -1;
              pos = resolved;
              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                  result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              }
              else {
                  let i = this.rangeIndex, range = this.range;
                  while (range.to <= pos)
                      range = this.ranges[++i];
                  this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                  if (pos + this.chunk2.length > range.to)
                      this.chunk2 = this.chunk2.slice(0, range.to - pos);
                  result = this.chunk2.charCodeAt(0);
              }
          }
          if (pos >= this.token.lookAhead)
              this.token.lookAhead = pos + 1;
          return result;
      }
      /// Accept a token. By default, the end of the token is set to the
      /// current stream position, but you can pass an offset (relative to
      /// the stream position) to change that.
      acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
              throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
      }
      getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              let { chunk, chunkPos } = this;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
          }
          else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              let nextChunk = this.input.chunk(this.pos);
              let end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
          }
      }
      readNext() {
          if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length)
                  return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /// Move the stream forward N (defaults to 1) code units. Returns
      /// the new value of [`next`](#lr.InputStream.next).
      advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1)
                  return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
              this.token.lookAhead = this.pos + 1;
          return this.readNext();
      }
      setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
      }
      /// @internal
      reset(pos, token) {
          if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
          }
          else {
              this.token = nullToken;
          }
          if (this.pos != pos) {
              this.pos = pos;
              if (pos == this.end) {
                  this.setDone();
                  return this;
              }
              while (pos < this.range.from)
                  this.range = this.ranges[--this.rangeIndex];
              while (pos >= this.range.to)
                  this.range = this.ranges[++this.rangeIndex];
              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                  this.chunkOff = pos - this.chunkPos;
              }
              else {
                  this.chunk = "";
                  this.chunkOff = 0;
              }
              this.readNext();
          }
          return this;
      }
      /// @internal
      read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
          if (from >= this.range.from && to <= this.range.to)
              return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
              if (r.from >= to)
                  break;
              if (r.to > from)
                  result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
      }
  }
  /// @internal
  class TokenGroup {
      constructor(data, id) {
          this.data = data;
          this.id = id;
      }
      token(input, stack) { readToken(this.data, input, stack, this.id); }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /// `@external tokens` declarations in the grammar should resolve to
  /// an instance of this class.
  class ExternalTokenizer {
      /// Create a tokenizer. The first argument is the function that,
      /// given an input stream, scans for the types of tokens it
      /// recognizes at the stream's position, and calls
      /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
      /// one.
      constructor(
      /// @internal
      token, options = {}) {
          this.token = token;
          this.contextual = !!options.contextual;
          this.fallback = !!options.fallback;
          this.extend = !!options.extend;
      }
  }
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group) {
      let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
      scan: for (;;) {
          if ((groupMask & data[state]) == 0)
              break;
          let accEnd = data[state + 1];
          // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens
          for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                  let term = data[i];
                  if (dialect.allows(term) &&
                      (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                      input.acceptToken(term);
                      break;
                  }
              }
          let next = input.next, low = 0, high = data[state + 2];
          // Special case for EOF
          if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */ && data[accEnd + high * 3 - 3] == 65535 /* End */) {
              state = data[accEnd + high * 3 - 1];
              continue scan;
          }
          // Do a binary search on the state's edges
          for (; low < high;) {
              let mid = (low + high) >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1] || 0x10000;
              if (next < from)
                  high = mid;
              else if (next >= to)
                  low = mid + 1;
              else {
                  state = data[index + 2];
                  input.advance();
                  continue scan;
              }
          }
          break;
      }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
      if (typeof input != "string")
          return input;
      let array = null;
      for (let pos = 0, out = 0; pos < input.length;) {
          let value = 0;
          for (;;) {
              let next = input.charCodeAt(pos++), stop = false;
              if (next == 126 /* BigValCode */) {
                  value = 65535 /* BigVal */;
                  break;
              }
              if (next >= 92 /* Gap2 */)
                  next--;
              if (next >= 34 /* Gap1 */)
                  next--;
              let digit = next - 32 /* Start */;
              if (digit >= 46 /* Base */) {
                  digit -= 46 /* Base */;
                  stop = true;
              }
              value += digit;
              if (stop)
                  break;
              value *= 46 /* Base */;
          }
          if (array)
              array[out++] = value;
          else
              array = new Type(value);
      }
      return array;
  }

  // Environment variable used to control console output
  const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  let stackIDs = null;
  var Safety;
  (function (Safety) {
      Safety[Safety["Margin"] = 25] = "Margin";
  })(Safety || (Safety = {}));
  function cutAt(tree, pos, side) {
      let cursor = tree.cursor(IterMode.IncludeAnonymous);
      cursor.moveTo(pos);
      for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
              for (;;) {
                  if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                      return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))
                          : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
                  if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                      break;
                  if (!cursor.parent())
                      return side < 0 ? 0 : tree.length;
              }
      }
  }
  class FragmentCursor {
      constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
      }
      nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
              while (this.trees.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
              }
              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
          }
          else {
              this.nextStart = 1e9;
          }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
          if (pos < this.nextStart)
              return null;
          while (this.fragment && this.safeTo <= pos)
              this.nextFragment();
          if (!this.fragment)
              return null;
          for (;;) {
              let last = this.trees.length - 1;
              if (last < 0) { // End of tree
                  this.nextFragment();
                  return null;
              }
              let top = this.trees[last], index = this.index[last];
              if (index == top.children.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
                  continue;
              }
              let next = top.children[index];
              let start = this.start[last] + top.positions[index];
              if (start > pos) {
                  this.nextStart = start;
                  return null;
              }
              if (next instanceof Tree) {
                  if (start == pos) {
                      if (start < this.safeFrom)
                          return null;
                      let end = start + next.length;
                      if (end <= this.safeTo) {
                          let lookAhead = next.prop(NodeProp.lookAhead);
                          if (!lookAhead || end + lookAhead < this.fragment.to)
                              return next;
                      }
                  }
                  this.index[last]++;
                  if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                      this.trees.push(next);
                      this.start.push(start);
                      this.index.push(0);
                  }
              }
              else {
                  this.index[last]++;
                  this.nextStart = start + next.length;
              }
          }
      }
  }
  class TokenCache {
      constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(_ => new CachedToken);
      }
      getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
              if (((1 << i) & mask) == 0)
                  continue;
              let tokenizer = tokenizers[i], token = this.tokens[i];
              if (main && !tokenizer.fallback)
                  continue;
              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                  this.updateCachedToken(token, tokenizer, stack);
                  token.mask = mask;
                  token.context = context;
              }
              if (token.lookAhead > token.end + 25 /* Margin */)
                  lookAhead = Math.max(token.lookAhead, lookAhead);
              if (token.value != 0 /* Err */) {
                  let startIndex = actionIndex;
                  if (token.extended > -1)
                      actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                  actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                  if (!tokenizer.extend) {
                      main = token;
                      if (actionIndex > startIndex)
                          break;
                  }
              }
          }
          while (this.actions.length > actionIndex)
              this.actions.pop();
          if (lookAhead)
              stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
              main = new CachedToken;
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
      }
      getMainToken(stack) {
          if (this.mainToken)
              return this.mainToken;
          let main = new CachedToken, { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
          return main;
      }
      updateCachedToken(token, tokenizer, stack) {
          let start = this.stream.clipPos(stack.pos);
          tokenizer.token(this.stream.reset(start, token), stack);
          if (token.value > -1) {
              let { parser } = stack.p;
              for (let i = 0; i < parser.specialized.length; i++)
                  if (parser.specialized[i] == token.value) {
                      let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                      if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                          if ((result & 1) == 0 /* Specialize */)
                              token.value = result >> 1;
                          else
                              token.extended = result >> 1;
                          break;
                      }
                  }
          }
          else {
              token.value = 0 /* Err */;
              token.end = this.stream.clipPos(start + 1);
          }
      }
      putAction(action, token, end, index) {
          // Don't add duplicate actions
          for (let i = 0; i < index; i += 3)
              if (this.actions[i] == action)
                  return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
      }
      addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
              for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                  if (data[i] == 65535 /* End */) {
                      if (data[i + 1] == 1 /* Next */) {
                          i = pair(data, i + 2);
                      }
                      else {
                          if (index == 0 && data[i + 1] == 2 /* Other */)
                              index = this.putAction(pair(data, i + 2), token, end, index);
                          break;
                      }
                  }
                  if (data[i] == token)
                      index = this.putAction(pair(data, i + 1), token, end, index);
              }
          }
          return index;
      }
  }
  var Rec;
  (function (Rec) {
      Rec[Rec["Distance"] = 5] = "Distance";
      Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
      // When two stacks have been running independently long enough to
      // add this many elements to their buffers, prune one.
      Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
      Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
      // Once a stack reaches this depth (in .stack.length) force-reduce
      // it back to CutTo to avoid creating trees that overflow the stack
      // on recursive traversal.
      Rec[Rec["CutDepth"] = 15000] = "CutDepth";
      Rec[Rec["CutTo"] = 9000] = "CutTo";
  })(Rec || (Rec = {}));
  class Parse {
      constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
              ? new FragmentCursor(fragments, parser.nodeSet) : null;
      }
      get parsedPos() {
          return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          // This will hold stacks beyond `pos`.
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          // Keep advancing any stacks at `pos` until they either move
          // forward or can't be advanced. Gather stacks that can't be
          // advanced further in `stopped`.
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i];
              for (;;) {
                  this.tokens.mainToken = null;
                  if (stack.pos > pos) {
                      newStacks.push(stack);
                  }
                  else if (this.advanceStack(stack, newStacks, stacks)) {
                      continue;
                  }
                  else {
                      if (!stopped) {
                          stopped = [];
                          stoppedTokens = [];
                      }
                      stopped.push(stack);
                      let tok = this.tokens.getMainToken(stack);
                      stoppedTokens.push(tok.value, tok.end);
                  }
                  break;
              }
          }
          if (!newStacks.length) {
              let finished = stopped && findFinished(stopped);
              if (finished)
                  return this.stackToTree(finished);
              if (this.parser.strict) {
                  if (verbose && stopped)
                      console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                  throw new SyntaxError("No parse at " + pos);
              }
              if (!this.recovering)
                  this.recovering = 5 /* Distance */;
          }
          if (this.recovering && stopped) {
              let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                  : this.runRecovery(stopped, stoppedTokens, newStacks);
              if (finished)
                  return this.stackToTree(finished.forceAll());
          }
          if (this.recovering) {
              let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
              if (newStacks.length > maxRemaining) {
                  newStacks.sort((a, b) => b.score - a.score);
                  while (newStacks.length > maxRemaining)
                      newStacks.pop();
              }
              if (newStacks.some(s => s.reducePos > pos))
                  this.recovering--;
          }
          else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (let i = 0; i < newStacks.length - 1; i++) {
                  let stack = newStacks[i];
                  for (let j = i + 1; j < newStacks.length; j++) {
                      let other = newStacks[j];
                      if (stack.sameState(other) ||
                          stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {
                          if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                              newStacks.splice(j--, 1);
                          }
                          else {
                              newStacks.splice(i--, 1);
                              continue outer;
                          }
                      }
                  }
              }
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
              if (newStacks[i].pos < this.minStackPos)
                  this.minStackPos = newStacks[i].pos;
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
              return stack.forceReduce() ? stack : null;
          if (this.fragments) {
              let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
              for (let cached = this.fragments.nodeAt(start); cached;) {
                  let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                  if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                      stack.useNode(cached, match);
                      if (verbose)
                          console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                      return true;
                  }
                  if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                      break;
                  let inner = cached.children[0];
                  if (inner instanceof Tree && cached.positions[0] == 0)
                      cached = inner;
                  else
                      break;
              }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
          if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose)
                  console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
              return true;
          }
          if (stack.stack.length >= 15000 /* CutDepth */) {
              while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length;) {
              let action = actions[i++], term = actions[i++], end = actions[i++];
              let last = i == actions.length || !split;
              let localStack = last ? stack : stack.split();
              localStack.apply(action, term, end);
              if (verbose)
                  console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
              if (last)
                  return true;
              else if (localStack.pos > start)
                  stacks.push(localStack);
              else
                  split.push(localStack);
          }
          return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (;;) {
              if (!this.advanceStack(stack, null, null))
                  return false;
              if (stack.pos > pos) {
                  pushStackDedup(stack, newStacks);
                  return true;
              }
          }
      }
      runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
              let base = verbose ? this.stackID(stack) + " -> " : "";
              if (stack.deadEnd) {
                  if (restarted)
                      continue;
                  restarted = true;
                  stack.restart();
                  if (verbose)
                      console.log(base + this.stackID(stack) + " (restarted)");
                  let done = this.advanceFully(stack, newStacks);
                  if (done)
                      continue;
              }
              let force = stack.split(), forceBase = base;
              for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                  if (verbose)
                      console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                  let done = this.advanceFully(force, newStacks);
                  if (done)
                      break;
                  if (verbose)
                      forceBase = this.stackID(force) + " -> ";
              }
              for (let insert of stack.recoverByInsert(token)) {
                  if (verbose)
                      console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
              }
              if (this.stream.end > stack.pos) {
                  if (tokenEnd == stack.pos) {
                      tokenEnd++;
                      token = 0 /* Err */;
                  }
                  stack.recoverByDelete(token, tokenEnd);
                  if (verbose)
                      console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                  pushStackDedup(stack, newStacks);
              }
              else if (!finished || finished.score < stack.score) {
                  finished = stack;
              }
          }
          return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
          stack.close();
          return Tree.build({ buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm });
      }
      stackID(stack) {
          let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
          if (!id)
              stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
          return id + stack;
      }
  }
  function pushStackDedup(stack, newStacks) {
      for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
              if (newStacks[i].score < stack.score)
                  newStacks[i] = stack;
              return;
          }
      }
      newStacks.push(stack);
  }
  class Dialect {
      constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
      }
      allows(term) { return !this.disabled || this.disabled[term] == 0; }
  }
  const id = x => x;
  /// Context trackers are used to track stateful context (such as
  /// indentation in the Python grammar, or parent elements in the XML
  /// grammar) needed by external tokenizers. You declare them in a
  /// grammar file as `@context exportName from "module"`.
  ///
  /// Context values should be immutable, and can be updated (replaced)
  /// on shift or reduce actions.
  ///
  /// The export used in a `@context` declaration should be of this
  /// type.
  class ContextTracker {
      /// Define a context tracker.
      constructor(spec) {
          this.start = spec.start;
          this.shift = spec.shift || id;
          this.reduce = spec.reduce || id;
          this.reuse = spec.reuse || id;
          this.hash = spec.hash || (() => 0);
          this.strict = spec.strict !== false;
      }
  }
  /// Holds the parse tables for a given grammar, as generated by
  /// `lezer-generator`, and provides [methods](#common.Parser) to parse
  /// content with.
  class LRParser extends Parser {
      /// @internal
      constructor(spec) {
          super();
          /// @internal
          this.wrappers = [];
          if (spec.version != 14 /* Version */)
              throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
              nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
              nodeProps.push([]);
          function setProp(nodeID, prop, value) {
              nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
              for (let propSpec of spec.nodeProps) {
                  let prop = propSpec[0];
                  if (typeof prop == "string")
                      prop = NodeProp[prop];
                  for (let i = 1; i < propSpec.length;) {
                      let next = propSpec[i++];
                      if (next >= 0) {
                          setProp(next, prop, propSpec[i++]);
                      }
                      else {
                          let value = propSpec[i + -next];
                          for (let j = -next; j > 0; j--)
                              setProp(propSpec[i++], prop, value);
                          i++;
                      }
                  }
              }
          this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
              name: i >= this.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
              this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
              this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /// Get a goto table entry @internal
      getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
              return -1;
          for (let pos = table[term + 1];;) {
              let groupTag = table[pos++], last = groupTag & 1;
              let target = table[pos++];
              if (last && loose)
                  return target;
              for (let end = pos + (groupTag >> 1); pos < end; pos++)
                  if (table[pos] == state)
                      return target;
              if (last)
                  return -1;
          }
      }
      /// Check if this state has an action for a given terminal @internal
      hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
              for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                  if ((next = data[i]) == 65535 /* End */) {
                      if (data[i + 1] == 1 /* Next */)
                          next = data[i = pair(data, i + 2)];
                      else if (data[i + 1] == 2 /* Other */)
                          return pair(data, i + 2);
                      else
                          break;
                  }
                  if (next == terminal || next == 0 /* Err */)
                      return pair(data, i + 1);
              }
          }
          return 0;
      }
      /// @internal
      stateSlot(state, slot) {
          return this.states[(state * 6 /* Size */) + slot];
      }
      /// @internal
      stateFlag(state, flag) {
          return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
      }
      /// @internal
      validAction(state, action) {
          if (action == this.stateSlot(state, 4 /* DefaultReduce */))
              return true;
          for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
              if (this.data[i] == 65535 /* End */) {
                  if (this.data[i + 1] == 1 /* Next */)
                      i = pair(this.data, i + 2);
                  else
                      return false;
              }
              if (action == pair(this.data, i + 1))
                  return true;
          }
      }
      /// Get the states that can follow this one through shift actions or
      /// goto jumps. @internal
      nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
              if (this.data[i] == 65535 /* End */) {
                  if (this.data[i + 1] == 1 /* Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                  let value = this.data[i + 1];
                  if (!result.some((v, i) => (i & 1) && v == value))
                      result.push(this.data[i], value);
              }
          }
          return result;
      }
      /// @internal
      overrides(token, prev) {
          let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
          return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
      }
      /// Configure the parser. Returns a new parser instance that has the
      /// given settings modified. Settings not provided in `config` are
      /// kept from the original parser.
      configure(config) {
          // Hideous reflection-based kludge to make it easy to create a
          // slightly modified copy of a parser.
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
              copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
              let info = this.topRules[config.top];
              if (!info)
                  throw new RangeError(`Invalid top rule name ${config.top}`);
              copy.top = info;
          }
          if (config.tokenizers)
              copy.tokenizers = this.tokenizers.map(t => {
                  let found = config.tokenizers.find(r => r.from == t);
                  return found ? found.to : t;
              });
          if (config.specializers) {
              copy.specializers = this.specializers.slice();
              copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                  let found = config.specializers.find(r => r.from == s.external);
                  if (!found)
                      return s;
                  let spec = Object.assign(Object.assign({}, s), { external: found.to });
                  copy.specializers[i] = getSpecializer(spec);
                  return spec;
              });
          }
          if (config.contextTracker)
              copy.context = config.contextTracker;
          if (config.dialect)
              copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
              copy.strict = config.strict;
          if (config.wrap)
              copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
              copy.bufferLength = config.bufferLength;
          return copy;
      }
      /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      /// are registered for this parser.
      hasWrappers() {
          return this.wrappers.length > 0;
      }
      /// Returns the name associated with a given term. This will only
      /// work for all terms when the parser was generated with the
      /// `--names` option. By default, only the names of tagged terms are
      /// stored.
      getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /// The eof term id is always allocated directly after the node
      /// types. @internal
      get eofTerm() { return this.maxNode + 1; }
      /// The type of top node produced by the parser.
      get topNode() { return this.nodeSet.types[this.top[1]]; }
      /// @internal
      dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
      }
      /// @internal
      parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
              for (let part of dialect.split(" ")) {
                  let id = values.indexOf(part);
                  if (id >= 0)
                      flags[id] = true;
              }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
              if (!flags[i]) {
                  for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                      (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
              }
          return new Dialect(dialect, flags, disabled);
      }
      /// Used by the output of the parser generator. Not available to
      /// user code.
      static deserialize(spec) {
          return new LRParser(spec);
      }
  }
  function pair(data, off) { return data[off] | (data[off + 1] << 16); }
  function findOffset(data, start, term) {
      for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
          if (next == term)
              return i - start;
      return -1;
  }
  function findFinished(stacks) {
      let best = null;
      for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
              stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
              (!best || best.score < stack.score))
              best = stack;
      }
      return best;
  }
  function getSpecializer(spec) {
      if (spec.external) {
          let mask = spec.extend ? 1 /* Extend */ : 0 /* Specialize */;
          return (value, stack) => (spec.external(value, stack) << 1) | mask;
      }
      return spec.get;
  }

  let nextTagID = 0;
  /// Highlighting tags are markers that denote a highlighting category.
  /// They are [associated](#highlight.styleTags) with parts of a syntax
  /// tree by a language mode, and then mapped to an actual CSS style by
  /// a [highlighter](#highlight.Highlighter).
  ///
  /// Because syntax tree node types and highlight styles have to be
  /// able to talk the same language, CodeMirror uses a mostly _closed_
  /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
  /// traditional open string-based systems, which make it hard for
  /// highlighting themes to cover all the tokens produced by the
  /// various languages).
  ///
  /// It _is_ possible to [define](#highlight.Tag^define) your own
  /// highlighting tags for system-internal use (where you control both
  /// the language package and the highlighter), but such tags will not
  /// be picked up by regular highlighters (though you can derive them
  /// from standard tags to allow highlighters to fall back to those).
  class Tag {
      /// @internal
      constructor(
      /// The set of this tag and all its parent tags, starting with
      /// this one itself and sorted in order of decreasing specificity.
      set, 
      /// The base unmodified tag that this one is based on, if it's
      /// modified @internal
      base, 
      /// The modifiers applied to this.base @internal
      modified) {
          this.set = set;
          this.base = base;
          this.modified = modified;
          /// @internal
          this.id = nextTagID++;
      }
      /// Define a new tag. If `parent` is given, the tag is treated as a
      /// sub-tag of that parent, and
      /// [highlighters](#highlight.tagHighlighter) that don't mention
      /// this tag will try to fall back to the parent tag (or grandparent
      /// tag, etc).
      static define(parent) {
          if (parent === null || parent === void 0 ? void 0 : parent.base)
              throw new Error("Can not derive from a modified tag");
          let tag = new Tag([], null, []);
          tag.set.push(tag);
          if (parent)
              for (let t of parent.set)
                  tag.set.push(t);
          return tag;
      }
      /// Define a tag _modifier_, which is a function that, given a tag,
      /// will return a tag that is a subtag of the original. Applying the
      /// same modifier to a twice tag will return the same value (`m1(t1)
      /// == m1(t1)`) and applying multiple modifiers will, regardless or
      /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      ///
      /// When multiple modifiers are applied to a given base tag, each
      /// smaller set of modifiers is registered as a parent, so that for
      /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      /// `m1(m3(t1)`, and so on.
      static defineModifier() {
          let mod = new Modifier;
          return (tag) => {
              if (tag.modified.indexOf(mod) > -1)
                  return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
      }
  }
  let nextModifierID = 0;
  class Modifier {
      constructor() {
          this.instances = [];
          this.id = nextModifierID++;
      }
      static get(base, mods) {
          if (!mods.length)
              return base;
          let exists = mods[0].instances.find(t => t.base == base && sameArray$1(mods, t.modified));
          if (exists)
              return exists;
          let set = [], tag = new Tag(set, base, mods);
          for (let m of mods)
              m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base.set)
              if (!parent.modified.length)
                  for (let config of configs)
                      set.push(Modifier.get(parent, config));
          return tag;
      }
  }
  function sameArray$1(a, b) {
      return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
      let sets = [[]];
      for (let i = 0; i < array.length; i++) {
          for (let j = 0, e = sets.length; j < e; j++) {
              sets.push(sets[j].concat(array[i]));
          }
      }
      return sets.sort((a, b) => b.length - a.length);
  }
  /// This function is used to add a set of tags to a language syntax
  /// via [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.LRParser.configure).
  ///
  /// The argument object maps node selectors to [highlighting
  /// tags](#highlight.Tag) or arrays of tags.
  ///
  /// Node selectors may hold one or more (space-separated) node paths.
  /// Such a path can be a [node name](#common.NodeType.name), or
  /// multiple node names (or `*` wildcards) separated by slash
  /// characters, as in `"Block/Declaration/VariableName"`. Such a path
  /// matches the final node but only if its direct parent nodes are the
  /// other nodes mentioned. A `*` in such a path matches any parent,
  /// but only a single level—wildcards that match multiple parents
  /// aren't supported, both for efficiency reasons and because Lezer
  /// trees make it rather hard to reason about what they would match.)
  ///
  /// A path can be ended with `/...` to indicate that the tag assigned
  /// to the node should also apply to all child nodes, even if they
  /// match their own style (by default, only the innermost style is
  /// used).
  ///
  /// When a path ends in `!`, as in `Attribute!`, no further matching
  /// happens for the node's child nodes, and the entire node gets the
  /// given style.
  ///
  /// In this notation, node names that contain `/`, `!`, `*`, or `...`
  /// must be quoted as JSON strings.
  ///
  /// For example:
  ///
  /// ```javascript
  /// parser.withProps(
  ///   styleTags({
  ///     // Style Number and BigNumber nodes
  ///     "Number BigNumber": tags.number,
  ///     // Style Escape nodes whose parent is String
  ///     "String/Escape": tags.escape,
  ///     // Style anything inside Attributes nodes
  ///     "Attributes!": tags.meta,
  ///     // Add a style to all content inside Italic nodes
  ///     "Italic/...": tags.emphasis,
  ///     // Style InvalidString nodes as both `string` and `invalid`
  ///     "InvalidString": [tags.string, tags.invalid],
  ///     // Style the node named "/" as punctuation
  ///     '"/"': tags.punctuation
  ///   })
  /// )
  /// ```
  function styleTags(spec) {
      let byName = Object.create(null);
      for (let prop in spec) {
          let tags = spec[prop];
          if (!Array.isArray(tags))
              tags = [tags];
          for (let part of prop.split(" "))
              if (part) {
                  let pieces = [], mode = 2 /* Normal */, rest = part;
                  for (let pos = 0;;) {
                      if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                          mode = 1 /* Inherit */;
                          break;
                      }
                      let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                      if (!m)
                          throw new RangeError("Invalid path: " + part);
                      pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                      pos += m[0].length;
                      if (pos == part.length)
                          break;
                      let next = part[pos++];
                      if (pos == part.length && next == "!") {
                          mode = 0 /* Opaque */;
                          break;
                      }
                      if (next != "/")
                          throw new RangeError("Invalid path: " + part);
                      rest = part.slice(pos);
                  }
                  let last = pieces.length - 1, inner = pieces[last];
                  if (!inner)
                      throw new RangeError("Invalid path: " + part);
                  let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                  byName[inner] = rule.sort(byName[inner]);
              }
      }
      return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  class Rule {
      constructor(tags, mode, context, next) {
          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
      }
      get opaque() { return this.mode == 0 /* Opaque */; }
      get inherit() { return this.mode == 1 /* Inherit */; }
      sort(other) {
          if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
          }
          other.next = this.sort(other.next);
          return other;
      }
      get depth() { return this.context ? this.context.length : 0; }
  }
  Rule.empty = new Rule([], 2 /* Normal */, null);
  /// Define a [highlighter](#highlight.Highlighter) from an array of
  /// tag/class pairs. Classes associated with more specific tags will
  /// take precedence.
  function tagHighlighter(tags, options) {
      let map = Object.create(null);
      for (let style of tags) {
          if (!Array.isArray(style.tag))
              map[style.tag.id] = style.class;
          else
              for (let tag of style.tag)
                  map[tag.id] = style.class;
      }
      let { scope, all = null } = options || {};
      return {
          style: (tags) => {
              let cls = all;
              for (let tag of tags) {
                  for (let sub of tag.set) {
                      let tagClass = map[sub.id];
                      if (tagClass) {
                          cls = cls ? cls + " " + tagClass : tagClass;
                          break;
                      }
                  }
              }
              return cls;
          },
          scope
      };
  }
  function highlightTags(highlighters, tags) {
      let result = null;
      for (let highlighter of highlighters) {
          let value = highlighter.style(tags);
          if (value)
              result = result ? result + " " + value : value;
      }
      return result;
  }
  /// Highlight the given [tree](#common.Tree) with the given
  /// [highlighter](#highlight.Highlighter).
  function highlightTree(tree, highlighter, 
  /// Assign styling to a region of the text. Will be called, in order
  /// of position, for any ranges where more than zero classes apply.
  /// `classes` is a space separated string of CSS classes.
  putStyle, 
  /// The start of the range to highlight.
  from = 0, 
  /// The end of the range.
  to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
  }
  class HighlightBuilder {
      constructor(at, highlighters, span) {
          this.at = at;
          this.highlighters = highlighters;
          this.span = span;
          this.class = "";
      }
      startSpan(at, cls) {
          if (cls != this.class) {
              this.flush(at);
              if (at > this.at)
                  this.at = at;
              this.class = cls;
          }
      }
      flush(to) {
          if (to > this.at && this.class)
              this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
              return;
          if (type.isTop)
              highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
          let cls = inheritedClass;
          let rule = getStyleTags(cursor) || Rule.empty;
          let tagCls = highlightTags(highlighters, rule.tags);
          if (tagCls) {
              if (cls)
                  cls += " ";
              cls += tagCls;
              if (rule.mode == 1 /* Inherit */)
                  inheritedClass += (inheritedClass ? " " : "") + tagCls;
          }
          this.startSpan(cursor.from, cls);
          if (rule.opaque)
              return;
          let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
          if (mounted && mounted.overlay) {
              let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
              let hasChild = cursor.firstChild();
              for (let i = 0, pos = start;; i++) {
                  let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                  let nextPos = next ? next.from + start : end;
                  let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                  if (rangeFrom < rangeTo && hasChild) {
                      while (cursor.from < rangeTo) {
                          this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                          this.startSpan(Math.min(to, cursor.to), cls);
                          if (cursor.to >= nextPos || !cursor.nextSibling())
                              break;
                      }
                  }
                  if (!next || nextPos > to)
                      break;
                  pos = next.to + start;
                  if (pos > from) {
                      this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
                      this.startSpan(pos, cls);
                  }
              }
              if (hasChild)
                  cursor.parent();
          }
          else if (cursor.firstChild()) {
              do {
                  if (cursor.to <= from)
                      continue;
                  if (cursor.from >= to)
                      break;
                  this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                  this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());
              cursor.parent();
          }
      }
  }
  /// Match a syntax node's [highlight rules](#highlight.styleTags). If
  /// there's a match, return its set of tags, and whether it is
  /// opaque (uses a `!`) or applies to all child nodes (`/...`).
  function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
          rule = rule.next;
      return rule || null;
  }
  const t$1 = Tag.define;
  const comment = t$1(), name = t$1(), typeName = t$1(name), propertyName = t$1(name), literal = t$1(), string = t$1(literal), number = t$1(literal), content = t$1(), heading = t$1(content), keyword = t$1(), operator = t$1(), punctuation = t$1(), bracket = t$1(punctuation), meta = t$1();
  /// The default set of highlighting [tags](#highlight.Tag).
  ///
  /// This collection is heavily biased towards programming languages,
  /// and necessarily incomplete. A full ontology of syntactic
  /// constructs would fill a stack of books, and be impractical to
  /// write themes for. So try to make do with this set. If all else
  /// fails, [open an
  /// issue](https://github.com/codemirror/codemirror.next) to propose a
  /// new tag, or [define](#highlight.Tag^define) a local custom tag for
  /// your use case.
  ///
  /// Note that it is not obligatory to always attach the most specific
  /// tag possible to an element—if your grammar can't easily
  /// distinguish a certain type of element (such as a local variable),
  /// it is okay to style it as its more general variant (a variable).
  /// 
  /// For tags that extend some parent tag, the documentation links to
  /// the parent.
  const tags$1 = {
      /// A comment.
      comment,
      /// A line [comment](#highlight.tags.comment).
      lineComment: t$1(comment),
      /// A block [comment](#highlight.tags.comment).
      blockComment: t$1(comment),
      /// A documentation [comment](#highlight.tags.comment).
      docComment: t$1(comment),
      /// Any kind of identifier.
      name,
      /// The [name](#highlight.tags.name) of a variable.
      variableName: t$1(name),
      /// A type [name](#highlight.tags.name).
      typeName: typeName,
      /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      tagName: t$1(typeName),
      /// A property or field [name](#highlight.tags.name).
      propertyName: propertyName,
      /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      attributeName: t$1(propertyName),
      /// The [name](#highlight.tags.name) of a class.
      className: t$1(name),
      /// A label [name](#highlight.tags.name).
      labelName: t$1(name),
      /// A namespace [name](#highlight.tags.name).
      namespace: t$1(name),
      /// The [name](#highlight.tags.name) of a macro.
      macroName: t$1(name),
      /// A literal value.
      literal,
      /// A string [literal](#highlight.tags.literal).
      string,
      /// A documentation [string](#highlight.tags.string).
      docString: t$1(string),
      /// A character literal (subtag of [string](#highlight.tags.string)).
      character: t$1(string),
      /// An attribute value (subtag of [string](#highlight.tags.string)).
      attributeValue: t$1(string),
      /// A number [literal](#highlight.tags.literal).
      number,
      /// An integer [number](#highlight.tags.number) literal.
      integer: t$1(number),
      /// A floating-point [number](#highlight.tags.number) literal.
      float: t$1(number),
      /// A boolean [literal](#highlight.tags.literal).
      bool: t$1(literal),
      /// Regular expression [literal](#highlight.tags.literal).
      regexp: t$1(literal),
      /// An escape [literal](#highlight.tags.literal), for example a
      /// backslash escape in a string.
      escape: t$1(literal),
      /// A color [literal](#highlight.tags.literal).
      color: t$1(literal),
      /// A URL [literal](#highlight.tags.literal).
      url: t$1(literal),
      /// A language keyword.
      keyword,
      /// The [keyword](#highlight.tags.keyword) for the self or this
      /// object.
      self: t$1(keyword),
      /// The [keyword](#highlight.tags.keyword) for null.
      null: t$1(keyword),
      /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
      atom: t$1(keyword),
      /// A [keyword](#highlight.tags.keyword) that represents a unit.
      unit: t$1(keyword),
      /// A modifier [keyword](#highlight.tags.keyword).
      modifier: t$1(keyword),
      /// A [keyword](#highlight.tags.keyword) that acts as an operator.
      operatorKeyword: t$1(keyword),
      /// A control-flow related [keyword](#highlight.tags.keyword).
      controlKeyword: t$1(keyword),
      /// A [keyword](#highlight.tags.keyword) that defines something.
      definitionKeyword: t$1(keyword),
      /// A [keyword](#highlight.tags.keyword) related to defining or
      /// interfacing with modules.
      moduleKeyword: t$1(keyword),
      /// An operator.
      operator,
      /// An [operator](#highlight.tags.operator) that dereferences something.
      derefOperator: t$1(operator),
      /// Arithmetic-related [operator](#highlight.tags.operator).
      arithmeticOperator: t$1(operator),
      /// Logical [operator](#highlight.tags.operator).
      logicOperator: t$1(operator),
      /// Bit [operator](#highlight.tags.operator).
      bitwiseOperator: t$1(operator),
      /// Comparison [operator](#highlight.tags.operator).
      compareOperator: t$1(operator),
      /// [Operator](#highlight.tags.operator) that updates its operand.
      updateOperator: t$1(operator),
      /// [Operator](#highlight.tags.operator) that defines something.
      definitionOperator: t$1(operator),
      /// Type-related [operator](#highlight.tags.operator).
      typeOperator: t$1(operator),
      /// Control-flow [operator](#highlight.tags.operator).
      controlOperator: t$1(operator),
      /// Program or markup punctuation.
      punctuation,
      /// [Punctuation](#highlight.tags.punctuation) that separates
      /// things.
      separator: t$1(punctuation),
      /// Bracket-style [punctuation](#highlight.tags.punctuation).
      bracket,
      /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      /// tokens).
      angleBracket: t$1(bracket),
      /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      /// tokens).
      squareBracket: t$1(bracket),
      /// Parentheses (usually `(` and `)` tokens). Subtag of
      /// [bracket](#highlight.tags.bracket).
      paren: t$1(bracket),
      /// Braces (usually `{` and `}` tokens). Subtag of
      /// [bracket](#highlight.tags.bracket).
      brace: t$1(bracket),
      /// Content, for example plain text in XML or markup documents.
      content,
      /// [Content](#highlight.tags.content) that represents a heading.
      heading,
      /// A level 1 [heading](#highlight.tags.heading).
      heading1: t$1(heading),
      /// A level 2 [heading](#highlight.tags.heading).
      heading2: t$1(heading),
      /// A level 3 [heading](#highlight.tags.heading).
      heading3: t$1(heading),
      /// A level 4 [heading](#highlight.tags.heading).
      heading4: t$1(heading),
      /// A level 5 [heading](#highlight.tags.heading).
      heading5: t$1(heading),
      /// A level 6 [heading](#highlight.tags.heading).
      heading6: t$1(heading),
      /// A prose separator (such as a horizontal rule).
      contentSeparator: t$1(content),
      /// [Content](#highlight.tags.content) that represents a list.
      list: t$1(content),
      /// [Content](#highlight.tags.content) that represents a quote.
      quote: t$1(content),
      /// [Content](#highlight.tags.content) that is emphasized.
      emphasis: t$1(content),
      /// [Content](#highlight.tags.content) that is styled strong.
      strong: t$1(content),
      /// [Content](#highlight.tags.content) that is part of a link.
      link: t$1(content),
      /// [Content](#highlight.tags.content) that is styled as code or
      /// monospace.
      monospace: t$1(content),
      /// [Content](#highlight.tags.content) that has a strike-through
      /// style.
      strikethrough: t$1(content),
      /// Inserted text in a change-tracking format.
      inserted: t$1(),
      /// Deleted text.
      deleted: t$1(),
      /// Changed text.
      changed: t$1(),
      /// An invalid or unsyntactic element.
      invalid: t$1(),
      /// Metadata or meta-instruction.
      meta,
      /// [Metadata](#highlight.tags.meta) that applies to the entire
      /// document.
      documentMeta: t$1(meta),
      /// [Metadata](#highlight.tags.meta) that annotates or adds
      /// attributes to a given syntactic element.
      annotation: t$1(meta),
      /// Processing instruction or preprocessor directive. Subtag of
      /// [meta](#highlight.tags.meta).
      processingInstruction: t$1(meta),
      /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
      /// given element is being defined. Expected to be used with the
      /// various [name](#highlight.tags.name) tags.
      definition: Tag.defineModifier(),
      /// [Modifier](#highlight.Tag^defineModifier) that indicates that
      /// something is constant. Mostly expected to be used with
      /// [variable names](#highlight.tags.variableName).
      constant: Tag.defineModifier(),
      /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
      /// a [variable](#highlight.tags.variableName) or [property
      /// name](#highlight.tags.propertyName) is being called or defined
      /// as a function.
      function: Tag.defineModifier(),
      /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
      /// [names](#highlight.tags.name) to indicate that they belong to
      /// the language's standard environment.
      standard: Tag.defineModifier(),
      /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
      /// [names](#highlight.tags.name) is local to some scope.
      local: Tag.defineModifier(),
      /// A generic variant [modifier](#highlight.Tag^defineModifier) that
      /// can be used to tag language-specific alternative variants of
      /// some common tag. It is recommended for themes to define special
      /// forms of at least the [string](#highlight.tags.string) and
      /// [variable name](#highlight.tags.variableName) tags, since those
      /// come up a lot.
      special: Tag.defineModifier()
  };
  /// This is a highlighter that adds stable, predictable classes to
  /// tokens, for styling with external CSS.
  ///
  /// The following tags are mapped to their name prefixed with `"tok-"`
  /// (for example `"tok-comment"`):
  ///
  /// * [`link`](#highlight.tags.link)
  /// * [`heading`](#highlight.tags.heading)
  /// * [`emphasis`](#highlight.tags.emphasis)
  /// * [`strong`](#highlight.tags.strong)
  /// * [`keyword`](#highlight.tags.keyword)
  /// * [`atom`](#highlight.tags.atom)
  /// * [`bool`](#highlight.tags.bool)
  /// * [`url`](#highlight.tags.url)
  /// * [`labelName`](#highlight.tags.labelName)
  /// * [`inserted`](#highlight.tags.inserted)
  /// * [`deleted`](#highlight.tags.deleted)
  /// * [`literal`](#highlight.tags.literal)
  /// * [`string`](#highlight.tags.string)
  /// * [`number`](#highlight.tags.number)
  /// * [`variableName`](#highlight.tags.variableName)
  /// * [`typeName`](#highlight.tags.typeName)
  /// * [`namespace`](#highlight.tags.namespace)
  /// * [`className`](#highlight.tags.className)
  /// * [`macroName`](#highlight.tags.macroName)
  /// * [`propertyName`](#highlight.tags.propertyName)
  /// * [`operator`](#highlight.tags.operator)
  /// * [`comment`](#highlight.tags.comment)
  /// * [`meta`](#highlight.tags.meta)
  /// * [`punctuation`](#highlight.tags.punctuation)
  /// * [`invalid`](#highlight.tags.invalid)
  ///
  /// In addition, these mappings are provided:
  ///
  /// * [`regexp`](#highlight.tags.regexp),
  ///   [`escape`](#highlight.tags.escape), and
  ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
  ///   are mapped to `"tok-string2"`
  /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName2"`
  /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName tok-local"`
  /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName tok-definition"`
  /// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
  ///   to `"tok-propertyName tok-definition"`
  tagHighlighter([
      { tag: tags$1.link, class: "tok-link" },
      { tag: tags$1.heading, class: "tok-heading" },
      { tag: tags$1.emphasis, class: "tok-emphasis" },
      { tag: tags$1.strong, class: "tok-strong" },
      { tag: tags$1.keyword, class: "tok-keyword" },
      { tag: tags$1.atom, class: "tok-atom" },
      { tag: tags$1.bool, class: "tok-bool" },
      { tag: tags$1.url, class: "tok-url" },
      { tag: tags$1.labelName, class: "tok-labelName" },
      { tag: tags$1.inserted, class: "tok-inserted" },
      { tag: tags$1.deleted, class: "tok-deleted" },
      { tag: tags$1.literal, class: "tok-literal" },
      { tag: tags$1.string, class: "tok-string" },
      { tag: tags$1.number, class: "tok-number" },
      { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
      { tag: tags$1.variableName, class: "tok-variableName" },
      { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
      { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
      { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
      { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags$1.typeName, class: "tok-typeName" },
      { tag: tags$1.namespace, class: "tok-namespace" },
      { tag: tags$1.className, class: "tok-className" },
      { tag: tags$1.macroName, class: "tok-macroName" },
      { tag: tags$1.propertyName, class: "tok-propertyName" },
      { tag: tags$1.operator, class: "tok-operator" },
      { tag: tags$1.comment, class: "tok-comment" },
      { tag: tags$1.meta, class: "tok-meta" },
      { tag: tags$1.invalid, class: "tok-invalid" },
      { tag: tags$1.punctuation, class: "tok-punctuation" }
  ]);

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const propertyIdentifier$1 = 147,
    identifier$1 = 148,
    nameIdentifier$1 = 149,
    insertSemi$1 = 150,
    expression0$1 = 154,
    ForExpression$1 = 4,
    forExpressionStart$1 = 157,
    ForInExpression$1 = 7,
    Name$1 = 8,
    Identifier$1 = 9,
    AdditionalIdentifier$1 = 10,
    forExpressionBodyStart$1 = 165,
    IfExpression$1 = 18,
    ifExpressionStart$1 = 166,
    QuantifiedExpression$1 = 22,
    quantifiedExpressionStart$1 = 167,
    QuantifiedInExpression$1 = 26,
    PositiveUnaryTest$1 = 36,
    ArithmeticExpression$1 = 40,
    arithmeticPlusStart$1 = 171,
    arithmeticTimesStart$1 = 172,
    arithmeticExpStart$1 = 173,
    arithmeticUnaryStart$1 = 174,
    VariableName$1 = 47,
    PathExpression$1 = 67,
    pathExpressionStart$1 = 179,
    FilterExpression$1 = 69,
    filterExpressionStart$1 = 180,
    FunctionInvocation$1 = 71,
    functionInvocationStart$1 = 181,
    ParameterName$1 = 103,
    nil$1 = 186,
    NumericLiteral$1 = 106,
    StringLiteral$1 = 107,
    BooleanLiteral$1 = 108,
    FunctionDefinition$1 = 117,
    functionDefinitionStart$1 = 194,
    Context$1 = 124,
    contextStart$1 = 196,
    ContextEntry$1 = 125,
    PropertyName$1 = 127,
    PropertyIdentifier$1 = 128;

  const LOG_PARSE$1 = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
  const LOG_PARSE_DEBUG$1 = typeof process != 'undefined' && process.env && /\fparse:dbg\b/.test(process.env.LOG);
  const LOG_VARS$1 = typeof process != 'undefined' && process.env && /\bcontext?\b/.test(process.env.LOG);

  const spaceChars$1 = [
    9, 11, 12, 32, 133, 160,
    5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198,
    8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
  ];

  const newlineChars$1 = chars$2('\n\r');

  const additionalNameChars$1 = chars$2("'./-+*");

  /**
   * @param { string } str
   * @return { number[] }
   */
  function chars$2(str) {
    return Array.from(str).map(s => s.charCodeAt(0));
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isStartChar$1(ch) {
    return (
      ch === 63 // ?
    ) || (
      ch === 95 // _
    ) || (
      ch >= 65 && ch <= 90 // A-Z
    ) || (
      ch >= 97 && ch <= 122 // a-z
    ) || (
      ch >= 161 && !isPartChar$1(ch) && !isSpace$1(ch)
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isAdditional$1(ch) {
    return additionalNameChars$1.includes(ch);
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isPartChar$1(ch) {
    return (
      ch >= 48 && ch <= 57 // 0-9
    ) || (
      ch === 0xB7
    ) || (
      ch >= 0x0300 && ch <= 0x036F
    ) || (
      ch >= 0x203F && ch <= 0x2040
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isSpace$1(ch) {
    return spaceChars$1.includes(ch);
  }

  // eslint-disable-next-line
  function indent$1(str, spaces) {
    return spaces.concat(
      str.split(/\n/g).join('\n' + spaces)
    );
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } [offset]
   * @param { boolean } [includeOperators]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseAdditionalSymbol$1(input, offset = 0) {

    const next = input.peek(offset);

    if (isAdditional$1(next)) {
      return {
        offset: 1,
        token: String.fromCharCode(next)
      };
    }

    return null;
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param { number } [offset]
   * @param { boolean } [namePart]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseIdentifier$1(input, offset = 0, namePart = false) {
    for (let inside = false, chars = [], i = 0;; i++) {
      const next = input.peek(offset + i);

      if (isStartChar$1(next) || ((inside || namePart) && isPartChar$1(next))) {
        if (!inside) {
          inside = true;
        }

        chars.push(next);
      } else {

        if (chars.length) {
          return {
            token: String.fromCharCode(...chars),
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } offset
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseSpaces$1(input, offset) {

    for (let inside = false, i = 0;; i++) {
      let next = input.peek(offset + i);

      if (isSpace$1(next)) {
        if (!inside) {
          inside = true;
        }
      } else {
        if (inside) {
          return {
            token: ' ',
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * Parse a name from the input and return the first match, if any.
   *
   * @param { import('@lezer/lr').InputStream } input
   * @param { Variables } variables
   *
   * @return { { token: string, offset: number, term: number } | null }
   */
  function parseName$1(input, variables) {
    const contextKeys = variables.contextKeys();

    const start = variables.tokens;

    for (let i = 0, tokens = [], nextMatch = null;;) {

      const namePart = (start.length + tokens.length) > 0;
      const maybeSpace = tokens.length > 0;

      const match = (
        parseIdentifier$1(input, i, namePart) ||
        namePart && parseAdditionalSymbol$1(input, i) ||
        maybeSpace && parseSpaces$1(input, i)
      );

      // match is required
      if (!match) {
        return nextMatch;
      }

      const {
        token,
        offset
      } = match;

      i += offset;

      if (token === ' ') {
        continue;
      }

      tokens = [ ...tokens, token ];

      const name = [ ...start, ...tokens ].join(' ');

      if (contextKeys.some(el => el === name)) {
        const token = tokens[0];

        nextMatch = {
          token,
          offset: token.length,
          term: nameIdentifier$1
        };
      }

      if (dateTimeIdentifiers$1.some(el => el === name)) {
        const token = tokens[0];

        // parse date time identifiers as normal
        // identifiers to allow specialization to kick in
        //
        // cf. https://github.com/nikku/lezer-feel/issues/8
        nextMatch = {
          token,
          offset: token.length,
          term: identifier$1
        };
      }

      if (
        !contextKeys.some(el => el.startsWith(name)) &&
        !dateTimeIdentifiers$1.some(el => el.startsWith(name))
      ) {
        return nextMatch;
      }
    }

  }

  const identifiersMap$1 = {
    [ identifier$1 ]: 'identifier',
    [ nameIdentifier$1 ]: 'nameIdentifier'
  };

  const identifiers$1 = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG$1 && console.log('%s: T <identifier | nameIdentifier>', input.pos);

    const nameMatch = parseName$1(input, stack.context);

    const start = stack.context.tokens;

    const match = nameMatch || parseIdentifier$1(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(nameMatch ? nameMatch.term : identifier$1);

      LOG_PARSE$1 && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap$1[nameMatch.term] : 'identifier', match.token);
    }
  }, { contextual: true });


  const propertyIdentifiers$1 = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG$1 && console.log('%s: T <propertyIdentifier>', input.pos);

    const start = stack.context.tokens;

    const match = parseIdentifier$1(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(propertyIdentifier$1);

      LOG_PARSE$1 && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
    }
  });


  const insertSemicolon$1 = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG$1 && console.log('%s: T <insertSemi>', input.pos);

    let offset;
    let insert = false;

    for (offset = 0;; offset++) {
      const char = input.peek(offset);

      if (spaceChars$1.includes(char)) {
        continue;
      }

      if (newlineChars$1.includes(char)) {
        insert = true;
      }

      break;
    }

    if (insert) {

      const identifier = parseIdentifier$1(input, offset + 1);
      const spaces = parseSpaces$1(input, offset + 1);

      if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
        return;
      }

      LOG_PARSE$1 && console.log('%s: MATCH <insertSemi>', input.pos);
      input.acceptToken(insertSemi$1);
    }
  });

  const prefixedContextStarts$1 = {
    [ functionInvocationStart$1 ]: 'FunctionInvocation',
    [ filterExpressionStart$1 ]: 'FilterExpression',
    [ pathExpressionStart$1 ]: 'PathExpression'
  };

  const contextStarts$1 = {
    [ contextStart$1 ]: 'Context',
    [ functionDefinitionStart$1 ]: 'FunctionDefinition',
    [ forExpressionStart$1 ]: 'ForExpression',
    [ ifExpressionStart$1 ]: 'IfExpression',
    [ quantifiedExpressionStart$1 ]: 'QuantifiedExpression'
  };

  const contextEnds$1 = {
    [ Context$1 ]: 'Context',
    [ FunctionDefinition$1 ]: 'FunctionDefinition',
    [ ForExpression$1 ]: 'ForExpression',
    [ IfExpression$1 ]: 'IfExpression',
    [ QuantifiedExpression$1 ]: 'QuantifiedExpression',
    [ PathExpression$1 ]: 'PathExpression',
    [ FunctionInvocation$1 ]: 'FunctionInvocation',
    [ FilterExpression$1 ]: 'FilterExpression',
    [ ArithmeticExpression$1 ]: 'ArithmeticExpression'
  };

  let ValueProducer$1 = class ValueProducer {

    /**
     * @param { Function } fn
     */
    constructor(fn) {
      this.fn = fn;
    }

    get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function }
     *
     * @return { ValueProducer }
     */
    static of(fn) {
      return new ValueProducer$1(fn);
    }

  };

  const dateTimeLiterals$1 = {
    'date and time': 1,
    'date': 1,
    'time': 1,
    'duration': 1
  };

  const dateTimeIdentifiers$1 = Object.keys(dateTimeLiterals$1);

  let Variables$1 = class Variables {

    constructor({
      name = 'Expressions',
      tokens = [],
      children = [],
      parent = null,
      context = { },
      value,
      raw
    } = {}) {
      this.name = name;
      this.tokens = tokens;
      this.children = children;
      this.parent = parent;
      this.context = context;
      this.value = value;
      this.raw = raw;
    }

    enterScope(name) {

      const childScope = this.of({
        name,
        parent: this
      });

      LOG_VARS$1 && console.log('[%s] enter', childScope.path, childScope.context);

      return childScope;
    }

    exitScope(str) {

      if (!this.parent) {
        LOG_VARS$1 && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent$1(str, '  '));

        return this;
      }

      LOG_VARS$1 && console.log('[%s] exit %o\n%s', this.path, this.context, indent$1(str, '  '));

      return this.parent.pushChild(this);
    }

    token(part) {

      LOG_VARS$1 && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);

      return this.assign({
        tokens: [ ...this.tokens, part ]
      });
    }

    literal(value) {

      LOG_VARS$1 && console.log('[%s] literal %o', this.path, value);

      return this.pushChild(this.of({
        name: 'Literal',
        value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
    computedValue() {
      for (let scope = this;;scope = scope.children.slice(-1)[0]) {

        if (!scope) {
          return null;
        }

        if (scope.value) {
          return scope.value;
        }
      }
    }

    contextKeys() {
      return Object.keys(this.context).map(normalizeContextKey$1);
    }

    get path() {
      return this.parent?.path?.concat(' > ', this.name) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
    get(variable) {

      const names = [ variable, variable && normalizeContextKey$1(variable) ];

      const contextKey = Object.keys(this.context).find(
        key => names.includes(normalizeContextKey$1(key))
      );

      if (typeof contextKey === 'undefined') {
        return undefined;
      }

      const val = this.context[contextKey];

      if (val instanceof ValueProducer$1) {
        return val.get(this);
      } else {
        return val;
      }
    }

    resolveName() {

      const variable = this.tokens.join(' ');
      const tokens = [];

      const parentScope = this.assign({
        tokens
      });

      const variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });

      LOG_VARS$1 && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));

      return parentScope.pushChild(variableScope);
    }

    pushChild(child) {

      if (!child) {
        return this;
      }

      const parent = this.assign({
        children: [ ...this.children, child ]
      });

      child.parent = parent;

      return parent;
    }

    pushChildren(children) {

      let parent = this;

      for (const child of children) {
        parent = parent.pushChild(child);
      }

      return parent;
    }

    declareName() {

      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }

      const variableName = this.tokens.join(' ');

      LOG_VARS$1 && console.log('[%s] declareName <%s>', this.path, variableName);

      return this.assign({
        tokens: []
      }).pushChild(
        this.of({
          name: 'Name',
          value: variableName
        })
      );
    }

    define(name, value) {

      if (typeof name !== 'string') {
        LOG_VARS$1 && console.log('[%s] no define <%s=%s>', this.path, name, value);

        return this;
      }

      LOG_VARS$1 && console.log('[%s] define <%s=%s>', this.path, name, value);

      const context = {
        ...this.context,
        [name]: value
      };

      return this.assign({
        context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    assign(options = {}) {

      return Variables$1.of({
        ...this,
        ...options
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    of(options = {}) {

      const defaultOptions = {
        context: this.context,
        parent: this.parent
      };

      return Variables$1.of({
        ...defaultOptions,
        ...options
      });
    }

    static of(options) {
      const {
        name,
        tokens = [],
        children = [],
        parent = null,
        context = {},
        value,
        raw
      } = options;

      return new Variables$1({
        name,
        tokens: [ ...tokens ],
        children: [ ...children ],
        context: {
          ...context
        },
        parent,
        value,
        raw
      });
    }

  };

  /**
   * @param { string } name
   *
   * @return { string } normalizedName
   */
  function normalizeContextKey$1(name) {
    return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
  }

  /**
   * Wrap children of variables under the given named child.
   *
   * @param { Variables } variables
   * @param { string } name
   * @param { string } code
   * @return { Variables }
   */
  function wrap$2(variables, scopeName, code) {

    const parts = variables.children.filter(c => c.name !== scopeName);
    const children = variables.children.filter(c => c.name === scopeName);

    const namePart = parts[0];
    const valuePart = parts[Math.max(1, parts.length - 1)];

    const name = namePart.computedValue();
    const value = valuePart?.computedValue() || null;

    return variables
      .assign({
        children
      })
      .enterScope(scopeName)
      .pushChildren(parts)
      .exitScope(code)
      .define(name, value);
  }

  /**
   * @param { any } context
   *
   * @return { ContextTracker<Variables> }
   */
  function trackVariables$1(context = {}) {

    const start = Variables$1.of({
      context
    });

    return new ContextTracker({
      start,
      reduce(variables, term, stack, input) {

        if (term === Context$1) {
          variables = variables.assign({
            value: variables.context
          });
        }

        if (term === IfExpression$1) {
          const [ thenPart, elsePart ] = variables.children.slice(-2);

          variables = variables.assign({
            value: {
              ...thenPart?.computedValue(),
              ...elsePart?.computedValue()
            }
          });
        }

        if (term === FilterExpression$1) {
          const [ sourcePart, _ ] = variables.children.slice(-2);

          variables = variables.assign({
            value: sourcePart?.computedValue()
          });
        }

        if (term === FunctionInvocation$1) {

          const [
            name,
            ...args
          ] = variables.children;

          // preserve type information through `get value(context, key)` utility
          if (name?.raw === 'get value') {
            variables = getContextValue$1(variables, args);
          }
        }

        const start = contextStarts$1[term];

        if (start) {
          return variables.enterScope(start);
        }

        const prefixedStart = prefixedContextStarts$1[term];

        // pull <expression> into new <prefixedStart> context
        if (prefixedStart) {

          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];

          return variables.assign({
            children
          }).enterScope(prefixedStart).pushChild(lastChild).assign({
            context: {
              ...variables.context,
              ...lastChild?.computedValue()
            }
          });
        }

        const code = input.read(input.pos, stack.pos);

        const end = contextEnds$1[term];

        if (end) {
          return variables.exitScope(code);
        }

        if (term === ContextEntry$1) {
          return wrap$2(variables, 'ContextEntry', code);
        }

        if (
          term === ForInExpression$1 ||
          term === QuantifiedInExpression$1
        ) {
          return wrap$2(variables, 'InExpression', code);
        }

        // define <partial> within ForExpression body
        if (term === forExpressionBodyStart$1) {

          return variables.define(
            'partial',
            ValueProducer$1.of(variables => {
              return variables.children[variables.children.length - 1]?.computedValue();
            })
          );
        }

        if (
          term === ParameterName$1
        ) {
          const [ left ] = variables.children.slice(-1);

          const name = left.computedValue();

          // TODO: attach type information
          return variables.define(name, 1);
        }

        // pull <expression> into ArithmeticExpression child
        if (
          term === arithmeticPlusStart$1 ||
          term === arithmeticTimesStart$1 ||
          term === arithmeticExpStart$1
        ) {
          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];

          return variables.assign({
            children
          }).enterScope('ArithmeticExpression').pushChild(lastChild);
        }

        if (term === arithmeticUnaryStart$1) {
          return variables.enterScope('ArithmeticExpression');
        }

        if (
          term === Identifier$1 ||
          term === AdditionalIdentifier$1 ||
          term === PropertyIdentifier$1
        ) {
          return variables.token(code);
        }

        if (
          term === StringLiteral$1
        ) {
          return variables.literal(code.replace(/^"|"$/g, ''));
        }

        if (term === BooleanLiteral$1) {
          return variables.literal(code === 'true' ? true : false);
        }

        if (term === NumericLiteral$1) {
          return variables.literal(parseFloat(code));
        }

        if (term === nil$1) {
          return variables.literal(null);
        }

        if (
          term === VariableName$1
        ) {
          return variables.resolveName();
        }

        if (
          term === Name$1 ||
          term === PropertyName$1
        ) {
          return variables.declareName();
        }

        if (
          term === expression0$1 ||
          term === PositiveUnaryTest$1
        ) {
          if (variables.tokens.length > 0) {
            throw new Error('uncleared name');
          }
        }

        if (term === expression0$1) {

          let parent = variables;

          while (parent.parent) {
            parent = parent.exitScope(code);
          }

          return parent;
        }

        return variables;
      }
    });
  }

  const variableTracker$1 = trackVariables$1({});


  // helpers //////////////

  function getContextValue$1(variables, args) {

    if (!args.length) {
      return variables.assign({
        value: null
      });
    }

    if (args[0].name === 'Name') {
      args = extractNamedArgs$1(args, [ 'm', 'key' ]);
    }

    if (args.length !== 2) {
      return variables.assign({
        value: null
      });
    }

    const [
      context,
      key
    ] = args;

    const keyValue = key?.computedValue();
    const contextValue = context?.computedValue();

    if (
      (!contextValue || typeof contextValue !== 'object') || typeof keyValue !== 'string'
    ) {
      return variables.assign({
        value: null
      });
    }

    return variables.assign({
      value: [ normalizeContextKey$1(keyValue), keyValue ].reduce((value, keyValue) => {
        if (keyValue in contextValue) {
          return contextValue[keyValue];
        }

        return value;
      }, null)
    });
  }

  function extractNamedArgs$1(args, argNames) {

    const context = {};

    for (let i = 0; i < args.length; i += 2) {
      const [ name, value ] = args.slice(i, i + 2);

      context[name.value] = value;
    }

    return argNames.map(name => context[name]);
  }

  const feelHighlighting$1 = styleTags({
    'StringLiteral': tags$1.string,
    'NumericLiteral': tags$1.number,
    'BooleanLiteral': tags$1.bool,
    'Name QualifiedName': tags$1.name,
    'CompareOp': tags$1.compareOperator,
    'ArithOp': tags$1.arithmeticOperator,
    'PropertyName PathExpression/Name Key': tags$1.propertyName,
    'for if then else some every satisfies between': tags$1.controlKeyword,
    'in return instance of and or': tags$1.operatorKeyword,
    'function': tags$1.definitionKeyword,
    'FormalParameter/Type!': tags$1.typeName,
    'as': tags$1.keyword,
    'Wildcard': tags$1.special,
    'null': tags$1.null,
    ',': tags$1.separator,
    '[ ]': tags$1.squareBracket,
    '{ }': tags$1.brace,
    '( )': tags$1.paren,
    'LineComment': tags$1.lineComment,
    'BlockComment': tags$1.blockComment,
    'ParameterName VariableName ?': tags$1.variableName,
    'DateTimeConstructor! SpecialFunctionName BuiltInFunctionName': tags$1.function(tags$1.special(tags$1.variableName)),
    'FunctionInvocation/VariableName': tags$1.function(tags$1.variableName),
    'List Interval': tags$1.list,
    'BuiltInType ListType ContextType FunctionType': tags$1.function(tags$1.typeName),
    'Context': tags$1.definition(tags$1.literal),
    'ContextEntry/Key': tags$1.variableName,
    'InExpression/Name': tags$1.local(tags$1.variableName),
    'ParameterName/Name': tags$1.local(tags$1.variableName),
    'IterationContext/".." Interval/".." "."': tags$1.punctuation
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier$1 = {__proto__:null,for:10, in:30, return:34, if:38, then:40, else:42, some:46, every:48, satisfies:55, or:58, and:62, between:70, instance:86, of:89, days:99, time:101, duration:103, years:105, months:107, date:109, list:115, context:121, function:128, string:147, length:149, upper:151, case:153, lower:155, substring:157, before:159, after:161, starts:163, with:165, ends:167, contains:169, insert:171, index:173, distinct:175, values:177, met:179, by:181, overlaps:183, finished:185, started:187, day:189, year:191, week:193, month:195, get:197, value:199, entries:201, null:210, true:380, false:380, "?":224, external:240, not:263};
  const parser$2 = LRParser.deserialize({
    version: 14,
    states: "!&nO`QYOOO&wQYOOOOQU'#Ce'#CeO'RQYO'#C`O([Q^O'#FlOOQQ'#GQ'#GQO*|QYO'#GQO`QYO'#DUOOQU'#FZ'#FZO-rQ^O'#D]OOQO'#GX'#GXO1yQWO'#DuOOQU'#Ej'#EjOOQU'#Ek'#EkOOQU'#El'#ElO2OOWO'#EoO1yQWO'#EmOOQU'#Em'#EmOOQU'#G_'#G_OOQU'#G]'#G]O2TQYO'#ErO`QYO'#EsO2uQYO'#EtO2TQYO'#EqOOQU'#Eq'#EqOOQU'#Fn'#FnO4ZQ^O'#FnO6uQWO'#EuOOQP'#Gh'#GhO6zQXO'#E|OOQU'#Ge'#GeOOQU'#Fm'#FmOOQQ'#FU'#FUQ`QYOOOOQQ'#Fo'#FoOOQQ'#Fx'#FxO`QYO'#CnOOQQ'#Fy'#FyO'RQYO'#CrO7VQYO'#DvO7[QYO'#DvO7aQYO'#DvO7fQYO'#DvO7nQYO'#DvO7sQYO'#DvO7xQYO'#DvO7}QYO'#DvO8SQYO'#DvO8XQYO'#DvO8^QYO'#DvO8cQYO'#DvO8hQYO'#DvOOQU'#G^'#G^O8pQYO'#EnOOQO'#En'#EnOOQO'#Gf'#GfO:SQYO'#DQO:jQWO'#F|OOQO'#DS'#DSO:uQYO'#GQQOQWOOO:|QWOOO;pQYO'#CdO;}QYO'#FqOOQQ'#Cc'#CcO<SQYO'#FpOOQQ'#Cb'#CbO<[QYO,58zO`QYO,59hOOQQ'#F}'#F}OOQQ'#GO'#GOOOQQ'#GP'#GPO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#GV'#GVO'RQYO,5:]OOQQ'#GW'#GWO`QYO,5:_OOQQ,5<W,5<WO`QYO,59dO`QYO,59fO`QYO,59hO<aQYO,59hO?VQYO,59rOOQU,5;U,5;UO?[Q^O,59pOOQU-E9X-E9XOCcQYO'#GYOOQU,5:a,5:aOOQU,5;Z,5;ZOOQU,5;X,5;XOCjQ^O'#D[OGqQWO'#EjOOQU'#Gd'#GdOGvQWO,5;^OG{QYO,5;_OJZQ^O'#D[OJeQYO'#G]OLsQYO'#G[OMQQWO,5;`OOQU,5;],5;]OOQU,5<Y,5<YOMVQYO,5;aOOQP'#FQ'#FQOMyQXO'#FPOOQO'#FO'#FOONQQWO'#E}ONVQWO'#GiON_QWO,5;hOOQQ-E9S-E9SONdQYO,59YO;}QYO'#F{OOQQ'#Cv'#CvONkQYO'#FzOOQQ'#Cu'#CuONsQYO,59^ONxQYO,5:bOOQO,5:b,5:bON}QYO,5:bO! VQYO,5:bO! [QYO,5;YO`QYO'#FYO! aQWO,5<hO`QYOOOOQR'#Cf'#CfOOQQ'#FV'#FVO!!WQYO,59OO`QYO,5<]OOQQ'#Ft'#FtO'RQYO'#FWO!!hQYO,5<[O`QYO1G.fOOQQ'#Fw'#FwO!!pQ^O1G/SO!&_Q^O1G/[O!)|Q^O1G/[O!1YQ^O1G/[OOQU1G/w1G/wO!1vQYO1G/yO!5]Q^O1G/OO!9RQ^O1G/QO!:aQYO1G/SO`QYO1G/SOOQU1G/S1G/SO!:hQYO1G/^O!;SQ^O'#CdOOQO'#Eg'#EgO!<fQWO'#EfO!<kQWO'#GZOOQO'#Ee'#EeOOQO'#Eh'#EhO!<sQWO,5<tO'RQYO'#F[O!<xQ^O,59vO2TQYO1G0xOOQU1G0y1G0yO`QYO'#F`O!APQWO,5<vOOQU1G0z1G0zO!A[QWO'#EwO!AgQWO'#GgOOQO'#Ev'#EvO!AoQWO1G0{OOQP'#Fb'#FbO!AtQXO,5;kO`QYO,5;iO!A{QXO'#FcO!BTQWO,5=TOOQU1G1S1G1SO`QYO1G.tO`QYO,5<gO'RQYO'#FXO!B]QYO,5<fO`QYO1G.xO!BeQYO1G/|OOQO1G/|1G/|OOQO1G0t1G0tOOQO,5;t,5;tOOQO-E9W-E9WO!BjQWOOOOQQ-E9T-E9TO!BoQYO'#ClOOQQ1G1w1G1wOOQQ,5;r,5;rOOQQ-E9U-E9UO!B|Q^O7+$QOOQU7+%e7+%eO`QYO7+$nO!EnQYO,5;_O!EuQWO7+$nOOQU'#DZ'#DZO!EzQYO'#D^O!FPQYO'#D^O!FUQYO'#D^O!FZQ`O'#DfO!F`Q`O'#DiO!FeQ`O'#DmOOQU7+$x7+$xO`QYO,5;QO'RQYO'#F_O!FjQWO,5<uOOQU1G2`1G2`OOQU,5;v,5;vOOQU-E9Y-E9YO!FrQWO7+&dO!F}QYO,5;zOOQO-E9^-E9^O!:hQYO,5;cO'RQYO'#FaO!G[QWO,5=RO!GdQYO7+&gOOQP-E9`-E9`O!GkQYO1G1TOOQO,5;},5;}OOQO-E9a-E9aO!KdQ^O7+$`O!KkQYO1G2ROOQQ,5;s,5;sOOQQ-E9V-E9VO!KuQ^O7+$dOOQO7+%h7+%hO`QYO,59WO!NgQ^O<<HYOOQU<<HY<<HYO#$UQYO,59xO#$ZQYO,59xO#$`QYO,59xO#$eQYO,5:QO'RQYO,5:TO#%PQbO,5:XO#%WQYO1G0lOOQO,5;y,5;yOOQO-E9]-E9]OOQU<<JO<<JOOOQO1G0}1G0}OOQO,5;{,5;{OOQO-E9_-E9_O#%bQ^O'#EyOOQU<<JR<<JRO`QYO<<JRO`QYO<<GzO#(SQYO1G.rO#(^QYO1G/dOOQU1G/d1G/dO#(cQbO'#D]O#(tQ`O'#D[O#)PQ`O1G/lO#)UQWO'#DlO#)ZQ`O'#GROOQO'#Dk'#DkO#)cQ`O1G/oOOQO'#Dp'#DpO#)hQ`O'#GTOOQO'#Do'#DoO#)pQ`O1G/sOOQUAN?mAN?mO#)uQ^OAN=fOOQU7+%O7+%OO#,gQ`O,59vOOQU7+%W7+%WO#$eQYO,5:WO'RQYO'#F]O#,rQ`O,5<mOOQU7+%Z7+%ZO#$eQYO'#F^O#,zQ`O,5<oO#-SQ`O7+%_OOQO1G/r1G/rOOQO,5;w,5;wOOQO-E9Z-E9ZOOQO,5;x,5;xOOQO-E9[-E9[O!:hQYO<<HyOOQUAN>eAN>eO#-XQ^O'#FnO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO#-rQYO1G/SO#/`QYO1G/[O#0|QYO1G/[O#3wQYO1G/OO#5lQYO1G/QO'RQYO'#F[O`QYO1G.tO`QYO1G.xO#5|QYO7+$QO`QYO7+$nO#6mQYO7+&gO#8bQYO7+$`O#8iQYO7+$`O#8pQ^O7+$`O#8wQYO7+$dO#9hQYO<<HYO#;UQYO'#EyO`QYO<<JRO`QYO<<GzO#;uQYOAN=fO#$eQYO<<HyO`QYO'#DUO#<fQ^O'#DQO<[QYO,58zO#?WQYO,59YO#?_QYO,59^O#?dQYO1G/SO#?kQWO1G0{O`QYO1G.tO#?pQ`O7+%_O`QYO1G.tO'RQYO'#C`O`QYO'#CnO'RQYO'#CrO`QYO,59hOMVQYO,5;aO#?uQYO,59YO#?|Q`O1G/sO#@RQYO,59YO#@YQWO'#EuO`QYO'#CnO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO#@_Q^O1G/SO#@fQ^O1G/[O#@mQ^O1G/[O#@tQ^O1G/OO#A[Q^O1G/QO`QYO1G.xO#BpQ^O7+$QO`QYO7+$nO#EeQYO7+&gO#ElQ^O7+$dO#HaQ^O<<HYO#%PQbO,5:XO#HhQ^O'#EyO`QYO<<JRP`QYO<<GzP#K]Q^OAN=fO#L`Q^O'#DQO`QYO'#CnO`QYO'#DUO<[QYO,58zO$ TQYO,59^O$ YQYO1G/SO$ aQWO1G0{O$ fQ`O'#DmO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO$ kQYO1G/SO$ rQYO1G/[O$ yQYO1G/[O$!QQYO1G/OO$!hQYO1G/QO`QYO1G.xO$#|QYO7+$QO`QYO7+$nO$$pQYO7+&gO$$wQYO7+$dO$%kQYO<<HYO$%rQYO'#EyO`QYO<<JRP`QYO<<GzP$&fQYOAN=fO`QYO'#DUO<[QYO,58zO$'iQYO,59^O$'nQYO1G/SO$'uQWO1G0{O'RQYO'#C`O'RQYO'#CrO`QYO,59hOMVQYO,5;aO$'zQWO'#EuO'RQYO'#C`O'RQYO'#CrO$(PQYO'#DQO`QYO,59hOMVQYO,5;aO$(jQWO'#Eu",
    stateData: "$(o~O$^OS$_OSPOSQOS~OTrOZUO[TOcsOguOhuOrgOueO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~OTrO[TOcsOguOhuOrgOueO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~OZ!]O#w!_O~P$UO$YQO$ZQO~OZ!gO[!gO]!hO^!hO_!uOm!rOo!sOq!fOr!fOs!tOy!iO{!vO!h!oO$f!mOu${X~O$[!qO%^!qOT$`Xc$`Xg$`Xh$`X!S$`X!T$`X!U$`X!W$`X!Z$`X!b$`X!f$`X!k$`X!m$`X!o$`X!p$`X!s$`X!u$`X!w$`X!x$`X!y$`X!{$`X!}$`X#O$`X#P$`X#Q$`X#S$`X#T$`X#U$`X#]$`X#d$`X#o$`X$W$`X$Y$`X$Z$`X%S$`X%T$`X%U$`X%V$`X~P'ZO%S!wOT$tXZ$tX[$tXc$tXg$tXh$tXr$tXu$tX!S$tX!T$tX!U$tX!W$tX!Z$tX!b$tX!f$tX!h$tX!k$tX!m$tX!o$tX!p$tX!s$tX!u$tX!w$tX!x$tX!y$tX!{$tX!}$tX#O$tX#P$tX#Q$tX#S$tX#T$tX#U$tX#]$tX#d$tX#o$tX$Y$tX$Z$tX%T$tX%U$tX%V$tX~O$YQO$ZQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!Z!PX!b!PX!f!PX!h!PX!k!PX!m!PX!o!PX!p!PX!s!PX!u!PX!w!PX!x!PX!y!PX!{!PX!}!PX#O!PX#P!PX#Q!PX#S!PX#T!PX#U!PX#]!PX#d!PX#o!PX$W!PX$[!PX$f!PX%S!PX%T!PX%U!PX%V!PX%^!PX$j!PX$i!PXw!PXd!PXa!PX#n!PXe!PXk!PX~Ou!zO~O%T]O~OZ#PO!S!WO!T!WO!W!VO$YQO$ZQO%S[O%T]O%U^O%V_O~O!f%OP~P`O$[#YOZ$bX[$bX]$bX^$bX_$bXm$bXo$bXq$bXr$bXs$bXu$bXy$bX{$bX!f$bX!h$bX$W$bX$f$bXe$bX~OT$bXc$bXg$bXh$bX!S$bX!T$bX!U$bX!W$bX!Z$bX!b$bX!k$bX!m$bX!o$bX!p$bX!s$bX!u$bX!w$bX!x$bX!y$bX!{$bX!}$bX#O$bX#P$bX#Q$bX#S$bX#T$bX#U$bX#]$bX#d$bX#o$bX$Y$bX$Z$bX$[$bX%S$bX%T$bX%U$bX%V$bX%^$bX~P2|Ou#ZO~O$X#[O%T]O#n%]P~Oo#iO~O!l#jO~O!n#jO~O!q#jO!r#jO~O!t#jO~O!v#jO~O!q#jO~O|#jO~O!z#jO~O!|#jO~O|#kO~O|#lO~O#V#jO#W#jO~Oo#mOu#bX~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOu${X$WtX$jtXwtX!ftXdtXatX$itX#ntXktX~O_'UOm'SOo'TOq'OOr'OOs'zO~P8xO$j#nO$W$pXw$pX~O$W#vX~P*|Ou#pO~OZ#qO[#qO]#qO^#qO$YQO$ZQO$f#qO$g#qO$vWX~O_WXwWX$jWX~P;RO_#uO~O$j#vOa$dX~Oa#yO~OTrOZUO[TOcsOguOhuOrgOu$TO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~O|$VO~O{!vO!h!oO$f!mOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau${Xyxa!Sxa!Txa!Uxa!Wxa!Zxa!bxa!fxa!kxa!mxa!oxa!pxa!sxa!uxa!wxa!xxa!yxa!{xa!}xa#Oxa#Pxa#Qxa#Sxa#Txa#Uxa#]xa#dxa#oxa$Wxa$Yxa$Zxa$[xa%Sxa%Txa%Uxa%Vxa%^xa$jxawxadxaaxa$ixa#nxaexakxa~Ow%OP~P`O$f$_O$i!OXT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!Z!OX!b!OX!f!OX!h!OX!k!OX!m!OX!o!OX!p!OX!s!OX!u!OX!w!OX!x!OX!y!OX!{!OX!}!OX#O!OX#P!OX#Q!OX#S!OX#T!OX#U!OX#]!OX#d!OX#o!OX$W!OX$Y!OX$Z!OX$[!OX%S!OX%T!OX%U!OX%V!OX%^!OX$j!OXw!OXd!OXa!OX#n!OXe!OXk!OX~O%S!wO~O$i$aO~OZ!gO[!gO]!hO^!hO_'UOm'SOo'TOq'OOr'OOs'zOw$bOy!iO{!vO!h!oO$f!mOu${X~O$[#YOZ$bX[$bX]$bX^$bX_$bXm$bXo$bXq$bXr$bXs$bXu$bXw$bXy$bX{$bX!h$bX!f$bX$j$bX~O$f$_O$i!OX~PIPOZ%PX[%PX]%PX^%PX_%PXm%PXo%PXq%PXr%PXs%PXu%PXw%PXy%PX{%PX!h%PX$f%PX$i%WX!f%PX$j%PX~OZ!gO[!gO]!hO^!hO_'UOm'SOo'TOq'OOr'OOs'zOy!iO{!vO!h!oO$f!mOu${X~O$j$cO!f%OXw%OX~PKrO!f$eO~O$YQO$ZQOw%ZP~OZ#qO[#qO]#qO^#qO$X#[O$f#qO$g#qO~O$v#sX~PMbO$v$lO~O$j$mO#n%]X~O#n$oO~Od$pO~PKrO$j$rOk$nX~Ok$tO~O!V$uO~O#R$vO#S$vO~O#R$vO~O!S$wO~O$j#nO$W$paw$pa~OZ#qO[#qO]#qO^#qO$YQO$ZQO$f#qO$g#qO~O_Wa$vWawWa$jWa~P! lO$j#vOa$da~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTpi_picpigpihpimpiopiqpirpispiu${X!Spi!Tpi!Upi!Wpi!Zpi!bpi!fpi!kpi!mpi!opi!ppi!spi!upi!wpi!xpi!ypi!{pi!}pi#Opi#Ppi#Qpi#Spi#Tpi#Upi#]pi#dpi#opi$Wpi$Ypi$Zpi$[pi%Spi%Tpi%Upi%Vpi%^pi~O]!hO^!hOy!iO{!vO!h!oO$f!mOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xi~Oy!iO{!vO!h!oO$f!mOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xi~O{!vO!h!oO$f!mOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xiexi~Oyxi$jxiwxidxiaxi$ixi#nxikxi~P!-kO!f%RO~PKrOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTlicliglihlimliu${X!Sli!Tli!Uli!Wli!Zli!bli!fli!kli!mli!oli!pli!sli!uli!wli!xli!yli!{li!}li#Oli#Pli#Qli#Sli#Tli#Uli#]li#dli#oli$Wli$Yli$Zli$[li%Sli%Tli%Uli%Vli%^li~O_!uOo!sOq!fOr!fOs!tO~P!1}OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTnicnignihnimnioniu${X!Sni!Tni!Uni!Wni!Zni!bni!fni!kni!mni!oni!pni!sni!uni!wni!xni!yni!{ni!}ni#Oni#Pni#Qni#Sni#Tni#Uni#]ni#dni#oni$Wni$Yni$Zni$[ni%Sni%Tni%Uni%Vni%^ni~O_!uOq!fOr!fOs!tO~P!5pOZ!gO[!gO]!hO^!hO_'UOm'SOq'OOr'OOs'zOy!iO{!vO!h!oO$f!mOu${X~Oo%SO~P!9cO!R%WO!U%XO!W%YO!Z%ZO!^%[O!b%]O$YQO$ZQO~OZ#}X[#}X]#}X^#}X_#}Xm#}Xo#}Xq#}Xr#}Xs#}Xu#}Xw#}Xy#}X{#}X!h#}X$Y#}X$Z#}X$[#}X$f#}X$j#}X~P;RO$v%_O~O$j%`Ow$}X~Ow%bO~O$f$_O$i!OaT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!Z!Oa!b!Oa!f!Oa!h!Oa!k!Oa!m!Oa!o!Oa!p!Oa!s!Oa!u!Oa!w!Oa!x!Oa!y!Oa!{!Oa!}!Oa#O!Oa#P!Oa#Q!Oa#S!Oa#T!Oa#U!Oa#]!Oa#d!Oa#o!Oa$W!Oa$Y!Oa$Z!Oa$[!Oa%S!Oa%T!Oa%U!Oa%V!Oa%^!Oa$j!Oaw!Oad!Oaa!Oa#n!Oae!Oak!Oa~O$j$cO!f%Oaw%Oa~O$v%hOw#kX$j#kX~O$j%iOw%ZX~Ow%kO~O$v#sa~PMbO$X#[O%T]O~O$j$mO#n%]a~O$j$rOk$na~O!T%uO~Ow!^O~O$i%vOa`X$j`X~PKrOTSqcSqgSqhSq!SSq!TSq!USq!WSq!ZSq!bSq!fSq!kSq!mSq!oSq!pSq!sSq!uSq!wSq!xSq!ySq!{Sq!}Sq#OSq#PSq#QSq#SSq#TSq#USq#]Sq#dSq#oSq$WSq$YSq$ZSq$[Sq%SSq%TSq%USq%VSq%^Sq~P'ZO$jtX~PG{Ow%xO~Oo%yO~Oo%zO~Oo%{O~O![%|O~O![%}O~O![&OO~O$j%`Ow$}a~Ow&SO!f&SO!h&SO~O!f$Sa$j$Saw$Sa~PKrO$j%iOw%Za~O#l&YO~P`O#n#qi$j#qi~PKrOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOTbqcbqgbqhbqu${X!Sbq!Tbq!Ubq!Wbq!Zbq!bbq!fbq!kbq!mbq!obq!pbq!sbq!ubq!wbq!xbq!ybq!{bq!}bq#Obq#Pbq#Qbq#Sbq#Tbq#Ubq#]bq#dbq#obq$Wbq$Ybq$Zbq$[bq%Sbq%Tbq%Ubq%Vbq%^bq~Oe&ZO~P!GuOk$oi$j$oi~PKrOTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!Zfq!bfq!ffq!kfq!mfq!ofq!pfq!sfq!ufq!wfq!xfq!yfq!{fq!}fq#Ofq#Pfq#Qfq#Sfq#Tfq#Ufq#]fq#dfq#ofq$Wfq$Yfq$Zfq$[fq%Sfq%Tfq%Ufq%Vfq%^fq~P'ZOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTpy_pycpygpyhpympyopyqpyrpyspyu${X!Spy!Tpy!Upy!Wpy!Zpy!bpy!fpy!kpy!mpy!opy!ppy!spy!upy!wpy!xpy!ypy!{py!}py#Opy#Ppy#Qpy#Spy#Tpy#Upy#]py#dpy#opy$Wpy$Ypy$Zpy$[py%Spy%Tpy%Upy%Vpy%^py~O!S&]O~O!V&]O~O!S&^O~O!R%WO!U%XO!W%YO!Z%ZO!^%[O!b(rO$YQO$ZQO~O!X$wP~P#$eOw#Yi$j#Yi~PKrOT#mXc#mXg#mXh#mX!S#mX!T#mX!U#mX!W#mX!Z#mX!b#mX!f#mX!k#mX!m#mX!o#mX!p#mX!s#mX!u#mX!w#mX!x#mX!y#mX!{#mX!}#mX#O#mX#P#mX#Q#mX#S#mX#T#mX#U#mX#]#mX#d#mX#o#mX$W#mX$Y#mX$Z#mX$[#mX%S#mX%T#mX%U#mX%V#mX%^#mX~P'ZOa`i$j`i~PKrO!T&lO~O$YQO$ZQO!X!PX$f!PX$j!PX~O$f']O!X!OX$j!OX~O!X&nO~O$v&oO~O$j&pO!X$uX~O!X&rO~O$j&sO!X$wX~O!X&uO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!Zb!R!bb!R!fb!R!kb!R!mb!R!ob!R!pb!R!sb!R!ub!R!wb!R!xb!R!yb!R!{b!R!}b!R#Ob!R#Pb!R#Qb!R#Sb!R#Tb!R#Ub!R#]b!R#db!R#ob!R$Wb!R$Yb!R$Zb!R$[b!R%Sb!R%Tb!R%Ub!R%Vb!R%^b!R~P'ZO$f']O!X!Oa$j!Oa~O$j&pO!X$ua~O$j&sO!X$wa~O$x&{O~O$j$bXd$bXw$bXa$bX$i$bX#n$bXk$bX~P2|OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mO_pimpiopiqpirpispiu${X$Wpi$jpiwpi!fpidpiapi$ipi#npikpi~O]!hO^!hOy!iO{!vO!h!oO$f!mOZxi[xi_ximxioxiqxirxisxiu${X$Wxi$jxiwxi!fxidxiaxi$ixi#nxikxi~Oy!iO{!vO!h!oO$f!mOZxi[xi]xi^xi_ximxioxiqxirxisxiu${X$Wxi$jxiwxi!fxidxiaxi$ixi#nxikxi~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOmliu${X$Wli$jliwli!flidliali$ili#nlikli~O_'UOo'TOq'OOr'OOs'zO~P#2jOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOmnioniu${X$Wni$jniwni!fnidniani$ini#nnikni~O_'UOq'OOr'OOs'zO~P#4[O$WSq$jSqwSq!fSqdSqaSq$iSq#nSqkSq~PKrO#l'iO~P`OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X$Wbq$jbqwbq!fbqdbqabq$ibq#nbqkbq~Oe'jO~P#6tOebq~P#6tOebq~P!GuO$Wfq$jfqwfq!ffqdfqafq$ifq#nfqkfq~PKrOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mO_pympyopyqpyrpyspyu${X$Wpy$jpywpy!fpydpyapy$ipy#npykpy~O$W#mX$j#mXw#mX!f#mXd#mXa#mX$i#mX#n#mXk#mX~PKrO$Wb!R$jb!Rwb!R!fb!Rdb!Rab!R$ib!R#nb!Rkb!R~PKrOTtXctXgtXhtX!StX!TtX!UtX!WtX!ZtX!btX!ftX!ktX!mtX!otX!ptX!stX!utX!wtX!xtX!ytX!{tX!}tX#OtX#PtX#QtX#StX#TtX#UtX#]tX#dtX#otX$WtX$YtX$ZtX$[tX%StX%TtX%UtX%VtX%^tX~P'ZOd'^O~PKrOk'_O~Oo'aO~P!9cOw'bO~O$x'lO~Od'tO~PKrO!X'uO~Od'vO~PKrOu'{O~Oepi~P!!pOexi~P!&_Oexi~P!)|O_(XOo(WOq(ROr(ROs)iOeli~P!1}O_(XOq(ROr(ROs)iOeni~P!5pOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOu${X~OTSqcSqeSqgSqhSq!SSq!TSq!USq!WSq!ZSq!bSq!fSq!kSq!mSq!oSq!pSq!sSq!uSq!wSq!xSq!ySq!{Sq!}Sq#OSq#PSq#QSq#SSq#TSq#USq#]Sq#dSq#oSq$WSq$YSq$ZSq$[Sq%SSq%TSq%USq%VSq%^Sq~P#AoO#l(hO~P`OTfqcfqefqgfqhfq!Sfq!Tfq!Ufq!Wfq!Zfq!bfq!ffq!kfq!mfq!ofq!pfq!sfq!ufq!wfq!xfq!yfq!{fq!}fq#Ofq#Pfq#Qfq#Sfq#Tfq#Ufq#]fq#dfq#ofq$Wfq$Yfq$Zfq$[fq%Sfq%Tfq%Ufq%Vfq%^fq~P#AoOepy~P!NgOT#mXc#mXe#mXg#mXh#mX!S#mX!T#mX!U#mX!W#mX!Z#mX!b#mX!f#mX!k#mX!m#mX!o#mX!p#mX!s#mX!u#mX!w#mX!x#mX!y#mX!{#mX!}#mX#O#mX#P#mX#Q#mX#S#mX#T#mX#U#mX#]#mX#d#mX#o#mX$W#mX$Y#mX$Z#mX$[#mX%S#mX%T#mX%U#mX%V#mX%^#mX~P#AoOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOu${X~Qb!RTtXctXetXgtXhtX!StX!TtX!UtX!WtX!ZtX!btX!ftX!ktX!mtX!otX!ptX!stX!utX!wtX!xtX!ytX!{tX!}tX#OtX#PtX#QtX#StX#TtX#UtX#]tX#dtX#otX$WtX$YtX$ZtX$[tX%StX%TtX%UtX%VtX%^tX~P#AoOk(`O~Oo(bO~P!9cOw(cO~O![(fO~Oepi~P#-rOexi~P#/`Oexi~P#0|O_(yOo(xOq(sOr(sOs)cOeli~P#2jO_(yOq(sOr(sOs)cOeni~P#4[OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X~OeSq$WSq$jSqwSq!fSqdSqaSq$iSq#nSqkSq~P$!{O#l)XO~P`Oefq$Wfq$jfqwfq!ffqdfqafq$ifq#nfqkfq~P$!{Oepy~P#9hOe#mX$W#mX$j#mXw#mX!f#mXd#mXa#mX$i#mX#n#mXk#mX~P$!{OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X~Qb!Rk)QO~Oo)SO~P!9cOw)TO~Ou)dO~O_(yOm(wOo(xOq(sOr(sOs)cOetX~P8xOu)jO~O",
    goto: "!7f%^PPPP%_P'X'e'n(Z+RPPPPP+[P%_PPP%_PP+_+kP%_P%_P%_PPP+tP,SP%_P%_PP,],r-V,zPPPPPPP,zPP,zP/l/o,zP/u/{%_P%_P%_0SPPPPPPPPPPPPPPPPPPPPPPPPPPPP1|2P2V1|P2b4_2b2b6c8`P%_:]%_<V<V>P>]P>fPP<V>r>x6_>|P?UP?X?_?f?l?r?xBXBdBjBpBvB|CSCYPPPPPPPPC`CdH[JULUL[PPLcPPLiLuNu!!u!!{!#S!#X!$n!&X!'v!)vP!)yP!)}!+h!-R!.{!/R!/U%_!/[!1UPPPP!3VH[!3c!5c!5i!7c$oiOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!eRQ'o'wQ(n)fR)])aW!cR'w)a)fR%O#vY!aR#v'w)a)fY#dv$r'y)b)g^$X!z#Z%`%i'{)d)jT&b%}&p%`WOPVXdefgqt!f!j!k!l!n!p!r!s!t!u#n#p#t#x$T$V$_$a$c$l$p$q$t%S%_%h%k%v%|&O&Y&Z&_&o&s&{'O'P'Q'R'S'T'U'V']'^'_'a'b'i'j'l'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(f(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)it!`Rv#Z#v$r%`%i%}&p'w'y'{)a)b)d)f)g)jU#r!`#s$WR$W!zU#r!`#s$WT$j#]$kR$}#tQ#hvQ'q'yQ(o)gR)^)bW#fv'y)b)gR%r$rU!ZP#p$TW$U!u'U(X(yR$x#nQ!^PQ$z#pR%U$TQ%^$VQ&T%hQ&a%|U&f&O&s(fQ&v&oT&|&{'l[#Qdefg$T$ac%V$V%h%|&O&o&s&{'l(f!bjOVq!f!j!k!l!r!s!u#x$p$t%S%k&Y&Z't(R(S(T(U(V(W(X(Y(`(b(c(h(i(m[#Odg$V$a%h&{U#Tef$TQ$O!nS%c$_'][&`%|&O&o&s'l(f#V&}Pt!p!t!z#n#p#t$c$l$q%_%v'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm'v'x'z(Q(l(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR&e%}Q&c%}R&w&pQ&i&OR'}(fS&g&O(fR&y&s$oYOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR$^!zQ$Z!zR&Q%`S$Y!z%`Z$f#Z%i'{)d)j$ubOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$tbOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!|_T#^m$m$u`OPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$uaOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$ohOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$onOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ$i#ZQ's'{Q(q)jR)`)dW$g#Z'{)d)jR&U%iW&X%k'b(c)TX&j&Y'i(h)XQ#`mR%n$mT#_m$mS#]m$mT$j#]$kR!^PQqOR#bqS#s!`$WR${#sQ#w!cR%P#wQ$s#fR%s$sQ#o!ZR$y#o%OXOPVdefgqt!f!j!k!l!n!p!r!s!t!u!z#n#p#t#x$T$V$_$a$c$l$p$q$t%S%_%h%k%v&Y&Z&{'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iS!yX&__&_%|&O&o&s']'l(fS$`#O#TS%d$`&mR&m&`Q&q&cR&x&qQ&t&gR&z&tQ%a$ZR&R%aQ$d#VR%g$dQ%j$gR&V%jQ$k#]R%l$kQ$n#`R%o$nTpOqSSOqW!YP#n#p'UW!xV'm(m)[Q#SeS#Vf!zQ#ctQ#z!fQ#{!jQ#|!kW#}!l'R(U(vQ$P!pQ$Q!rQ$R!sQ$S!tQ$|#tQ%Q#xQ%T$TQ%f$cQ%m$lQ%p$pQ%q$qQ%t$tQ%w%SQ&P%_S&W%k&YQ&[%vQ&k&ZQ'W'OQ'X'PQ'Y'QQ'Z'SQ'['TQ'`'VQ'c'^Q'd'vQ'e'tQ'f'_Q'g'aS'h'b'iQ'k'jQ'n!uQ'p'xQ'r'zQ'|(QQ(O(lQ(Z(RQ([(SQ(](TQ(^(VQ(_(WQ(a(YQ(d(`Q(e(bS(g(c(hQ(j(iQ(k(XQ(p)iQ({(sQ(|(tQ(}(uQ)O(wQ)P(xQ)R(zQ)U)QQ)V)SS)W)T)XQ)Z)YQ)_)cR)h(y$ooOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)ipROVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'wPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)a'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)f$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX!dR'w)a)fZ!bR#v'w)a)fQ#t!aR$q#dQ#x!eQ'V'oQ(Y(nR(z)]ptOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'xPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip(Q$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mq(l'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[pvOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'yPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)b'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)g$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX#gv'y)b)gZ#ev$r'y)b)gV![P#p$Td!jS#z$Q$R%Q%t%w&W&k'n!W'P!Y#S#V#c$P$S$|%T%f%m%q&P&['W'Z'['`'f'g'h'k'p'r'|(O(p)_f(S%p'e(Z(^(_(a(d(e(g(j(kg(t'c'd({)O)P)R)U)V)W)Z)hf!kS#z#{$Q$R%Q%t%w&W&k'n!Y'Q!Y#S#V#c$P$S$|%T%f%m%q&P&['W'X'Z'['`'f'g'h'k'p'r'|(O(p)_h(T%p'e(Z([(^(_(a(d(e(g(j(ki(u'c'd({(|)O)P)R)U)V)W)Z)hh!lS#z#{#|$Q$R%Q%t%w&W&k'n!['R!Y#S#V#c$P$S$|%T%f%m%q&P&['W'X'Y'Z'['`'f'g'h'k'p'r'|(O(p)_j(U%p'e(Z([(](^(_(a(d(e(g(j(kk(v'c'd({(|(})O)P)R)U)V)W)Z)hpVOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'mPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip(m$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mq)['^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[R&d%}T&h&O(f$P!nS!Y!x#S#V#c#z#{#|#}$P$Q$R$S$|%Q%T%f%m%p%q%t%w&P&W&[&k'W'X'Y'Z'['`'c'd'e'f'g'h'k'n'p'r'|(O(Z([(](^(_(a(d(e(g(j(k(p({(|(})O)P)R)U)V)W)Z)_)h$P!pS!Y!x#S#V#c#z#{#|#}$P$Q$R$S$|%Q%T%f%m%p%q%t%w&P&W&[&k'W'X'Y'Z'['`'c'd'e'f'g'h'k'n'p'r'|(O(Z([(](^(_(a(d(e(g(j(k(p({(|(})O)P)R)U)V)W)Z)_)h$oZOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!{ZR!}`R$[!zQ#WfR$]!z$ocOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$hcOPVqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iU#Qdg$aV#Uef$TW#Rdef$TQ#XgR%e$apkOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j(PPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)e'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)k$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX$h#Z'{)d)j$omOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR#am",
    nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName string length upper case lower substring before after starts with ends contains insert index distinct values met by overlaps finished started day year week month get value entries NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
    maxTerm: 198,
    context: variableTracker$1,
    nodeProps: [
      ["group", -17,4,18,22,28,30,32,40,42,67,69,71,112,113,115,116,117,124,"Expression",47,"Expression Expression",-5,105,106,107,108,109,"Expression Literal"],
      ["closedBy", 37,")",70,"]",123,"}"],
      ["openedBy", 39,"(",68,"[",122,"{"]
    ],
    propSources: [feelHighlighting$1],
    skippedNodes: [0,1,2],
    repeatNodeCount: 14,
    tokenData: ")x~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx%_xy%dyz%iz{%n{|%{|}&Q}!O&V!O!P&d!P!Q&|!Q![(X![!](j!]!^(o!^!_(t!_!`$f!`!a)T!b!c)_!}#O)d#P#Q)i#Q#R%v#o#p)n#q#r)s$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY$^~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O$_~~$cP!_!`$f~$kOq~~$pU%T~OY$kZr$krs%Ss#O$k#O#P%X#P~$k~%XO%T~~%[PO~$k~%dO$g~~%iOu~~%nOw~~%sP^~z{%v~%{Oy~~&QO[~~&VO$j~R&[PZP!`!a&_Q&dO$xQ~&iQ$f~!O!P&o!Q![&t~&tO$i~~&yP%S~!Q![&t~'RQ]~z{'X!P!Q'|~'[ROz'Xz{'e{~'X~'hTOz'Xz{'e{!P'X!P!Q'w!Q~'X~'|OQ~~(RQP~OY'|Z~'|~(^Q%S~!O!P(d!Q![(X~(gP!Q![&t~(oO$v~~(tO%^~R({P![QrP!_!`)OP)TOrPR)[P!XQrP!_!`)O~)dO%V~~)iO!h~~)nO!f~~)sO#o~~)xO#n~",
    tokenizers: [propertyIdentifiers$1, identifiers$1, insertSemicolon$1, 0, 1],
    topRules: {"Expressions":[0,3],"UnaryTests":[1,129]},
    dynamicPrecedences: {"30":-1,"71":-1,"101":-1,"154":-1},
    specialized: [{term: 148, get: value => spec_identifier$1[value] || -1}],
    tokenPrec: 0
  });

  function parseParameterNames(fn) {
      if (Array.isArray(fn.$args)) {
          return fn.$args;
      }
      const code = fn.toString();
      const match = /^(?:[^(]*\s*)?\(([^)]+)?\)/.exec(code);
      if (!match) {
          throw new Error('failed to parse params: ' + code);
      }
      const [_, params] = match;
      if (!params) {
          return [];
      }
      return params.split(',').map(p => p.trim());
  }
  function notImplemented(thing) {
      return new Error(`not implemented: ${thing}`);
  }
  /**
   * @param {string} name
   * @param {Record<string, any>} context
   *
   * @return {any}
   */
  function getFromContext(name, context) {
      if (['nil', 'boolean', 'number', 'string'].includes(getType(context))) {
          return null;
      }
      if (name in context) {
          return context[name];
      }
      const normalizedName = normalizeContextKey$1(name);
      if (normalizedName in context) {
          return context[normalizedName];
      }
      const entry = Object.entries(context).find(([key]) => normalizedName === normalizeContextKey$1(key));
      if (entry) {
          return entry[1];
      }
      return null;
  }

  function isDateTime(obj) {
      return DateTime.isDateTime(obj);
  }
  function isDuration(obj) {
      return Duration.isDuration(obj);
  }
  function duration$1(opts) {
      if (typeof opts === 'number') {
          return Duration.fromMillis(opts);
      }
      return Duration.fromISO(opts);
  }
  function date(str = null, time = null, zone = null) {
      if (time) {
          if (str) {
              throw new Error('<str> and <time> provided');
          }
          return date(`1900-01-01T${time}`);
      }
      if (typeof str === 'string') {
          if (str.startsWith('-')) {
              throw notImplemented('negative date');
          }
          if (!str.includes('T')) {
              // raw dates are in UTC time zone
              return date(str + 'T00:00:00.000Z');
          }
          if (str.includes('@')) {
              if (zone) {
                  throw new Error('<zone> already provided');
              }
              const [datePart, zonePart] = str.split('@');
              return date(datePart, null, Info.normalizeZone(zonePart));
          }
          return DateTime.fromISO(str.toUpperCase(), {
              setZone: true,
              zone
          });
      }
      return DateTime.now();
  }

  function isContext(e) {
      return Object.getPrototypeOf(e) === Object.prototype;
  }
  function isArray$2(e) {
      return Array.isArray(e);
  }
  function isBoolean(e) {
      return typeof e === 'boolean';
  }
  function getType(e) {
      if (e === null || e === undefined) {
          return 'nil';
      }
      if (isBoolean(e)) {
          return 'boolean';
      }
      if (isNumber$1(e)) {
          return 'number';
      }
      if (isString$1(e)) {
          return 'string';
      }
      if (isContext(e)) {
          return 'context';
      }
      if (isArray$2(e)) {
          return 'list';
      }
      if (isDuration(e)) {
          return 'duration';
      }
      if (isDateTime(e)) {
          if (e.year === 1900 &&
              e.month === 1 &&
              e.day === 1) {
              return 'time';
          }
          if (e.hour === 0 &&
              e.minute === 0 &&
              e.second === 0 &&
              e.millisecond === 0 &&
              e.zone === FixedOffsetZone.utcInstance) {
              return 'date';
          }
          return 'date time';
      }
      if (e instanceof Range$1) {
          return 'range';
      }
      if (e instanceof FunctionWrapper) {
          return 'function';
      }
      return 'literal';
  }
  function isType(el, type) {
      return getType(el) === type;
  }
  function typeCast(obj, type) {
      if (isDateTime(obj)) {
          if (type === 'time') {
              return obj.set({
                  year: 1900,
                  month: 1,
                  day: 1
              });
          }
          if (type === 'date') {
              return obj.setZone('utc', { keepLocalTime: true }).startOf('day');
          }
          if (type === 'date time') {
              return obj;
          }
      }
      return null;
  }
  let Range$1 = class Range {
      constructor(props) {
          Object.assign(this, props);
      }
  };
  function isNumber$1(obj) {
      return typeof obj === 'number';
  }
  function isString$1(obj) {
      return typeof obj === 'string';
  }
  function equals(a, b) {
      if (a === null && b !== null ||
          a !== null && b === null) {
          return false;
      }
      if (isArray$2(a) && a.length < 2) {
          a = a[0];
      }
      if (isArray$2(b) && b.length < 2) {
          b = b[0];
      }
      const aType = getType(a);
      const bType = getType(b);
      if (aType !== bType) {
          return null;
      }
      if (aType === 'nil') {
          return true;
      }
      if (aType === 'list') {
          if (a.length !== b.length) {
              return false;
          }
          return a.every((element, idx) => equals(element, b[idx]));
      }
      if (aType === 'date time' || aType === 'time' || aType === 'date') {
          return (a.toUTC().valueOf() === b.toUTC().valueOf());
      }
      if (aType === 'duration') {
          // years and months duration -> months
          if (Math.abs(a.as('days')) > 180) {
              return Math.trunc(a.minus(b).as('months')) === 0;
          }
          // days and time duration -> seconds
          else {
              return Math.trunc(a.minus(b).as('seconds')) === 0;
          }
      }
      if (aType === 'context') {
          const aEntries = Object.entries(a);
          const bEntries = Object.entries(b);
          if (aEntries.length !== bEntries.length) {
              return false;
          }
          return aEntries.every(([key, value]) => key in b && equals(value, b[key]));
      }
      if (aType === 'range') {
          return [
              [a.start, b.start],
              [a.end, b.end],
              [a['start included'], b['start included']],
              [a['end included'], b['end included']]
          ].every(([a, b]) => a === b);
      }
      if (a == b) {
          return true;
      }
      return aType === bType ? false : null;
  }
  class FunctionWrapper {
      constructor(fn, parameterNames) {
          this.fn = fn;
          this.parameterNames = parameterNames;
      }
      invoke(contextOrArgs) {
          let params;
          if (isArray$2(contextOrArgs)) {
              params = contextOrArgs;
          }
          else {
              params = this.parameterNames.map(n => contextOrArgs[n]);
          }
          return this.fn.call(null, ...params);
      }
  }

  // 10.3.4 Built-in functions
  const builtins$1 = {
      // 10.3.4.1 Conversion functions
      'number': function () {
          throw notImplemented('number');
      },
      'string': fn(function (from) {
          if (arguments.length !== 1) {
              return null;
          }
          return toString$2(from);
      }, ['any']),
      // date(from) => date string
      // date(from) => date and time
      // date(year, month, day)
      'date': fn(function (year, month, day, from) {
          if (!from && !isNumber$1(year)) {
              from = year;
              year = null;
          }
          let d;
          if (isString$1(from)) {
              d = date(from);
          }
          if (isDateTime(from)) {
              d = from;
          }
          if (year) {
              d = date().setZone('utc').set({
                  year,
                  month,
                  day
              });
          }
          return d && ifValid(d.setZone('utc').startOf('day')) || null;
      }, ['any?', 'number?', 'number?', 'any?']),
      // date and time(from) => date time string
      // date and time(date, time)
      'date and time': fn(function (d, time, from) {
          let dt;
          if (isDateTime(d) && isDateTime(time)) {
              dt = time.set({
                  year: d.year,
                  month: d.month,
                  day: d.day
              });
          }
          if (isString$1(d)) {
              from = d;
              d = null;
          }
          if (isString$1(from)) {
              dt = date(from);
          }
          return dt && ifValid(dt) || null;
      }, ['any?', 'time?', 'string?'], ['date', 'time', 'from']),
      // time(from) => time string
      // time(from) => time, date and time
      // time(hour, minute, second, offset?) => ...
      'time': fn(function (hour, minute, second, offset, from) {
          let t;
          if (offset) {
              throw notImplemented('time(..., offset)');
          }
          if (isString$1(hour) || isDateTime(hour)) {
              from = hour;
              hour = null;
          }
          if (isString$1(from)) {
              t = date(null, from);
          }
          if (isDateTime(from)) {
              t = from.set({
                  year: 1900,
                  month: 1,
                  day: 1
              });
          }
          if (isNumber$1(hour)) {
              // TODO: support offset = days and time duration
              t = date().set({
                  hour,
                  minute,
                  second
              }).set({
                  year: 1900,
                  month: 1,
                  day: 1,
                  millisecond: 0
              });
          }
          return t && ifValid(t) || null;
      }, ['any?', 'number?', 'number?', 'any?', 'any?']),
      'duration': fn(function (from) {
          return ifValid(duration$1(from));
      }, ['string']),
      'years and months duration': fn(function (from, to) {
          return ifValid(to.diff(from, ['years', 'months']));
      }, ['date', 'date']),
      '@': fn(function (string) {
          let t;
          if (/^-?P/.test(string)) {
              t = duration$1(string);
          }
          else if (/^[\d]{1,2}:[\d]{1,2}:[\d]{1,2}/.test(string)) {
              t = date(null, string);
          }
          else {
              t = date(string);
          }
          return t && ifValid(t) || null;
      }, ['string']),
      'now': fn(function () {
          return date();
      }, []),
      'today': fn(function () {
          return date().startOf('day');
      }, []),
      // 10.3.4.2 Boolean function
      'not': fn(function (bool) {
          return isType(bool, 'boolean') ? !bool : null;
      }, ['any']),
      // 10.3.4.3 String functions
      'substring': fn(function (string, start, length) {
          const _start = (start < 0 ? string.length + start : start - 1);
          const arr = Array.from(string);
          return (typeof length !== 'undefined'
              ? arr.slice(_start, _start + length)
              : arr.slice(_start)).join('');
      }, ['string', 'number', 'number?'], ['string', 'start position', 'length']),
      'string length': fn(function (string) {
          return countSymbols(string);
      }, ['string']),
      'upper case': fn(function (string) {
          return string.toUpperCase();
      }, ['string']),
      'lower case': fn(function (string) {
          return string.toLowerCase();
      }, ['string']),
      'substring before': fn(function (string, match) {
          const index = string.indexOf(match);
          if (index === -1) {
              return '';
          }
          return string.substring(0, index);
      }, ['string', 'string']),
      'substring after': fn(function (string, match) {
          const index = string.indexOf(match);
          if (index === -1) {
              return '';
          }
          return string.substring(index + match.length);
      }, ['string', 'string']),
      'replace': fn(function (input, pattern, replacement, flags) {
          return input.replace(new RegExp(pattern, 'ug' + (flags || '').replace(/[x]/g, '')), replacement.replace(/\$0/g, '$$&'));
      }, ['string', 'string', 'string', 'string?']),
      'contains': fn(function (string, match) {
          return string.includes(match);
      }, ['string', 'string']),
      'starts with': fn(function (string, match) {
          return string.startsWith(match);
      }, ['string', 'string']),
      'ends with': fn(function (string, match) {
          return string.endsWith(match);
      }, ['string', 'string']),
      'split': fn(function (string, delimiter) {
          return string.split(new RegExp(delimiter, 'u'));
      }, ['string', 'string']),
      // 10.3.4.4 List functions
      'list contains': fn(function (list, element) {
          return list.some(el => matches$1(el, element));
      }, ['list', 'any?']),
      'count': fn(function (list) {
          return list.length;
      }, ['list']),
      'min': listFn(function (list) {
          return list.reduce((min, el) => min === null ? el : Math.min(min, el), null);
      }, 'number'),
      'max': listFn(function (list) {
          return list.reduce((max, el) => max === null ? el : Math.max(max, el), null);
      }, 'number'),
      'sum': listFn(function (list) {
          return sum(list);
      }, 'number'),
      'mean': listFn(function (list) {
          const s = sum(list);
          return s === null ? s : s / list.length;
      }, 'number'),
      'all': listFn(function (list) {
          let nonBool = false;
          for (const o of list) {
              if (o === false) {
                  return false;
              }
              if (typeof o !== 'boolean') {
                  nonBool = true;
              }
          }
          return nonBool ? null : true;
      }, 'any?'),
      'any': listFn(function (list) {
          let nonBool = false;
          for (const o of list) {
              if (o === true) {
                  return true;
              }
              if (typeof o !== 'boolean') {
                  nonBool = true;
              }
          }
          return nonBool ? null : false;
      }, 'any?'),
      'sublist': fn(function (list, start, length) {
          const _start = (start < 0 ? list.length + start : start - 1);
          return (typeof length !== 'undefined'
              ? list.slice(_start, _start + length)
              : list.slice(_start));
      }, ['list', 'number', 'number?']),
      'append': fn(function (list, ...items) {
          return list.concat(items);
      }, ['list', 'any?']),
      'concatenate': fn(function (...args) {
          return args.reduce((result, arg) => {
              return result.concat(arg);
          }, []);
      }, ['any']),
      'insert before': fn(function (list, position, newItem) {
          return list.slice(0, position - 1).concat([newItem], list.slice(position - 1));
      }, ['list', 'number', 'any?']),
      'remove': fn(function (list, position) {
          return list.slice(0, position - 1).concat(list.slice(position));
      }, ['list', 'number']),
      'reverse': fn(function (list) {
          return list.slice().reverse();
      }, ['list']),
      'index of': fn(function (list, match) {
          return list.reduce(function (result, element, index) {
              if (matches$1(element, match)) {
                  result.push(index + 1);
              }
              return result;
          }, []);
      }, ['list', 'any']),
      'union': fn(function (..._lists) {
          throw notImplemented('union');
      }, ['list']),
      'distinct values': fn(function (_list) {
          throw notImplemented('distinct values');
      }, ['list']),
      'flatten': fn(function (list) {
          return flatten$1(list);
      }, ['list']),
      'product': listFn(function (list) {
          if (list.length === 0) {
              return null;
          }
          return list.reduce((result, n) => {
              return result * n;
          }, 1);
      }, 'number'),
      'median': listFn(function (list) {
          if (list.length === 0) {
              return null;
          }
          return median(list);
      }, 'number'),
      'stddev': listFn(function (list) {
          if (list.length < 2) {
              return null;
          }
          return stddev(list);
      }, 'number'),
      'mode': listFn(function (list) {
          return mode(list);
      }, 'number'),
      // 10.3.4.5 Numeric functions
      'decimal': fn(function (n, scale) {
          if (!scale) {
              return round$2(n);
          }
          const offset = Math.pow(10, scale);
          return round$2(n * offset) / (offset);
      }, ['number', 'number']),
      'floor': fn(function (n) {
          return Math.floor(n);
      }, ['number']),
      'ceiling': fn(function (n) {
          return Math.ceil(n) + 0;
      }, ['number']),
      'abs': fn(function (n) {
          if (typeof n !== 'number') {
              return null;
          }
          return Math.abs(n);
      }, ['number']),
      'modulo': fn(function (dividend, divisor) {
          if (!divisor) {
              return null;
          }
          const adjust = 1000000000;
          // cf. https://dustinpfister.github.io/2017/09/02/js-whats-wrong-with-modulo/
          //
          // need to round here as using this custom modulo
          // variant is prone to rounding errors
          return Math.round((dividend % divisor + divisor) % divisor * adjust) / adjust;
      }, ['number', 'number']),
      'sqrt': fn(function (number) {
          if (number < 0) {
              return null;
          }
          return Math.sqrt(number);
      }, ['number']),
      'log': fn(function (number) {
          if (number <= 0) {
              return null;
          }
          return Math.log(number);
      }, ['number']),
      'exp': fn(function (number) {
          return Math.exp(number);
      }, ['number']),
      'odd': fn(function (number) {
          return Math.abs(number) % 2 === 1;
      }, ['number']),
      'even': fn(function (number) {
          return Math.abs(number) % 2 === 0;
      }, ['number']),
      // 10.3.4.6 Date and time functions
      'is': fn(function (value1, value2) {
          if (typeof value1 === 'undefined' || typeof value2 === 'undefined') {
              return false;
          }
          return equals(value1, value2);
      }, ['any?', 'any?']),
      // 10.3.4.7 Range Functions
      'before': fn(function (a, b) {
          return before(a, b);
      }, ['any', 'any']),
      'after': fn(function (a, b) {
          return before(b, a);
      }, ['any', 'any']),
      'meets': fn(function (a, b) {
          return meets(a, b);
      }, ['range', 'range']),
      'met by': fn(function (a, b) {
          return meets(b, a);
      }, ['range', 'range']),
      'overlaps': fn(function () {
          throw notImplemented('overlaps');
      }, ['any?']),
      'overlaps before': fn(function () {
          throw notImplemented('overlaps before');
      }, ['any?']),
      'overlaps after': fn(function () {
          throw notImplemented('overlaps after');
      }, ['any?']),
      'finishes': fn(function () {
          throw notImplemented('finishes');
      }, ['any?']),
      'finished by': fn(function () {
          throw notImplemented('finished by');
      }, ['any?']),
      'includes': fn(function () {
          throw notImplemented('includes');
      }, ['any?']),
      'during': fn(function () {
          throw notImplemented('during');
      }, ['any?']),
      'starts': fn(function () {
          throw notImplemented('starts');
      }, ['any?']),
      'started by': fn(function () {
          throw notImplemented('started by');
      }, ['any?']),
      'coincides': fn(function () {
          throw notImplemented('coincides');
      }, ['any?']),
      // 10.3.4.8 Temporal built-in functions
      'day of year': fn(function () {
          throw notImplemented('day of year');
      }, ['any?']),
      'day of week': fn(function () {
          throw notImplemented('day of week');
      }, ['any?']),
      'month of year': fn(function () {
          throw notImplemented('month of year');
      }, ['any?']),
      'week of year': fn(function () {
          throw notImplemented('week of year');
      }, ['any?']),
      // 10.3.4.9 Sort
      'sort': function () {
          throw notImplemented('sort');
      },
      // 10.3.4.10 Context function
      'get value': fn(function (m, key) {
          return getFromContext(key, m);
      }, ['context', 'string']),
      'get entries': fn(function (m) {
          if (arguments.length !== 1) {
              return null;
          }
          if (Array.isArray(m)) {
              return null;
          }
          return Object.entries(m).map(([key, value]) => ({ key, value }));
      }, ['context']),
      'context': listFn(function (_contexts) {
          throw notImplemented('context');
      }, 'context'),
      'context merge': listFn(function (_contexts) {
          throw notImplemented('context merge');
      }, 'context'),
      'context put': fn(function (_context, _keys, _value) {
          throw notImplemented('context put');
      }, ['context', 'list', 'any'])
  };
  function matches$1(a, b) {
      return a === b;
  }
  const FALSE = {};
  function createArgTester(arg) {
      const optional = arg.endsWith('?');
      const type = optional ? arg.substring(0, arg.length - 1) : arg;
      return function (obj) {
          const arr = Array.isArray(obj);
          if (type === 'list') {
              if (arr || optional && typeof obj === 'undefined') {
                  return obj;
              }
              else {
                  // implicit conversion obj => [ obj ]
                  return [obj];
              }
          }
          if (type !== 'any' && arr && obj.length === 1) {
              // implicit conversion [ obj ] => obj
              obj = obj[0];
          }
          if (type === 'range') {
              return obj instanceof Range$1 ? obj : FALSE;
          }
          const objType = getType(obj);
          if (objType === 'nil') {
              return (optional ? obj : FALSE);
          }
          if (type === 'any' || type === objType) {
              return obj;
          }
          return typeCast(obj, type) || FALSE;
      };
  }
  function createArgsValidator(argDefinitions) {
      const tests = argDefinitions.map(createArgTester);
      return function (args) {
          while (args.length < argDefinitions.length) {
              args.push(undefined);
          }
          return args.reduce((result, arg, index) => {
              if (result === false) {
                  return result;
              }
              const test = tests[index];
              const conversion = test ? test(arg) : arg;
              if (conversion === FALSE) {
                  return false;
              }
              result.push(conversion);
              return result;
          }, []);
      };
  }
  /**
   * @param {Function} fnDefinition
   * @param {string} type
   * @param {string[]} [parameterNames]
   *
   * @return {Function}
   */
  function listFn(fnDefinition, type, parameterNames = null) {
      const tester = createArgTester(type);
      const wrappedFn = function (...args) {
          if (args.length === 0) {
              return null;
          }
          // unwrap first arg
          if (Array.isArray(args[0]) && args.length === 1) {
              args = args[0];
          }
          if (!args.every(arg => tester(arg) !== FALSE)) {
              return null;
          }
          return fnDefinition(args);
      };
      wrappedFn.$args = parameterNames || parseParameterNames(fnDefinition);
      return wrappedFn;
  }
  /**
   * @param {Function} fnDefinition
   * @param {string[]} argDefinitions
   * @param {string[]} [parameterNames]
   *
   * @return {Function}
   */
  function fn(fnDefinition, argDefinitions, parameterNames = null) {
      const checkArgs = createArgsValidator(argDefinitions);
      parameterNames = parameterNames || parseParameterNames(fnDefinition);
      const wrappedFn = function (...args) {
          const convertedArgs = checkArgs(args);
          if (!convertedArgs) {
              return null;
          }
          return fnDefinition(...convertedArgs);
      };
      wrappedFn.$args = parameterNames;
      return wrappedFn;
  }
  function meets(a, b) {
      return [
          (a.end === b.start),
          (a['end included'] === true),
          (b['start included'] === true)
      ].every(v => v);
  }
  function before(a, b) {
      if (a instanceof Range$1 && b instanceof Range$1) {
          return (a.end < b.start || (!a['end included'] || !b['start included']) && a.end == b.start);
      }
      if (a instanceof Range$1) {
          return (a.end < b || (!a['end included'] && a.end === b));
      }
      if (b instanceof Range$1) {
          return (b.start > a || (!b['start included'] && b.start === a));
      }
      return a < b;
  }
  function sum(list) {
      return list.reduce((sum, el) => sum === null ? el : sum + el, null);
  }
  function flatten$1([x, ...xs]) {
      return (x !== undefined
          ? [...Array.isArray(x) ? flatten$1(x) : [x], ...flatten$1(xs)]
          : []);
  }
  function toKeyString(key) {
      if (typeof key === 'string' && /\W/.test(key)) {
          return toString$2(key, true);
      }
      return key;
  }
  function toDeepString(obj) {
      return toString$2(obj, true);
  }
  function escapeStr(str) {
      return str.replace(/("|\\)/g, '\\$1');
  }
  function toString$2(obj, wrap = false) {
      var _a, _b, _c, _d;
      const type = getType(obj);
      if (type === 'nil') {
          return 'null';
      }
      if (type === 'string') {
          return wrap ? `"${escapeStr(obj)}"` : obj;
      }
      if (type === 'boolean' || type === 'number') {
          return String(obj);
      }
      if (type === 'list') {
          return '[' + obj.map(toDeepString).join(', ') + ']';
      }
      if (type === 'context') {
          return '{' + Object.entries(obj).map(([key, value]) => {
              return toKeyString(key) + ': ' + toDeepString(value);
          }).join(', ') + '}';
      }
      if (type === 'duration') {
          return obj.shiftTo('years', 'months', 'days', 'hours', 'minutes', 'seconds').normalize().toISO();
      }
      if (type === 'date time') {
          if ((_a = obj.zone) === null || _a === void 0 ? void 0 : _a.zoneName) {
              return obj.toISO({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_b = obj.zone) === null || _b === void 0 ? void 0 : _b.zoneName);
          }
          return obj.toISO({ suppressMilliseconds: true });
      }
      if (type === 'date') {
          return obj.toISODate();
      }
      if (type === 'range') {
          return '<range>';
      }
      if (type === 'time') {
          if ((_c = obj.zone) === null || _c === void 0 ? void 0 : _c.zoneName) {
              return obj.toISOTime({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_d = obj.zone) === null || _d === void 0 ? void 0 : _d.zoneName);
          }
          return obj.toISOTime({ suppressMilliseconds: true });
      }
      if (type === 'function') {
          return '<function>';
      }
      throw notImplemented('string(' + type + ')');
  }
  function countSymbols(str) {
      // cf. https://mathiasbynens.be/notes/javascript-unicode
      return str.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
  }
  function round$2(n) {
      const integral = Math.trunc(n);
      if (n - integral > .5) {
          return integral + 1;
      }
      else {
          return integral;
      }
  }
  // adapted from https://stackoverflow.com/a/53577159
  function stddev(array) {
      const n = array.length;
      const mean = array.reduce((a, b) => a + b) / n;
      return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / (n - 1));
  }
  function median(array) {
      const n = array.length;
      const sorted = array.slice().sort();
      const mid = n / 2 - 1;
      const index = Math.ceil(mid);
      // even
      if (mid === index) {
          return (sorted[index] + sorted[index + 1]) / 2;
      }
      // uneven
      return sorted[index];
  }
  function mode(array) {
      if (array.length < 2) {
          return array;
      }
      const buckets = {};
      for (const n of array) {
          buckets[n] = (buckets[n] || 0) + 1;
      }
      const sorted = Object.entries(buckets).sort((a, b) => b[1] - a[1]);
      return sorted.filter(s => s[1] === sorted[0][1]).map(e => +e[0]);
  }
  function ifValid(o) {
      return o.isValid ? o : null;
  }

  function parseExpressions(expression, context = {}) {
      return parser$2.configure({
          top: 'Expressions',
          contextTracker: trackVariables$1(context)
      }).parse(expression);
  }
  function parseUnaryTests(expression, context = {}) {
      return parser$2.configure({
          top: 'UnaryTests',
          contextTracker: trackVariables$1(context)
      }).parse(expression);
  }

  class Interpreter {
      _buildExecutionTree(tree, input) {
          const root = { args: [], nodeInput: input };
          const stack = [root];
          tree.iterate({
              enter(nodeRef) {
                  const { isError, isSkipped } = nodeRef.type;
                  const { from, to } = nodeRef;
                  if (isError) {
                      throw new Error(`Statement unparseable at [${from}, ${to}]`);
                  }
                  if (isSkipped) {
                      return false;
                  }
                  const nodeInput = input.slice(from, to);
                  stack.push({
                      nodeInput,
                      args: []
                  });
              },
              leave(nodeRef) {
                  if (nodeRef.type.isSkipped) {
                      return;
                  }
                  const { nodeInput, args } = stack.pop();
                  const parent = stack[stack.length - 1];
                  const expr = evalNode(nodeRef, nodeInput, args);
                  parent.args.push(expr);
              }
          });
          return root.args[root.args.length - 1];
      }
      evaluate(expression, context = {}) {
          const parseTree = parseExpressions(expression, context);
          const root = this._buildExecutionTree(parseTree, expression);
          return {
              parseTree,
              root
          };
      }
      unaryTest(expression, context = {}) {
          const parseTree = parseUnaryTests(expression, context);
          const root = this._buildExecutionTree(parseTree, expression);
          return {
              parseTree,
              root
          };
      }
  }
  const interpreter = new Interpreter();
  function unaryTest(expression, context = {}) {
      const value = context['?'] || null;
      const { root } = interpreter.unaryTest(expression, context);
      // root = fn(ctx) => test(val)
      const test = root(context);
      return test(value);
  }
  function evaluate(expression, context = {}) {
      const { root } = interpreter.evaluate(expression, context);
      // root = [ fn(ctx) ]
      const results = root(context);
      if (results.length === 1) {
          return results[0];
      }
      else {
          return results;
      }
  }
  function evalNode(node, input, args) {
      switch (node.name) {
          case 'ArithOp': return (context) => {
              const nullable = (op, types = ['number']) => (a, b) => {
                  const left = a(context);
                  const right = b(context);
                  if (isArray$2(left)) {
                      return null;
                  }
                  if (isArray$2(right)) {
                      return null;
                  }
                  const leftType = getType(left);
                  const rightType = getType(right);
                  if (leftType !== rightType ||
                      !types.includes(leftType)) {
                      return null;
                  }
                  return op(left, right);
              };
              switch (input) {
                  case '+': return nullable((a, b) => a + b, ['string', 'number']);
                  case '-': return nullable((a, b) => a - b);
                  case '*': return nullable((a, b) => a * b);
                  case '/': return nullable((a, b) => !b ? null : a / b);
                  case '**':
                  case '^': return nullable((a, b) => Math.pow(a, b));
              }
          };
          case 'CompareOp': return tag(() => {
              switch (input) {
                  case '>': return (b) => createRange(b, null, false, false);
                  case '>=': return (b) => createRange(b, null, true, false);
                  case '<': return (b) => createRange(null, b, false, false);
                  case '<=': return (b) => createRange(null, b, false, true);
                  case '=': return (b) => (a) => equals(a, b);
                  case '!=': return (b) => (a) => !equals(a, b);
              }
          }, Test('boolean'));
          case 'Wildcard': return (_context) => true;
          case 'null': return (_context) => {
              return null;
          };
          case 'Disjunction': return tag((context) => {
              const left = args[0](context);
              const right = args[2](context);
              const matrix = [
                  [true, true, true],
                  [true, false, true],
                  [true, null, true],
                  [false, true, true],
                  [false, false, false],
                  [false, null, null],
                  [null, true, true],
                  [null, false, null],
                  [null, null, null],
              ];
              const a = typeof left === 'boolean' ? left : null;
              const b = typeof right === 'boolean' ? right : null;
              return matrix.find(el => el[0] === a && el[1] === b)[2];
          }, Test('boolean'));
          case 'Conjunction': return tag((context) => {
              const left = args[0](context);
              const right = args[2](context);
              const matrix = [
                  [true, true, true],
                  [true, false, false],
                  [true, null, null],
                  [false, true, false],
                  [false, false, false],
                  [false, null, false],
                  [null, true, null],
                  [null, false, false],
                  [null, null, null],
              ];
              const a = typeof left === 'boolean' ? left : null;
              const b = typeof right === 'boolean' ? right : null;
              return matrix.find(el => el[0] === a && el[1] === b)[2];
          }, Test('boolean'));
          case 'Context': return (context) => {
              return args.slice(1, -1).reduce((obj, arg) => {
                  const [key, value] = arg(Object.assign(Object.assign({}, context), obj));
                  return Object.assign(Object.assign({}, obj), { [key]: value });
              }, {});
          };
          case 'FunctionBody': return args[0];
          case 'FormalParameters': return args;
          case 'FormalParameter': return args[0];
          case 'ParameterName': return args.join(' ');
          case 'FunctionDefinition': return (context) => {
              const parameterNames = args[2];
              const fnBody = args[4];
              return wrapFunction((...args) => {
                  const fnContext = parameterNames.reduce((context, name, idx) => {
                      // support positional parameters
                      context[name] = args[idx];
                      return context;
                  }, Object.assign({}, context));
                  return fnBody(fnContext);
              }, parameterNames);
          };
          case 'ContextEntry': return (context) => {
              const key = typeof args[0] === 'function' ? args[0](context) : args[0];
              const value = args[1](context);
              return [key, value];
          };
          case 'Key': return args[0];
          case 'Identifier': return input;
          case 'SpecialFunctionName': return (context) => getBuiltin(input);
          // preserve spaces in name, but compact multiple
          // spaces into one (token)
          case 'Name': return input.replace(/\s{2,}/g, ' ');
          case 'VariableName': return (context) => {
              const name = args.join(' ');
              return getBuiltin(name) || getFromContext(name, context);
          };
          case 'QualifiedName': return (context) => {
              return args.reduce((context, arg) => arg(context), context);
          };
          case '?': return (context) => getFromContext('?', context);
          // expression
          // expression ".." expression
          case 'IterationContext': return (context) => {
              const a = args[0](context);
              const b = args[1] && args[1](context);
              return b ? createRange(a, b) : a;
          };
          case 'Type': return args[0];
          case 'InExpressions': return (context) => {
              const iterationContexts = args.map(ctx => ctx(context));
              if (iterationContexts.some(ctx => getType(ctx) !== 'list')) {
                  return null;
              }
              return cartesianProduct(iterationContexts).map(ctx => {
                  if (!isArray$2(ctx)) {
                      ctx = [ctx];
                  }
                  return Object.assign({}, context, ...ctx);
              });
          };
          // Name kw<"in"> Expr
          case 'InExpression': return (context) => {
              return extractValue(context, args[0], args[2]);
          };
          case 'SpecialType': throw notImplemented('SpecialType');
          case 'InstanceOfExpression': return tag((context) => {
              const a = args[0](context);
              const b = args[3](context);
              return a instanceof b;
          }, Test('boolean'));
          case 'every': return tag((context) => {
              return (_contexts, _condition) => {
                  const contexts = _contexts(context);
                  if (getType(contexts) !== 'list') {
                      return contexts;
                  }
                  return contexts.every(ctx => isTruthy(_condition(ctx)));
              };
          }, Test('boolean'));
          case 'some': return tag((context) => {
              return (_contexts, _condition) => {
                  const contexts = _contexts(context);
                  if (getType(contexts) !== 'list') {
                      return contexts;
                  }
                  return contexts.some(ctx => isTruthy(_condition(ctx)));
              };
          }, Test('boolean'));
          case 'NumericLiteral': return tag((_context) => input.includes('.') ? parseFloat(input) : parseInt(input), 'number');
          case 'BooleanLiteral': return tag((_context) => input === 'true' ? true : false, 'boolean');
          case 'StringLiteral': return tag((_context) => parseString(input), 'string');
          case 'PositionalParameters': return (context) => args.map(arg => arg(context));
          case 'NamedParameter': return (context) => {
              const name = args[0];
              const value = args[1](context);
              return [name, value];
          };
          case 'NamedParameters': return (context) => args.reduce((args, arg) => {
              const [name, value] = arg(context);
              args[name] = value;
              return args;
          }, {});
          case 'DateTimeConstructor': return (context) => {
              return getBuiltin(input);
          };
          case 'DateTimeLiteral': return (context) => {
              // AtLiteral
              if (args.length === 1) {
                  return args[0](context);
              }
              // FunctionInvocation
              else {
                  const wrappedFn = wrapFunction(args[0](context));
                  if (!wrappedFn) {
                      throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                  }
                  const contextOrArgs = args[2](context);
                  return wrappedFn.invoke(contextOrArgs);
              }
          };
          case 'AtLiteral': return (context) => {
              const wrappedFn = wrapFunction(getBuiltin('@'));
              if (!wrappedFn) {
                  throw new Error(`Failed to evaluate ${input}: Target is not a function`);
              }
              return wrappedFn.invoke([args[0](context)]);
          };
          case 'FunctionInvocation': return (context) => {
              const wrappedFn = wrapFunction(args[0](context));
              if (!wrappedFn) {
                  throw new Error(`Failed to evaluate ${input}: Target is not a function`);
              }
              const contextOrArgs = args[2](context);
              return wrappedFn.invoke(contextOrArgs);
          };
          case 'IfExpression': return (function () {
              const ifCondition = args[1];
              const thenValue = args[3];
              const elseValue = args[5];
              const type = coalecenseTypes(thenValue, elseValue);
              return tag((context) => {
                  if (isTruthy(ifCondition(context))) {
                      return thenValue(context);
                  }
                  else {
                      return elseValue ? elseValue(context) : null;
                  }
              }, type);
          })();
          case 'Parameters': return args.length === 3 ? args[1] : (_context) => [];
          case 'Comparison': return (context) => {
              const operator = args[1];
              // expression !compare kw<"in"> PositiveUnaryTest |
              // expression !compare kw<"in"> !unaryTest "(" PositiveUnaryTests ")"
              if (operator === 'in') {
                  return compareIn(args[0](context), (args[3] || args[2])(context));
              }
              // expression !compare kw<"between"> expression kw<"and"> expression
              if (operator === 'between') {
                  const start = args[2](context);
                  const end = args[4](context);
                  if (start === null || end === null) {
                      return null;
                  }
                  return createRange(start, end).includes(args[0](context));
              }
              // expression !compare CompareOp<"=" | "!="> expression |
              // expression !compare CompareOp<Gt | Gte | Lt | Lte> expression |
              const left = args[0](context);
              const right = args[2](context);
              const test = operator()(right);
              return compareValue(test, left);
          };
          case 'QuantifiedExpression': return (context) => {
              const testFn = args[0](context);
              const contexts = args[1];
              const condition = args[3];
              return testFn(contexts, condition);
          };
          // DMN 1.2 - 10.3.2.14
          // kw<"for"> commaSep1<InExpression<IterationContext>> kw<"return"> expression
          case 'ForExpression': return (context) => {
              const extractor = args[args.length - 1];
              const iterationContexts = args[1](context);
              if (getType(iterationContexts) !== 'list') {
                  return iterationContexts;
              }
              const partial = [];
              for (const ctx of iterationContexts) {
                  partial.push(extractor(Object.assign(Object.assign({}, ctx), { partial })));
              }
              return partial;
          };
          case 'ArithmeticExpression': return (function () {
              // binary expression (a + b)
              if (args.length === 3) {
                  const [a, op, b] = args;
                  return tag((context) => {
                      return op(context)(a, b);
                  }, coalecenseTypes(a, b));
              }
              // unary expression (-b)
              if (args.length === 2) {
                  const [op, value] = args;
                  return tag((context) => {
                      return op(context)(() => 0, value);
                  }, value.type);
              }
          })();
          case 'PositiveUnaryTest': return args[0];
          case 'ParenthesizedExpression': return args[1];
          case 'PathExpression': return (context) => {
              const pathTarget = args[0](context);
              const pathProp = args[1];
              if (isArray$2(pathTarget)) {
                  return coerceSingleton(pathTarget.map(pathProp));
              }
              else {
                  return pathProp(pathTarget);
              }
          };
          // expression !filter "[" expression "]"
          case 'FilterExpression': return (context) => {
              const target = args[0](context);
              const filterFn = args[2];
              const filterTarget = isArray$2(target) ? target : [target];
              // null[..]
              if (target === null) {
                  return null;
              }
              // a[1]
              if (filterFn.type === 'number') {
                  const idx = filterFn(context);
                  const value = filterTarget[idx < 0 ? filterTarget.length + idx : idx - 1];
                  if (typeof value === 'undefined') {
                      return null;
                  }
                  else {
                      return value;
                  }
              }
              // a[true]
              if (filterFn.type === 'boolean') {
                  if (filterFn(context)) {
                      return filterTarget;
                  }
                  else {
                      return [];
                  }
              }
              if (filterFn.type === 'string') {
                  const value = filterFn(context);
                  return filterTarget.filter(el => el === value);
              }
              // a[test]
              return filterTarget.map(el => {
                  const iterationContext = Object.assign(Object.assign(Object.assign({}, context), { item: el }), el);
                  let result = filterFn(iterationContext);
                  // test is fn(val) => boolean SimpleUnaryTest
                  if (typeof result === 'function') {
                      result = result(el);
                  }
                  if (result instanceof Range$1) {
                      result = result.includes(el);
                  }
                  if (result === true) {
                      return el;
                  }
                  return result;
              }).filter(isTruthy);
          };
          case 'SimplePositiveUnaryTest': return tag((context) => {
              // <Interval>
              if (args.length === 1) {
                  return args[0](context);
              }
              // <CompareOp> <Expr>
              return args[0](context)(args[1](context));
          }, 'test');
          case 'List': return (context) => {
              return args.slice(1, -1).map(arg => arg(context));
          };
          case 'Interval': return tag((context) => {
              const left = args[1](context);
              const right = args[2](context);
              const startIncluded = left !== null && args[0] === '[';
              const endIncluded = right !== null && args[3] === ']';
              return createRange(left, right, startIncluded, endIncluded);
          }, Test('boolean'));
          case 'PositiveUnaryTests':
          case 'Expressions': return (context) => {
              return args.map(a => a(context));
          };
          case 'UnaryTests': return (context) => {
              return (value = null) => {
                  const negate = args[0] === 'not';
                  const tests = negate ? args.slice(2, -1) : args;
                  const matches = tests.map(test => test(context)).flat(1).map(test => {
                      if (isArray$2(test)) {
                          return test.includes(value);
                      }
                      if (test === null) {
                          return null;
                      }
                      if (typeof test === 'boolean') {
                          return test;
                      }
                      return compareValue(test, value);
                  }).reduce(combineResult, undefined);
                  return matches === null ? null : (negate ? !matches : matches);
              };
          };
          default: return node.name;
      }
  }
  function getBuiltin(name, _context) {
      return getFromContext(name, builtins$1);
  }
  function extractValue(context, prop, _target) {
      const target = _target(context);
      if (['list', 'range'].includes(getType(target))) {
          return target.map(t => ({ [prop]: t }));
      }
      return null;
  }
  function compareIn(value, tests) {
      if (!isArray$2(tests)) {
          if (getType(tests) === 'nil') {
              return null;
          }
          tests = [tests];
      }
      return tests.some(test => compareValue(test, value));
  }
  function compareValue(test, value) {
      if (typeof test === 'function') {
          return test(value);
      }
      if (test instanceof Range$1) {
          return test.includes(value);
      }
      return equals(test, value);
  }
  const chars$1 = Array.from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
  function isTyped(type, values) {
      return (values.some(e => getType(e) === type) &&
          values.every(e => e === null || getType(e) === type));
  }
  function createRange(start, end, startIncluded = true, endIncluded = true) {
      if (isTyped('string', [start, end])) {
          return createStringRange(start, end, startIncluded, endIncluded);
      }
      if (isTyped('number', [start, end])) {
          return createNumberRange(start, end, startIncluded, endIncluded);
      }
      if (isTyped('duration', [start, end])) {
          throw notImplemented('range<duration>');
      }
      if (isTyped('time', [start, end])) {
          throw notImplemented('range<time>');
      }
      if (isTyped('date time', [start, end])) {
          throw notImplemented('range<date and time>');
      }
      if (isTyped('date', [start, end])) {
          throw notImplemented('range<date>');
      }
      throw new Error(`unsupported range: ${start}..${end}`);
  }
  function noopMap() {
      return () => {
          throw new Error('unsupported range operation: map');
      };
  }
  function valuesMap(values) {
      return (fn) => values.map(fn);
  }
  function valuesIncludes(values) {
      return (value) => values.includes(value);
  }
  function numberMap(start, end, startIncluded, endIncluded) {
      const direction = start > end ? -1 : 1;
      return (fn) => {
          const result = [];
          for (let i = start;; i += direction) {
              if (i === 0 && !startIncluded) {
                  continue;
              }
              if (i === end && !endIncluded) {
                  break;
              }
              result.push(fn(i));
              if (i === end) {
                  break;
              }
          }
          return result;
      };
  }
  function includesStart(n, inclusive) {
      if (inclusive) {
          return (value) => n <= value;
      }
      else {
          return (value) => n < value;
      }
  }
  function includesEnd(n, inclusive) {
      if (inclusive) {
          return (value) => n >= value;
      }
      else {
          return (value) => n > value;
      }
  }
  function anyIncludes(start, end, startIncluded, endIncluded) {
      let tests = [];
      if (start !== null && end !== null) {
          if (start > end) {
              tests = [
                  includesStart(end, endIncluded),
                  includesEnd(start, startIncluded)
              ];
          }
          else {
              tests = [
                  includesStart(start, startIncluded),
                  includesEnd(end, endIncluded)
              ];
          }
      }
      else if (end !== null) {
          tests = [
              includesEnd(end, endIncluded)
          ];
      }
      else if (start !== null) {
          tests = [
              includesStart(start, startIncluded)
          ];
      }
      return (value) => tests.every(t => t(value));
  }
  function createStringRange(start, end, startIncluded = true, endIncluded = true) {
      if (start !== null && !chars$1.includes(start)) {
          throw new Error('illegal range start: ' + start);
      }
      if (end !== null && !chars$1.includes(end)) {
          throw new Error('illegal range end: ' + end);
      }
      let values;
      if (start !== null && end !== null) {
          let startIdx = chars$1.indexOf(start);
          let endIdx = chars$1.indexOf(end);
          const direction = startIdx > endIdx ? -1 : 1;
          if (startIncluded === false) {
              startIdx += direction;
          }
          if (endIncluded === false) {
              endIdx -= direction;
          }
          values = chars$1.slice(startIdx, endIdx + 1);
      }
      const map = values ? valuesMap(values) : noopMap();
      const includes = values ? valuesIncludes(values) : anyIncludes(start, end, startIncluded, endIncluded);
      return new Range$1({
          start,
          end,
          'start included': startIncluded,
          'end included': endIncluded,
          map,
          includes
      });
  }
  function createNumberRange(start, end, startIncluded, endIncluded) {
      const map = start !== null && end !== null ? numberMap(start, end, startIncluded, endIncluded) : noopMap();
      const includes = anyIncludes(start, end, startIncluded, endIncluded);
      return new Range$1({
          start,
          end,
          'start included': startIncluded,
          'end included': endIncluded,
          map,
          includes
      });
  }
  function cartesianProduct(arrays) {
      if (arrays.some(arr => getType(arr) === 'nil')) {
          return null;
      }
      const f = (a, b) => [].concat(...a.map(d => b.map(e => [].concat(d, e))));
      const cartesian = (a, b, ...c) => (b ? cartesian(f(a, b), ...c) : a || []);
      return cartesian(...arrays);
  }
  function coalecenseTypes(a, b) {
      if (!b) {
          return a.type;
      }
      if (a.type === b.type) {
          return a.type;
      }
      return 'any';
  }
  function tag(fn, type) {
      return Object.assign(fn, {
          type,
          toString() {
              return `TaggedFunction[${type}] ${Function.prototype.toString.call(fn)}`;
          }
      });
  }
  function combineResult(result, match) {
      if (!result) {
          return match;
      }
      return result;
  }
  function isTruthy(obj) {
      return obj !== false && obj !== null;
  }
  function Test(type) {
      return `Test<${type}>`;
  }
  /**
   * @param {Function} fn
   * @param {string[]} [parameterNames]
   *
   * @return {FunctionWrapper}
   */
  function wrapFunction(fn, parameterNames = null) {
      if (!fn) {
          return null;
      }
      if (fn instanceof FunctionWrapper) {
          return fn;
      }
      if (fn instanceof Range$1) {
          return new FunctionWrapper((value) => fn.includes(value), ['value']);
      }
      return new FunctionWrapper(fn, parameterNames || parseParameterNames(fn));
  }
  function coerceSingleton(values) {
      if (Array.isArray(values) && values.length === 1) {
          return values[0];
      }
      else {
          return values;
      }
  }
  function parseString(str) {
      if (str.startsWith('"')) {
          str = str.slice(1);
      }
      if (str.endsWith('"')) {
          str = str.slice(0, -1);
      }
      return str.replace(/(\\")|(\\\\)|(\\u[a-fA-F0-9]{5,6})|((?:\\u[a-fA-F0-9]{1,4})+)/ig, function (substring, ...groups) {
          const [quotes, escape, codePoint, charCodes] = groups;
          if (quotes) {
              return '"';
          }
          if (escape) {
              return '\\';
          }
          const escapePattern = /\\u([a-fA-F0-9]+)/ig;
          if (codePoint) {
              const codePointMatch = escapePattern.exec(codePoint);
              return String.fromCodePoint(parseInt(codePointMatch[1], 16));
          }
          if (charCodes) {
              const chars = [];
              let charCodeMatch;
              while ((charCodeMatch = escapePattern.exec(substring)) !== null) {
                  chars.push(parseInt(charCodeMatch[1], 16));
              }
              return String.fromCharCode(...chars);
          }
          throw new Error('illegal match');
      });
  }

  /*
   *  big.js v6.2.1
   *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
   *  Copyright (c) 2022 Michael Mclaughlin
   *  https://github.com/MikeMcl/big.js/LICENCE.md
   */


  /************************************** EDITABLE DEFAULTS *****************************************/


    // The default values below must be integers within the stated ranges.

    /*
     * The maximum number of decimal places (DP) of the results of operations involving division:
     * div and sqrt, and pow with negative exponents.
     */
  var DP$1 = 20,          // 0 to MAX_DP

    /*
     * The rounding mode (RM) used when rounding to the above decimal places.
     *
     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
     *  3  Away from zero.                                  (ROUND_UP)
     */
    RM$1 = 1,             // 0, 1, 2 or 3

    // The maximum value of DP and Big.DP.
    MAX_DP$1 = 1E6,       // 0 to 1000000

    // The maximum magnitude of the exponent argument to the pow method.
    MAX_POWER$1 = 1E6,    // 1 to 1000000

    /*
     * The negative exponent (NE) at and beneath which toString returns exponential notation.
     * (JavaScript numbers: -7)
     * -1000000 is the minimum recommended exponent value of a Big.
     */
    NE$1 = -7,            // 0 to -1000000

    /*
     * The positive exponent (PE) at and above which toString returns exponential notation.
     * (JavaScript numbers: 21)
     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
     */
    PE$1 = 21,            // 0 to 1000000

    /*
     * When true, an error will be thrown if a primitive number is passed to the Big constructor,
     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
     * primitive number without a loss of precision.
     */
    STRICT$1 = false,     // true or false


  /**************************************************************************************************/


    // Error messages.
    NAME$1 = '[big.js] ',
    INVALID$1 = NAME$1 + 'Invalid ',
    INVALID_DP$1 = INVALID$1 + 'decimal places',
    INVALID_RM$1 = INVALID$1 + 'rounding mode',
    DIV_BY_ZERO$1 = NAME$1 + 'Division by zero',

    // The shared prototype object.
    P$2 = {},
    UNDEFINED$1 = void 0,
    NUMERIC$1 = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


  /*
   * Create and return a Big constructor.
   */
  function _Big_$1() {

    /*
     * The Big constructor and exported function.
     * Create and return a new instance of a Big number object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big(n) {
      var x = this;

      // Enable constructor usage without new.
      if (!(x instanceof Big)) return n === UNDEFINED$1 ? _Big_$1() : new Big(n);

      // Duplicate.
      if (n instanceof Big) {
        x.s = n.s;
        x.e = n.e;
        x.c = n.c.slice();
      } else {
        if (typeof n !== 'string') {
          if (Big.strict === true && typeof n !== 'bigint') {
            throw TypeError(INVALID$1 + 'value');
          }

          // Minus zero?
          n = n === 0 && 1 / n < 0 ? '-0' : String(n);
        }

        parse$3(x, n);
      }

      // Retain a reference to this Big constructor.
      // Shadow Big.prototype.constructor which points to Object.
      x.constructor = Big;
    }

    Big.prototype = P$2;
    Big.DP = DP$1;
    Big.RM = RM$1;
    Big.NE = NE$1;
    Big.PE = PE$1;
    Big.strict = STRICT$1;
    Big.roundDown = 0;
    Big.roundHalfUp = 1;
    Big.roundHalfEven = 2;
    Big.roundUp = 3;

    return Big;
  }


  /*
   * Parse the number or string value passed to a Big constructor.
   *
   * x {Big} A Big number instance.
   * n {number|string} A numeric value.
   */
  function parse$3(x, n) {
    var e, i, nl;

    if (!NUMERIC$1.test(n)) {
      throw Error(INVALID$1 + 'number');
    }

    // Determine sign.
    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

    // Decimal point?
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

    // Exponential form?
    if ((i = n.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +n.slice(i + 1);
      n = n.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = n.length;
    }

    nl = n.length;

    // Determine leading zeros.
    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

    if (i == nl) {

      // Zero.
      x.c = [x.e = 0];
    } else {

      // Determine trailing zeros.
      for (; nl > 0 && n.charAt(--nl) == '0';);
      x.e = e - i - 1;
      x.c = [];

      // Convert string to array of digits without leading/trailing zeros.
      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
    }

    return x;
  }


  /*
   * Round Big x to a maximum of sd significant digits using rounding mode rm.
   *
   * x {Big} The Big to round.
   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   * [more] {boolean} Whether the result of division was truncated.
   */
  function round$1(x, sd, rm, more) {
    var xc = x.c;

    if (rm === UNDEFINED$1) rm = x.constructor.RM;
    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
      throw Error(INVALID_RM$1);
    }

    if (sd < 1) {
      more =
        rm === 3 && (more || !!xc[0]) || sd === 0 && (
        rm === 1 && xc[0] >= 5 ||
        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED$1))
      );

      xc.length = 1;

      if (more) {

        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        x.e = x.e - sd + 1;
        xc[0] = 1;
      } else {

        // Zero.
        xc[0] = x.e = 0;
      }
    } else if (sd < xc.length) {

      // xc[sd] is the digit after the digit that may be rounded up.
      more =
        rm === 1 && xc[sd] >= 5 ||
        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
          (more || xc[sd + 1] !== UNDEFINED$1 || xc[sd - 1] & 1)) ||
        rm === 3 && (more || !!xc[0]);

      // Remove any digits after the required precision.
      xc.length = sd;

      // Round up?
      if (more) {

        // Rounding up may mean the previous digit has to be rounded up.
        for (; ++xc[--sd] > 9;) {
          xc[sd] = 0;
          if (sd === 0) {
            ++x.e;
            xc.unshift(1);
            break;
          }
        }
      }

      // Remove trailing zeros.
      for (sd = xc.length; !xc[--sd];) xc.pop();
    }

    return x;
  }


  /*
   * Return a string representing the value of Big x in normal or exponential notation.
   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
   */
  function stringify$1(x, doExponential, isNonzero) {
    var e = x.e,
      s = x.c.join(''),
      n = s.length;

    // Exponential notation?
    if (doExponential) {
      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

    // Normal notation.
    } else if (e < 0) {
      for (; ++e;) s = '0' + s;
      s = '0.' + s;
    } else if (e > 0) {
      if (++e > n) {
        for (e -= n; e--;) s += '0';
      } else if (e < n) {
        s = s.slice(0, e) + '.' + s.slice(e);
      }
    } else if (n > 1) {
      s = s.charAt(0) + '.' + s.slice(1);
    }

    return x.s < 0 && isNonzero ? '-' + s : s;
  }


  // Prototype/instance methods


  /*
   * Return a new Big whose value is the absolute value of this Big.
   */
  P$2.abs = function () {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
  };


  /*
   * Return 1 if the value of this Big is greater than the value of Big y,
   *       -1 if the value of this Big is less than the value of Big y, or
   *        0 if they have the same value.
   */
  P$2.cmp = function (y) {
    var isneg,
      x = this,
      xc = x.c,
      yc = (y = new x.constructor(y)).c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    isneg = i < 0;

    // Compare exponents.
    if (k != l) return k > l ^ isneg ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = -1; ++i < j;) {
      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }

    // Compare lengths.
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
  };


  /*
   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P$2.div = function (y) {
    var x = this,
      Big = x.constructor,
      a = x.c,                  // dividend
      b = (y = new Big(y)).c,   // divisor
      k = x.s == y.s ? 1 : -1,
      dp = Big.DP;

    if (dp !== ~~dp || dp < 0 || dp > MAX_DP$1) {
      throw Error(INVALID_DP$1);
    }

    // Divisor is zero?
    if (!b[0]) {
      throw Error(DIV_BY_ZERO$1);
    }

    // Dividend is 0? Return +-0.
    if (!a[0]) {
      y.s = k;
      y.c = [y.e = 0];
      return y;
    }

    var bl, bt, n, cmp, ri,
      bz = b.slice(),
      ai = bl = b.length,
      al = a.length,
      r = a.slice(0, bl),   // remainder
      rl = r.length,
      q = y,                // quotient
      qc = q.c = [],
      qi = 0,
      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

    q.s = k;
    k = p < 0 ? 0 : p;

    // Create version of divisor with leading zero.
    bz.unshift(0);

    // Add zeros to make remainder as long as divisor.
    for (; rl++ < bl;) r.push(0);

    do {

      // n is how many times the divisor goes into current remainder.
      for (n = 0; n < 10; n++) {

        // Compare divisor and remainder.
        if (bl != (rl = r.length)) {
          cmp = bl > rl ? 1 : -1;
        } else {
          for (ri = -1, cmp = 0; ++ri < bl;) {
            if (b[ri] != r[ri]) {
              cmp = b[ri] > r[ri] ? 1 : -1;
              break;
            }
          }
        }

        // If divisor < remainder, subtract divisor from remainder.
        if (cmp < 0) {

          // Remainder can't be more than 1 digit longer than divisor.
          // Equalise lengths using divisor with extra leading zero?
          for (bt = rl == bl ? b : bz; rl;) {
            if (r[--rl] < bt[rl]) {
              ri = rl;
              for (; ri && !r[--ri];) r[ri] = 9;
              --r[ri];
              r[rl] += 10;
            }
            r[rl] -= bt[rl];
          }

          for (; !r[0];) r.shift();
        } else {
          break;
        }
      }

      // Add the digit n to the result array.
      qc[qi++] = cmp ? n : ++n;

      // Update the remainder.
      if (r[0] && cmp) r[rl] = a[ai] || 0;
      else r = [a[ai]];

    } while ((ai++ < al || r[0] !== UNDEFINED$1) && k--);

    // Leading zero? Do not remove if result is simply zero (qi == 1).
    if (!qc[0] && qi != 1) {

      // There can't be more than one zero.
      qc.shift();
      q.e--;
      p--;
    }

    // Round?
    if (qi > p) round$1(q, p, Big.RM, r[0] !== UNDEFINED$1);

    return q;
  };


  /*
   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
   */
  P$2.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return true if the value of this Big is greater than the value of Big y, otherwise return
   * false.
   */
  P$2.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
   * return false.
   */
  P$2.gte = function (y) {
    return this.cmp(y) > -1;
  };


  /*
   * Return true if the value of this Big is less than the value of Big y, otherwise return false.
   */
  P$2.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
   * return false.
   */
  P$2.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return a new Big whose value is the value of this Big minus the value of Big y.
   */
  P$2.minus = P$2.sub = function (y) {
    var i, j, t, xlty,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xc = x.c.slice(),
      xe = x.e,
      yc = y.c,
      ye = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (yc[0]) {
        y.s = -b;
      } else if (xc[0]) {
        y = new Big(x);
      } else {
        y.s = 1;
      }
      return y;
    }

    // Determine which is the bigger number. Prepend zeros to equalise exponents.
    if (a = xe - ye) {

      if (xlty = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();
      for (b = a; b--;) t.push(0);
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = ((xlty = xc.length < yc.length) ? xc : yc).length;

      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xlty = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xlty) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }

    /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
     * needs to start at yc.length.
     */
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

    // Subtract yc from xc.
    for (b = i; j > a;) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i];) xc[i] = 9;
        --xc[i];
        xc[j] += 10;
      }

      xc[j] -= yc[j];
    }

    // Remove trailing zeros.
    for (; xc[--b] === 0;) xc.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] === 0;) {
      xc.shift();
      --ye;
    }

    if (!xc[0]) {

      // n - n = +0
      y.s = 1;

      // Result must be zero.
      xc = [ye = 0];
    }

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a new Big whose value is the value of this Big modulo the value of Big y.
   */
  P$2.mod = function (y) {
    var ygtx,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    if (!y.c[0]) {
      throw Error(DIV_BY_ZERO$1);
    }

    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;

    if (ygtx) return new Big(x);

    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;

    return this.minus(x.times(y));
  };


  /*
   * Return a new Big whose value is the value of this Big negated.
   */
  P$2.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return x;
  };


  /*
   * Return a new Big whose value is the value of this Big plus the value of Big y.
   */
  P$2.plus = P$2.add = function (y) {
    var e, k, t,
      x = this,
      Big = x.constructor;

    y = new Big(y);

    // Signs differ?
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    var xe = x.e,
      xc = x.c,
      ye = y.e,
      yc = y.c;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (!yc[0]) {
        if (xc[0]) {
          y = new Big(x);
        } else {
          y.s = x.s;
        }
      }
      return y;
    }

    xc = xc.slice();

    // Prepend zeros to equalise exponents.
    // Note: reverse faster than unshifts.
    if (e = xe - ye) {
      if (e > 0) {
        ye = xe;
        t = yc;
      } else {
        e = -e;
        t = xc;
      }

      t.reverse();
      for (; e--;) t.push(0);
      t.reverse();
    }

    // Point xc to the longer array.
    if (xc.length - yc.length < 0) {
      t = yc;
      yc = xc;
      xc = t;
    }

    e = yc.length;

    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0

    if (k) {
      xc.unshift(k);
      ++ye;
    }

    // Remove trailing zeros.
    for (e = xc.length; xc[--e] === 0;) xc.pop();

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a Big whose value is the value of this Big raised to the power n.
   * If n is negative, round to a maximum of Big.DP decimal places using rounding
   * mode Big.RM.
   *
   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
   */
  P$2.pow = function (n) {
    var x = this,
      one = new x.constructor('1'),
      y = one,
      isneg = n < 0;

    if (n !== ~~n || n < -MAX_POWER$1 || n > MAX_POWER$1) {
      throw Error(INVALID$1 + 'exponent');
    }

    if (isneg) n = -n;

    for (;;) {
      if (n & 1) y = y.times(x);
      n >>= 1;
      if (!n) break;
      x = x.times(x);
    }

    return isneg ? one.div(y) : y;
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
   * significant digits using rounding mode rm, or Big.RM if rm is not specified.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P$2.prec = function (sd, rm) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP$1) {
      throw Error(INVALID$1 + 'precision');
    }
    return round$1(new this.constructor(this), sd, rm);
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
   * using rounding mode rm, or Big.RM if rm is not specified.
   * If dp is negative, round to an integer which is a multiple of 10**-dp.
   * If dp is not specified, round to 0 decimal places.
   *
   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P$2.round = function (dp, rm) {
    if (dp === UNDEFINED$1) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP$1 || dp > MAX_DP$1) {
      throw Error(INVALID_DP$1);
    }
    return round$1(new this.constructor(this), dp + this.e + 1, rm);
  };


  /*
   * Return a new Big whose value is the square root of the value of this Big, rounded, if
   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P$2.sqrt = function () {
    var r, c, t,
      x = this,
      Big = x.constructor,
      s = x.s,
      e = x.e,
      half = new Big('0.5');

    // Zero?
    if (!x.c[0]) return new Big(x);

    // Negative?
    if (s < 0) {
      throw Error(NAME$1 + 'No square root');
    }

    // Estimate.
    s = Math.sqrt(x + '');

    // Math.sqrt underflow/overflow?
    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
    if (s === 0 || s === 1 / 0) {
      c = x.c.join('');
      if (!(c.length + e & 1)) c += '0';
      s = Math.sqrt(c);
      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else {
      r = new Big(s + '');
    }

    e = r.e + (Big.DP += 4);

    // Newton-Raphson iteration.
    do {
      t = r;
      r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

    return round$1(r, (Big.DP -= 4) + r.e + 1, Big.RM);
  };


  /*
   * Return a new Big whose value is the value of this Big times the value of Big y.
   */
  P$2.times = P$2.mul = function (y) {
    var c,
      x = this,
      Big = x.constructor,
      xc = x.c,
      yc = (y = new Big(y)).c,
      a = xc.length,
      b = yc.length,
      i = x.e,
      j = y.e;

    // Determine sign of result.
    y.s = x.s == y.s ? 1 : -1;

    // Return signed 0 if either 0.
    if (!xc[0] || !yc[0]) {
      y.c = [y.e = 0];
      return y;
    }

    // Initialise exponent of result as x.e + y.e.
    y.e = i + j;

    // If array xc has fewer digits than yc, swap xc and yc, and lengths.
    if (a < b) {
      c = xc;
      xc = yc;
      yc = c;
      j = a;
      a = b;
      b = j;
    }

    // Initialise coefficient array of result with zeros.
    for (c = new Array(j = a + b); j--;) c[j] = 0;

    // Multiply.

    // i is initially xc.length.
    for (i = b; i--;) {
      b = 0;

      // a is yc.length.
      for (j = a + i; j > i;) {

        // Current sum of products at this digit position, plus carry.
        b = c[j] + yc[i] * xc[j - i - 1] + b;
        c[j--] = b % 10;

        // carry
        b = b / 10 | 0;
      }

      c[j] = b;
    }

    // Increment result exponent if there is a final carry, otherwise remove leading zero.
    if (b) ++y.e;
    else c.shift();

    // Remove trailing zeros.
    for (i = c.length; !c[--i];) c.pop();
    y.c = c;

    return y;
  };


  /*
   * Return a string representing the value of this Big in exponential notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P$2.toExponential = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED$1) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP$1) {
        throw Error(INVALID_DP$1);
      }
      x = round$1(new x.constructor(x), ++dp, rm);
      for (; x.c.length < dp;) x.c.push(0);
    }

    return stringify$1(x, true, !!n);
  };


  /*
   * Return a string representing the value of this Big in normal notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   */
  P$2.toFixed = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED$1) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP$1) {
        throw Error(INVALID_DP$1);
      }
      x = round$1(new x.constructor(x), dp + x.e + 1, rm);

      // x.e may have changed if the value is rounded up.
      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
    }

    return stringify$1(x, false, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Omit the sign for negative zero.
   */
  P$2[Symbol.for('nodejs.util.inspect.custom')] = P$2.toJSON = P$2.toString = function () {
    var x = this,
      Big = x.constructor;
    return stringify$1(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
  };


  /*
   * Return the value of this Big as a primitve number.
   */
  P$2.toNumber = function () {
    var n = Number(stringify$1(this, true, true));
    if (this.constructor.strict === true && !this.eq(n.toString())) {
      throw Error(NAME$1 + 'Imprecise conversion');
    }
    return n;
  };


  /*
   * Return a string representing the value of this Big rounded to sd significant digits using
   * rounding mode rm, or Big.RM if rm is not specified.
   * Use exponential notation if sd is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P$2.toPrecision = function (sd, rm) {
    var x = this,
      Big = x.constructor,
      n = x.c[0];

    if (sd !== UNDEFINED$1) {
      if (sd !== ~~sd || sd < 1 || sd > MAX_DP$1) {
        throw Error(INVALID$1 + 'precision');
      }
      x = round$1(new Big(x), sd, rm);
      for (; x.c.length < sd;) x.c.push(0);
    }

    return stringify$1(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Include the sign for negative zero.
   */
  P$2.valueOf = function () {
    var x = this,
      Big = x.constructor;
    if (Big.strict === true) {
      throw Error(NAME$1 + 'valueOf disallowed');
    }
    return stringify$1(x, x.e <= Big.NE || x.e >= Big.PE, true);
  };


  // Export


  var Big$1 = _Big_$1();

  var e$2={"":["<em>","</em>"],_:["<strong>","</strong>"],"*":["<strong>","</strong>"],"~":["<s>","</s>"],"\n":["<br />"]," ":["<br />"],"-":["<hr />"]};function n$1(e){return e.replace(RegExp("^"+(e.match(/^(\t| )+/)||"")[0],"gm"),"")}function r(e){return (e+"").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function t(a,o){var c,l,s,g,p,u=/((?:^|\n+)(?:\n---+|\* \*(?: \*)+)\n)|(?:^``` *(\w*)\n([\s\S]*?)\n```$)|((?:(?:^|\n+)(?:\t|  {2,}).+)+\n*)|((?:(?:^|\n)([>*+-]|\d+\.)\s+.*)+)|(?:!\[([^\]]*?)\]\(([^)]+?)\))|(\[)|(\](?:\(([^)]+?)\))?)|(?:(?:^|\n+)([^\s].*)\n(-{3,}|={3,})(?:\n+|$))|(?:(?:^|\n+)(#{1,6})\s*(.+)(?:\n+|$))|(?:`([^`].*?)`)|(  \n\n*|\n{2,}|__|\*\*|[_*]|~~)|<([^>]+)>/gm,h=[],m="",i=o||{},f=0;function d(n){var r=e$2[n[1]||""],t=h[h.length-1]==n;return r?r[1]?(t?h.pop():h.push(n),r[0|t]):r[0]:n}function $(){for(var e="";h.length;)e+=d(h[h.length-1]);return e}for(a=a.replace(/^\[(.+?)\]:\s*(.+)$/gm,function(e,n,r){return i[n.toLowerCase()]=r,""}).replace(/^\n+|\n+$/g,"");s=u.exec(a);)l=a.substring(f,s.index),f=u.lastIndex,c=s[0],l.match(/[^\\](\\\\)*\\$/)||((p=s[3]||s[4])?c='<pre class="code '+(s[4]?"poetry":s[2].toLowerCase())+'"><code'+(s[2]?' class="language-'+s[2].toLowerCase()+'"':"")+">"+n$1(r(p).replace(/^\n+|\n+$/g,""))+"</code></pre>":(p=s[6])?(p.match(/\./)&&(s[5]=s[5].replace(/^\d+/gm,"")),g=t(n$1(s[5].replace(/^\s*[>*+.-]/gm,""))),">"==p?p="blockquote":(p=p.match(/\./)?"ol":"ul",g=g.replace(/^(.*)(\n|$)/gm,"<li>$1</li>")),c="<"+p+">"+g+"</"+p+">"):s[8]?c='<img src="'+r(s[8])+'" alt="'+r(s[7])+'">':s[10]?(m=m.replace("<a>",'<a href="'+r(s[11]||i[l.toLowerCase()])+'">'),c=$()+"</a>"):s[18]&&/^(https?|mailto):/.test(s[18])?c='<a href="'+r(s[18])+'">'+r(s[18])+"</a>":s[9]?c="<a>":s[12]||s[14]?c="<"+(p="h"+(s[14]?s[14].length:s[13]>"="?1:2))+">"+t(s[12]||s[15],i)+"</"+p+">":s[16]?c="<code>"+r(s[16])+"</code>":(s[17]||s[1])&&(c=d(s[17]||"--"))),m+=l,m+=c;return (m+a.substring(f)+$()).replace(/^\n+|\n+$/g,"")}

  var o$1=0;function e$1(_,e,n,t,f){var l,s,u={};for(s in e)"ref"==s?l=e[s]:u[s]=e[s];var a={type:_,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--o$1,__source:t,__self:f};if("function"==typeof _&&(l=_.defaultProps))for(s in l)void 0===u[s]&&(u[s]=l[s]);return l$3.vnode&&l$3.vnode(a),a}

  function S(n,t){for(var e in t)n[e]=t[e];return n}function C$1(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n){this.props=n;}function g(n,t){function e(n){var e=this.props.ref,r=e==n.ref;return !r&&e&&(e.call?e(null):e.current=null),t?!t(this.props,n)||!r:C$1(this.props,n)}function r(t){return this.shouldComponentUpdate=e,v$1(n,t)}return r.displayName="Memo("+(n.displayName||n.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(E.prototype=new _$1).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return C$1(this.props,n)||C$1(this.state,t)};var w=l$3.__b;l$3.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var R="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function x(n){function t(t,e){var r=S({},t);return delete r.ref,n(r,(e=t.ref||e)&&("object"!=typeof e||"current"in e)?e:null)}return t.$$typeof=R,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var N=function(n,t){return null==n?null:A$2(A$2(n).map(t))},k={map:N,forEach:N,count:function(n){return n?A$2(n).length:0},only:function(n){var t=A$2(n);if(1!==t.length)throw "Children.only";return t[0]},toArray:A$2},A=l$3.__e;l$3.__e=function(n,t,e){if(n.then)for(var r,u=t;u=u.__;)if((r=u.__c)&&r.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),r.__c(n,t);A(n,t,e);};var O=l$3.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n)}function F(n){var t,e,r;function u(u){if(t||(t=n()).then(function(n){e=n.default||n;},function(n){r=n;}),r)throw r;if(!e)throw t;return v$1(e,u)}return u.displayName="Lazy",u.__f=!0,u}function M(){this.u=null,this.o=null;}l$3.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new _$1).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},f=!0===t.__h;r.__u++||f||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=S({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)})),t}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&v$1(d$1,null,n.fallback);return u&&(u.__h=null),[v$1(d$1,null,t.__e?null:n.children),u]};var T=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function D(n){return this.getChildContext=function(){return n.context},n.children}function I(n){var t=this,e=n.i;t.componentWillUnmount=function(){S$1(null,t.l),t.l=null,t.i=null;},t.i&&t.i!==e&&t.componentWillUnmount(),n.__v?(t.l||(t.i=e,t.l={nodeType:1,parentNode:e,childNodes:[],appendChild:function(n){this.childNodes.push(n),t.i.appendChild(n);},insertBefore:function(n,e){this.childNodes.push(n),t.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),t.i.removeChild(n);}}),S$1(v$1(D,{context:t.context},n.__v),t.l)):t.l&&t.componentWillUnmount();}function W(n,t){return v$1(I,{__v:n,i:t})}(M.prototype=new _$1).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),T(t,n,r)):u();};e?e(o):o();}},M.prototype.render=function(n){this.u=null,this.o=new Map;var t=A$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},M.prototype.componentDidUpdate=M.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){T(n,e,t);});};var j="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,P$1=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,V=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};function z(n,t,e){return null==t.__k&&(t.textContent=""),S$1(n,t),"function"==typeof e&&e(),n?n.__c:null}function B(n,t,e){return q$1(n,t),"function"==typeof e&&e(),n?n.__c:null}_$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(_$1.prototype,n,{configurable:!0,get:function(){return this["UNSAFE_"+n]},set:function(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=l$3.event;function Z(){}function Y(){return this.cancelBubble}function $(){return this.defaultPrevented}l$3.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=$,n.nativeEvent=n};var q,G={configurable:!0,get:function(){return this.class}},J=l$3.vnode;l$3.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){for(var u in r={},e){var o=e[u];"value"===u&&"defaultValue"in e&&null==o||("defaultValue"===u&&"value"in e&&null==e.value?u="value":"download"===u&&!0===o?o="":/ondoubleclick/i.test(u)?u="ondblclick":/^onchange(textarea|input)/i.test(u+t)&&!V(e.type)?u="oninput":/^on(Ani|Tra|Tou|BeforeInp)/.test(u)?u=u.toLowerCase():P$1.test(u)?u=u.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===o&&(o=void 0),r[u]=o);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r;}t&&e.class!=e.className&&(G.enumerable="className"in e,null!=e.className&&(r.class=e.className),Object.defineProperty(r,"className",G)),n.$$typeof=j,J&&J(n);};var K=l$3.__r;l$3.__r=function(n){K&&K(n),q=n.__c;};var Q={ReactCurrentDispatcher:{current:{readContext:function(n){return q.__n[n.__c].props.value}}}};function nn(n){return v$1.bind(null,n)}function tn(n){return !!n&&n.$$typeof===j}function en(n){return tn(n)?B$1.apply(null,arguments):n}function rn(n){return !!n.__k&&(S$1(null,n),!0)}function un(n){return n&&(n.base||1===n.nodeType&&n)||null}var on=function(n,t){return n(t)},ln=function(n,t){return n(t)};var React = {useState:l$2,useReducer:p$1,useEffect:y,useLayoutEffect:h,useRef:s$1,useImperativeHandle:_,useMemo:d,useCallback:A$1,useContext:F$1,useDebugValue:T$1,version:"17.0.2",Children:k,render:z,hydrate:B,unmountComponentAtNode:rn,createPortal:W,createElement:v$1,createContext:D$1,createFactory:nn,cloneElement:en,createRef:p$2,Fragment:d$1,isValidElement:tn,findDOMNode:un,Component:_$1,PureComponent:E,memo:g,forwardRef:x,flushSync:ln,unstable_batchedUpdates:on,StrictMode:d$1,Suspense:L,SuspenseList:M,lazy:F,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:Q};

  var HOOKS = [
      "onChange",
      "onClose",
      "onDayCreate",
      "onDestroy",
      "onKeyDown",
      "onMonthChange",
      "onOpen",
      "onParseConfig",
      "onReady",
      "onValueUpdate",
      "onYearChange",
      "onPreCalendarPosition",
  ];
  var defaults$2 = {
      _disable: [],
      allowInput: false,
      allowInvalidPreload: false,
      altFormat: "F j, Y",
      altInput: false,
      altInputClass: "form-control input",
      animate: typeof window === "object" &&
          window.navigator.userAgent.indexOf("MSIE") === -1,
      ariaDateFormat: "F j, Y",
      autoFillDefaultTime: true,
      clickOpens: true,
      closeOnSelect: true,
      conjunction: ", ",
      dateFormat: "Y-m-d",
      defaultHour: 12,
      defaultMinute: 0,
      defaultSeconds: 0,
      disable: [],
      disableMobile: false,
      enableSeconds: false,
      enableTime: false,
      errorHandler: function (err) {
          return typeof console !== "undefined" && console.warn(err);
      },
      getWeek: function (givenDate) {
          var date = new Date(givenDate.getTime());
          date.setHours(0, 0, 0, 0);
          date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
          var week1 = new Date(date.getFullYear(), 0, 4);
          return (1 +
              Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                  3 +
                  ((week1.getDay() + 6) % 7)) /
                  7));
      },
      hourIncrement: 1,
      ignoredFocusElements: [],
      inline: false,
      locale: "default",
      minuteIncrement: 5,
      mode: "single",
      monthSelectorType: "dropdown",
      nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
      noCalendar: false,
      now: new Date(),
      onChange: [],
      onClose: [],
      onDayCreate: [],
      onDestroy: [],
      onKeyDown: [],
      onMonthChange: [],
      onOpen: [],
      onParseConfig: [],
      onReady: [],
      onValueUpdate: [],
      onYearChange: [],
      onPreCalendarPosition: [],
      plugins: [],
      position: "auto",
      positionElement: undefined,
      prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
      shorthandCurrentMonth: false,
      showMonths: 1,
      static: false,
      time_24hr: false,
      weekNumbers: false,
      wrap: false,
  };

  var english = {
      weekdays: {
          shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          longhand: [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
          ],
      },
      months: {
          shorthand: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
          ],
          longhand: [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December",
          ],
      },
      daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
      firstDayOfWeek: 0,
      ordinal: function (nth) {
          var s = nth % 100;
          if (s > 3 && s < 21)
              return "th";
          switch (s % 10) {
              case 1:
                  return "st";
              case 2:
                  return "nd";
              case 3:
                  return "rd";
              default:
                  return "th";
          }
      },
      rangeSeparator: " to ",
      weekAbbreviation: "Wk",
      scrollTitle: "Scroll to increment",
      toggleTitle: "Click to toggle",
      amPM: ["AM", "PM"],
      yearAriaLabel: "Year",
      monthAriaLabel: "Month",
      hourAriaLabel: "Hour",
      minuteAriaLabel: "Minute",
      time_24hr: false,
  };

  var pad = function (number, length) {
      if (length === void 0) { length = 2; }
      return ("000" + number).slice(length * -1);
  };
  var int = function (bool) { return (bool === true ? 1 : 0); };
  function debounce$3(fn, wait) {
      var t;
      return function () {
          var _this = this;
          var args = arguments;
          clearTimeout(t);
          t = setTimeout(function () { return fn.apply(_this, args); }, wait);
      };
  }
  var arrayify = function (obj) {
      return obj instanceof Array ? obj : [obj];
  };

  function toggleClass(elem, className, bool) {
      if (bool === true)
          return elem.classList.add(className);
      elem.classList.remove(className);
  }
  function createElement(tag, className, content) {
      var e = window.document.createElement(tag);
      className = className || "";
      content = content || "";
      e.className = className;
      if (content !== undefined)
          e.textContent = content;
      return e;
  }
  function clearNode(node) {
      while (node.firstChild)
          node.removeChild(node.firstChild);
  }
  function findParent(node, condition) {
      if (condition(node))
          return node;
      else if (node.parentNode)
          return findParent(node.parentNode, condition);
      return undefined;
  }
  function createNumberInput(inputClassName, opts) {
      var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
      if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
          numInput.type = "number";
      }
      else {
          numInput.type = "text";
          numInput.pattern = "\\d*";
      }
      if (opts !== undefined)
          for (var key in opts)
              numInput.setAttribute(key, opts[key]);
      wrapper.appendChild(numInput);
      wrapper.appendChild(arrowUp);
      wrapper.appendChild(arrowDown);
      return wrapper;
  }
  function getEventTarget(event) {
      try {
          if (typeof event.composedPath === "function") {
              var path = event.composedPath();
              return path[0];
          }
          return event.target;
      }
      catch (error) {
          return event.target;
      }
  }

  var doNothing = function () { return undefined; };
  var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };
  var revFormat = {
      D: doNothing,
      F: function (dateObj, monthName, locale) {
          dateObj.setMonth(locale.months.longhand.indexOf(monthName));
      },
      G: function (dateObj, hour) {
          dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
      },
      H: function (dateObj, hour) {
          dateObj.setHours(parseFloat(hour));
      },
      J: function (dateObj, day) {
          dateObj.setDate(parseFloat(day));
      },
      K: function (dateObj, amPM, locale) {
          dateObj.setHours((dateObj.getHours() % 12) +
              12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
      },
      M: function (dateObj, shortMonth, locale) {
          dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
      },
      S: function (dateObj, seconds) {
          dateObj.setSeconds(parseFloat(seconds));
      },
      U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },
      W: function (dateObj, weekNum, locale) {
          var weekNumber = parseInt(weekNum);
          var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
          date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
          return date;
      },
      Y: function (dateObj, year) {
          dateObj.setFullYear(parseFloat(year));
      },
      Z: function (_, ISODate) { return new Date(ISODate); },
      d: function (dateObj, day) {
          dateObj.setDate(parseFloat(day));
      },
      h: function (dateObj, hour) {
          dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
      },
      i: function (dateObj, minutes) {
          dateObj.setMinutes(parseFloat(minutes));
      },
      j: function (dateObj, day) {
          dateObj.setDate(parseFloat(day));
      },
      l: doNothing,
      m: function (dateObj, month) {
          dateObj.setMonth(parseFloat(month) - 1);
      },
      n: function (dateObj, month) {
          dateObj.setMonth(parseFloat(month) - 1);
      },
      s: function (dateObj, seconds) {
          dateObj.setSeconds(parseFloat(seconds));
      },
      u: function (_, unixMillSeconds) {
          return new Date(parseFloat(unixMillSeconds));
      },
      w: doNothing,
      y: function (dateObj, year) {
          dateObj.setFullYear(2000 + parseFloat(year));
      },
  };
  var tokenRegex = {
      D: "",
      F: "",
      G: "(\\d\\d|\\d)",
      H: "(\\d\\d|\\d)",
      J: "(\\d\\d|\\d)\\w+",
      K: "",
      M: "",
      S: "(\\d\\d|\\d)",
      U: "(.+)",
      W: "(\\d\\d|\\d)",
      Y: "(\\d{4})",
      Z: "(.+)",
      d: "(\\d\\d|\\d)",
      h: "(\\d\\d|\\d)",
      i: "(\\d\\d|\\d)",
      j: "(\\d\\d|\\d)",
      l: "",
      m: "(\\d\\d|\\d)",
      n: "(\\d\\d|\\d)",
      s: "(\\d\\d|\\d)",
      u: "(.+)",
      w: "(\\d\\d|\\d)",
      y: "(\\d{2})",
  };
  var formats = {
      Z: function (date) { return date.toISOString(); },
      D: function (date, locale, options) {
          return locale.weekdays.shorthand[formats.w(date, locale, options)];
      },
      F: function (date, locale, options) {
          return monthToStr(formats.n(date, locale, options) - 1, false, locale);
      },
      G: function (date, locale, options) {
          return pad(formats.h(date, locale, options));
      },
      H: function (date) { return pad(date.getHours()); },
      J: function (date, locale) {
          return locale.ordinal !== undefined
              ? date.getDate() + locale.ordinal(date.getDate())
              : date.getDate();
      },
      K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },
      M: function (date, locale) {
          return monthToStr(date.getMonth(), true, locale);
      },
      S: function (date) { return pad(date.getSeconds()); },
      U: function (date) { return date.getTime() / 1000; },
      W: function (date, _, options) {
          return options.getWeek(date);
      },
      Y: function (date) { return pad(date.getFullYear(), 4); },
      d: function (date) { return pad(date.getDate()); },
      h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },
      i: function (date) { return pad(date.getMinutes()); },
      j: function (date) { return date.getDate(); },
      l: function (date, locale) {
          return locale.weekdays.longhand[date.getDay()];
      },
      m: function (date) { return pad(date.getMonth() + 1); },
      n: function (date) { return date.getMonth() + 1; },
      s: function (date) { return date.getSeconds(); },
      u: function (date) { return date.getTime(); },
      w: function (date) { return date.getDay(); },
      y: function (date) { return String(date.getFullYear()).substring(2); },
  };

  var createDateFormatter = function (_a) {
      var _b = _a.config, config = _b === void 0 ? defaults$2 : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
      return function (dateObj, frmt, overrideLocale) {
          var locale = overrideLocale || l10n;
          if (config.formatDate !== undefined && !isMobile) {
              return config.formatDate(dateObj, frmt, locale);
          }
          return frmt
              .split("")
              .map(function (c, i, arr) {
              return formats[c] && arr[i - 1] !== "\\"
                  ? formats[c](dateObj, locale, config)
                  : c !== "\\"
                      ? c
                      : "";
          })
              .join("");
      };
  };
  var createDateParser = function (_a) {
      var _b = _a.config, config = _b === void 0 ? defaults$2 : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
      return function (date, givenFormat, timeless, customLocale) {
          if (date !== 0 && !date)
              return undefined;
          var locale = customLocale || l10n;
          var parsedDate;
          var dateOrig = date;
          if (date instanceof Date)
              parsedDate = new Date(date.getTime());
          else if (typeof date !== "string" &&
              date.toFixed !== undefined)
              parsedDate = new Date(date);
          else if (typeof date === "string") {
              var format = givenFormat || (config || defaults$2).dateFormat;
              var datestr = String(date).trim();
              if (datestr === "today") {
                  parsedDate = new Date();
                  timeless = true;
              }
              else if (config && config.parseDate) {
                  parsedDate = config.parseDate(date, format);
              }
              else if (/Z$/.test(datestr) ||
                  /GMT$/.test(datestr)) {
                  parsedDate = new Date(date);
              }
              else {
                  var matched = void 0, ops = [];
                  for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
                      var token = format[i];
                      var isBackSlash = token === "\\";
                      var escaped = format[i - 1] === "\\" || isBackSlash;
                      if (tokenRegex[token] && !escaped) {
                          regexStr += tokenRegex[token];
                          var match = new RegExp(regexStr).exec(date);
                          if (match && (matched = true)) {
                              ops[token !== "Y" ? "push" : "unshift"]({
                                  fn: revFormat[token],
                                  val: match[++matchIndex],
                              });
                          }
                      }
                      else if (!isBackSlash)
                          regexStr += ".";
                  }
                  parsedDate =
                      !config || !config.noCalendar
                          ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
                          : new Date(new Date().setHours(0, 0, 0, 0));
                  ops.forEach(function (_a) {
                      var fn = _a.fn, val = _a.val;
                      return (parsedDate = fn(parsedDate, val, locale) || parsedDate);
                  });
                  parsedDate = matched ? parsedDate : undefined;
              }
          }
          if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
              config.errorHandler(new Error("Invalid date provided: " + dateOrig));
              return undefined;
          }
          if (timeless === true)
              parsedDate.setHours(0, 0, 0, 0);
          return parsedDate;
      };
  };
  function compareDates(date1, date2, timeless) {
      if (timeless === void 0) { timeless = true; }
      if (timeless !== false) {
          return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
              new Date(date2.getTime()).setHours(0, 0, 0, 0));
      }
      return date1.getTime() - date2.getTime();
  }
  var isBetween = function (ts, ts1, ts2) {
      return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };
  var calculateSecondsSinceMidnight = function (hours, minutes, seconds) {
      return hours * 3600 + minutes * 60 + seconds;
  };
  var parseSeconds = function (secondsSinceMidnight) {
      var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
      return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
  };
  var duration = {
      DAY: 86400000,
  };
  function getDefaultHours(config) {
      var hours = config.defaultHour;
      var minutes = config.defaultMinute;
      var seconds = config.defaultSeconds;
      if (config.minDate !== undefined) {
          var minHour = config.minDate.getHours();
          var minMinutes = config.minDate.getMinutes();
          var minSeconds = config.minDate.getSeconds();
          if (hours < minHour) {
              hours = minHour;
          }
          if (hours === minHour && minutes < minMinutes) {
              minutes = minMinutes;
          }
          if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
              seconds = config.minDate.getSeconds();
      }
      if (config.maxDate !== undefined) {
          var maxHr = config.maxDate.getHours();
          var maxMinutes = config.maxDate.getMinutes();
          hours = Math.min(hours, maxHr);
          if (hours === maxHr)
              minutes = Math.min(maxMinutes, minutes);
          if (hours === maxHr && minutes === maxMinutes)
              seconds = config.maxDate.getSeconds();
      }
      return { hours: hours, minutes: minutes, seconds: seconds };
  }

  if (typeof Object.assign !== "function") {
      Object.assign = function (target) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
          }
          if (!target) {
              throw TypeError("Cannot convert undefined or null to object");
          }
          var _loop_1 = function (source) {
              if (source) {
                  Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });
              }
          };
          for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
              var source = args_1[_a];
              _loop_1(source);
          }
          return target;
      };
  }

  var __assign = (undefined && undefined.__assign) || function () {
      __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  };
  var DEBOUNCED_CHANGE_MS = 300;
  function FlatpickrInstance(element, instanceConfig) {
      var self = {
          config: __assign(__assign({}, defaults$2), flatpickr.defaultConfig),
          l10n: english,
      };
      self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
      self._handlers = [];
      self.pluginElements = [];
      self.loadedPlugins = [];
      self._bind = bind;
      self._setHoursFromDate = setHoursFromDate;
      self._positionCalendar = positionCalendar;
      self.changeMonth = changeMonth;
      self.changeYear = changeYear;
      self.clear = clear;
      self.close = close;
      self.onMouseOver = onMouseOver;
      self._createElement = createElement;
      self.createDay = createDay;
      self.destroy = destroy;
      self.isEnabled = isEnabled;
      self.jumpToDate = jumpToDate;
      self.updateValue = updateValue;
      self.open = open;
      self.redraw = redraw;
      self.set = set;
      self.setDate = setDate;
      self.toggle = toggle;
      function setupHelperFunctions() {
          self.utils = {
              getDaysInMonth: function (month, yr) {
                  if (month === void 0) { month = self.currentMonth; }
                  if (yr === void 0) { yr = self.currentYear; }
                  if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
                      return 29;
                  return self.l10n.daysInMonth[month];
              },
          };
      }
      function init() {
          self.element = self.input = element;
          self.isOpen = false;
          parseConfig();
          setupLocale();
          setupInputs();
          setupDates();
          setupHelperFunctions();
          if (!self.isMobile)
              build();
          bindEvents();
          if (self.selectedDates.length || self.config.noCalendar) {
              if (self.config.enableTime) {
                  setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
              }
              updateValue(false);
          }
          setCalendarWidth();
          var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          if (!self.isMobile && isSafari) {
              positionCalendar();
          }
          triggerEvent("onReady");
      }
      function getClosestActiveElement() {
          var _a;
          return (((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode())
              .activeElement || document.activeElement);
      }
      function bindToInstance(fn) {
          return fn.bind(self);
      }
      function setCalendarWidth() {
          var config = self.config;
          if (config.weekNumbers === false && config.showMonths === 1) {
              return;
          }
          else if (config.noCalendar !== true) {
              window.requestAnimationFrame(function () {
                  if (self.calendarContainer !== undefined) {
                      self.calendarContainer.style.visibility = "hidden";
                      self.calendarContainer.style.display = "block";
                  }
                  if (self.daysContainer !== undefined) {
                      var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                      self.daysContainer.style.width = daysWidth + "px";
                      self.calendarContainer.style.width =
                          daysWidth +
                              (self.weekWrapper !== undefined
                                  ? self.weekWrapper.offsetWidth
                                  : 0) +
                              "px";
                      self.calendarContainer.style.removeProperty("visibility");
                      self.calendarContainer.style.removeProperty("display");
                  }
              });
          }
      }
      function updateTime(e) {
          if (self.selectedDates.length === 0) {
              var defaultDate = self.config.minDate === undefined ||
                  compareDates(new Date(), self.config.minDate) >= 0
                  ? new Date()
                  : new Date(self.config.minDate.getTime());
              var defaults = getDefaultHours(self.config);
              defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
              self.selectedDates = [defaultDate];
              self.latestSelectedDateObj = defaultDate;
          }
          if (e !== undefined && e.type !== "blur") {
              timeWrapper(e);
          }
          var prevValue = self._input.value;
          setHoursFromInputs();
          updateValue();
          if (self._input.value !== prevValue) {
              self._debouncedChange();
          }
      }
      function ampm2military(hour, amPM) {
          return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
      }
      function military2ampm(hour) {
          switch (hour % 24) {
              case 0:
              case 12:
                  return 12;
              default:
                  return hour % 12;
          }
      }
      function setHoursFromInputs() {
          if (self.hourElement === undefined || self.minuteElement === undefined)
              return;
          var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
              ? (parseInt(self.secondElement.value, 10) || 0) % 60
              : 0;
          if (self.amPM !== undefined) {
              hours = ampm2military(hours, self.amPM.textContent);
          }
          var limitMinHours = self.config.minTime !== undefined ||
              (self.config.minDate &&
                  self.minDateHasTime &&
                  self.latestSelectedDateObj &&
                  compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
                      0);
          var limitMaxHours = self.config.maxTime !== undefined ||
              (self.config.maxDate &&
                  self.maxDateHasTime &&
                  self.latestSelectedDateObj &&
                  compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
                      0);
          if (self.config.maxTime !== undefined &&
              self.config.minTime !== undefined &&
              self.config.minTime > self.config.maxTime) {
              var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
              var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
              var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
              if (currentTime > maxBound && currentTime < minBound) {
                  var result = parseSeconds(minBound);
                  hours = result[0];
                  minutes = result[1];
                  seconds = result[2];
              }
          }
          else {
              if (limitMaxHours) {
                  var maxTime = self.config.maxTime !== undefined
                      ? self.config.maxTime
                      : self.config.maxDate;
                  hours = Math.min(hours, maxTime.getHours());
                  if (hours === maxTime.getHours())
                      minutes = Math.min(minutes, maxTime.getMinutes());
                  if (minutes === maxTime.getMinutes())
                      seconds = Math.min(seconds, maxTime.getSeconds());
              }
              if (limitMinHours) {
                  var minTime = self.config.minTime !== undefined
                      ? self.config.minTime
                      : self.config.minDate;
                  hours = Math.max(hours, minTime.getHours());
                  if (hours === minTime.getHours() && minutes < minTime.getMinutes())
                      minutes = minTime.getMinutes();
                  if (minutes === minTime.getMinutes())
                      seconds = Math.max(seconds, minTime.getSeconds());
              }
          }
          setHours(hours, minutes, seconds);
      }
      function setHoursFromDate(dateObj) {
          var date = dateObj || self.latestSelectedDateObj;
          if (date && date instanceof Date) {
              setHours(date.getHours(), date.getMinutes(), date.getSeconds());
          }
      }
      function setHours(hours, minutes, seconds) {
          if (self.latestSelectedDateObj !== undefined) {
              self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
          }
          if (!self.hourElement || !self.minuteElement || self.isMobile)
              return;
          self.hourElement.value = pad(!self.config.time_24hr
              ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
              : hours);
          self.minuteElement.value = pad(minutes);
          if (self.amPM !== undefined)
              self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
          if (self.secondElement !== undefined)
              self.secondElement.value = pad(seconds);
      }
      function onYearInput(event) {
          var eventTarget = getEventTarget(event);
          var year = parseInt(eventTarget.value) + (event.delta || 0);
          if (year / 1000 > 1 ||
              (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
              changeYear(year);
          }
      }
      function bind(element, event, handler, options) {
          if (event instanceof Array)
              return event.forEach(function (ev) { return bind(element, ev, handler, options); });
          if (element instanceof Array)
              return element.forEach(function (el) { return bind(el, event, handler, options); });
          element.addEventListener(event, handler, options);
          self._handlers.push({
              remove: function () { return element.removeEventListener(event, handler, options); },
          });
      }
      function triggerChange() {
          triggerEvent("onChange");
      }
      function bindEvents() {
          if (self.config.wrap) {
              ["open", "close", "toggle", "clear"].forEach(function (evt) {
                  Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
                      return bind(el, "click", self[evt]);
                  });
              });
          }
          if (self.isMobile) {
              setupMobile();
              return;
          }
          var debouncedResize = debounce$3(onResize, 50);
          self._debouncedChange = debounce$3(triggerChange, DEBOUNCED_CHANGE_MS);
          if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
              bind(self.daysContainer, "mouseover", function (e) {
                  if (self.config.mode === "range")
                      onMouseOver(getEventTarget(e));
              });
          bind(self._input, "keydown", onKeyDown);
          if (self.calendarContainer !== undefined) {
              bind(self.calendarContainer, "keydown", onKeyDown);
          }
          if (!self.config.inline && !self.config.static)
              bind(window, "resize", debouncedResize);
          if (window.ontouchstart !== undefined)
              bind(window.document, "touchstart", documentClick);
          else
              bind(window.document, "mousedown", documentClick);
          bind(window.document, "focus", documentClick, { capture: true });
          if (self.config.clickOpens === true) {
              bind(self._input, "focus", self.open);
              bind(self._input, "click", self.open);
          }
          if (self.daysContainer !== undefined) {
              bind(self.monthNav, "click", onMonthNavClick);
              bind(self.monthNav, ["keyup", "increment"], onYearInput);
              bind(self.daysContainer, "click", selectDate);
          }
          if (self.timeContainer !== undefined &&
              self.minuteElement !== undefined &&
              self.hourElement !== undefined) {
              var selText = function (e) {
                  return getEventTarget(e).select();
              };
              bind(self.timeContainer, ["increment"], updateTime);
              bind(self.timeContainer, "blur", updateTime, { capture: true });
              bind(self.timeContainer, "click", timeIncrement);
              bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
              if (self.secondElement !== undefined)
                  bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });
              if (self.amPM !== undefined) {
                  bind(self.amPM, "click", function (e) {
                      updateTime(e);
                  });
              }
          }
          if (self.config.allowInput) {
              bind(self._input, "blur", onBlur);
          }
      }
      function jumpToDate(jumpDate, triggerChange) {
          var jumpTo = jumpDate !== undefined
              ? self.parseDate(jumpDate)
              : self.latestSelectedDateObj ||
                  (self.config.minDate && self.config.minDate > self.now
                      ? self.config.minDate
                      : self.config.maxDate && self.config.maxDate < self.now
                          ? self.config.maxDate
                          : self.now);
          var oldYear = self.currentYear;
          var oldMonth = self.currentMonth;
          try {
              if (jumpTo !== undefined) {
                  self.currentYear = jumpTo.getFullYear();
                  self.currentMonth = jumpTo.getMonth();
              }
          }
          catch (e) {
              e.message = "Invalid date supplied: " + jumpTo;
              self.config.errorHandler(e);
          }
          if (triggerChange && self.currentYear !== oldYear) {
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          if (triggerChange &&
              (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
              triggerEvent("onMonthChange");
          }
          self.redraw();
      }
      function timeIncrement(e) {
          var eventTarget = getEventTarget(e);
          if (~eventTarget.className.indexOf("arrow"))
              incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
      }
      function incrementNumInput(e, delta, inputElem) {
          var target = e && getEventTarget(e);
          var input = inputElem ||
              (target && target.parentNode && target.parentNode.firstChild);
          var event = createEvent("increment");
          event.delta = delta;
          input && input.dispatchEvent(event);
      }
      function build() {
          var fragment = window.document.createDocumentFragment();
          self.calendarContainer = createElement("div", "flatpickr-calendar");
          self.calendarContainer.tabIndex = -1;
          if (!self.config.noCalendar) {
              fragment.appendChild(buildMonthNav());
              self.innerContainer = createElement("div", "flatpickr-innerContainer");
              if (self.config.weekNumbers) {
                  var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
                  self.innerContainer.appendChild(weekWrapper);
                  self.weekNumbers = weekNumbers;
                  self.weekWrapper = weekWrapper;
              }
              self.rContainer = createElement("div", "flatpickr-rContainer");
              self.rContainer.appendChild(buildWeekdays());
              if (!self.daysContainer) {
                  self.daysContainer = createElement("div", "flatpickr-days");
                  self.daysContainer.tabIndex = -1;
              }
              buildDays();
              self.rContainer.appendChild(self.daysContainer);
              self.innerContainer.appendChild(self.rContainer);
              fragment.appendChild(self.innerContainer);
          }
          if (self.config.enableTime) {
              fragment.appendChild(buildTime());
          }
          toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
          toggleClass(self.calendarContainer, "animate", self.config.animate === true);
          toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
          self.calendarContainer.appendChild(fragment);
          var customAppend = self.config.appendTo !== undefined &&
              self.config.appendTo.nodeType !== undefined;
          if (self.config.inline || self.config.static) {
              self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
              if (self.config.inline) {
                  if (!customAppend && self.element.parentNode)
                      self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                  else if (self.config.appendTo !== undefined)
                      self.config.appendTo.appendChild(self.calendarContainer);
              }
              if (self.config.static) {
                  var wrapper = createElement("div", "flatpickr-wrapper");
                  if (self.element.parentNode)
                      self.element.parentNode.insertBefore(wrapper, self.element);
                  wrapper.appendChild(self.element);
                  if (self.altInput)
                      wrapper.appendChild(self.altInput);
                  wrapper.appendChild(self.calendarContainer);
              }
          }
          if (!self.config.static && !self.config.inline)
              (self.config.appendTo !== undefined
                  ? self.config.appendTo
                  : window.document.body).appendChild(self.calendarContainer);
      }
      function createDay(className, date, _dayNumber, i) {
          var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
          dayElement.dateObj = date;
          dayElement.$i = i;
          dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
          if (className.indexOf("hidden") === -1 &&
              compareDates(date, self.now) === 0) {
              self.todayDateElem = dayElement;
              dayElement.classList.add("today");
              dayElement.setAttribute("aria-current", "date");
          }
          if (dateIsEnabled) {
              dayElement.tabIndex = -1;
              if (isDateSelected(date)) {
                  dayElement.classList.add("selected");
                  self.selectedDateElem = dayElement;
                  if (self.config.mode === "range") {
                      toggleClass(dayElement, "startRange", self.selectedDates[0] &&
                          compareDates(date, self.selectedDates[0], true) === 0);
                      toggleClass(dayElement, "endRange", self.selectedDates[1] &&
                          compareDates(date, self.selectedDates[1], true) === 0);
                      if (className === "nextMonthDay")
                          dayElement.classList.add("inRange");
                  }
              }
          }
          else {
              dayElement.classList.add("flatpickr-disabled");
          }
          if (self.config.mode === "range") {
              if (isDateInRange(date) && !isDateSelected(date))
                  dayElement.classList.add("inRange");
          }
          if (self.weekNumbers &&
              self.config.showMonths === 1 &&
              className !== "prevMonthDay" &&
              i % 7 === 6) {
              self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
          }
          triggerEvent("onDayCreate", dayElement);
          return dayElement;
      }
      function focusOnDayElem(targetNode) {
          targetNode.focus();
          if (self.config.mode === "range")
              onMouseOver(targetNode);
      }
      function getFirstAvailableDay(delta) {
          var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
          var endMonth = delta > 0 ? self.config.showMonths : -1;
          for (var m = startMonth; m != endMonth; m += delta) {
              var month = self.daysContainer.children[m];
              var startIndex = delta > 0 ? 0 : month.children.length - 1;
              var endIndex = delta > 0 ? month.children.length : -1;
              for (var i = startIndex; i != endIndex; i += delta) {
                  var c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
                      return c;
              }
          }
          return undefined;
      }
      function getNextAvailableDay(current, delta) {
          var givenMonth = current.className.indexOf("Month") === -1
              ? current.dateObj.getMonth()
              : self.currentMonth;
          var endMonth = delta > 0 ? self.config.showMonths : -1;
          var loopDelta = delta > 0 ? 1 : -1;
          for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
              var month = self.daysContainer.children[m];
              var startIndex = givenMonth - self.currentMonth === m
                  ? current.$i + delta
                  : delta < 0
                      ? month.children.length - 1
                      : 0;
              var numMonthDays = month.children.length;
              for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
                  var c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 &&
                      isEnabled(c.dateObj) &&
                      Math.abs(current.$i - i) >= Math.abs(delta))
                      return focusOnDayElem(c);
              }
          }
          self.changeMonth(loopDelta);
          focusOnDay(getFirstAvailableDay(loopDelta), 0);
          return undefined;
      }
      function focusOnDay(current, offset) {
          var activeElement = getClosestActiveElement();
          var dayFocused = isInView(activeElement || document.body);
          var startElem = current !== undefined
              ? current
              : dayFocused
                  ? activeElement
                  : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
                      ? self.selectedDateElem
                      : self.todayDateElem !== undefined && isInView(self.todayDateElem)
                          ? self.todayDateElem
                          : getFirstAvailableDay(offset > 0 ? 1 : -1);
          if (startElem === undefined) {
              self._input.focus();
          }
          else if (!dayFocused) {
              focusOnDayElem(startElem);
          }
          else {
              getNextAvailableDay(startElem, offset);
          }
      }
      function buildMonthDays(year, month) {
          var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
          var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
          var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
          var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
          for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
              days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
          }
          for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
              days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
          }
          for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
              (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
              days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
          }
          var dayContainer = createElement("div", "dayContainer");
          dayContainer.appendChild(days);
          return dayContainer;
      }
      function buildDays() {
          if (self.daysContainer === undefined) {
              return;
          }
          clearNode(self.daysContainer);
          if (self.weekNumbers)
              clearNode(self.weekNumbers);
          var frag = document.createDocumentFragment();
          for (var i = 0; i < self.config.showMonths; i++) {
              var d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
          }
          self.daysContainer.appendChild(frag);
          self.days = self.daysContainer.firstChild;
          if (self.config.mode === "range" && self.selectedDates.length === 1) {
              onMouseOver();
          }
      }
      function buildMonthSwitch() {
          if (self.config.showMonths > 1 ||
              self.config.monthSelectorType !== "dropdown")
              return;
          var shouldBuildMonth = function (month) {
              if (self.config.minDate !== undefined &&
                  self.currentYear === self.config.minDate.getFullYear() &&
                  month < self.config.minDate.getMonth()) {
                  return false;
              }
              return !(self.config.maxDate !== undefined &&
                  self.currentYear === self.config.maxDate.getFullYear() &&
                  month > self.config.maxDate.getMonth());
          };
          self.monthsDropdownContainer.tabIndex = -1;
          self.monthsDropdownContainer.innerHTML = "";
          for (var i = 0; i < 12; i++) {
              if (!shouldBuildMonth(i))
                  continue;
              var month = createElement("option", "flatpickr-monthDropdown-month");
              month.value = new Date(self.currentYear, i).getMonth().toString();
              month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
              month.tabIndex = -1;
              if (self.currentMonth === i) {
                  month.selected = true;
              }
              self.monthsDropdownContainer.appendChild(month);
          }
      }
      function buildMonth() {
          var container = createElement("div", "flatpickr-month");
          var monthNavFragment = window.document.createDocumentFragment();
          var monthElement;
          if (self.config.showMonths > 1 ||
              self.config.monthSelectorType === "static") {
              monthElement = createElement("span", "cur-month");
          }
          else {
              self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
              self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
              bind(self.monthsDropdownContainer, "change", function (e) {
                  var target = getEventTarget(e);
                  var selectedMonth = parseInt(target.value, 10);
                  self.changeMonth(selectedMonth - self.currentMonth);
                  triggerEvent("onMonthChange");
              });
              buildMonthSwitch();
              monthElement = self.monthsDropdownContainer;
          }
          var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
          var yearElement = yearInput.getElementsByTagName("input")[0];
          yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
          if (self.config.minDate) {
              yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
          }
          if (self.config.maxDate) {
              yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
              yearElement.disabled =
                  !!self.config.minDate &&
                      self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
          }
          var currentMonth = createElement("div", "flatpickr-current-month");
          currentMonth.appendChild(monthElement);
          currentMonth.appendChild(yearInput);
          monthNavFragment.appendChild(currentMonth);
          container.appendChild(monthNavFragment);
          return {
              container: container,
              yearElement: yearElement,
              monthElement: monthElement,
          };
      }
      function buildMonths() {
          clearNode(self.monthNav);
          self.monthNav.appendChild(self.prevMonthNav);
          if (self.config.showMonths) {
              self.yearElements = [];
              self.monthElements = [];
          }
          for (var m = self.config.showMonths; m--;) {
              var month = buildMonth();
              self.yearElements.push(month.yearElement);
              self.monthElements.push(month.monthElement);
              self.monthNav.appendChild(month.container);
          }
          self.monthNav.appendChild(self.nextMonthNav);
      }
      function buildMonthNav() {
          self.monthNav = createElement("div", "flatpickr-months");
          self.yearElements = [];
          self.monthElements = [];
          self.prevMonthNav = createElement("span", "flatpickr-prev-month");
          self.prevMonthNav.innerHTML = self.config.prevArrow;
          self.nextMonthNav = createElement("span", "flatpickr-next-month");
          self.nextMonthNav.innerHTML = self.config.nextArrow;
          buildMonths();
          Object.defineProperty(self, "_hidePrevMonthArrow", {
              get: function () { return self.__hidePrevMonthArrow; },
              set: function (bool) {
                  if (self.__hidePrevMonthArrow !== bool) {
                      toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
                      self.__hidePrevMonthArrow = bool;
                  }
              },
          });
          Object.defineProperty(self, "_hideNextMonthArrow", {
              get: function () { return self.__hideNextMonthArrow; },
              set: function (bool) {
                  if (self.__hideNextMonthArrow !== bool) {
                      toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
                      self.__hideNextMonthArrow = bool;
                  }
              },
          });
          self.currentYearElement = self.yearElements[0];
          updateNavigationCurrentMonth();
          return self.monthNav;
      }
      function buildTime() {
          self.calendarContainer.classList.add("hasTime");
          if (self.config.noCalendar)
              self.calendarContainer.classList.add("noCalendar");
          var defaults = getDefaultHours(self.config);
          self.timeContainer = createElement("div", "flatpickr-time");
          self.timeContainer.tabIndex = -1;
          var separator = createElement("span", "flatpickr-time-separator", ":");
          var hourInput = createNumberInput("flatpickr-hour", {
              "aria-label": self.l10n.hourAriaLabel,
          });
          self.hourElement = hourInput.getElementsByTagName("input")[0];
          var minuteInput = createNumberInput("flatpickr-minute", {
              "aria-label": self.l10n.minuteAriaLabel,
          });
          self.minuteElement = minuteInput.getElementsByTagName("input")[0];
          self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
          self.hourElement.value = pad(self.latestSelectedDateObj
              ? self.latestSelectedDateObj.getHours()
              : self.config.time_24hr
                  ? defaults.hours
                  : military2ampm(defaults.hours));
          self.minuteElement.value = pad(self.latestSelectedDateObj
              ? self.latestSelectedDateObj.getMinutes()
              : defaults.minutes);
          self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
          self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
          self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
          self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
          self.hourElement.setAttribute("maxlength", "2");
          self.minuteElement.setAttribute("min", "0");
          self.minuteElement.setAttribute("max", "59");
          self.minuteElement.setAttribute("maxlength", "2");
          self.timeContainer.appendChild(hourInput);
          self.timeContainer.appendChild(separator);
          self.timeContainer.appendChild(minuteInput);
          if (self.config.time_24hr)
              self.timeContainer.classList.add("time24hr");
          if (self.config.enableSeconds) {
              self.timeContainer.classList.add("hasSeconds");
              var secondInput = createNumberInput("flatpickr-second");
              self.secondElement = secondInput.getElementsByTagName("input")[0];
              self.secondElement.value = pad(self.latestSelectedDateObj
                  ? self.latestSelectedDateObj.getSeconds()
                  : defaults.seconds);
              self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
              self.secondElement.setAttribute("min", "0");
              self.secondElement.setAttribute("max", "59");
              self.secondElement.setAttribute("maxlength", "2");
              self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
              self.timeContainer.appendChild(secondInput);
          }
          if (!self.config.time_24hr) {
              self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
                  ? self.hourElement.value
                  : self.config.defaultHour) > 11)]);
              self.amPM.title = self.l10n.toggleTitle;
              self.amPM.tabIndex = -1;
              self.timeContainer.appendChild(self.amPM);
          }
          return self.timeContainer;
      }
      function buildWeekdays() {
          if (!self.weekdayContainer)
              self.weekdayContainer = createElement("div", "flatpickr-weekdays");
          else
              clearNode(self.weekdayContainer);
          for (var i = self.config.showMonths; i--;) {
              var container = createElement("div", "flatpickr-weekdaycontainer");
              self.weekdayContainer.appendChild(container);
          }
          updateWeekdays();
          return self.weekdayContainer;
      }
      function updateWeekdays() {
          if (!self.weekdayContainer) {
              return;
          }
          var firstDayOfWeek = self.l10n.firstDayOfWeek;
          var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
          if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
              weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
          }
          for (var i = self.config.showMonths; i--;) {
              self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
          }
      }
      function buildWeeks() {
          self.calendarContainer.classList.add("hasWeeks");
          var weekWrapper = createElement("div", "flatpickr-weekwrapper");
          weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
          var weekNumbers = createElement("div", "flatpickr-weeks");
          weekWrapper.appendChild(weekNumbers);
          return {
              weekWrapper: weekWrapper,
              weekNumbers: weekNumbers,
          };
      }
      function changeMonth(value, isOffset) {
          if (isOffset === void 0) { isOffset = true; }
          var delta = isOffset ? value : value - self.currentMonth;
          if ((delta < 0 && self._hidePrevMonthArrow === true) ||
              (delta > 0 && self._hideNextMonthArrow === true))
              return;
          self.currentMonth += delta;
          if (self.currentMonth < 0 || self.currentMonth > 11) {
              self.currentYear += self.currentMonth > 11 ? 1 : -1;
              self.currentMonth = (self.currentMonth + 12) % 12;
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          buildDays();
          triggerEvent("onMonthChange");
          updateNavigationCurrentMonth();
      }
      function clear(triggerChangeEvent, toInitial) {
          if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }
          if (toInitial === void 0) { toInitial = true; }
          self.input.value = "";
          if (self.altInput !== undefined)
              self.altInput.value = "";
          if (self.mobileInput !== undefined)
              self.mobileInput.value = "";
          self.selectedDates = [];
          self.latestSelectedDateObj = undefined;
          if (toInitial === true) {
              self.currentYear = self._initialDate.getFullYear();
              self.currentMonth = self._initialDate.getMonth();
          }
          if (self.config.enableTime === true) {
              var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
              setHours(hours, minutes, seconds);
          }
          self.redraw();
          if (triggerChangeEvent)
              triggerEvent("onChange");
      }
      function close() {
          self.isOpen = false;
          if (!self.isMobile) {
              if (self.calendarContainer !== undefined) {
                  self.calendarContainer.classList.remove("open");
              }
              if (self._input !== undefined) {
                  self._input.classList.remove("active");
              }
          }
          triggerEvent("onClose");
      }
      function destroy() {
          if (self.config !== undefined)
              triggerEvent("onDestroy");
          for (var i = self._handlers.length; i--;) {
              self._handlers[i].remove();
          }
          self._handlers = [];
          if (self.mobileInput) {
              if (self.mobileInput.parentNode)
                  self.mobileInput.parentNode.removeChild(self.mobileInput);
              self.mobileInput = undefined;
          }
          else if (self.calendarContainer && self.calendarContainer.parentNode) {
              if (self.config.static && self.calendarContainer.parentNode) {
                  var wrapper = self.calendarContainer.parentNode;
                  wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                  if (wrapper.parentNode) {
                      while (wrapper.firstChild)
                          wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                      wrapper.parentNode.removeChild(wrapper);
                  }
              }
              else
                  self.calendarContainer.parentNode.removeChild(self.calendarContainer);
          }
          if (self.altInput) {
              self.input.type = "text";
              if (self.altInput.parentNode)
                  self.altInput.parentNode.removeChild(self.altInput);
              delete self.altInput;
          }
          if (self.input) {
              self.input.type = self.input._type;
              self.input.classList.remove("flatpickr-input");
              self.input.removeAttribute("readonly");
          }
          [
              "_showTimeInput",
              "latestSelectedDateObj",
              "_hideNextMonthArrow",
              "_hidePrevMonthArrow",
              "__hideNextMonthArrow",
              "__hidePrevMonthArrow",
              "isMobile",
              "isOpen",
              "selectedDateElem",
              "minDateHasTime",
              "maxDateHasTime",
              "days",
              "daysContainer",
              "_input",
              "_positionElement",
              "innerContainer",
              "rContainer",
              "monthNav",
              "todayDateElem",
              "calendarContainer",
              "weekdayContainer",
              "prevMonthNav",
              "nextMonthNav",
              "monthsDropdownContainer",
              "currentMonthElement",
              "currentYearElement",
              "navigationCurrentMonth",
              "selectedDateElem",
              "config",
          ].forEach(function (k) {
              try {
                  delete self[k];
              }
              catch (_) { }
          });
      }
      function isCalendarElem(elem) {
          return self.calendarContainer.contains(elem);
      }
      function documentClick(e) {
          if (self.isOpen && !self.config.inline) {
              var eventTarget_1 = getEventTarget(e);
              var isCalendarElement = isCalendarElem(eventTarget_1);
              var isInput = eventTarget_1 === self.input ||
                  eventTarget_1 === self.altInput ||
                  self.element.contains(eventTarget_1) ||
                  (e.path &&
                      e.path.indexOf &&
                      (~e.path.indexOf(self.input) ||
                          ~e.path.indexOf(self.altInput)));
              var lostFocus = !isInput &&
                  !isCalendarElement &&
                  !isCalendarElem(e.relatedTarget);
              var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
                  return elem.contains(eventTarget_1);
              });
              if (lostFocus && isIgnored) {
                  if (self.config.allowInput) {
                      self.setDate(self._input.value, false, self.config.altInput
                          ? self.config.altFormat
                          : self.config.dateFormat);
                  }
                  if (self.timeContainer !== undefined &&
                      self.minuteElement !== undefined &&
                      self.hourElement !== undefined &&
                      self.input.value !== "" &&
                      self.input.value !== undefined) {
                      updateTime();
                  }
                  self.close();
                  if (self.config &&
                      self.config.mode === "range" &&
                      self.selectedDates.length === 1)
                      self.clear(false);
              }
          }
      }
      function changeYear(newYear) {
          if (!newYear ||
              (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
              (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
              return;
          var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
          self.currentYear = newYearNum || self.currentYear;
          if (self.config.maxDate &&
              self.currentYear === self.config.maxDate.getFullYear()) {
              self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
          }
          else if (self.config.minDate &&
              self.currentYear === self.config.minDate.getFullYear()) {
              self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
          }
          if (isNewYear) {
              self.redraw();
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
      }
      function isEnabled(date, timeless) {
          var _a;
          if (timeless === void 0) { timeless = true; }
          var dateToCheck = self.parseDate(date, undefined, timeless);
          if ((self.config.minDate &&
              dateToCheck &&
              compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
              (self.config.maxDate &&
                  dateToCheck &&
                  compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
              return false;
          if (!self.config.enable && self.config.disable.length === 0)
              return true;
          if (dateToCheck === undefined)
              return false;
          var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
          for (var i = 0, d = void 0; i < array.length; i++) {
              d = array[i];
              if (typeof d === "function" &&
                  d(dateToCheck))
                  return bool;
              else if (d instanceof Date &&
                  dateToCheck !== undefined &&
                  d.getTime() === dateToCheck.getTime())
                  return bool;
              else if (typeof d === "string") {
                  var parsed = self.parseDate(d, undefined, true);
                  return parsed && parsed.getTime() === dateToCheck.getTime()
                      ? bool
                      : !bool;
              }
              else if (typeof d === "object" &&
                  dateToCheck !== undefined &&
                  d.from &&
                  d.to &&
                  dateToCheck.getTime() >= d.from.getTime() &&
                  dateToCheck.getTime() <= d.to.getTime())
                  return bool;
          }
          return !bool;
      }
      function isInView(elem) {
          if (self.daysContainer !== undefined)
              return (elem.className.indexOf("hidden") === -1 &&
                  elem.className.indexOf("flatpickr-disabled") === -1 &&
                  self.daysContainer.contains(elem));
          return false;
      }
      function onBlur(e) {
          var isInput = e.target === self._input;
          var valueChanged = self._input.value.trimEnd() !== getDateStr();
          if (isInput &&
              valueChanged &&
              !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
              self.setDate(self._input.value, true, e.target === self.altInput
                  ? self.config.altFormat
                  : self.config.dateFormat);
          }
      }
      function onKeyDown(e) {
          var eventTarget = getEventTarget(e);
          var isInput = self.config.wrap
              ? element.contains(eventTarget)
              : eventTarget === self._input;
          var allowInput = self.config.allowInput;
          var allowKeydown = self.isOpen && (!allowInput || !isInput);
          var allowInlineKeydown = self.config.inline && isInput && !allowInput;
          if (e.keyCode === 13 && isInput) {
              if (allowInput) {
                  self.setDate(self._input.value, true, eventTarget === self.altInput
                      ? self.config.altFormat
                      : self.config.dateFormat);
                  self.close();
                  return eventTarget.blur();
              }
              else {
                  self.open();
              }
          }
          else if (isCalendarElem(eventTarget) ||
              allowKeydown ||
              allowInlineKeydown) {
              var isTimeObj = !!self.timeContainer &&
                  self.timeContainer.contains(eventTarget);
              switch (e.keyCode) {
                  case 13:
                      if (isTimeObj) {
                          e.preventDefault();
                          updateTime();
                          focusAndClose();
                      }
                      else
                          selectDate(e);
                      break;
                  case 27:
                      e.preventDefault();
                      focusAndClose();
                      break;
                  case 8:
                  case 46:
                      if (isInput && !self.config.allowInput) {
                          e.preventDefault();
                          self.clear();
                      }
                      break;
                  case 37:
                  case 39:
                      if (!isTimeObj && !isInput) {
                          e.preventDefault();
                          var activeElement = getClosestActiveElement();
                          if (self.daysContainer !== undefined &&
                              (allowInput === false ||
                                  (activeElement && isInView(activeElement)))) {
                              var delta_1 = e.keyCode === 39 ? 1 : -1;
                              if (!e.ctrlKey)
                                  focusOnDay(undefined, delta_1);
                              else {
                                  e.stopPropagation();
                                  changeMonth(delta_1);
                                  focusOnDay(getFirstAvailableDay(1), 0);
                              }
                          }
                      }
                      else if (self.hourElement)
                          self.hourElement.focus();
                      break;
                  case 38:
                  case 40:
                      e.preventDefault();
                      var delta = e.keyCode === 40 ? 1 : -1;
                      if ((self.daysContainer &&
                          eventTarget.$i !== undefined) ||
                          eventTarget === self.input ||
                          eventTarget === self.altInput) {
                          if (e.ctrlKey) {
                              e.stopPropagation();
                              changeYear(self.currentYear - delta);
                              focusOnDay(getFirstAvailableDay(1), 0);
                          }
                          else if (!isTimeObj)
                              focusOnDay(undefined, delta * 7);
                      }
                      else if (eventTarget === self.currentYearElement) {
                          changeYear(self.currentYear - delta);
                      }
                      else if (self.config.enableTime) {
                          if (!isTimeObj && self.hourElement)
                              self.hourElement.focus();
                          updateTime(e);
                          self._debouncedChange();
                      }
                      break;
                  case 9:
                      if (isTimeObj) {
                          var elems = [
                              self.hourElement,
                              self.minuteElement,
                              self.secondElement,
                              self.amPM,
                          ]
                              .concat(self.pluginElements)
                              .filter(function (x) { return x; });
                          var i = elems.indexOf(eventTarget);
                          if (i !== -1) {
                              var target = elems[i + (e.shiftKey ? -1 : 1)];
                              e.preventDefault();
                              (target || self._input).focus();
                          }
                      }
                      else if (!self.config.noCalendar &&
                          self.daysContainer &&
                          self.daysContainer.contains(eventTarget) &&
                          e.shiftKey) {
                          e.preventDefault();
                          self._input.focus();
                      }
                      break;
              }
          }
          if (self.amPM !== undefined && eventTarget === self.amPM) {
              switch (e.key) {
                  case self.l10n.amPM[0].charAt(0):
                  case self.l10n.amPM[0].charAt(0).toLowerCase():
                      self.amPM.textContent = self.l10n.amPM[0];
                      setHoursFromInputs();
                      updateValue();
                      break;
                  case self.l10n.amPM[1].charAt(0):
                  case self.l10n.amPM[1].charAt(0).toLowerCase():
                      self.amPM.textContent = self.l10n.amPM[1];
                      setHoursFromInputs();
                      updateValue();
                      break;
              }
          }
          if (isInput || isCalendarElem(eventTarget)) {
              triggerEvent("onKeyDown", e);
          }
      }
      function onMouseOver(elem, cellClass) {
          if (cellClass === void 0) { cellClass = "flatpickr-day"; }
          if (self.selectedDates.length !== 1 ||
              (elem &&
                  (!elem.classList.contains(cellClass) ||
                      elem.classList.contains("flatpickr-disabled"))))
              return;
          var hoverDate = elem
              ? elem.dateObj.getTime()
              : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
          var containsDisabled = false;
          var minRange = 0, maxRange = 0;
          for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
              if (!isEnabled(new Date(t), true)) {
                  containsDisabled =
                      containsDisabled || (t > rangeStartDate && t < rangeEndDate);
                  if (t < initialDate && (!minRange || t > minRange))
                      minRange = t;
                  else if (t > initialDate && (!maxRange || t < maxRange))
                      maxRange = t;
              }
          }
          var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
          hoverableCells.forEach(function (dayElem) {
              var date = dayElem.dateObj;
              var timestamp = date.getTime();
              var outOfRange = (minRange > 0 && timestamp < minRange) ||
                  (maxRange > 0 && timestamp > maxRange);
              if (outOfRange) {
                  dayElem.classList.add("notAllowed");
                  ["inRange", "startRange", "endRange"].forEach(function (c) {
                      dayElem.classList.remove(c);
                  });
                  return;
              }
              else if (containsDisabled && !outOfRange)
                  return;
              ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
                  dayElem.classList.remove(c);
              });
              if (elem !== undefined) {
                  elem.classList.add(hoverDate <= self.selectedDates[0].getTime()
                      ? "startRange"
                      : "endRange");
                  if (initialDate < hoverDate && timestamp === initialDate)
                      dayElem.classList.add("startRange");
                  else if (initialDate > hoverDate && timestamp === initialDate)
                      dayElem.classList.add("endRange");
                  if (timestamp >= minRange &&
                      (maxRange === 0 || timestamp <= maxRange) &&
                      isBetween(timestamp, initialDate, hoverDate))
                      dayElem.classList.add("inRange");
              }
          });
      }
      function onResize() {
          if (self.isOpen && !self.config.static && !self.config.inline)
              positionCalendar();
      }
      function open(e, positionElement) {
          if (positionElement === void 0) { positionElement = self._positionElement; }
          if (self.isMobile === true) {
              if (e) {
                  e.preventDefault();
                  var eventTarget = getEventTarget(e);
                  if (eventTarget) {
                      eventTarget.blur();
                  }
              }
              if (self.mobileInput !== undefined) {
                  self.mobileInput.focus();
                  self.mobileInput.click();
              }
              triggerEvent("onOpen");
              return;
          }
          else if (self._input.disabled || self.config.inline) {
              return;
          }
          var wasOpen = self.isOpen;
          self.isOpen = true;
          if (!wasOpen) {
              self.calendarContainer.classList.add("open");
              self._input.classList.add("active");
              triggerEvent("onOpen");
              positionCalendar(positionElement);
          }
          if (self.config.enableTime === true && self.config.noCalendar === true) {
              if (self.config.allowInput === false &&
                  (e === undefined ||
                      !self.timeContainer.contains(e.relatedTarget))) {
                  setTimeout(function () { return self.hourElement.select(); }, 50);
              }
          }
      }
      function minMaxDateSetter(type) {
          return function (date) {
              var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));
              var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
              if (dateObj !== undefined) {
                  self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
                      dateObj.getHours() > 0 ||
                          dateObj.getMinutes() > 0 ||
                          dateObj.getSeconds() > 0;
              }
              if (self.selectedDates) {
                  self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });
                  if (!self.selectedDates.length && type === "min")
                      setHoursFromDate(dateObj);
                  updateValue();
              }
              if (self.daysContainer) {
                  redraw();
                  if (dateObj !== undefined)
                      self.currentYearElement[type] = dateObj.getFullYear().toString();
                  else
                      self.currentYearElement.removeAttribute(type);
                  self.currentYearElement.disabled =
                      !!inverseDateObj &&
                          dateObj !== undefined &&
                          inverseDateObj.getFullYear() === dateObj.getFullYear();
              }
          };
      }
      function parseConfig() {
          var boolOpts = [
              "wrap",
              "weekNumbers",
              "allowInput",
              "allowInvalidPreload",
              "clickOpens",
              "time_24hr",
              "enableTime",
              "noCalendar",
              "altInput",
              "shorthandCurrentMonth",
              "inline",
              "static",
              "enableSeconds",
              "disableMobile",
          ];
          var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
          var formats = {};
          self.config.parseDate = userConfig.parseDate;
          self.config.formatDate = userConfig.formatDate;
          Object.defineProperty(self.config, "enable", {
              get: function () { return self.config._enable; },
              set: function (dates) {
                  self.config._enable = parseDateRules(dates);
              },
          });
          Object.defineProperty(self.config, "disable", {
              get: function () { return self.config._disable; },
              set: function (dates) {
                  self.config._disable = parseDateRules(dates);
              },
          });
          var timeMode = userConfig.mode === "time";
          if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
              var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults$2.dateFormat;
              formats.dateFormat =
                  userConfig.noCalendar || timeMode
                      ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
                      : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
          }
          if (userConfig.altInput &&
              (userConfig.enableTime || timeMode) &&
              !userConfig.altFormat) {
              var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults$2.altFormat;
              formats.altFormat =
                  userConfig.noCalendar || timeMode
                      ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
                      : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
          }
          Object.defineProperty(self.config, "minDate", {
              get: function () { return self.config._minDate; },
              set: minMaxDateSetter("min"),
          });
          Object.defineProperty(self.config, "maxDate", {
              get: function () { return self.config._maxDate; },
              set: minMaxDateSetter("max"),
          });
          var minMaxTimeSetter = function (type) { return function (val) {
              self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
          }; };
          Object.defineProperty(self.config, "minTime", {
              get: function () { return self.config._minTime; },
              set: minMaxTimeSetter("min"),
          });
          Object.defineProperty(self.config, "maxTime", {
              get: function () { return self.config._maxTime; },
              set: minMaxTimeSetter("max"),
          });
          if (userConfig.mode === "time") {
              self.config.noCalendar = true;
              self.config.enableTime = true;
          }
          Object.assign(self.config, formats, userConfig);
          for (var i = 0; i < boolOpts.length; i++)
              self.config[boolOpts[i]] =
                  self.config[boolOpts[i]] === true ||
                      self.config[boolOpts[i]] === "true";
          HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {
              self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
          });
          self.isMobile =
              !self.config.disableMobile &&
                  !self.config.inline &&
                  self.config.mode === "single" &&
                  !self.config.disable.length &&
                  !self.config.enable &&
                  !self.config.weekNumbers &&
                  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          for (var i = 0; i < self.config.plugins.length; i++) {
              var pluginConf = self.config.plugins[i](self) || {};
              for (var key in pluginConf) {
                  if (HOOKS.indexOf(key) > -1) {
                      self.config[key] = arrayify(pluginConf[key])
                          .map(bindToInstance)
                          .concat(self.config[key]);
                  }
                  else if (typeof userConfig[key] === "undefined")
                      self.config[key] = pluginConf[key];
              }
          }
          if (!userConfig.altInputClass) {
              self.config.altInputClass =
                  getInputElem().className + " " + self.config.altInputClass;
          }
          triggerEvent("onParseConfig");
      }
      function getInputElem() {
          return self.config.wrap
              ? element.querySelector("[data-input]")
              : element;
      }
      function setupLocale() {
          if (typeof self.config.locale !== "object" &&
              typeof flatpickr.l10ns[self.config.locale] === "undefined")
              self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
          self.l10n = __assign(__assign({}, flatpickr.l10ns.default), (typeof self.config.locale === "object"
              ? self.config.locale
              : self.config.locale !== "default"
                  ? flatpickr.l10ns[self.config.locale]
                  : undefined));
          tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
          tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
          tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
          tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
          tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
          var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
          if (userConfig.time_24hr === undefined &&
              flatpickr.defaultConfig.time_24hr === undefined) {
              self.config.time_24hr = self.l10n.time_24hr;
          }
          self.formatDate = createDateFormatter(self);
          self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
      }
      function positionCalendar(customPositionElement) {
          if (typeof self.config.position === "function") {
              return void self.config.position(self, customPositionElement);
          }
          if (self.calendarContainer === undefined)
              return;
          triggerEvent("onPreCalendarPosition");
          var positionElement = customPositionElement || self._positionElement;
          var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
              (configPosVertical !== "below" &&
                  distanceFromBottom < calendarHeight &&
                  inputBounds.top > calendarHeight);
          var top = window.pageYOffset +
              inputBounds.top +
              (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
          toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
          toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
          if (self.config.inline)
              return;
          var left = window.pageXOffset + inputBounds.left;
          var isCenter = false;
          var isRight = false;
          if (configPosHorizontal === "center") {
              left -= (calendarWidth - inputBounds.width) / 2;
              isCenter = true;
          }
          else if (configPosHorizontal === "right") {
              left -= calendarWidth - inputBounds.width;
              isRight = true;
          }
          toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
          toggleClass(self.calendarContainer, "arrowCenter", isCenter);
          toggleClass(self.calendarContainer, "arrowRight", isRight);
          var right = window.document.body.offsetWidth -
              (window.pageXOffset + inputBounds.right);
          var rightMost = left + calendarWidth > window.document.body.offsetWidth;
          var centerMost = right + calendarWidth > window.document.body.offsetWidth;
          toggleClass(self.calendarContainer, "rightMost", rightMost);
          if (self.config.static)
              return;
          self.calendarContainer.style.top = top + "px";
          if (!rightMost) {
              self.calendarContainer.style.left = left + "px";
              self.calendarContainer.style.right = "auto";
          }
          else if (!centerMost) {
              self.calendarContainer.style.left = "auto";
              self.calendarContainer.style.right = right + "px";
          }
          else {
              var doc = getDocumentStyleSheet();
              if (doc === undefined)
                  return;
              var bodyWidth = window.document.body.offsetWidth;
              var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
              var centerBefore = ".flatpickr-calendar.centerMost:before";
              var centerAfter = ".flatpickr-calendar.centerMost:after";
              var centerIndex = doc.cssRules.length;
              var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
              toggleClass(self.calendarContainer, "rightMost", false);
              toggleClass(self.calendarContainer, "centerMost", true);
              doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
              self.calendarContainer.style.left = centerLeft + "px";
              self.calendarContainer.style.right = "auto";
          }
      }
      function getDocumentStyleSheet() {
          var editableSheet = null;
          for (var i = 0; i < document.styleSheets.length; i++) {
              var sheet = document.styleSheets[i];
              if (!sheet.cssRules)
                  continue;
              try {
                  sheet.cssRules;
              }
              catch (err) {
                  continue;
              }
              editableSheet = sheet;
              break;
          }
          return editableSheet != null ? editableSheet : createStyleSheet();
      }
      function createStyleSheet() {
          var style = document.createElement("style");
          document.head.appendChild(style);
          return style.sheet;
      }
      function redraw() {
          if (self.config.noCalendar || self.isMobile)
              return;
          buildMonthSwitch();
          updateNavigationCurrentMonth();
          buildDays();
      }
      function focusAndClose() {
          self._input.focus();
          if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
              navigator.msMaxTouchPoints !== undefined) {
              setTimeout(self.close, 0);
          }
          else {
              self.close();
          }
      }
      function selectDate(e) {
          e.preventDefault();
          e.stopPropagation();
          var isSelectable = function (day) {
              return day.classList &&
                  day.classList.contains("flatpickr-day") &&
                  !day.classList.contains("flatpickr-disabled") &&
                  !day.classList.contains("notAllowed");
          };
          var t = findParent(getEventTarget(e), isSelectable);
          if (t === undefined)
              return;
          var target = t;
          var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
          var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
              selectedDate.getMonth() >
                  self.currentMonth + self.config.showMonths - 1) &&
              self.config.mode !== "range";
          self.selectedDateElem = target;
          if (self.config.mode === "single")
              self.selectedDates = [selectedDate];
          else if (self.config.mode === "multiple") {
              var selectedIndex = isDateSelected(selectedDate);
              if (selectedIndex)
                  self.selectedDates.splice(parseInt(selectedIndex), 1);
              else
                  self.selectedDates.push(selectedDate);
          }
          else if (self.config.mode === "range") {
              if (self.selectedDates.length === 2) {
                  self.clear(false, false);
              }
              self.latestSelectedDateObj = selectedDate;
              self.selectedDates.push(selectedDate);
              if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
                  self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
          }
          setHoursFromInputs();
          if (shouldChangeMonth) {
              var isNewYear = self.currentYear !== selectedDate.getFullYear();
              self.currentYear = selectedDate.getFullYear();
              self.currentMonth = selectedDate.getMonth();
              if (isNewYear) {
                  triggerEvent("onYearChange");
                  buildMonthSwitch();
              }
              triggerEvent("onMonthChange");
          }
          updateNavigationCurrentMonth();
          buildDays();
          updateValue();
          if (!shouldChangeMonth &&
              self.config.mode !== "range" &&
              self.config.showMonths === 1)
              focusOnDayElem(target);
          else if (self.selectedDateElem !== undefined &&
              self.hourElement === undefined) {
              self.selectedDateElem && self.selectedDateElem.focus();
          }
          if (self.hourElement !== undefined)
              self.hourElement !== undefined && self.hourElement.focus();
          if (self.config.closeOnSelect) {
              var single = self.config.mode === "single" && !self.config.enableTime;
              var range = self.config.mode === "range" &&
                  self.selectedDates.length === 2 &&
                  !self.config.enableTime;
              if (single || range) {
                  focusAndClose();
              }
          }
          triggerChange();
      }
      var CALLBACKS = {
          locale: [setupLocale, updateWeekdays],
          showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
          minDate: [jumpToDate],
          maxDate: [jumpToDate],
          positionElement: [updatePositionElement],
          clickOpens: [
              function () {
                  if (self.config.clickOpens === true) {
                      bind(self._input, "focus", self.open);
                      bind(self._input, "click", self.open);
                  }
                  else {
                      self._input.removeEventListener("focus", self.open);
                      self._input.removeEventListener("click", self.open);
                  }
              },
          ],
      };
      function set(option, value) {
          if (option !== null && typeof option === "object") {
              Object.assign(self.config, option);
              for (var key in option) {
                  if (CALLBACKS[key] !== undefined)
                      CALLBACKS[key].forEach(function (x) { return x(); });
              }
          }
          else {
              self.config[option] = value;
              if (CALLBACKS[option] !== undefined)
                  CALLBACKS[option].forEach(function (x) { return x(); });
              else if (HOOKS.indexOf(option) > -1)
                  self.config[option] = arrayify(value);
          }
          self.redraw();
          updateValue(true);
      }
      function setSelectedDate(inputDate, format) {
          var dates = [];
          if (inputDate instanceof Array)
              dates = inputDate.map(function (d) { return self.parseDate(d, format); });
          else if (inputDate instanceof Date || typeof inputDate === "number")
              dates = [self.parseDate(inputDate, format)];
          else if (typeof inputDate === "string") {
              switch (self.config.mode) {
                  case "single":
                  case "time":
                      dates = [self.parseDate(inputDate, format)];
                      break;
                  case "multiple":
                      dates = inputDate
                          .split(self.config.conjunction)
                          .map(function (date) { return self.parseDate(date, format); });
                      break;
                  case "range":
                      dates = inputDate
                          .split(self.l10n.rangeSeparator)
                          .map(function (date) { return self.parseDate(date, format); });
                      break;
              }
          }
          else
              self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
          self.selectedDates = (self.config.allowInvalidPreload
              ? dates
              : dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); }));
          if (self.config.mode === "range")
              self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
      }
      function setDate(date, triggerChange, format) {
          if (triggerChange === void 0) { triggerChange = false; }
          if (format === void 0) { format = self.config.dateFormat; }
          if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
              return self.clear(triggerChange);
          setSelectedDate(date, format);
          self.latestSelectedDateObj =
              self.selectedDates[self.selectedDates.length - 1];
          self.redraw();
          jumpToDate(undefined, triggerChange);
          setHoursFromDate();
          if (self.selectedDates.length === 0) {
              self.clear(false);
          }
          updateValue(triggerChange);
          if (triggerChange)
              triggerEvent("onChange");
      }
      function parseDateRules(arr) {
          return arr
              .slice()
              .map(function (rule) {
              if (typeof rule === "string" ||
                  typeof rule === "number" ||
                  rule instanceof Date) {
                  return self.parseDate(rule, undefined, true);
              }
              else if (rule &&
                  typeof rule === "object" &&
                  rule.from &&
                  rule.to)
                  return {
                      from: self.parseDate(rule.from, undefined),
                      to: self.parseDate(rule.to, undefined),
                  };
              return rule;
          })
              .filter(function (x) { return x; });
      }
      function setupDates() {
          self.selectedDates = [];
          self.now = self.parseDate(self.config.now) || new Date();
          var preloadedDate = self.config.defaultDate ||
              ((self.input.nodeName === "INPUT" ||
                  self.input.nodeName === "TEXTAREA") &&
                  self.input.placeholder &&
                  self.input.value === self.input.placeholder
                  ? null
                  : self.input.value);
          if (preloadedDate)
              setSelectedDate(preloadedDate, self.config.dateFormat);
          self._initialDate =
              self.selectedDates.length > 0
                  ? self.selectedDates[0]
                  : self.config.minDate &&
                      self.config.minDate.getTime() > self.now.getTime()
                      ? self.config.minDate
                      : self.config.maxDate &&
                          self.config.maxDate.getTime() < self.now.getTime()
                          ? self.config.maxDate
                          : self.now;
          self.currentYear = self._initialDate.getFullYear();
          self.currentMonth = self._initialDate.getMonth();
          if (self.selectedDates.length > 0)
              self.latestSelectedDateObj = self.selectedDates[0];
          if (self.config.minTime !== undefined)
              self.config.minTime = self.parseDate(self.config.minTime, "H:i");
          if (self.config.maxTime !== undefined)
              self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
          self.minDateHasTime =
              !!self.config.minDate &&
                  (self.config.minDate.getHours() > 0 ||
                      self.config.minDate.getMinutes() > 0 ||
                      self.config.minDate.getSeconds() > 0);
          self.maxDateHasTime =
              !!self.config.maxDate &&
                  (self.config.maxDate.getHours() > 0 ||
                      self.config.maxDate.getMinutes() > 0 ||
                      self.config.maxDate.getSeconds() > 0);
      }
      function setupInputs() {
          self.input = getInputElem();
          if (!self.input) {
              self.config.errorHandler(new Error("Invalid input element specified"));
              return;
          }
          self.input._type = self.input.type;
          self.input.type = "text";
          self.input.classList.add("flatpickr-input");
          self._input = self.input;
          if (self.config.altInput) {
              self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
              self._input = self.altInput;
              self.altInput.placeholder = self.input.placeholder;
              self.altInput.disabled = self.input.disabled;
              self.altInput.required = self.input.required;
              self.altInput.tabIndex = self.input.tabIndex;
              self.altInput.type = "text";
              self.input.setAttribute("type", "hidden");
              if (!self.config.static && self.input.parentNode)
                  self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
          }
          if (!self.config.allowInput)
              self._input.setAttribute("readonly", "readonly");
          updatePositionElement();
      }
      function updatePositionElement() {
          self._positionElement = self.config.positionElement || self._input;
      }
      function setupMobile() {
          var inputType = self.config.enableTime
              ? self.config.noCalendar
                  ? "time"
                  : "datetime-local"
              : "date";
          self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
          self.mobileInput.tabIndex = 1;
          self.mobileInput.type = inputType;
          self.mobileInput.disabled = self.input.disabled;
          self.mobileInput.required = self.input.required;
          self.mobileInput.placeholder = self.input.placeholder;
          self.mobileFormatStr =
              inputType === "datetime-local"
                  ? "Y-m-d\\TH:i:S"
                  : inputType === "date"
                      ? "Y-m-d"
                      : "H:i:S";
          if (self.selectedDates.length > 0) {
              self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
          }
          if (self.config.minDate)
              self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
          if (self.config.maxDate)
              self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
          if (self.input.getAttribute("step"))
              self.mobileInput.step = String(self.input.getAttribute("step"));
          self.input.type = "hidden";
          if (self.altInput !== undefined)
              self.altInput.type = "hidden";
          try {
              if (self.input.parentNode)
                  self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
          }
          catch (_a) { }
          bind(self.mobileInput, "change", function (e) {
              self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
              triggerEvent("onChange");
              triggerEvent("onClose");
          });
      }
      function toggle(e) {
          if (self.isOpen === true)
              return self.close();
          self.open(e);
      }
      function triggerEvent(event, data) {
          if (self.config === undefined)
              return;
          var hooks = self.config[event];
          if (hooks !== undefined && hooks.length > 0) {
              for (var i = 0; hooks[i] && i < hooks.length; i++)
                  hooks[i](self.selectedDates, self.input.value, self, data);
          }
          if (event === "onChange") {
              self.input.dispatchEvent(createEvent("change"));
              self.input.dispatchEvent(createEvent("input"));
          }
      }
      function createEvent(name) {
          var e = document.createEvent("Event");
          e.initEvent(name, true, true);
          return e;
      }
      function isDateSelected(date) {
          for (var i = 0; i < self.selectedDates.length; i++) {
              var selectedDate = self.selectedDates[i];
              if (selectedDate instanceof Date &&
                  compareDates(selectedDate, date) === 0)
                  return "" + i;
          }
          return false;
      }
      function isDateInRange(date) {
          if (self.config.mode !== "range" || self.selectedDates.length < 2)
              return false;
          return (compareDates(date, self.selectedDates[0]) >= 0 &&
              compareDates(date, self.selectedDates[1]) <= 0);
      }
      function updateNavigationCurrentMonth() {
          if (self.config.noCalendar || self.isMobile || !self.monthNav)
              return;
          self.yearElements.forEach(function (yearElement, i) {
              var d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              if (self.config.showMonths > 1 ||
                  self.config.monthSelectorType === "static") {
                  self.monthElements[i].textContent =
                      monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
              }
              else {
                  self.monthsDropdownContainer.value = d.getMonth().toString();
              }
              yearElement.value = d.getFullYear().toString();
          });
          self._hidePrevMonthArrow =
              self.config.minDate !== undefined &&
                  (self.currentYear === self.config.minDate.getFullYear()
                      ? self.currentMonth <= self.config.minDate.getMonth()
                      : self.currentYear < self.config.minDate.getFullYear());
          self._hideNextMonthArrow =
              self.config.maxDate !== undefined &&
                  (self.currentYear === self.config.maxDate.getFullYear()
                      ? self.currentMonth + 1 > self.config.maxDate.getMonth()
                      : self.currentYear > self.config.maxDate.getFullYear());
      }
      function getDateStr(specificFormat) {
          var format = specificFormat ||
              (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
          return self.selectedDates
              .map(function (dObj) { return self.formatDate(dObj, format); })
              .filter(function (d, i, arr) {
              return self.config.mode !== "range" ||
                  self.config.enableTime ||
                  arr.indexOf(d) === i;
          })
              .join(self.config.mode !== "range"
              ? self.config.conjunction
              : self.l10n.rangeSeparator);
      }
      function updateValue(triggerChange) {
          if (triggerChange === void 0) { triggerChange = true; }
          if (self.mobileInput !== undefined && self.mobileFormatStr) {
              self.mobileInput.value =
                  self.latestSelectedDateObj !== undefined
                      ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
                      : "";
          }
          self.input.value = getDateStr(self.config.dateFormat);
          if (self.altInput !== undefined) {
              self.altInput.value = getDateStr(self.config.altFormat);
          }
          if (triggerChange !== false)
              triggerEvent("onValueUpdate");
      }
      function onMonthNavClick(e) {
          var eventTarget = getEventTarget(e);
          var isPrevMonth = self.prevMonthNav.contains(eventTarget);
          var isNextMonth = self.nextMonthNav.contains(eventTarget);
          if (isPrevMonth || isNextMonth) {
              changeMonth(isPrevMonth ? -1 : 1);
          }
          else if (self.yearElements.indexOf(eventTarget) >= 0) {
              eventTarget.select();
          }
          else if (eventTarget.classList.contains("arrowUp")) {
              self.changeYear(self.currentYear + 1);
          }
          else if (eventTarget.classList.contains("arrowDown")) {
              self.changeYear(self.currentYear - 1);
          }
      }
      function timeWrapper(e) {
          e.preventDefault();
          var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
          if (self.amPM !== undefined && eventTarget === self.amPM) {
              self.amPM.textContent =
                  self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
          }
          var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
              (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
          var newValue = curValue + step * delta;
          if (typeof input.value !== "undefined" && input.value.length === 2) {
              var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
              if (newValue < min) {
                  newValue =
                      max +
                          newValue +
                          int(!isHourElem) +
                          (int(isHourElem) && int(!self.amPM));
                  if (isMinuteElem)
                      incrementNumInput(undefined, -1, self.hourElement);
              }
              else if (newValue > max) {
                  newValue =
                      input === self.hourElement ? newValue - max - int(!self.amPM) : min;
                  if (isMinuteElem)
                      incrementNumInput(undefined, 1, self.hourElement);
              }
              if (self.amPM &&
                  isHourElem &&
                  (step === 1
                      ? newValue + curValue === 23
                      : Math.abs(newValue - curValue) > step)) {
                  self.amPM.textContent =
                      self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
              }
              input.value = pad(newValue);
          }
      }
      init();
      return self;
  }
  function _flatpickr(nodeList, config) {
      var nodes = Array.prototype.slice
          .call(nodeList)
          .filter(function (x) { return x instanceof HTMLElement; });
      var instances = [];
      for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          try {
              if (node.getAttribute("data-fp-omit") !== null)
                  continue;
              if (node._flatpickr !== undefined) {
                  node._flatpickr.destroy();
                  node._flatpickr = undefined;
              }
              node._flatpickr = FlatpickrInstance(node, config || {});
              instances.push(node._flatpickr);
          }
          catch (e) {
              console.error(e);
          }
      }
      return instances.length === 1 ? instances[0] : instances;
  }
  if (typeof HTMLElement !== "undefined" &&
      typeof HTMLCollection !== "undefined" &&
      typeof NodeList !== "undefined") {
      HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
          return _flatpickr(this, config);
      };
      HTMLElement.prototype.flatpickr = function (config) {
          return _flatpickr([this], config);
      };
  }
  var flatpickr = function (selector, config) {
      if (typeof selector === "string") {
          return _flatpickr(window.document.querySelectorAll(selector), config);
      }
      else if (selector instanceof Node) {
          return _flatpickr([selector], config);
      }
      else {
          return _flatpickr(selector, config);
      }
  };
  flatpickr.defaultConfig = {};
  flatpickr.l10ns = {
      en: __assign({}, english),
      default: __assign({}, english),
  };
  flatpickr.localize = function (l10n) {
      flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
  };
  flatpickr.setDefaults = function (config) {
      flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
  };
  flatpickr.parseDate = createDateParser({});
  flatpickr.formatDate = createDateFormatter({});
  flatpickr.compareDates = compareDates;
  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
      jQuery.fn.flatpickr = function (config) {
          return _flatpickr(this, config);
      };
  }
  Date.prototype.fp_incr = function (days) {
      return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };
  if (typeof window !== "undefined") {
      window.flatpickr = flatpickr;
  }

  var e,o={};function n(r,t,e){if(3===r.nodeType){var o="textContent"in r?r.textContent:r.nodeValue||"";if(!1!==n.options.trim){var a=0===t||t===e.length-1;if((!(o=o.match(/^[\s\n]+$/g)&&"all"!==n.options.trim?" ":o.replace(/(^[\s\n]+|[\s\n]+$)/g,"all"===n.options.trim||a?"":" "))||" "===o)&&e.length>1&&a)return null}return o}if(1!==r.nodeType)return null;var p=String(r.nodeName).toLowerCase();if("script"===p&&!n.options.allowScripts)return null;var l,s,u=n.h(p,function(r){var t=r&&r.length;if(!t)return null;for(var e={},o=0;o<t;o++){var a=r[o],i=a.name,p=a.value;"on"===i.substring(0,2)&&n.options.allowEvents&&(p=new Function(p)),e[i]=p;}return e}(r.attributes),(s=(l=r.childNodes)&&Array.prototype.map.call(l,n).filter(i$1))&&s.length?s:null);return n.visitor&&n.visitor(u),u}var a,i$1=function(r){return r},p={};function l(r){var t=(r.type||"").toLowerCase(),e=l.map;e&&e.hasOwnProperty(t)?(r.type=e[t],r.props=Object.keys(r.props||{}).reduce(function(t,e){var o;return t[(o=e,o.replace(/-(.)/g,function(r,t){return t.toUpperCase()}))]=r.props[e],t},{})):r.type=t.replace(/[^a-z0-9-]/i,"");}var Markup = (function(t){function i(){t.apply(this,arguments);}return t&&(i.__proto__=t),(i.prototype=Object.create(t&&t.prototype)).constructor=i,i.setReviver=function(r){a=r;},i.prototype.shouldComponentUpdate=function(r){var t=this.props;return r.wrap!==t.wrap||r.type!==t.type||r.markup!==t.markup},i.prototype.setComponents=function(r){if(this.map={},r)for(var t in r)if(r.hasOwnProperty(t)){var e=t.replace(/([A-Z]+)([A-Z][a-z0-9])|([a-z0-9]+)([A-Z])/g,"$1$3-$2$4").toLowerCase();this.map[e]=r[t];}},i.prototype.render=function(t){var i=t.wrap;void 0===i&&(i=!0);var s,u=t.type,c=t.markup,m=t.components,v=t.reviver,f=t.onError,d=t["allow-scripts"],h=t["allow-events"],y=t.trim,w=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&-1===t.indexOf(o)&&(e[o]=r[o]);return e}(t,["wrap","type","markup","components","reviver","onError","allow-scripts","allow-events","trim"]),C=v||this.reviver||this.constructor.prototype.reviver||a||v$1;this.setComponents(m);var g={allowScripts:d,allowEvents:h,trim:y};try{s=function(r,t,a,i,s){var u=function(r,t){var o,n,a,i,p="html"===t?"text/html":"application/xml";"html"===t?(i="body",a="<!DOCTYPE html>\n<html><body>"+r+"</body></html>"):(i="xml",a='<?xml version="1.0" encoding="UTF-8"?>\n<xml>'+r+"</xml>");try{o=(new DOMParser).parseFromString(a,p);}catch(r){n=r;}if(o||"html"!==t||((o=e||(e=function(){if(document.implementation&&document.implementation.createHTMLDocument)return document.implementation.createHTMLDocument("");var r=document.createElement("iframe");return r.style.cssText="position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden;",r.setAttribute("sandbox","allow-forms"),document.body.appendChild(r),r.contentWindow.document}())).open(),o.write(a),o.close()),o){var l=o.getElementsByTagName(i)[0],s=l.firstChild;return r&&!s&&(l.error="Document parse failed."),s&&"parsererror"===String(s.nodeName).toLowerCase()&&(s.removeChild(s.firstChild),s.removeChild(s.lastChild),l.error=s.textContent||s.nodeValue||n||"Unknown error",l.removeChild(s)),l}}(r,t);if(u&&u.error)throw new Error(u.error);var c=u&&u.body||u;l.map=i||p;var m=c&&function(r,t,e,a){return n.visitor=t,n.h=e,n.options=a||o,n(r)}(c,l,a,s);return l.map=null,m&&m.props&&m.props.children||null}(c,u,C,this.map,g);}catch(r){f?f({error:r}):"undefined"!=typeof console&&console.error&&console.error("preact-markup: "+r);}if(!1===i)return s||null;var x=w.hasOwnProperty("className")?"className":"class",b=w[x];return b?b.splice?b.splice(0,0,"markup"):"string"==typeof b?w[x]+=" markup":"object"==typeof b&&(b.markup=!0):w[x]="markup",C("div",w,s||null)},i}(_$1));

  const CLASS_PATTERN = /^class[ {]/;


  /**
   * @param {function} fn
   *
   * @return {boolean}
   */
  function isClass(fn) {
    return CLASS_PATTERN.test(fn.toString());
  }

  /**
   * @param {any} obj
   *
   * @return {boolean}
   */
  function isArray$1(obj) {
    return Array.isArray(obj);
  }

  /**
   * @param {any} obj
   * @param {string} prop
   *
   * @return {boolean}
   */
  function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /**
   * @typedef {import('./index').InjectAnnotated } InjectAnnotated
   */

  /**
   * @template T
   *
   * @params {[...string[], T] | ...string[], T} args
   *
   * @return {T & InjectAnnotated}
   */
  function annotate(...args) {

    if (args.length === 1 && isArray$1(args[0])) {
      args = args[0];
    }

    args = [ ...args ];

    const fn = args.pop();

    fn.$inject = args;

    return fn;
  }


  // Current limitations:
  // - can't put into "function arg" comments
  // function /* (no parenthesis like this) */ (){}
  // function abc( /* xx (no parenthesis like this) */ a, b) {}
  //
  // Just put the comment before function or inside:
  // /* (((this is fine))) */ function(a, b) {}
  // function abc(a) { /* (((this is fine))) */}
  //
  // - can't reliably auto-annotate constructor; we'll match the
  // first constructor(...) pattern found which may be the one
  // of a nested class, too.

  const CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
  const FN_ARGS = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
  const FN_ARG = /\/\*([^*]*)\*\//m;

  /**
   * @param {unknown} fn
   *
   * @return {string[]}
   */
  function parseAnnotations(fn) {

    if (typeof fn !== 'function') {
      throw new Error(`Cannot annotate "${fn}". Expected a function!`);
    }

    const match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);

    // may parse class without constructor
    if (!match) {
      return [];
    }

    const args = match[1] || match[2];

    return args && args.split(',').map(arg => {
      const argMatch = arg.match(FN_ARG);
      return (argMatch && argMatch[1] || arg).trim();
    }) || [];
  }

  /**
   * @typedef { import('./index').ModuleDeclaration } ModuleDeclaration
   * @typedef { import('./index').ModuleDefinition } ModuleDefinition
   * @typedef { import('./index').InjectorContext } InjectorContext
   */

  /**
   * Create a new injector with the given modules.
   *
   * @param {ModuleDefinition[]} modules
   * @param {InjectorContext} [parent]
   */
  function Injector(modules, parent) {
    parent = parent || {
      get: function(name, strict) {
        currentlyResolving.push(name);

        if (strict === false) {
          return null;
        } else {
          throw error(`No provider for "${ name }"!`);
        }
      }
    };

    const currentlyResolving = [];
    const providers = this._providers = Object.create(parent._providers || null);
    const instances = this._instances = Object.create(null);

    const self = instances.injector = this;

    const error = function(msg) {
      const stack = currentlyResolving.join(' -> ');
      currentlyResolving.length = 0;
      return new Error(stack ? `${ msg } (Resolving: ${ stack })` : msg);
    };

    /**
     * Return a named service.
     *
     * @param {string} name
     * @param {boolean} [strict=true] if false, resolve missing services to null
     *
     * @return {any}
     */
    function get(name, strict) {
      if (!providers[name] && name.indexOf('.') !== -1) {
        const parts = name.split('.');
        let pivot = get(parts.shift());

        while (parts.length) {
          pivot = pivot[parts.shift()];
        }

        return pivot;
      }

      if (hasOwnProp(instances, name)) {
        return instances[name];
      }

      if (hasOwnProp(providers, name)) {
        if (currentlyResolving.indexOf(name) !== -1) {
          currentlyResolving.push(name);
          throw error('Cannot resolve circular dependency!');
        }

        currentlyResolving.push(name);
        instances[name] = providers[name][0](providers[name][1]);
        currentlyResolving.pop();

        return instances[name];
      }

      return parent.get(name, strict);
    }

    function fnDef(fn, locals) {

      if (typeof locals === 'undefined') {
        locals = {};
      }

      if (typeof fn !== 'function') {
        if (isArray$1(fn)) {
          fn = annotate(fn.slice());
        } else {
          throw error(`Cannot invoke "${ fn }". Expected a function!`);
        }
      }

      const inject = fn.$inject || parseAnnotations(fn);
      const dependencies = inject.map(dep => {
        if (hasOwnProp(locals, dep)) {
          return locals[dep];
        } else {
          return get(dep);
        }
      });

      return {
        fn: fn,
        dependencies: dependencies
      };
    }

    function instantiate(Type) {
      const {
        fn,
        dependencies
      } = fnDef(Type);

      // instantiate var args constructor
      const Constructor = Function.prototype.bind.apply(fn, [ null ].concat(dependencies));

      return new Constructor();
    }

    function invoke(func, context, locals) {
      const {
        fn,
        dependencies
      } = fnDef(func, locals);

      return fn.apply(context, dependencies);
    }

    /**
     * @param {Injector} childInjector
     *
     * @return {Function}
     */
    function createPrivateInjectorFactory(childInjector) {
      return annotate(key => childInjector.get(key));
    }

    /**
     * @param {ModuleDefinition[]} modules
     * @param {string[]} [forceNewInstances]
     *
     * @return {Injector}
     */
    function createChild(modules, forceNewInstances) {
      if (forceNewInstances && forceNewInstances.length) {
        const fromParentModule = Object.create(null);
        const matchedScopes = Object.create(null);

        const privateInjectorsCache = [];
        const privateChildInjectors = [];
        const privateChildFactories = [];

        let provider;
        let cacheIdx;
        let privateChildInjector;
        let privateChildInjectorFactory;

        for (let name in providers) {
          provider = providers[name];

          if (forceNewInstances.indexOf(name) !== -1) {
            if (provider[2] === 'private') {
              cacheIdx = privateInjectorsCache.indexOf(provider[3]);
              if (cacheIdx === -1) {
                privateChildInjector = provider[3].createChild([], forceNewInstances);
                privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
                privateInjectorsCache.push(provider[3]);
                privateChildInjectors.push(privateChildInjector);
                privateChildFactories.push(privateChildInjectorFactory);
                fromParentModule[name] = [ privateChildInjectorFactory, name, 'private', privateChildInjector ];
              } else {
                fromParentModule[name] = [ privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx] ];
              }
            } else {
              fromParentModule[name] = [ provider[2], provider[1] ];
            }
            matchedScopes[name] = true;
          }

          if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {
            /* jshint -W083 */
            forceNewInstances.forEach(scope => {
              if (provider[1].$scope.indexOf(scope) !== -1) {
                fromParentModule[name] = [ provider[2], provider[1] ];
                matchedScopes[scope] = true;
              }
            });
          }
        }

        forceNewInstances.forEach(scope => {
          if (!matchedScopes[scope]) {
            throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
          }
        });

        modules.unshift(fromParentModule);
      }

      return new Injector(modules, self);
    }

    const factoryMap = {
      factory: invoke,
      type: instantiate,
      value: function(value) {
        return value;
      }
    };

    /**
     * @param {ModuleDefinition} moduleDefinition
     * @param {Injector} injector
     */
    function createInitializer(moduleDefinition, injector) {

      const initializers = moduleDefinition.__init__ || [];

      return function() {
        initializers.forEach(initializer => {

          // eagerly resolve component (fn or string)
          if (typeof initializer === 'string') {
            injector.get(initializer);
          } else {
            injector.invoke(initializer);
          }
        });
      };
    }

    /**
     * @param {ModuleDefinition} moduleDefinition
     */
    function loadModule(moduleDefinition) {

      const moduleExports = moduleDefinition.__exports__;

      // private module
      if (moduleExports) {
        const nestedModules = moduleDefinition.__modules__;

        const clonedModule = Object.keys(moduleDefinition).reduce((clonedModule, key) => {

          if (key !== '__exports__' && key !== '__modules__' && key !== '__init__' && key !== '__depends__') {
            clonedModule[key] = moduleDefinition[key];
          }

          return clonedModule;
        }, Object.create(null));

        const childModules = (nestedModules || []).concat(clonedModule);

        const privateInjector = createChild(childModules);
        const getFromPrivateInjector = annotate(function(key) {
          return privateInjector.get(key);
        });

        moduleExports.forEach(function(key) {
          providers[key] = [ getFromPrivateInjector, key, 'private', privateInjector ];
        });

        // ensure child injector initializes
        const initializers = (moduleDefinition.__init__ || []).slice();

        initializers.unshift(function() {
          privateInjector.init();
        });

        moduleDefinition = Object.assign({}, moduleDefinition, {
          __init__: initializers
        });

        return createInitializer(moduleDefinition, privateInjector);
      }

      // normal module
      Object.keys(moduleDefinition).forEach(function(key) {

        if (key === '__init__' || key === '__depends__') {
          return;
        }

        if (moduleDefinition[key][2] === 'private') {
          providers[key] = moduleDefinition[key];
          return;
        }

        const type = moduleDefinition[key][0];
        const value = moduleDefinition[key][1];

        providers[key] = [ factoryMap[type], arrayUnwrap(type, value), type ];
      });

      return createInitializer(moduleDefinition, self);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     * @param {ModuleDefinition} moduleDefinition
     *
     * @return {ModuleDefinition[]}
     */
    function resolveDependencies(moduleDefinitions, moduleDefinition) {

      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }

      moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);

      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }

      return moduleDefinitions.concat(moduleDefinition);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     *
     * @return { () => void } initializerFn
     */
    function bootstrap(moduleDefinitions) {

      const initializers = moduleDefinitions
        .reduce(resolveDependencies, [])
        .map(loadModule);

      let initialized = false;

      return function() {

        if (initialized) {
          return;
        }

        initialized = true;

        initializers.forEach(initializer => initializer());
      };
    }

    // public API
    this.get = get;
    this.invoke = invoke;
    this.instantiate = instantiate;
    this.createChild = createChild;

    // setup
    this.init = bootstrap(modules);
  }


  // helpers ///////////////

  function arrayUnwrap(type, value) {
    if (type !== 'value' && isArray$1(value)) {
      value = annotate(value.slice());
    }

    return value;
  }

  /**
   * @typedef {object} Condition
   * @property {string} [hide]
   */

  class ConditionChecker {
    constructor(formFieldRegistry, eventBus) {
      this._formFieldRegistry = formFieldRegistry;
      this._eventBus = eventBus;
    }

    /**
     * For given data, remove properties based on condition.
     *
     * @param {Object<string, any>} properties
     * @param {Object<string, any>} data
     */
    applyConditions(properties, data = {}) {
      const conditions = this._getConditions();
      const newProperties = {
        ...properties
      };
      for (const {
        key,
        condition
      } of conditions) {
        const shouldRemove = this._checkHideCondition(condition, data);
        if (shouldRemove) {
          delete newProperties[key];
        }
      }
      return newProperties;
    }

    /**
     * Check if given condition is met. Returns null for invalid/missing conditions.
     *
     * @param {string} condition
     * @param {import('../types').Data} [data]
     *
     * @returns {boolean|null}
     */
    check(condition, data = {}) {
      if (!condition) {
        return null;
      }
      if (!isString$3(condition) || !condition.startsWith('=')) {
        return null;
      }
      try {
        // cut off initial '='
        const result = unaryTest(condition.slice(1), data);
        return result;
      } catch (error) {
        this._eventBus.fire('error', {
          error
        });
        return null;
      }
    }

    /**
     * Check if hide condition is met.
     *
     * @param {Condition} condition
     * @param {Object<string, any>} data
     * @returns {boolean}
     */
    _checkHideCondition(condition, data) {
      if (!condition.hide) {
        return false;
      }
      const result = this.check(condition.hide, data);
      return result === true;
    }

    /**
     * Evaluate an expression.
     *
     * @param {string} expression
     * @param {import('../types').Data} [data]
     *
     * @returns {any}
     */
    evaluate(expression, data = {}) {
      if (!expression) {
        return null;
      }
      if (!isString$3(expression) || !expression.startsWith('=')) {
        return null;
      }
      try {
        const result = evaluate(expression.slice(1), data);
        return result;
      } catch (error) {
        this._eventBus.fire('error', {
          error
        });
        return null;
      }
    }
    _getConditions() {
      const formFields = this._formFieldRegistry.getAll();
      return formFields.reduce((conditions, formField) => {
        const {
          key,
          conditional: condition
        } = formField;
        if (key && condition) {
          return [...conditions, {
            key,
            condition
          }];
        }
        return conditions;
      }, []);
    }
  }
  ConditionChecker.$inject = ['formFieldRegistry', 'eventBus'];

  var FN_REF$1 = '__fn';
  var DEFAULT_PRIORITY$3 = 1000;
  var slice$1 = Array.prototype.slice;

  /**
   * A general purpose event bus.
   *
   * This component is used to communicate across a diagram instance.
   * Other parts of a diagram can use it to listen to and broadcast events.
   *
   *
   * ## Registering for Events
   *
   * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
   * methods to register for events. {@link EventBus#off} can be used to
   * remove event registrations. Listeners receive an instance of {@link Event}
   * as the first argument. It allows them to hook into the event execution.
   *
   * ```javascript
   *
   * // listen for event
   * eventBus.on('foo', function(event) {
   *
   *   // access event type
   *   event.type; // 'foo'
   *
   *   // stop propagation to other listeners
   *   event.stopPropagation();
   *
   *   // prevent event default
   *   event.preventDefault();
   * });
   *
   * // listen for event with custom payload
   * eventBus.on('bar', function(event, payload) {
   *   console.log(payload);
   * });
   *
   * // listen for event returning value
   * eventBus.on('foobar', function(event) {
   *
   *   // stop event propagation + prevent default
   *   return false;
   *
   *   // stop event propagation + return custom result
   *   return {
   *     complex: 'listening result'
   *   };
   * });
   *
   *
   * // listen with custom priority (default=1000, higher is better)
   * eventBus.on('priorityfoo', 1500, function(event) {
   *   console.log('invoked first!');
   * });
   *
   *
   * // listen for event and pass the context (`this`)
   * eventBus.on('foobar', function(event) {
   *   this.foo();
   * }, this);
   * ```
   *
   *
   * ## Emitting Events
   *
   * Events can be emitted via the event bus using {@link EventBus#fire}.
   *
   * ```javascript
   *
   * // false indicates that the default action
   * // was prevented by listeners
   * if (eventBus.fire('foo') === false) {
   *   console.log('default has been prevented!');
   * };
   *
   *
   * // custom args + return value listener
   * eventBus.on('sum', function(event, a, b) {
   *   return a + b;
   * });
   *
   * // you can pass custom arguments + retrieve result values.
   * var sum = eventBus.fire('sum', 1, 2);
   * console.log(sum); // 3
   * ```
   */
  function EventBus$1() {
    this._listeners = {};

    // cleanup on destroy on lowest priority to allow
    // message passing until the bitter end
    this.on('diagram.destroy', 1, this._destroy, this);
  }

  /**
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @param {string|Array<string>} events
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus$1.prototype.on = function (events, priority, callback, that) {
    events = isArray$3(events) ? events : [events];
    if (isFunction$1(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$3;
    }
    if (!isNumber$3(priority)) {
      throw new Error('priority must be a number');
    }
    var actualCallback = callback;
    if (that) {
      actualCallback = bind$2(callback, that);

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      actualCallback[FN_REF$1] = callback[FN_REF$1] || callback;
    }
    var self = this;
    events.forEach(function (e) {
      self._addListener(e, {
        priority: priority,
        callback: actualCallback,
        next: null
      });
    });
  };

  /**
   * Register an event listener that is executed only once.
   *
   * @param {string} event the event name to register for
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback the callback to execute
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus$1.prototype.once = function (event, priority, callback, that) {
    var self = this;
    if (isFunction$1(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$3;
    }
    if (!isNumber$3(priority)) {
      throw new Error('priority must be a number');
    }
    function wrappedCallback() {
      wrappedCallback.__isTomb = true;
      var result = callback.apply(that, arguments);
      self.off(event, wrappedCallback);
      return result;
    }

    // make sure we remember and are able to remove
    // bound callbacks via {@link #off} using the original
    // callback
    wrappedCallback[FN_REF$1] = callback;
    this.on(event, priority, wrappedCallback);
  };

  /**
   * Removes event listeners by event and callback.
   *
   * If no callback is given, all listeners for a given event name are being removed.
   *
   * @param {string|Array<string>} events
   * @param {Function} [callback]
   */
  EventBus$1.prototype.off = function (events, callback) {
    events = isArray$3(events) ? events : [events];
    var self = this;
    events.forEach(function (event) {
      self._removeListener(event, callback);
    });
  };

  /**
   * Create an EventBus event.
   *
   * @param {Object} data
   *
   * @return {Object} event, recognized by the eventBus
   */
  EventBus$1.prototype.createEvent = function (data) {
    var event = new InternalEvent$1();
    event.init(data);
    return event;
  };

  /**
   * Fires a named event.
   *
   * @example
   *
   * // fire event by name
   * events.fire('foo');
   *
   * // fire event object with nested type
   * var event = { type: 'foo' };
   * events.fire(event);
   *
   * // fire event with explicit type
   * var event = { x: 10, y: 20 };
   * events.fire('element.moved', event);
   *
   * // pass additional arguments to the event
   * events.on('foo', function(event, bar) {
   *   alert(bar);
   * });
   *
   * events.fire({ type: 'foo' }, 'I am bar!');
   *
   * @param {string} [name] the optional event name
   * @param {Object} [event] the event object
   * @param {...Object} additional arguments to be passed to the callback functions
   *
   * @return {boolean} the events return value, if specified or false if the
   *                   default action was prevented by listeners
   */
  EventBus$1.prototype.fire = function (type, data) {
    var event, firstListener, returnValue, args;
    args = slice$1.call(arguments);
    if (typeof type === 'object') {
      data = type;
      type = data.type;
    }
    if (!type) {
      throw new Error('no event type specified');
    }
    firstListener = this._listeners[type];
    if (!firstListener) {
      return;
    }

    // we make sure we fire instances of our home made
    // events here. We wrap them only once, though
    if (data instanceof InternalEvent$1) {
      // we are fine, we alread have an event
      event = data;
    } else {
      event = this.createEvent(data);
    }

    // ensure we pass the event as the first parameter
    args[0] = event;

    // original event type (in case we delegate)
    var originalType = event.type;

    // update event type before delegation
    if (type !== originalType) {
      event.type = type;
    }
    try {
      returnValue = this._invokeListeners(event, args, firstListener);
    } finally {
      // reset event type after delegation
      if (type !== originalType) {
        event.type = originalType;
      }
    }

    // set the return value to false if the event default
    // got prevented and no other return value exists
    if (returnValue === undefined && event.defaultPrevented) {
      returnValue = false;
    }
    return returnValue;
  };
  EventBus$1.prototype.handleError = function (error) {
    return this.fire('error', {
      error: error
    }) === false;
  };
  EventBus$1.prototype._destroy = function () {
    this._listeners = {};
  };
  EventBus$1.prototype._invokeListeners = function (event, args, listener) {
    var returnValue;
    while (listener) {
      // handle stopped propagation
      if (event.cancelBubble) {
        break;
      }
      returnValue = this._invokeListener(event, args, listener);
      listener = listener.next;
    }
    return returnValue;
  };
  EventBus$1.prototype._invokeListener = function (event, args, listener) {
    var returnValue;
    if (listener.callback.__isTomb) {
      return returnValue;
    }
    try {
      // returning false prevents the default action
      returnValue = invokeFunction$1(listener.callback, args);

      // stop propagation on return value
      if (returnValue !== undefined) {
        event.returnValue = returnValue;
        event.stopPropagation();
      }

      // prevent default on return false
      if (returnValue === false) {
        event.preventDefault();
      }
    } catch (error) {
      if (!this.handleError(error)) {
        console.error('unhandled error in event listener', error);
        throw error;
      }
    }
    return returnValue;
  };

  /*
   * Add new listener with a certain priority to the list
   * of listeners (for the given event).
   *
   * The semantics of listener registration / listener execution are
   * first register, first serve: New listeners will always be inserted
   * after existing listeners with the same priority.
   *
   * Example: Inserting two listeners with priority 1000 and 1300
   *
   *    * before: [ 1500, 1500, 1000, 1000 ]
   *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
   *
   * @param {string} event
   * @param {Object} listener { priority, callback }
   */
  EventBus$1.prototype._addListener = function (event, newListener) {
    var listener = this._getListeners(event),
      previousListener;

    // no prior listeners
    if (!listener) {
      this._setListeners(event, newListener);
      return;
    }

    // ensure we order listeners by priority from
    // 0 (high) to n > 0 (low)
    while (listener) {
      if (listener.priority < newListener.priority) {
        newListener.next = listener;
        if (previousListener) {
          previousListener.next = newListener;
        } else {
          this._setListeners(event, newListener);
        }
        return;
      }
      previousListener = listener;
      listener = listener.next;
    }

    // add new listener to back
    previousListener.next = newListener;
  };
  EventBus$1.prototype._getListeners = function (name) {
    return this._listeners[name];
  };
  EventBus$1.prototype._setListeners = function (name, listener) {
    this._listeners[name] = listener;
  };
  EventBus$1.prototype._removeListener = function (event, callback) {
    var listener = this._getListeners(event),
      nextListener,
      previousListener,
      listenerCallback;
    if (!callback) {
      // clear listeners
      this._setListeners(event, null);
      return;
    }
    while (listener) {
      nextListener = listener.next;
      listenerCallback = listener.callback;
      if (listenerCallback === callback || listenerCallback[FN_REF$1] === callback) {
        if (previousListener) {
          previousListener.next = nextListener;
        } else {
          // new first listener
          this._setListeners(event, nextListener);
        }
      }
      previousListener = listener;
      listener = nextListener;
    }
  };

  /**
   * A event that is emitted via the event bus.
   */
  function InternalEvent$1() {}
  InternalEvent$1.prototype.stopPropagation = function () {
    this.cancelBubble = true;
  };
  InternalEvent$1.prototype.preventDefault = function () {
    this.defaultPrevented = true;
  };
  InternalEvent$1.prototype.init = function (data) {
    assign$1(this, data || {});
  };

  /**
   * Invoke function. Be fast...
   *
   * @param {Function} fn
   * @param {Array<Object>} args
   *
   * @return {Any}
   */
  function invokeFunction$1(fn, args) {
    return fn.apply(null, args);
  }

  function countDecimals$1(number) {
    const num = Big$1(number);
    if (num.toString() === num.toFixed(0)) return 0;
    return num.toFixed().split('.')[1].length || 0;
  }
  function isValidNumber$1(value) {
    return (typeof value === 'number' || typeof value === 'string') && value !== '' && !isNaN(Number(value));
  }
  function willKeyProduceValidNumber(key, previousValue, caretIndex, selectionWidth, decimalDigits) {
    // Dot and comma are both treated as dot
    previousValue = previousValue.replace(',', '.');
    const isFirstDot = !previousValue.includes('.') && (key === '.' || key === ',');
    const isFirstMinus = !previousValue.includes('-') && key === '-' && caretIndex === 0;
    const keypressIsNumeric = /^[0-9]$/i.test(key);
    const dotIndex = previousValue === undefined ? -1 : previousValue.indexOf('.');

    // If the caret is positioned after a dot, and the current decimal digits count is equal or greater to the maximum, disallow the key press
    const overflowsDecimalSpace = typeof decimalDigits === 'number' && selectionWidth === 0 && dotIndex !== -1 && previousValue.includes('.') && previousValue.split('.')[1].length >= decimalDigits && caretIndex > dotIndex;
    const keypressIsAllowedChar = keypressIsNumeric || decimalDigits !== 0 && isFirstDot || isFirstMinus;
    return keypressIsAllowedChar && !overflowsDecimalSpace;
  }
  function isNullEquivalentValue(value) {
    return value === undefined || value === null || value === '';
  }

  const EMAIL_PATTERN = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  const PHONE_PATTERN = /(\+|00)(297|93|244|1264|358|355|376|971|54|374|1684|1268|61|43|994|257|32|229|226|880|359|973|1242|387|590|375|501|1441|591|55|1246|673|975|267|236|1|61|41|56|86|225|237|243|242|682|57|269|238|506|53|5999|61|1345|357|420|49|253|1767|45|1809|1829|1849|213|593|20|291|212|34|372|251|358|679|500|33|298|691|241|44|995|44|233|350|224|590|220|245|240|30|1473|299|502|594|1671|592|852|504|385|509|36|62|44|91|246|353|98|964|354|972|39|1876|44|962|81|76|77|254|996|855|686|1869|82|383|965|856|961|231|218|1758|423|94|266|370|352|371|853|590|212|377|373|261|960|52|692|389|223|356|95|382|976|1670|258|222|1664|596|230|265|60|262|264|687|227|672|234|505|683|31|47|977|674|64|968|92|507|64|51|63|680|675|48|1787|1939|850|351|595|970|689|974|262|40|7|250|966|249|221|65|500|4779|677|232|503|378|252|508|381|211|239|597|421|386|46|268|1721|248|963|1649|235|228|66|992|690|993|670|676|1868|216|90|688|886|255|256|380|598|1|998|3906698|379|1784|58|1284|1340|84|678|681|685|967|27|260|263)(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{4,20}$/;
  class Validator {
    validateField(field, value) {
      const {
        type,
        validate
      } = field;
      let errors = [];
      if (type === 'number') {
        const {
          decimalDigits,
          increment
        } = field;
        if (value === 'NaN') {
          errors = [...errors, 'Value is not a number.'];
        } else if (value) {
          if (decimalDigits >= 0 && countDecimals$1(value) > decimalDigits) {
            errors = [...errors, 'Value is expected to ' + (decimalDigits === 0 ? 'be an integer' : `have at most ${decimalDigits} decimal digit${decimalDigits > 1 ? 's' : ''}`) + '.'];
          }
          if (increment) {
            const bigValue = Big$1(value);
            const bigIncrement = Big$1(increment);
            const offset = bigValue.mod(bigIncrement);
            if (offset.cmp(0) !== 0) {
              const previousValue = bigValue.minus(offset);
              const nextValue = previousValue.plus(bigIncrement);
              errors = [...errors, `Please select a valid value, the two nearest valid values are ${previousValue} and ${nextValue}.`];
            }
          }
        }
      }
      if (!validate) {
        return errors;
      }
      if (validate.pattern && value && !new RegExp(validate.pattern).test(value)) {
        errors = [...errors, `Field must match pattern ${validate.pattern}.`];
      }
      if (validate.required && (isNil$1(value) || value === '')) {
        errors = [...errors, 'Field is required.'];
      }
      if ('min' in validate && (value || value === 0) && value < validate.min) {
        errors = [...errors, `Field must have minimum value of ${validate.min}.`];
      }
      if ('max' in validate && (value || value === 0) && value > validate.max) {
        errors = [...errors, `Field must have maximum value of ${validate.max}.`];
      }
      if ('minLength' in validate && value && value.trim().length < validate.minLength) {
        errors = [...errors, `Field must have minimum length of ${validate.minLength}.`];
      }
      if ('maxLength' in validate && value && value.trim().length > validate.maxLength) {
        errors = [...errors, `Field must have maximum length of ${validate.maxLength}.`];
      }
      if ('validationType' in validate && value && validate.validationType === 'phone' && !PHONE_PATTERN.test(value)) {
        errors = [...errors, 'Field must be a valid  international phone number. (e.g. +4930664040900)'];
      }
      if ('validationType' in validate && value && validate.validationType === 'email' && !EMAIL_PATTERN.test(value)) {
        errors = [...errors, 'Field must be a valid email.'];
      }
      return errors;
    }
  }
  Validator.$inject = [];

  let FormFieldRegistry$1 = class FormFieldRegistry {
    constructor(eventBus) {
      this._eventBus = eventBus;
      this._formFields = {};
      eventBus.on('form.clear', () => this.clear());
      this._ids = new Ids([32, 36, 1]);
      this._keys = new Ids([32, 36, 1]);
    }
    add(formField) {
      const {
        id
      } = formField;
      if (this._formFields[id]) {
        throw new Error(`form field with ID ${id} already exists`);
      }
      this._eventBus.fire('formField.add', {
        formField
      });
      this._formFields[id] = formField;
    }
    remove(formField) {
      const {
        id
      } = formField;
      if (!this._formFields[id]) {
        return;
      }
      this._eventBus.fire('formField.remove', {
        formField
      });
      delete this._formFields[id];
    }
    get(id) {
      return this._formFields[id];
    }
    getAll() {
      return Object.values(this._formFields);
    }
    forEach(callback) {
      this.getAll().forEach(formField => callback(formField));
    }
    clear() {
      this._formFields = {};
      this._ids.clear();
      this._keys.clear();
    }
  };
  FormFieldRegistry$1.$inject = ['eventBus'];

  /**
   * Retrieve variable names from given FEEL unary test.
   *
   * @param {string} unaryTest
   * @returns {string[]}
   */
  function getVariableNames(unaryTest) {
    const tree = parseUnaryTests(unaryTest);
    const cursor = tree.cursor();
    const variables = new Set();
    do {
      const node = cursor.node;
      if (node.type.name === 'VariableName') {
        variables.add(unaryTest.slice(node.from, node.to));
      }
    } while (cursor.next());
    return Array.from(variables);
  }

  /**
   * Retrieve variable names from given FEEL expression.
   *
   * @param {string} expression
   * @returns {string[]}
   */
  function getExpressionVariableNames(expression) {
    const tree = parseExpressions(expression);
    const cursor = tree.cursor();
    const variables = new Set();
    do {
      const node = cursor.node;
      if (node.type.name === 'VariableName') {
        variables.add(expression.slice(node.from, node.to));
      }
    } while (cursor.next());
    return Array.from(variables);
  }
  function isExpression$1(value) {
    return isString$3(value) && value.startsWith('=');
  }

  // config  ///////////////////

  const MINUTES_IN_DAY = 60 * 24;
  const DATETIME_SUBTYPES = {
    DATE: 'date',
    TIME: 'time',
    DATETIME: 'datetime'
  };
  const TIME_SERIALISING_FORMATS = {
    UTC_OFFSET: 'utc_offset',
    UTC_NORMALIZED: 'utc_normalized',
    NO_TIMEZONE: 'no_timezone'
  };
  const DATETIME_SUBTYPES_LABELS = {
    [DATETIME_SUBTYPES.DATE]: 'Date',
    [DATETIME_SUBTYPES.TIME]: 'Time',
    [DATETIME_SUBTYPES.DATETIME]: 'Date & Time'
  };
  const TIME_SERIALISINGFORMAT_LABELS = {
    [TIME_SERIALISING_FORMATS.UTC_OFFSET]: 'UTC offset',
    [TIME_SERIALISING_FORMATS.UTC_NORMALIZED]: 'UTC normalized',
    [TIME_SERIALISING_FORMATS.NO_TIMEZONE]: 'No timezone'
  };
  const DATETIME_SUBTYPE_PATH = ['subtype'];
  const DATE_LABEL_PATH = ['dateLabel'];
  const DATE_DISALLOW_PAST_PATH = ['disallowPassedDates'];
  const TIME_LABEL_PATH = ['timeLabel'];
  const TIME_USE24H_PATH = ['use24h'];
  const TIME_INTERVAL_PATH = ['timeInterval'];
  const TIME_SERIALISING_FORMAT_PATH = ['timeSerializingFormat'];

  // config  ///////////////////

  const VALUES_SOURCES = {
    STATIC: 'static',
    INPUT: 'input'
  };
  const VALUES_SOURCE_DEFAULT = VALUES_SOURCES.STATIC;
  const VALUES_SOURCES_LABELS = {
    [VALUES_SOURCES.STATIC]: 'Static',
    [VALUES_SOURCES.INPUT]: 'Input data'
  };
  const VALUES_SOURCES_PATHS = {
    [VALUES_SOURCES.STATIC]: ['values'],
    [VALUES_SOURCES.INPUT]: ['valuesKey']
  };
  const VALUES_SOURCES_DEFAULTS = {
    [VALUES_SOURCES.STATIC]: [{
      label: 'Value',
      value: 'value'
    }],
    [VALUES_SOURCES.INPUT]: ''
  };

  // helpers ///////////////////

  function getValuesSource(field) {
    for (const source of Object.values(VALUES_SOURCES)) {
      if (get$1(field, VALUES_SOURCES_PATHS[source]) !== undefined) {
        return source;
      }
    }
    return VALUES_SOURCE_DEFAULT;
  }

  function createInjector(bootstrapModules) {
    const injector = new Injector(bootstrapModules);
    injector.init();
    return injector;
  }

  /**
   * @param {string?} prefix
   *
   * @returns Element
   */
  function createFormContainer(prefix = 'fjs') {
    const container = document.createElement('div');
    container.classList.add(`${prefix}-container`);
    return container;
  }

  const EXPRESSION_PROPERTIES = ['alt', 'source', 'text'];
  function findErrors(errors, path) {
    return errors[pathStringify(path)];
  }
  function pathStringify(path) {
    if (!path) {
      return '';
    }
    return path.join('.');
  }
  const indices = {};
  function generateIndexForType(type) {
    if (type in indices) {
      indices[type]++;
    } else {
      indices[type] = 1;
    }
    return indices[type];
  }
  function generateIdForType(type) {
    return `${type}${generateIndexForType(type)}`;
  }

  /**
   * @template T
   * @param {T} data
   * @param {(this: any, key: string, value: any) => any} [replacer]
   * @return {T}
   */
  function clone(data, replacer) {
    return JSON.parse(JSON.stringify(data, replacer));
  }

  /**
   * Parse the schema for input variables a form might make use of
   *
   * @param {any} schema
   *
   * @return {string[]}
   */
  function getSchemaVariables(schema) {
    if (!schema.components) {
      return [];
    }
    const variables = schema.components.reduce((variables, component) => {
      const {
        key,
        valuesKey,
        type,
        conditional
      } = component;
      if (['button'].includes(type)) {
        return variables;
      }
      if (key) {
        variables = [...variables, key];
      }
      if (valuesKey) {
        variables = [...variables, valuesKey];
      }
      if (conditional && conditional.hide) {
        // cut off initial '='
        const conditionVariables = getVariableNames(conditional.hide.slice(1));
        variables = [...variables, ...conditionVariables];
      }
      EXPRESSION_PROPERTIES.forEach(prop => {
        const property = component[prop];
        if (property && isExpression$1(property)) {
          // cut off initial '='
          const expressionVariables = getExpressionVariableNames(property.slice(1));
          variables = [...variables, ...expressionVariables];
        }
      });
      return variables;
    }, []);

    // remove duplicates
    return Array.from(new Set(variables));
  }

  let Importer$1 = class Importer {
    /**
     * @constructor
     * @param { import('../core').FormFieldRegistry } formFieldRegistry
     * @param { import('../render/FormFields').default } formFields
     */
    constructor(formFieldRegistry, formFields) {
      this._formFieldRegistry = formFieldRegistry;
      this._formFields = formFields;
    }

    /**
     * Import schema adding `id`, `_parent` and `_path`
     * information to each field and adding it to the
     * form field registry.
     *
     * @param {any} schema
     * @param {any} [data]
     *
     * @return { { warnings: Array<any>, schema: any, data: any } }
     */
    importSchema(schema, data = {}) {
      // TODO: Add warnings - https://github.com/bpmn-io/form-js/issues/289
      const warnings = [];
      try {
        const importedSchema = this.importFormField(clone(schema)),
          initializedData = this.initializeFieldValues(clone(data));
        return {
          warnings,
          schema: importedSchema,
          data: initializedData
        };
      } catch (err) {
        err.warnings = warnings;
        throw err;
      }
    }

    /**
     * @param {any} formField
     * @param {string} [parentId]
     *
     * @return {any} importedField
     */
    importFormField(formField, parentId) {
      const {
        components,
        key,
        type,
        id = generateIdForType(type)
      } = formField;
      if (parentId) {
        // set form field parent
        formField._parent = parentId;
      }
      if (!this._formFields.get(type)) {
        throw new Error(`form field of type <${type}> not supported`);
      }
      if (key) {
        // validate <key> uniqueness
        if (this._formFieldRegistry._keys.assigned(key)) {
          throw new Error(`form field with key <${key}> already exists`);
        }
        this._formFieldRegistry._keys.claim(key, formField);

        // TODO: buttons should not have key
        if (type !== 'button') {
          // set form field path
          formField._path = [key];
        }
      }
      if (id) {
        // validate <id> uniqueness
        if (this._formFieldRegistry._ids.assigned(id)) {
          throw new Error(`form field with id <${id}> already exists`);
        }
        this._formFieldRegistry._ids.claim(id, formField);
      }

      // set form field ID
      formField.id = id;
      this._formFieldRegistry.add(formField);
      if (components) {
        this.importFormFields(components, id);
      }
      return formField;
    }
    importFormFields(components, parentId) {
      components.forEach(component => {
        this.importFormField(component, parentId);
      });
    }

    /**
     * @param {Object} data
     *
     * @return {Object} initializedData
     */
    initializeFieldValues(data) {
      return this._formFieldRegistry.getAll().reduce((initializedData, formField) => {
        const {
          defaultValue,
          _path,
          type
        } = formField;

        // try to get value from data
        // if unavailable - try to get default value from form field
        // if unavailable - get empty value from form field

        if (_path) {
          const fieldImplementation = this._formFields.get(type);
          let valueData = get$1(data, _path);
          if (!isUndefined$2(valueData) && fieldImplementation.sanitizeValue) {
            valueData = fieldImplementation.sanitizeValue({
              formField,
              data,
              value: valueData
            });
          }
          const initializedFieldValue = !isUndefined$2(valueData) ? valueData : !isUndefined$2(defaultValue) ? defaultValue : fieldImplementation.emptyValue;
          initializedData = {
            ...initializedData,
            [_path[0]]: initializedFieldValue
          };
        }
        return initializedData;
      }, data);
    }
  };
  Importer$1.$inject = ['formFieldRegistry', 'formFields'];

  var importModule$1 = {
    importer: ['type', Importer$1]
  };

  const NODE_TYPE_TEXT = 3,
    NODE_TYPE_ELEMENT = 1;
  const ALLOWED_NODES = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'em', 'a', 'p', 'div', 'ul', 'ol', 'li', 'hr', 'blockquote', 'img', 'pre', 'code', 'br', 'strong'];
  const ALLOWED_ATTRIBUTES = ['align', 'alt', 'class', 'href', 'id', 'name', 'rel', 'target', 'src'];
  const ALLOWED_URI_PATTERN = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape
  const ALLOWED_IMAGE_SRC_PATTERN = /^(https?|data):.*/i; // eslint-disable-line no-useless-escape
  const ATTR_WHITESPACE_PATTERN = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g; // eslint-disable-line no-control-regex

  const FORM_ELEMENT = document.createElement('form');

  /**
   * Sanitize a HTML string and return the cleaned, safe version.
   *
   * @param {string} html
   * @return {string}
   */
  function sanitizeHTML(html) {
    const doc = new DOMParser().parseFromString(`<!DOCTYPE html>\n<html><body><div>${html}`, 'text/html');
    doc.normalize();
    const element = doc.body.firstChild;
    if (element) {
      sanitizeNode( /** @type Element */element);
      return new XMLSerializer().serializeToString(element);
    } else {
      // handle the case that document parsing
      // does not work at all, due to HTML gibberish
      return '';
    }
  }
  function sanitizeImageSource(src) {
    const valid = ALLOWED_IMAGE_SRC_PATTERN.test(src);
    return valid ? src : '';
  }

  /**
   * Recursively sanitize a HTML node, potentially
   * removing it, its children or attributes.
   *
   * Inspired by https://github.com/developit/snarkdown/issues/70
   * and https://github.com/cure53/DOMPurify. Simplified
   * for our use-case.
   *
   * @param {Element} node
   */
  function sanitizeNode(node) {
    // allow text nodes
    if (node.nodeType === NODE_TYPE_TEXT) {
      return;
    }

    // disallow all other nodes but Element
    if (node.nodeType !== NODE_TYPE_ELEMENT) {
      return node.remove();
    }
    const lcTag = node.tagName.toLowerCase();

    // disallow non-whitelisted tags
    if (!ALLOWED_NODES.includes(lcTag)) {
      return node.remove();
    }
    const attributes = node.attributes;

    // clean attributes
    for (let i = attributes.length; i--;) {
      const attribute = attributes[i];
      const name = attribute.name;
      const lcName = name.toLowerCase();

      // normalize node value
      const value = attribute.value.trim();
      node.removeAttribute(name);
      const valid = isValidAttribute(lcTag, lcName, value);
      if (valid) {
        node.setAttribute(name, value);
      }
    }

    // force noopener on target="_blank" links
    if (lcTag === 'a' && node.getAttribute('target') === '_blank' && node.getAttribute('rel') !== 'noopener') {
      node.setAttribute('rel', 'noopener');
    }
    for (let i = node.childNodes.length; i--;) {
      sanitizeNode( /** @type Element */node.childNodes[i]);
    }
  }

  /**
   * Validates attributes for validity.
   *
   * @param {string} lcTag
   * @param {string} lcName
   * @param {string} value
   * @return {boolean}
   */
  function isValidAttribute(lcTag, lcName, value) {
    // disallow most attributes based on whitelist
    if (!ALLOWED_ATTRIBUTES.includes(lcName)) {
      return false;
    }

    // disallow "DOM clobbering" / polution of document and wrapping form elements
    if ((lcName === 'id' || lcName === 'name') && (value in document || value in FORM_ELEMENT)) {
      return false;
    }
    if (lcName === 'target' && value !== '_blank') {
      return false;
    }

    // allow valid url links only
    if (lcName === 'href' && !ALLOWED_URI_PATTERN.test(value.replace(ATTR_WHITESPACE_PATTERN, ''))) {
      return false;
    }
    return true;
  }

  function formFieldClasses(type, {
    errors = [],
    disabled = false
  } = {}) {
    if (!type) {
      throw new Error('type required');
    }
    return classNames('fjs-form-field', `fjs-form-field-${type}`, {
      'fjs-has-errors': errors.length > 0,
      'fjs-disabled': disabled
    });
  }
  function prefixId(id, formId) {
    if (formId) {
      return `fjs-form-${formId}-${id}`;
    }
    return `fjs-form-${id}`;
  }
  function markdownToHTML(markdown) {
    const htmls = markdown.toString().split(/(?:\r?\n){2,}/).map(line => /^((\d+.)|[><\s#-*])/.test(line) ? t(line) : `<p>${t(line)}</p>`);
    return htmls.join('\n\n');
  }

  // see https://github.com/developit/snarkdown/issues/70
  function safeMarkdown(markdown) {
    const html = markdownToHTML(markdown);
    return sanitizeHTML(html);
  }

  /**
   * Sanitizes an image source to ensure we only allow for data URI and links
   * that start with http(s).
   *
   * Note: Most browsers anyway do not support script execution in <img> elements.
   *
   * @param {string} src
   * @returns {string}
   */
  function safeImageSource(src) {
    return sanitizeImageSource(src);
  }

  const type$b = 'button';
  function Button(props) {
    const {
      disabled,
      field
    } = props;
    const {
      action = 'submit'
    } = field;
    return e$1("div", {
      class: formFieldClasses(type$b),
      children: e$1("button", {
        class: "fjs-button",
        type: action,
        disabled: disabled,
        children: field.label
      })
    });
  }
  Button.create = (options = {}) => ({
    action: 'submit',
    ...options
  });
  Button.type = type$b;
  Button.label = 'Button';
  Button.keyed = true;
  Button.group = 'action';

  const FormRenderContext = D$1({
    Empty: props => {
      return null;
    },
    Children: props => {
      return props.children;
    },
    Element: props => {
      return props.children;
    }
  });
  var FormRenderContext$1 = FormRenderContext;

  /**
   * @param {string} type
   * @param {boolean} [strict]
   *
   * @returns {any}
   */
  function getService$2(type, strict) {}
  const FormContext = D$1({
    getService: getService$2,
    formId: null
  });
  var FormContext$1 = FormContext;

  function Description$2(props) {
    const {
      description
    } = props;
    if (!description) {
      return null;
    }
    return e$1("div", {
      class: "fjs-form-field-description",
      children: description
    });
  }

  function Errors(props) {
    const {
      errors
    } = props;
    if (!errors.length) {
      return null;
    }
    return e$1("div", {
      class: "fjs-form-field-error",
      children: e$1("ul", {
        children: errors.map(error => {
          return e$1("li", {
            children: error
          });
        })
      })
    });
  }

  function Label$1(props) {
    const {
      id,
      label,
      collapseOnEmpty = true,
      required = false
    } = props;
    return e$1("label", {
      for: id,
      class: classNames('fjs-form-field-label', {
        'fjs-incollapsible-label': !collapseOnEmpty
      }, props['class']),
      children: [props.children, label || '', required && e$1("span", {
        class: "fjs-asterix",
        children: "*"
      })]
    });
  }

  const type$a = 'checkbox';
  function Checkbox$1(props) {
    const {
      disabled,
      errors = [],
      field,
      value = false
    } = props;
    const {
      description,
      id,
      label
    } = field;
    const onChange = ({
      target
    }) => {
      props.onChange({
        field,
        value: target.checked
      });
    };
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: classNames(formFieldClasses(type$a, {
        errors,
        disabled
      }), {
        'fjs-checked': value
      }),
      children: [e$1(Label$1, {
        id: prefixId(id, formId),
        label: label,
        required: false,
        children: e$1("input", {
          checked: value,
          class: "fjs-input",
          disabled: disabled,
          id: prefixId(id, formId),
          type: "checkbox",
          onChange: onChange
        })
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Checkbox$1.create = (options = {}) => ({
    ...options
  });
  Checkbox$1.type = type$a;
  Checkbox$1.label = 'Checkbox';
  Checkbox$1.keyed = true;
  Checkbox$1.emptyValue = false;
  Checkbox$1.sanitizeValue = ({
    value
  }) => value === true;
  Checkbox$1.group = 'selection';

  function useService$2 (type, strict) {
    const {
      getService
    } = F$1(FormContext$1);
    return getService(type, strict);
  }

  /**
   * @enum { String }
   */
  const LOAD_STATES = {
    LOADING: 'loading',
    LOADED: 'loaded',
    ERROR: 'error'
  };

  /**
   * @typedef {Object} ValuesGetter
   * @property {Object[]} values - The values data
   * @property {(LOAD_STATES)} state - The values data's loading state, to use for conditional rendering
   */

  /**
   * A hook to load values for single and multiselect components.
   *
   * @param {Object} field - The form field to handle values for
   * @return {ValuesGetter} valuesGetter - A values getter object providing loading state and values
   */
  function useValuesAsync (field) {
    const {
      valuesKey,
      values: staticValues
    } = field;
    const [valuesGetter, setValuesGetter] = l$2({
      values: [],
      error: undefined,
      state: LOAD_STATES.LOADING
    });
    const initialData = useService$2('form')._getState().initialData;
    y(() => {
      let values = [];
      if (valuesKey !== undefined) {
        const keyedValues = (initialData || {})[valuesKey];
        if (keyedValues && Array.isArray(keyedValues)) {
          values = keyedValues;
        }
      } else if (staticValues !== undefined) {
        values = Array.isArray(staticValues) ? staticValues : [];
      } else {
        setValuesGetter(getErrorState('No values source defined in the form definition'));
        return;
      }
      setValuesGetter(buildLoadedState(values));
    }, [valuesKey, staticValues, initialData]);
    return valuesGetter;
  }
  const getErrorState = error => ({
    values: [],
    error,
    state: LOAD_STATES.ERROR
  });
  const buildLoadedState = values => ({
    values,
    error: undefined,
    state: LOAD_STATES.LOADED
  });

  const ENTER_KEYDOWN_EVENT = new KeyboardEvent('keydown', {
    code: 'Enter',
    key: 'Enter',
    charCode: 13,
    keyCode: 13,
    view: window,
    bubbles: true
  });
  function focusRelevantFlatpickerDay(flatpickrInstance) {
    if (!flatpickrInstance) return;
    !flatpickrInstance.isOpen && flatpickrInstance.open();
    const container = flatpickrInstance.calendarContainer;
    const dayToFocus = container.querySelector('.flatpickr-day.selected') || container.querySelector('.flatpickr-day.today') || container.querySelector('.flatpickr-day');
    dayToFocus && dayToFocus.focus();
  }
  function formatTime(use24h, minutes) {
    if (minutes === null) return null;
    const wrappedMinutes = minutes % (24 * 60);
    const minute = minutes % 60;
    let hour = Math.floor(wrappedMinutes / 60);
    if (use24h) {
      return _getZeroPaddedString(hour) + ':' + _getZeroPaddedString(minute);
    }
    hour = hour % 12 || 12;
    const isPM = wrappedMinutes >= 12 * 60;
    return _getZeroPaddedString(hour) + ':' + _getZeroPaddedString(minute) + ' ' + (isPM ? 'PM' : 'AM');
  }
  function parseInputTime(stringTime) {
    let workingString = stringTime.toLowerCase();
    const is12h = workingString.includes('am') || workingString.includes('pm');
    if (is12h) {
      const isPM = workingString.includes('pm');
      const digits = workingString.match(/\d+/g);
      const displayHour = parseInt(digits && digits[0]);
      const minute = parseInt(digits && digits[1]) || 0;
      const isValidDisplayHour = isNumber$3(displayHour) && displayHour >= 1 && displayHour <= 12;
      const isValidMinute = minute >= 0 && minute <= 59;
      if (!isValidDisplayHour || !isValidMinute) return null;
      const hour = displayHour % 12 + (isPM ? 12 : 0);
      return hour * 60 + minute;
    } else {
      const digits = workingString.match(/\d+/g);
      const hour = parseInt(digits && digits[0]);
      const minute = parseInt(digits && digits[1]);
      const isValidHour = isNumber$3(hour) && hour >= 0 && hour <= 23;
      const isValidMinute = isNumber$3(minute) && minute >= 0 && minute <= 59;
      if (!isValidHour || !isValidMinute) return null;
      return hour * 60 + minute;
    }
  }
  function serializeTime(minutes, offset, timeSerializingFormat) {
    if (timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_NORMALIZED) {
      const normalizedMinutes = (minutes + offset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
      return _getZeroPaddedString(Math.floor(normalizedMinutes / 60)) + ':' + _getZeroPaddedString(normalizedMinutes % 60) + 'Z';
    }
    const baseTime = _getZeroPaddedString(Math.floor(minutes / 60)) + ':' + _getZeroPaddedString(minutes % 60);
    const addUTCOffset = timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_OFFSET;
    return baseTime + (addUTCOffset ? formatTimezoneOffset(offset) : '');
  }
  function parseIsoTime(isoTimeString) {
    if (!isoTimeString) return null;
    const parseBasicMinutes = timeString => {
      const timeSegments = timeString.split(':');
      const hour = parseInt(timeSegments[0]);
      const minute = timeSegments.length > 1 ? parseInt(timeSegments[1]) : 0;
      if (isNaN(hour) || hour < 0 || hour > 24 || isNaN(minute) || minute < 0 || minute > 60) return null;
      return hour * 60 + minute;
    };
    const localOffset = new Date().getTimezoneOffset();

    // Parse normalized time
    if (isoTimeString.includes('Z')) {
      isoTimeString = isoTimeString.replace('Z', '');
      const minutes = parseBasicMinutes(isoTimeString);
      if (minutes === null) return null;
      return (minutes - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
    }

    // Parse offset positive time
    else if (isoTimeString.includes('+')) {
      const [timeString, offsetString] = isoTimeString.split('+');
      const minutes = parseBasicMinutes(timeString);
      let inboundOffset = parseBasicMinutes(offsetString);
      if (minutes === null || inboundOffset === null) return null;

      // The offset is flipped for consistency with javascript
      inboundOffset = -inboundOffset;
      return (minutes + inboundOffset - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
    }

    // Parse offset negative time
    else if (isoTimeString.includes('-')) {
      const [timeString, offsetString] = isoTimeString.split('-');
      const minutes = parseBasicMinutes(timeString);
      let inboundOffset = parseBasicMinutes(offsetString);
      if (minutes === null || inboundOffset === null) return null;
      return (minutes + inboundOffset - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
    }

    // Default to local parsing
    else {
      return parseBasicMinutes(isoTimeString);
    }
  }
  function serializeDate(date) {
    var d = new Date(date),
      month = '' + (d.getMonth() + 1),
      day = '' + d.getDate(),
      year = d.getFullYear();
    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;
    return [year, month, day].join('-');
  }

  // this method is used to make the `new Date(value)` parsing behavior stricter
  function isDateTimeInputInformationSufficient(value) {
    if (!value || typeof value !== 'string') return false;
    const segments = value.split('T');
    if (segments.length != 2) return false;
    const dateNumbers = segments[0].split('-');
    if (dateNumbers.length != 3) return false;
    return true;
  }

  // this method checks if the date isn't a datetime, or a partial date
  function isDateInputInformationMatching(value) {
    if (!value || typeof value !== 'string') return false;
    if (value.includes('T')) return false;
    const dateNumbers = value.split('-');
    if (dateNumbers.length != 3) return false;
    return true;
  }
  function serializeDateTime(date, time, timeSerializingFormat) {
    const workingDate = new Date();
    workingDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    workingDate.setHours(Math.floor(time / 60), time % 60, 0, 0);
    if (timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_NORMALIZED) {
      const timezoneOffsetMinutes = workingDate.getTimezoneOffset();
      const dayOffset = time + timezoneOffsetMinutes < 0 ? -1 : time + timezoneOffsetMinutes > MINUTES_IN_DAY ? 1 : 0;

      // Apply the date rollover pre-emptively
      workingDate.setHours(workingDate.getHours() + dayOffset * 24);
    }
    return serializeDate(workingDate) + 'T' + serializeTime(time, workingDate.getTimezoneOffset(), timeSerializingFormat);
  }
  function formatTimezoneOffset(minutes) {
    return _getSignedPaddedHours(minutes) + ':' + _getZeroPaddedString(Math.abs(minutes % 60));
  }
  function isInvalidDateString(value) {
    return isNaN(new Date(Date.parse(value)).getTime());
  }
  function _getSignedPaddedHours(minutes) {
    if (minutes > 0) {
      return '-' + _getZeroPaddedString(Math.floor(minutes / 60));
    } else {
      return '+' + _getZeroPaddedString(Math.floor((0 - minutes) / 60));
    }
  }
  function _getZeroPaddedString(time) {
    return time.toString().padStart(2, '0');
  }

  function sanitizeDateTimePickerValue(options) {
    const {
      formField,
      value
    } = options;
    const {
      subtype
    } = formField;
    if (typeof value !== 'string') return null;
    if (subtype === DATETIME_SUBTYPES.DATE && (isInvalidDateString(value) || !isDateInputInformationMatching(value))) return null;
    if (subtype === DATETIME_SUBTYPES.TIME && parseIsoTime(value) === null) return null;
    if (subtype === DATETIME_SUBTYPES.DATETIME && (isInvalidDateString(value) || !isDateTimeInputInformationSufficient(value))) return null;
    return value;
  }
  function sanitizeSingleSelectValue(options) {
    const {
      formField,
      data,
      value
    } = options;
    const {
      valuesKey,
      values
    } = formField;
    try {
      const validValues = (valuesKey ? get$1(data, [valuesKey]) : values).map(v => v.value) || [];
      return validValues.includes(value) ? value : null;
    } catch (error) {
      // use default value in case of formatting error
      // TODO(@Skaiir): log a warning when this happens - https://github.com/bpmn-io/form-js/issues/289
      return null;
    }
  }
  function sanitizeMultiSelectValue(options) {
    const {
      formField,
      data,
      value
    } = options;
    const {
      valuesKey,
      values
    } = formField;
    try {
      const validValues = (valuesKey ? get$1(data, [valuesKey]) : values).map(v => v.value) || [];
      return value.filter(v => validValues.includes(v));
    } catch (error) {
      // use default value in case of formatting error
      // TODO(@Skaiir): log a warning when this happens - https://github.com/bpmn-io/form-js/issues/289
      return [];
    }
  }

  const type$9 = 'checklist';
  function Checklist(props) {
    const {
      disabled,
      errors = [],
      field,
      value = []
    } = props;
    const {
      description,
      id,
      label
    } = field;
    const toggleCheckbox = v => {
      let newValue = [...value];
      if (!newValue.includes(v)) {
        newValue.push(v);
      } else {
        newValue = newValue.filter(x => x != v);
      }
      props.onChange({
        field,
        value: newValue
      });
    };
    const {
      state: loadState,
      values: options
    } = useValuesAsync(field);
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: classNames(formFieldClasses(type$9, {
        errors,
        disabled
      })),
      children: [e$1(Label$1, {
        label: label
      }), loadState == LOAD_STATES.LOADED && options.map((v, index) => {
        return e$1(Label$1, {
          id: prefixId(`${id}-${index}`, formId),
          label: v.label,
          class: classNames({
            'fjs-checked': value.includes(v.value)
          }),
          required: false,
          children: e$1("input", {
            checked: value.includes(v.value),
            class: "fjs-input",
            disabled: disabled,
            id: prefixId(`${id}-${index}`, formId),
            type: "checkbox",
            onClick: () => toggleCheckbox(v.value)
          })
        }, `${id}-${index}`);
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Checklist.create = (options = {}) => {
    const defaults = {};

    // provide default values if valuesKey isn't set
    if (!options.valuesKey) {
      defaults.values = [{
        label: 'Value',
        value: 'value'
      }];
    }
    return {
      ...defaults,
      ...options
    };
  };
  Checklist.type = type$9;
  Checklist.label = 'Checklist';
  Checklist.keyed = true;
  Checklist.emptyValue = [];
  Checklist.sanitizeValue = sanitizeMultiSelectValue;
  Checklist.group = 'selection';

  /**
   * Check if condition is met with given variables.
   *
   * @param {string | undefined} condition
   * @param {import('../../types').Data} data
   *
   * @returns {boolean} true if condition is met or no condition or condition checker exists
   */
  function useCondition(condition, data) {
    const initialData = useService$2('form')._getState().initialData;
    const conditionChecker = useService$2('conditionChecker', false);
    if (!conditionChecker) {
      return null;
    }

    // make sure we do not use data from hidden fields
    const filteredData = {
      ...initialData,
      ...conditionChecker.applyConditions(data, data)
    };
    return conditionChecker.check(condition, filteredData);
  }

  const noop$1$1 = () => false;
  function FormField(props) {
    const {
      field,
      onChange
    } = props;
    const {
      _path
    } = field;
    const formFields = useService$2('formFields'),
      form = useService$2('form');
    const {
      data,
      errors,
      properties
    } = form._getState();
    const {
      Element,
      Empty
    } = F$1(FormRenderContext$1);
    const FormFieldComponent = formFields.get(field.type);
    if (!FormFieldComponent) {
      throw new Error(`cannot render field <${field.type}>`);
    }
    const value = get$1(data, _path);
    const fieldErrors = findErrors(errors, _path);
    const disabled = properties.readOnly || field.disabled || false;
    const hidden = useHideCondition(field, data);
    if (hidden) {
      return e$1(Empty, {});
    }
    return e$1(Element, {
      field: field,
      children: e$1(FormFieldComponent, {
        ...props,
        disabled: disabled,
        errors: fieldErrors,
        onChange: disabled ? noop$1$1 : onChange,
        value: value
      })
    });
  }
  function useHideCondition(field, data) {
    const hideCondition = field.conditional && field.conditional.hide;
    return useCondition(hideCondition, data) === true;
  }

  function Default(props) {
    const {
      Children,
      Empty
    } = F$1(FormRenderContext$1);
    const {
      field
    } = props;
    const {
      components = []
    } = field;
    return e$1(Children, {
      class: "fjs-vertical-layout",
      field: field,
      children: [components.map(childField => {
        return v$1(FormField, {
          ...props,
          key: childField.id,
          field: childField
        });
      }), components.length ? null : e$1(Empty, {})]
    });
  }
  Default.create = (options = {}) => ({
    components: [],
    ...options
  });
  Default.type = 'default';
  Default.keyed = false;
  Default.label = null;
  Default.group = null;

  function _extends$j() { _extends$j = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$j.apply(this, arguments); }
  var CalendarIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$j({
    width: "14",
    height: "15",
    viewBox: "0 0 28 30",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    fill: "currentColor",
    d: "M19 2H9V0H7v2H2a2 2 0 00-2 2v24a2 2 0 002 2h24a2 2 0 002-2V4a2 2 0 00-2-2h-5V0h-2v2zM7 7V4H2v5h24V4h-5v3h-2V4H9v3H7zm-5 4v17h24V11H2z"
  })));

  function InputAdorner(props) {
    const {
      pre = null,
      post = null,
      rootRef,
      inputRef,
      children,
      disabled,
      hasErrors
    } = props;
    const onAdornmentClick = () => inputRef && inputRef.current && inputRef.current.focus();
    return e$1("div", {
      class: classNames('fjs-input-group', {
        'fjs-disabled': disabled
      }, {
        'hasErrors': hasErrors
      }),
      ref: rootRef,
      children: [pre !== null && e$1("span", {
        class: "fjs-input-adornment border-right border-radius-left",
        onClick: onAdornmentClick,
        children: [" ", isString$3(pre) ? e$1("span", {
          class: "fjs-input-adornment-text",
          children: pre
        }) : pre, " "]
      }), children, post !== null && e$1("span", {
        class: "fjs-input-adornment border-left border-radius-right",
        onClick: onAdornmentClick,
        children: [" ", isString$3(post) ? e$1("span", {
          class: "fjs-input-adornment-text",
          children: post
        }) : post, " "]
      })]
    });
  }

  function Datepicker(props) {
    const {
      id,
      label,
      collapseLabelOnEmpty,
      formId,
      required,
      disabled,
      disallowPassedDates,
      date,
      setDate
    } = props;
    const dateInputRef = s$1();
    const focusScopeRef = s$1();
    const [flatpickrInstance, setFlatpickrInstance] = l$2(null);
    const [isInputDirty, setIsInputDirty] = l$2(false);
    const [forceFocusCalendar, setForceFocusCalendar] = l$2(false);

    // shorts the date value back to the source
    y(() => {
      if (!flatpickrInstance || !flatpickrInstance.config) return;
      flatpickrInstance.setDate(date, true);
      setIsInputDirty(false);
    }, [flatpickrInstance, date.toString()]);
    y(() => {
      if (!forceFocusCalendar) return;
      focusRelevantFlatpickerDay(flatpickrInstance);
      setForceFocusCalendar(false);
    }, [flatpickrInstance, forceFocusCalendar]);

    // setup flatpickr instance
    y(() => {
      let config = {
        allowInput: true,
        dateFormat: 'm/d/Y',
        static: true,
        clickOpens: false,
        // TODO: support dates prior to 1900 (https://github.com/bpmn-io/form-js/issues/533)
        minDate: disallowPassedDates ? 'today' : '01/01/1900',
        errorHandler: () => {/* do nothing, we expect the values to sometimes be erronous and we don't want warnings polluting the console */}
      };
      const instance = flatpickr(dateInputRef.current, config);
      setFlatpickrInstance(instance);
      const onCalendarFocusOut = e => {
        if (!instance.calendarContainer.contains(e.relatedTarget) && e.relatedTarget != dateInputRef.current) {
          instance.close();
        }
      };

      // remove dirty tag to have mouse day selection prioritize input blur
      const onCalendarMouseDown = e => {
        if (e.target.classList.contains('flatpickr-day')) {
          setIsInputDirty(false);
        }
      };

      // when the dropdown of the datepickr opens, we register a few event handlers to re-implement some of the
      // flatpicker logic that was lost when setting allowInput to true
      instance.config.onOpen = [() => instance.calendarContainer.addEventListener('focusout', onCalendarFocusOut), () => instance.calendarContainer.addEventListener('mousedown', onCalendarMouseDown)];
      instance.config.onClose = [() => instance.calendarContainer.removeEventListener('focusout', onCalendarFocusOut), () => instance.calendarContainer.removeEventListener('mousedown', onCalendarMouseDown)];
    }, [disallowPassedDates]);

    // onChange is updated dynamically, so not to re-render the flatpicker every time it changes
    y(() => {
      if (!flatpickrInstance || !flatpickrInstance.config) return;
      flatpickrInstance.config.onChange = [date => setDate(new Date(date)), () => setIsInputDirty(false)];
    }, [flatpickrInstance, setDate]);
    const onInputKeyDown = A$1(e => {
      if (!flatpickrInstance) return;
      if (e.code === 'Escape') {
        flatpickrInstance.close();
      }
      if (e.code === 'ArrowDown') {
        if (isInputDirty) {
          // trigger an enter keypress to submit the new input, then focus calendar day on the next render cycle
          dateInputRef.current.dispatchEvent(ENTER_KEYDOWN_EVENT);
          setIsInputDirty(false);
          setForceFocusCalendar(true);
        } else {
          // focus calendar day immediately
          focusRelevantFlatpickerDay(flatpickrInstance);
        }
        e.preventDefault();
      }
      if (e.code === 'Enter') {
        setIsInputDirty(false);
      }
    }, [flatpickrInstance, isInputDirty]);
    const onInputFocus = A$1(e => {
      if (!flatpickrInstance || focusScopeRef.current.contains(e.relatedTarget)) return;
      flatpickrInstance.open();
    }, [flatpickrInstance]);

    // simulate an enter press on blur to make sure the date value is submitted in all scenarios
    const onInputBlur = A$1(e => {
      if (!isInputDirty || e.relatedTarget && e.relatedTarget.classList.contains('flatpickr-day')) return;
      dateInputRef.current.dispatchEvent(ENTER_KEYDOWN_EVENT);
      setIsInputDirty(false);
    }, [isInputDirty]);
    const fullId = `${prefixId(id, formId)}--date`;
    return e$1("div", {
      class: "fjs-datetime-subsection",
      children: [e$1(Label$1, {
        id: fullId,
        label: label,
        collapseOnEmpty: collapseLabelOnEmpty,
        required: required
      }), e$1(InputAdorner, {
        pre: e$1(CalendarIcon, {}),
        disabled: disabled,
        rootRef: focusScopeRef,
        inputRef: dateInputRef,
        children: e$1("div", {
          class: "fjs-datepicker",
          style: {
            width: '100%'
          },
          children: e$1("input", {
            ref: dateInputRef,
            type: "text",
            id: fullId,
            class: 'fjs-input',
            disabled: disabled,
            placeholder: "mm/dd/yyyy",
            autoComplete: "off",
            onFocus: onInputFocus,
            onKeyDown: onInputKeyDown,
            onMouseDown: e => !flatpickrInstance.isOpen && flatpickrInstance.open(),
            onBlur: onInputBlur,
            onInput: e => setIsInputDirty(true),
            "data-input": true
          })
        })
      })]
    });
  }

  function _extends$i() { _extends$i = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$i.apply(this, arguments); }
  var ClockIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$i({
    width: "16",
    height: "16",
    viewBox: "0 0 28 29",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M13 14.41L18.59 20 20 18.59l-5-5.01V5h-2v9.41z"
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    fill: "currentColor",
    d: "M6.222 25.64A14 14 0 1021.778 2.36 14 14 0 006.222 25.64zM7.333 4.023a12 12 0 1113.334 19.955A12 12 0 017.333 4.022z"
  })));

  function useKeyDownAction(targetKey, action, listenerElement = window) {
    function downHandler({
      key
    }) {
      if (key === targetKey) {
        action();
      }
    }
    y(() => {
      listenerElement.addEventListener('keydown', downHandler);
      return () => {
        listenerElement.removeEventListener('keydown', downHandler);
      };
    });
  }

  const DEFAULT_LABEL_GETTER = value => value;
  const NOOP = () => {};
  function DropdownList(props) {
    const {
      listenerElement = window,
      values = [],
      getLabel = DEFAULT_LABEL_GETTER,
      onValueSelected = NOOP,
      height = 235,
      emptyListMessage = 'No results',
      initialFocusIndex = 0
    } = props;
    const [mouseControl, setMouseControl] = l$2(false);
    const [focusedValueIndex, setFocusedValueIndex] = l$2(initialFocusIndex);
    const [smoothScrolling, setSmoothScrolling] = l$2(false);
    const dropdownContainer = s$1();
    const mouseScreenPos = s$1();
    const focusedItem = d(() => values.length ? values[focusedValueIndex] : null, [focusedValueIndex, values]);
    const changeFocusedValueIndex = A$1(delta => {
      setFocusedValueIndex(x => Math.min(Math.max(0, x + delta), values.length - 1));
    }, [values.length]);
    y(() => {
      if (focusedValueIndex === 0) return;
      if (!focusedValueIndex || !values.length) {
        setFocusedValueIndex(0);
      } else if (focusedValueIndex >= values.length) {
        setFocusedValueIndex(values.length - 1);
      }
    }, [focusedValueIndex, values.length]);
    useKeyDownAction('ArrowUp', () => {
      if (values.length) {
        changeFocusedValueIndex(-1);
        setMouseControl(false);
      }
    }, listenerElement);
    useKeyDownAction('ArrowDown', () => {
      if (values.length) {
        changeFocusedValueIndex(1);
        setMouseControl(false);
      }
    }, listenerElement);
    useKeyDownAction('Enter', () => {
      if (focusedItem) {
        onValueSelected(focusedItem);
      }
    }, listenerElement);
    y(() => {
      const individualEntries = dropdownContainer.current.children;
      if (individualEntries.length && !mouseControl) {
        individualEntries[focusedValueIndex].scrollIntoView({
          block: 'nearest',
          inline: 'nearest'
        });
      }
    }, [focusedValueIndex, mouseControl]);
    y(() => {
      setSmoothScrolling(true);
    }, []);
    const onMouseMovedInKeyboardMode = (event, valueIndex) => {
      const userMovedCursor = !mouseScreenPos.current || mouseScreenPos.current.x !== event.screenX && mouseScreenPos.current.y !== event.screenY;
      if (userMovedCursor) {
        mouseScreenPos.current = {
          x: event.screenX,
          y: event.screenY
        };
        setMouseControl(true);
        setFocusedValueIndex(valueIndex);
      }
    };
    return e$1("div", {
      ref: dropdownContainer,
      tabIndex: -1,
      class: "fjs-dropdownlist",
      onMouseDown: e => e.preventDefault(),
      style: {
        maxHeight: height,
        scrollBehavior: smoothScrolling ? 'smooth' : 'auto'
      },
      children: [values.length > 0 && values.map((v, i) => {
        return e$1("div", {
          class: classNames('fjs-dropdownlist-item', {
            'focused': focusedValueIndex === i
          }),
          onMouseMove: mouseControl ? undefined : e => onMouseMovedInKeyboardMode(e, i),
          onMouseEnter: mouseControl ? () => setFocusedValueIndex(i) : undefined,
          onMouseDown: e => onValueSelected(v),
          children: getLabel(v)
        });
      }), !values.length && e$1("div", {
        class: "fjs-dropdownlist-empty",
        children: emptyListMessage
      })]
    });
  }

  function Timepicker(props) {
    const {
      id,
      label,
      collapseLabelOnEmpty,
      formId,
      required,
      disabled,
      use24h = false,
      timeInterval,
      time,
      setTime
    } = props;
    const timeInputRef = s$1();
    const [dropdownIsOpen, setDropdownIsOpen] = l$2(false);
    const useDropdown = d(() => timeInterval !== 1, [timeInterval]);
    const [rawValue, setRawValue] = l$2('');

    // populates values from source
    y(() => {
      if (time === null) {
        setRawValue('');
        return;
      }
      const intervalAdjustedTime = time - time % timeInterval;
      setRawValue(formatTime(use24h, intervalAdjustedTime));
      if (intervalAdjustedTime != time) {
        setTime(intervalAdjustedTime);
      }
    }, [time, setTime, use24h, timeInterval]);
    const propagateRawToMinute = A$1(newRawValue => {
      const localRawValue = newRawValue || rawValue;

      // If no raw value exists, set the minute to null
      if (!localRawValue) {
        setTime(null);
        return;
      }
      const minutes = parseInputTime(localRawValue);

      // If raw string couldn't be parsed, clean everything up
      if (!isNumber$3(minutes)) {
        setRawValue('');
        setTime(null);
        return;
      }

      // Enforce the minutes to match the timeInterval
      const correctedMinutes = minutes - minutes % timeInterval;

      // Enforce the raw text to be formatted properly
      setRawValue(formatTime(use24h, correctedMinutes));
      setTime(correctedMinutes);
    }, [rawValue, timeInterval, use24h, setTime]);
    const timeOptions = d(() => {
      const minutesInDay = 24 * 60;
      const intervalCount = Math.floor(minutesInDay / timeInterval);
      return [...Array(intervalCount).keys()].map(intervalIndex => formatTime(use24h, intervalIndex * timeInterval));
    }, [timeInterval, use24h]);
    const initialFocusIndex = d(() => {
      // if there are no options, there will not be any focusing
      if (!timeOptions || !timeInterval) return null;

      // if there is a set minute value, we focus it in the dropdown
      if (time) return time / timeInterval;
      const cacheTime = parseInputTime(rawValue);

      // if there is a valid value in the input cache, we try and focus close to it
      if (cacheTime) {
        const flooredCacheTime = cacheTime - cacheTime % timeInterval;
        return flooredCacheTime / timeInterval;
      }

      // If there is no set value, simply focus the middle of the dropdown (12:00)
      return Math.floor(timeOptions.length / 2);
    }, [rawValue, time, timeInterval, timeOptions]);
    const onInputKeyDown = e => {
      switch (e.key) {
        case 'ArrowUp':
          e.preventDefault();
          break;
        case 'ArrowDown':
          useDropdown && setDropdownIsOpen(true);
          e.preventDefault();
          break;
        case 'Escape':
          useDropdown && setDropdownIsOpen(false);
          break;
        case 'Enter':
          !dropdownIsOpen && propagateRawToMinute();
          break;
      }
    };
    const onInputBlur = e => {
      setDropdownIsOpen(false);
      propagateRawToMinute();
    };
    const onDropdownValueSelected = value => {
      setDropdownIsOpen(false);
      propagateRawToMinute(value);
    };
    const fullId = `${prefixId(id, formId)}--time`;
    return e$1("div", {
      class: "fjs-datetime-subsection",
      children: [e$1(Label$1, {
        id: fullId,
        label: label,
        collapseOnEmpty: collapseLabelOnEmpty,
        required: required
      }), e$1(InputAdorner, {
        pre: e$1(ClockIcon, {}),
        inputRef: timeInputRef,
        disabled: disabled,
        children: e$1("div", {
          class: "fjs-timepicker fjs-timepicker-anchor",
          children: [e$1("input", {
            ref: timeInputRef,
            type: "text",
            id: fullId,
            class: "fjs-input",
            value: rawValue,
            disabled: disabled,
            placeholder: use24h ? 'hh:mm' : 'hh:mm ?m',
            autoComplete: "off",
            onFocus: () => useDropdown && setDropdownIsOpen(true),
            onClick: () => useDropdown && setDropdownIsOpen(true)

            // @ts-ignore
            ,
            onInput: e => {
              setRawValue(e.target.value);
              useDropdown && setDropdownIsOpen(false);
            },
            onBlur: onInputBlur,
            onKeyDown: onInputKeyDown,
            "data-input": true
          }), dropdownIsOpen && e$1(DropdownList, {
            values: timeOptions,
            height: 150,
            onValueSelected: onDropdownValueSelected,
            listenerElement: timeInputRef.current,
            initialFocusIndex: initialFocusIndex
          })]
        })
      })]
    });
  }

  const type$8 = 'datetime';
  function Datetime(props) {
    const {
      disabled,
      errors = [],
      field,
      onChange,
      value = ''
    } = props;
    const {
      description,
      id,
      dateLabel,
      timeLabel,
      validate = {},
      subtype,
      use24h,
      disallowPassedDates,
      timeInterval,
      timeSerializingFormat
    } = field;
    const {
      required
    } = validate;
    const {
      formId
    } = F$1(FormContext$1);
    const getNullDateTime = () => ({
      date: new Date(Date.parse(null)),
      time: null
    });
    const [dateTime, setDateTime] = l$2(getNullDateTime());
    const [dateTimeUpdateRequest, setDateTimeUpdateRequest] = l$2(null);
    const isValidDate = date => date && !isNaN(date.getTime());
    const isValidTime = time => !isNaN(parseInt(time));
    const useDatePicker = d(() => subtype === DATETIME_SUBTYPES.DATE || subtype === DATETIME_SUBTYPES.DATETIME, [subtype]);
    const useTimePicker = d(() => subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME, [subtype]);
    y(() => {
      let {
        date,
        time
      } = getNullDateTime();
      switch (subtype) {
        case DATETIME_SUBTYPES.DATE:
          {
            date = new Date(Date.parse(value));
            break;
          }
        case DATETIME_SUBTYPES.TIME:
          {
            time = parseIsoTime(value);
            break;
          }
        case DATETIME_SUBTYPES.DATETIME:
          {
            date = new Date(Date.parse(value));
            time = isValidDate(date) ? 60 * date.getHours() + date.getMinutes() : null;
            break;
          }
      }
      setDateTime({
        date,
        time
      });
    }, [subtype, value]);
    const computeAndSetState = A$1(({
      date,
      time
    }) => {
      let newDateTimeValue = null;
      if (subtype === DATETIME_SUBTYPES.DATE && isValidDate(date)) {
        newDateTimeValue = serializeDate(date);
      } else if (subtype === DATETIME_SUBTYPES.TIME && isValidTime(time)) {
        newDateTimeValue = serializeTime(time, new Date().getTimezoneOffset(), timeSerializingFormat);
      } else if (subtype === DATETIME_SUBTYPES.DATETIME && isValidDate(date) && isValidTime(time)) {
        newDateTimeValue = serializeDateTime(date, time, timeSerializingFormat);
      }
      onChange({
        value: newDateTimeValue,
        field
      });
    }, [field, onChange, subtype, timeSerializingFormat]);
    y(() => {
      if (dateTimeUpdateRequest) {
        if (dateTimeUpdateRequest.refreshOnly) {
          computeAndSetState(dateTime);
        } else {
          const newDateTime = {
            ...dateTime,
            ...dateTimeUpdateRequest
          };
          setDateTime(newDateTime);
          computeAndSetState(newDateTime);
        }
        setDateTimeUpdateRequest(null);
      }
    }, [computeAndSetState, dateTime, dateTimeUpdateRequest]);
    y(() => {
      setDateTimeUpdateRequest({
        refreshOnly: true
      });
    }, [timeSerializingFormat]);
    const allErrors = d(() => {
      if (required || subtype !== DATETIME_SUBTYPES.DATETIME) return errors;
      const isOnlyOneFieldSet = isValidDate(dateTime.date) && !isValidTime(dateTime.time) || !isValidDate(dateTime.date) && isValidTime(dateTime.time);
      return isOnlyOneFieldSet ? ['Date and time must both be entered.', ...errors] : errors;
    }, [required, subtype, dateTime, errors]);
    const setDate = A$1(date => {
      setDateTimeUpdateRequest(prev => prev ? {
        ...prev,
        date
      } : {
        date
      });
    }, []);
    const setTime = A$1(time => {
      setDateTimeUpdateRequest(prev => prev ? {
        ...prev,
        time
      } : {
        time
      });
    }, []);
    const datePickerProps = {
      id,
      label: dateLabel,
      collapseLabelOnEmpty: !timeLabel,
      formId,
      required,
      disabled,
      disallowPassedDates,
      date: dateTime.date,
      setDate
    };
    const timePickerProps = {
      id,
      label: timeLabel,
      collapseLabelOnEmpty: !dateLabel,
      formId,
      required,
      disabled,
      use24h,
      timeInterval,
      time: dateTime.time,
      setTime
    };
    return e$1("div", {
      class: formFieldClasses(type$8, {
        errors: allErrors,
        disabled
      }),
      children: [e$1("div", {
        class: classNames('fjs-vertical-group'),
        children: [useDatePicker && e$1(Datepicker, {
          ...datePickerProps
        }), useTimePicker && useDatePicker && e$1("div", {
          class: "fjs-datetime-separator"
        }), useTimePicker && e$1(Timepicker, {
          ...timePickerProps
        })]
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: allErrors
      })]
    });
  }
  Datetime.create = (options = {}) => {
    const defaults = {};
    set$2(defaults, DATETIME_SUBTYPE_PATH, DATETIME_SUBTYPES.DATE);
    set$2(defaults, DATE_LABEL_PATH, 'Date');
    return {
      ...defaults,
      ...options
    };
  };
  Datetime.type = type$8;
  Datetime.keyed = true;
  Datetime.emptyValue = null;
  Datetime.sanitizeValue = sanitizeDateTimePickerValue;
  Datetime.label = 'Date time';
  Datetime.group = 'basic-input';

  /**
   * This file must not be changed or exchanged.
   *
   * @see http://bpmn.io/license for more information.
   */
  function Logo() {
    return e$1("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 14.02 5.57",
      width: "53",
      height: "21",
      style: "vertical-align:middle",
      children: [e$1("path", {
        fill: "currentColor",
        d: "M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"
      }), e$1("path", {
        fill: "currentColor",
        d: "M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"
      })]
    });
  }
  function Lightbox(props) {
    const {
      open
    } = props;
    if (!open) {
      return null;
    }
    return e$1("div", {
      class: "fjs-powered-by-lightbox",
      style: "z-index: 100; position: fixed; top: 0; left: 0;right: 0; bottom: 0",
      children: [e$1("div", {
        class: "backdrop",
        style: "width: 100%; height: 100%; background: rgba(40 40 40 / 20%)",
        onClick: props.onBackdropClick
      }), e$1("div", {
        class: "notice",
        style: "position: absolute; left: 50%; top: 40%; transform: translate(-50%); width: 260px; padding: 10px; background: white; box-shadow: 0  1px 4px rgba(0 0 0 / 30%); font-family: Helvetica, Arial, sans-serif; font-size: 14px; display: flex; line-height: 1.3",
        children: [e$1("a", {
          href: "https://bpmn.io",
          target: "_blank",
          rel: "noopener",
          style: "margin: 15px 20px 15px 10px; align-self: center; color: #404040",
          children: e$1(Logo, {})
        }), e$1("span", {
          children: ["Web-based tooling for BPMN, DMN, and forms powered by ", e$1("a", {
            href: "https://bpmn.io",
            target: "_blank",
            rel: "noopener",
            children: "bpmn.io"
          }), "."]
        })]
      })]
    });
  }
  function Link(props) {
    return e$1("div", {
      class: "fjs-powered-by fjs-form-field",
      style: "text-align: right",
      children: e$1("a", {
        href: "https://bpmn.io",
        target: "_blank",
        rel: "noopener",
        class: "fjs-powered-by-link",
        title: "Powered by bpmn.io",
        style: "color: #404040",
        onClick: props.onClick,
        children: e$1(Logo, {})
      })
    });
  }
  function PoweredBy(props) {
    const [open, setOpen] = l$2(false);
    function toggleOpen(open) {
      return event => {
        event.preventDefault();
        setOpen(open);
      };
    }
    return e$1(d$1, {
      children: [W(e$1(Lightbox, {
        open: open,
        onBackdropClick: toggleOpen(false)
      }), document.body), e$1(Link, {
        onClick: toggleOpen(true)
      })]
    });
  }

  const noop$3 = () => {};
  function FormComponent(props) {
    const form = useService$2('form');
    const {
      schema
    } = form._getState();
    const {
      onSubmit = noop$3,
      onReset = noop$3,
      onChange = noop$3
    } = props;
    const handleSubmit = event => {
      event.preventDefault();
      onSubmit();
    };
    const handleReset = event => {
      event.preventDefault();
      onReset();
    };
    return e$1("form", {
      class: "fjs-form",
      onSubmit: handleSubmit,
      onReset: handleReset,
      noValidate: true,
      children: [e$1(FormField, {
        field: schema,
        onChange: onChange
      }), e$1(PoweredBy, {})]
    });
  }

  /**
   *
   * @param {string | undefined} expression
   * @param {import('../../types').Data} data
   */
  function useEvaluation(expression, data) {
    const initialData = useService$2('form')._getState().initialData;
    const conditionChecker = useService$2('conditionChecker', false);
    if (!conditionChecker) {
      return null;
    }

    // make sure we do not use data from hidden fields
    const filteredData = {
      ...initialData,
      ...conditionChecker.applyConditions(data, data)
    };
    return conditionChecker.evaluate(expression, filteredData);
  }

  /**
   *
   * @param {string} value
   */
  function useExpressionValue(value) {
    const formData = useService$2('form')._getState().data;
    if (!isExpression(value)) {
      return value;
    }

    // We can ignore this hook rule as we do not use
    // state or effects in our custom hooks
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    return useEvaluation(value, formData);
  }

  // helper ///////////////

  function isExpression(value) {
    return isString$3(value) && value.startsWith('=');
  }

  function _extends$h() { _extends$h = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$h.apply(this, arguments); }
  var ImagePlaceholder = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$h({
    width: "64",
    height: "64",
    viewBox: "0 0 1280 1280",
    xmlns: "http://www.w3.org/2000/svg",
    fillRule: "evenodd",
    clipRule: "evenodd",
    strokeLinejoin: "round",
    strokeMiterlimit: "2"
  }, props), /*#__PURE__*/React.createElement("path", {
    fill: "#e5e9ed",
    d: "M0 0h1280v1280H0z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M910 410H370v470h540V410zm-57.333 57.333v355.334H427.333V467.333h425.334z",
    fill: "#cad3db"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M810 770H480v-60l100-170 130 170 100-65v125z",
    fill: "#cad3db"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "750",
    cy: "550",
    r: "50",
    fill: "#cad3db",
    transform: "translate(10 10)"
  })));

  const type$7 = 'image';
  function Image(props) {
    const {
      field
    } = props;
    const {
      alt,
      id,
      source
    } = field;
    const safeSource = safeImageSource(useExpressionValue(source));
    const altText = useExpressionValue(alt);
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: formFieldClasses(type$7),
      children: e$1("div", {
        class: "fjs-image-container",
        children: [safeSource && e$1("img", {
          alt: altText,
          src: safeSource,
          class: "fjs-image",
          id: prefixId(id, formId)
        }), !safeSource && e$1("div", {
          class: "fjs-image-placeholder",
          children: e$1(ImagePlaceholder, {
            alt: "This is an image placeholder"
          })
        })]
      })
    });
  }
  Image.create = (options = {}) => ({
    ...options
  });
  Image.type = type$7;
  Image.keyed = false;
  Image.label = 'Image view';
  Image.group = 'presentation';

  function _extends$g() { _extends$g = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$g.apply(this, arguments); }
  var AngelDownIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$g({
    xmlns: "http://www.w3.org/2000/svg",
    width: "8",
    height: "8"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    fill: "currentColor",
    stroke: "currentColor",
    strokeWidth: ".5",
    d: "M7.75 1.336L4 6.125.258 1.335 0 1.54l4 5.125L8 1.54zm0 0"
  })));

  function _extends$f() { _extends$f = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }
  var AngelUpIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$f({
    xmlns: "http://www.w3.org/2000/svg",
    width: "8",
    height: "8"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    fill: "currentColor",
    stroke: "currentColor",
    strokeWidth: ".5",
    d: "M7.75 6.664L4 1.875.258 6.665 0 6.46l4-5.125L8 6.46zm0 0"
  })));

  const type$6 = 'number';
  function Numberfield(props) {
    const {
      disabled,
      errors = [],
      field,
      value,
      onChange
    } = props;
    const {
      description,
      id,
      label,
      appearance = {},
      validate = {},
      decimalDigits,
      serializeToString = false,
      increment: incrementValue
    } = field;
    const {
      prefixAdorner,
      suffixAdorner
    } = appearance;
    const {
      required
    } = validate;
    const inputRef = s$1();
    const [stringValueCache, setStringValueCache] = l$2('');

    // checks whether the value currently in the form data is practically different from the one in the input field cache
    // this allows us to guarantee the field always displays valid form data, but without auto-simplifying values like 1.000 to 1
    const cacheValueMatchesState = d(() => Numberfield.sanitizeValue({
      value,
      formField: field
    }) === Numberfield.sanitizeValue({
      value: stringValueCache,
      formField: field
    }), [stringValueCache, value, field]);
    const displayValue = d(() => {
      if (value === 'NaN') return 'NaN';
      if (stringValueCache === '-') return '-';
      return cacheValueMatchesState ? stringValueCache : value || value === 0 ? Big$1(value).toFixed() : '';
    }, [stringValueCache, value, cacheValueMatchesState]);
    const arrowIncrementValue = d(() => {
      if (incrementValue) return Big$1(incrementValue);
      if (decimalDigits) return Big$1(`1e-${decimalDigits}`);
      return Big$1('1');
    }, [decimalDigits, incrementValue]);
    const setValue = A$1(stringValue => {
      if (isNullEquivalentValue(stringValue)) {
        setStringValueCache('');
        onChange({
          field,
          value: null
        });
        return;
      }

      // treat commas as dots
      stringValue = stringValue.replaceAll(',', '.');
      if (stringValue === '-') {
        setStringValueCache('-');
        return;
      }
      if (isNaN(Number(stringValue))) {
        setStringValueCache('NaN');
        onChange({
          field,
          value: 'NaN'
        });
        return;
      }
      setStringValueCache(stringValue);
      onChange({
        field,
        value: serializeToString ? stringValue : Number(stringValue)
      });
    }, [field, onChange, serializeToString]);
    const increment = () => {
      const base = isValidNumber$1(value) ? Big$1(value) : Big$1(0);
      const stepFlooredValue = base.minus(base.mod(arrowIncrementValue));

      // note: toFixed() behaves differently in big.js
      setValue(stepFlooredValue.plus(arrowIncrementValue).toFixed());
    };
    const decrement = () => {
      const base = isValidNumber$1(value) ? Big$1(value) : Big$1(0);
      const offset = base.mod(arrowIncrementValue);
      if (offset.cmp(0) === 0) {
        // if we're already on a valid step, decrement
        setValue(base.minus(arrowIncrementValue).toFixed());
      } else {
        // otherwise floor to the step
        const stepFlooredValue = base.minus(base.mod(arrowIncrementValue));
        setValue(stepFlooredValue.toFixed());
      }
    };
    const onKeyDown = e => {
      // delete the NaN state all at once on backspace or delete
      if (value === 'NaN' && (e.code === 'Backspace' || e.code === 'Delete')) {
        setValue(null);
        e.preventDefault();
        return;
      }
      if (e.code === 'ArrowUp') {
        increment();
        e.preventDefault();
        return;
      }
      if (e.code === 'ArrowDown') {
        decrement();
        e.preventDefault();
        return;
      }
    };

    // intercept key presses which would lead to an invalid number
    const onKeyPress = e => {
      const caretIndex = inputRef.current.selectionStart;
      const selectionWidth = inputRef.current.selectionStart - inputRef.current.selectionEnd;
      const previousValue = inputRef.current.value;
      if (!willKeyProduceValidNumber(e.key, previousValue, caretIndex, selectionWidth, decimalDigits)) {
        e.preventDefault();
      }
    };
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: formFieldClasses(type$6, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        id: prefixId(id, formId),
        label: label,
        required: required
      }), e$1(InputAdorner, {
        disabled: disabled,
        pre: prefixAdorner,
        post: suffixAdorner,
        children: e$1("div", {
          class: classNames('fjs-vertical-group', {
            'fjs-disabled': disabled
          }, {
            'hasErrors': errors.length
          }),
          children: [e$1("input", {
            ref: inputRef,
            class: "fjs-input",
            disabled: disabled,
            id: prefixId(id, formId),
            onKeyDown: onKeyDown,
            onKeyPress: onKeyPress

            // @ts-ignore
            ,
            onInput: e => setValue(e.target.value),
            type: "text",
            autoComplete: "off",
            step: arrowIncrementValue,
            value: displayValue
          }), e$1("div", {
            class: classNames('fjs-number-arrow-container', {
              'fjs-disabled': disabled
            }),
            children: [e$1("button", {
              class: "fjs-number-arrow-up",
              type: "button",
              "aria-label": "Increment",
              onClick: () => increment(),
              tabIndex: -1,
              children: e$1(AngelUpIcon, {})
            }), e$1("div", {
              class: "fjs-number-arrow-separator"
            }), e$1("button", {
              class: "fjs-number-arrow-down",
              type: "button",
              "aria-label": "Decrement",
              onClick: () => decrement(),
              tabIndex: -1,
              children: e$1(AngelDownIcon, {})
            })]
          })]
        })
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Numberfield.create = (options = {}) => ({
    ...options
  });
  Numberfield.sanitizeValue = ({
    value,
    formField
  }) => {
    // null state is allowed
    if (isNullEquivalentValue(value)) return null;

    // if data cannot be parsed as a valid number, go into invalid NaN state
    if (!isValidNumber$1(value)) return 'NaN';

    // otherwise parse to formatting type
    return formField.serializeToString ? value.toString() : Number(value);
  };
  Numberfield.type = type$6;
  Numberfield.keyed = true;
  Numberfield.label = 'Number';
  Numberfield.emptyValue = null;
  Numberfield.group = 'basic-input';

  const type$5 = 'radio';
  function Radio(props) {
    const {
      disabled,
      errors = [],
      field,
      value
    } = props;
    const {
      description,
      id,
      label,
      validate = {}
    } = field;
    const {
      required
    } = validate;
    const onChange = v => {
      props.onChange({
        field,
        value: v
      });
    };
    const {
      state: loadState,
      values: options
    } = useValuesAsync(field);
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: formFieldClasses(type$5, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        label: label,
        required: required
      }), loadState == LOAD_STATES.LOADED && options.map((option, index) => {
        return e$1(Label$1, {
          id: prefixId(`${id}-${index}`, formId),
          label: option.label,
          class: classNames({
            'fjs-checked': option.value === value
          }),
          required: false,
          children: e$1("input", {
            checked: option.value === value,
            class: "fjs-input",
            disabled: disabled,
            id: prefixId(`${id}-${index}`, formId),
            type: "radio",
            onClick: () => onChange(option.value)
          })
        }, `${id}-${index}`);
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Radio.create = function (options = {}) {
    const defaults = {};

    // provide default values if valuesKey isn't set
    if (!options.valuesKey) {
      defaults.values = [{
        label: 'Value',
        value: 'value'
      }];
    }
    return {
      ...defaults,
      ...options
    };
  };
  Radio.type = type$5;
  Radio.label = 'Radio';
  Radio.keyed = true;
  Radio.emptyValue = null;
  Radio.sanitizeValue = sanitizeSingleSelectValue;
  Radio.group = 'selection';

  function _extends$e() { _extends$e = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }
  var XMarkIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$e({
    xmlns: "http://www.w3.org/2000/svg",
    width: "8",
    height: "8"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    fill: "currentColor",
    stroke: "currentColor",
    strokeWidth: ".5",
    d: "M4 3.766L7.43.336l.234.234L4.234 4l3.43 3.43-.234.234L4 4.234.57 7.664.336 7.43 3.766 4 .336.57.57.336zm0 0"
  })));

  function SearchableSelect(props) {
    const {
      id,
      disabled,
      errors,
      field,
      value
    } = props;
    const {
      formId
    } = F$1(FormContext$1);
    const [filter, setFilter] = l$2('');
    const [isDropdownExpanded, setIsDropdownExpanded] = l$2(false);
    const [shouldApplyFilter, setShouldApplyFilter] = l$2(true);
    const [isEscapeClosed, setIsEscapeClose] = l$2(false);
    const searchbarRef = s$1();
    const {
      state: loadState,
      values: options
    } = useValuesAsync(field);

    // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
    const valueToOptionMap = d(() => Object.assign({}, ...options.map((o, x) => ({
      [o.value]: options[x]
    }))), [options]);
    const valueLabel = d(() => value && valueToOptionMap[value] && valueToOptionMap[value].label || '', [value, valueToOptionMap]);

    // whenever we change the underlying value, set the label to it
    y(() => {
      setFilter(valueLabel);
    }, [valueLabel]);
    const filteredOptions = d(() => {
      if (loadState === LOAD_STATES.LOADED) {
        return shouldApplyFilter ? options.filter(o => o.label && o.value && o.label.toLowerCase().includes(filter.toLowerCase())) : options;
      }
      return [];
    }, [filter, loadState, options, shouldApplyFilter]);
    const onChange = ({
      target
    }) => {
      setIsEscapeClose(false);
      setIsDropdownExpanded(true);
      setShouldApplyFilter(true);
      setFilter(target.value || '');
    };
    const setValue = A$1(option => {
      setFilter(option && option.label || '');
      props.onChange({
        value: option && option.value || null,
        field
      });
    }, [field, props]);
    const onInputKeyDown = A$1(keyDownEvent => {
      switch (keyDownEvent.key) {
        case 'ArrowUp':
          keyDownEvent.preventDefault();
          break;
        case 'ArrowDown':
          {
            if (!isDropdownExpanded) {
              setIsDropdownExpanded(true);
              setShouldApplyFilter(false);
            }
            keyDownEvent.preventDefault();
            break;
          }
        case 'Escape':
          setIsEscapeClose(true);
          break;
        case 'Enter':
          if (isEscapeClosed) {
            setIsEscapeClose(false);
          }
          break;
      }
    }, [isDropdownExpanded, isEscapeClosed]);
    const displayState = d(() => {
      const ds = {};
      ds.componentReady = !disabled && loadState === LOAD_STATES.LOADED;
      ds.displayCross = ds.componentReady && value !== null && value !== undefined;
      ds.displayDropdown = !disabled && isDropdownExpanded && !isEscapeClosed;
      return ds;
    }, [disabled, isDropdownExpanded, isEscapeClosed, loadState, value]);
    const onAngelMouseDown = A$1(e => {
      setIsEscapeClose(false);
      setIsDropdownExpanded(!isDropdownExpanded);
      const searchbar = searchbarRef.current;
      isDropdownExpanded ? searchbar.blur() : searchbar.focus();
      e.preventDefault();
    }, [isDropdownExpanded]);
    return e$1(d$1, {
      children: [e$1("div", {
        id: prefixId(`${id}`, formId),
        class: classNames('fjs-input-group', {
          'disabled': disabled
        }, {
          'hasErrors': errors.length
        }),
        children: [e$1("input", {
          disabled: disabled,
          class: "fjs-input",
          ref: searchbarRef,
          id: prefixId(`${id}-search`, formId),
          onChange: onChange,
          type: "text",
          value: filter,
          placeholder: 'Search',
          autoComplete: "off",
          onKeyDown: e => onInputKeyDown(e),
          onMouseDown: () => {
            setIsEscapeClose(false);
            setIsDropdownExpanded(true);
            setShouldApplyFilter(false);
          },
          onFocus: () => {
            setIsDropdownExpanded(true);
            setShouldApplyFilter(false);
          },
          onBlur: () => {
            setIsDropdownExpanded(false);
            setFilter(valueLabel);
          }
        }), displayState.displayCross && e$1("span", {
          class: "fjs-select-cross",
          onMouseDown: e => {
            setValue(null);
            e.preventDefault();
          },
          children: [e$1(XMarkIcon, {}), " "]
        }), e$1("span", {
          class: "fjs-select-arrow",
          onMouseDown: e => onAngelMouseDown(e),
          children: displayState.displayDropdown ? e$1(AngelUpIcon, {}) : e$1(AngelDownIcon, {})
        })]
      }), e$1("div", {
        class: "fjs-select-anchor",
        children: displayState.displayDropdown && e$1(DropdownList, {
          values: filteredOptions,
          getLabel: o => o.label,
          onValueSelected: o => {
            setValue(o);
            setIsDropdownExpanded(false);
          },
          listenerElement: searchbarRef.current
        })
      })]
    });
  }

  function SimpleSelect(props) {
    const {
      id,
      disabled,
      errors,
      field,
      value
    } = props;
    const {
      formId
    } = F$1(FormContext$1);
    const [isDropdownExpanded, setIsDropdownExpanded] = l$2(false);
    const selectRef = s$1();
    const {
      state: loadState,
      values: options
    } = useValuesAsync(field);

    // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
    const valueToOptionMap = d(() => Object.assign({}, ...options.map((o, x) => ({
      [o.value]: options[x]
    }))), [options]);
    const valueLabel = d(() => value && valueToOptionMap[value] && valueToOptionMap[value].label || '', [value, valueToOptionMap]);
    const setValue = A$1(option => {
      props.onChange({
        value: option && option.value || null,
        field
      });
    }, [field, props]);
    const displayState = d(() => {
      const ds = {};
      ds.componentReady = !disabled && loadState === LOAD_STATES.LOADED;
      ds.displayCross = ds.componentReady && value !== null && value !== undefined;
      ds.displayDropdown = !disabled && isDropdownExpanded;
      return ds;
    }, [disabled, isDropdownExpanded, loadState, value]);
    const onMouseDown = A$1(e => {
      const select = selectRef.current;
      setIsDropdownExpanded(!isDropdownExpanded);
      if (isDropdownExpanded) {
        select.blur();
      } else {
        select.focus();
      }
      e.preventDefault();
    }, [isDropdownExpanded]);
    const initialFocusIndex = d(() => value && findIndex(options, o => o.value === value) || 0, [options, value]);
    return e$1(d$1, {
      children: [e$1("div", {
        ref: selectRef,
        id: prefixId(`${id}`, formId),
        class: classNames('fjs-input-group', {
          'disabled': disabled
        }, {
          'hasErrors': errors.length
        }),
        onFocus: () => setIsDropdownExpanded(true),
        onBlur: () => setIsDropdownExpanded(false),
        onMouseDown: e => onMouseDown(e),
        tabIndex: disabled ? undefined : 0,
        children: [e$1("div", {
          class: classNames('fjs-select-display', {
            'fjs-select-placeholder': !value
          }),
          id: prefixId(`${id}-display`, formId),
          children: valueLabel || 'Select'
        }), displayState.displayCross && e$1("span", {
          class: "fjs-select-cross",
          onMouseDown: e => {
            setValue(null);
            e.stopPropagation();
          },
          children: e$1(XMarkIcon, {})
        }), e$1("span", {
          class: "fjs-select-arrow",
          children: displayState.displayDropdown ? e$1(AngelUpIcon, {}) : e$1(AngelDownIcon, {})
        })]
      }), e$1("div", {
        class: "fjs-select-anchor",
        children: displayState.displayDropdown && e$1(DropdownList, {
          values: options,
          getLabel: o => o.label,
          initialFocusIndex: initialFocusIndex,
          onValueSelected: o => {
            setValue(o);
            setIsDropdownExpanded(false);
          },
          listenerElement: selectRef.current
        })
      })]
    });
  }

  const type$4 = 'select';
  function Select$1(props) {
    const {
      disabled,
      errors = [],
      field,
      onChange,
      value
    } = props;
    const {
      description,
      id,
      label,
      searchable = false,
      validate = {}
    } = field;
    const {
      required
    } = validate;
    const {
      formId
    } = F$1(FormContext$1);
    const selectProps = d(() => ({
      id,
      disabled,
      errors,
      field,
      value,
      onChange
    }), [disabled, errors, field, id, value, onChange]);
    return e$1("div", {
      class: formFieldClasses(type$4, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        id: prefixId(id, formId),
        label: label,
        required: required
      }), searchable ? e$1(SearchableSelect, {
        ...selectProps
      }) : e$1(SimpleSelect, {
        ...selectProps
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Select$1.create = (options = {}) => {
    const defaults = {};

    // provide default values if valuesKey isn't set
    if (!options.valuesKey) {
      defaults.values = [{
        label: 'Value',
        value: 'value'
      }];
    }
    return {
      ...defaults,
      ...options
    };
  };
  Select$1.type = type$4;
  Select$1.label = 'Select';
  Select$1.keyed = true;
  Select$1.emptyValue = null;
  Select$1.sanitizeValue = sanitizeSingleSelectValue;
  Select$1.group = 'selection';

  const type$3 = 'taglist';
  function Taglist(props) {
    const {
      disabled,
      errors = [],
      field,
      value: values = []
    } = props;
    const {
      description,
      id,
      label
    } = field;
    const {
      formId
    } = F$1(FormContext$1);
    const [filter, setFilter] = l$2('');
    const [filteredOptions, setFilteredOptions] = l$2([]);
    const [isDropdownExpanded, setIsDropdownExpanded] = l$2(false);
    const [hasOptionsLeft, setHasOptionsLeft] = l$2(true);
    const [isEscapeClosed, setIsEscapeClose] = l$2(false);
    const searchbarRef = s$1();
    const {
      state: loadState,
      values: options
    } = useValuesAsync(field);

    // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
    const valueToOptionMap = d(() => Object.assign({}, ...options.map((o, x) => ({
      [o.value]: options[x]
    }))), [options]);

    // Usage of stringify is necessary here because we want this effect to only trigger when there is a value change to the array
    y(() => {
      if (loadState === LOAD_STATES.LOADED) {
        setFilteredOptions(options.filter(o => o.label && o.value && o.label.toLowerCase().includes(filter.toLowerCase()) && !values.includes(o.value)));
      } else {
        setFilteredOptions([]);
      }
    }, [filter, JSON.stringify(values), options, loadState]);
    y(() => {
      setHasOptionsLeft(options.length > values.length);
    }, [options.length, values.length]);
    const onFilterChange = ({
      target
    }) => {
      setIsEscapeClose(false);
      setFilter(target.value);
    };
    const selectValue = value => {
      if (filter) {
        setFilter('');
      }

      // Ensure values cannot be double selected due to latency
      if (values.at(-1) === value) {
        return;
      }
      props.onChange({
        value: [...values, value],
        field
      });
    };
    const deselectValue = value => {
      props.onChange({
        value: values.filter(v => v != value),
        field
      });
    };
    const onInputKeyDown = e => {
      switch (e.key) {
        case 'ArrowUp':
        case 'ArrowDown':
          // We do not want the cursor to seek in the search field when we press up and down
          e.preventDefault();
          break;
        case 'Backspace':
          if (!filter && values.length) {
            deselectValue(values[values.length - 1]);
          }
          break;
        case 'Escape':
          setIsEscapeClose(true);
          break;
        case 'Enter':
          if (isEscapeClosed) {
            setIsEscapeClose(false);
          }
          break;
      }
    };
    const onTagRemoveClick = (event, value) => {
      const {
        target
      } = event;
      deselectValue(value);

      // restore focus if there is no next sibling to focus
      const nextTag = target.closest('.fjs-taglist-tag').nextSibling;
      if (!nextTag) {
        searchbarRef.current.focus();
      }
    };
    const shouldDisplayDropdown = d(() => !disabled && loadState === LOAD_STATES.LOADED && isDropdownExpanded && !isEscapeClosed, [disabled, isDropdownExpanded, isEscapeClosed, loadState]);
    return e$1("div", {
      class: formFieldClasses(type$3, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        label: label,
        id: prefixId(`${id}-search`, formId)
      }), e$1("div", {
        class: classNames('fjs-taglist', {
          'fjs-disabled': disabled
        }),
        children: [loadState === LOAD_STATES.LOADED && e$1("div", {
          class: "fjs-taglist-tags",
          children: values.map(v => {
            return e$1("div", {
              class: classNames('fjs-taglist-tag', {
                'fjs-disabled': disabled
              }),
              onMouseDown: e => e.preventDefault(),
              children: [e$1("span", {
                class: "fjs-taglist-tag-label",
                children: valueToOptionMap[v] ? valueToOptionMap[v].label : `unexpected value{${v}}`
              }), !disabled && e$1("button", {
                type: "button",
                title: "Remove tag",
                class: "fjs-taglist-tag-remove",
                onClick: event => onTagRemoveClick(event, v),
                children: e$1(XMarkIcon, {})
              })]
            });
          })
        }), e$1("input", {
          disabled: disabled,
          class: "fjs-taglist-input",
          ref: searchbarRef,
          id: prefixId(`${id}-search`, formId),
          onChange: onFilterChange,
          type: "text",
          value: filter,
          placeholder: disabled ? '' : 'Search',
          autoComplete: "off",
          onKeyDown: e => onInputKeyDown(e),
          onMouseDown: () => setIsEscapeClose(false),
          onFocus: () => setIsDropdownExpanded(true),
          onBlur: () => {
            setIsDropdownExpanded(false);
            setFilter('');
          }
        })]
      }), e$1("div", {
        class: "fjs-taglist-anchor",
        children: shouldDisplayDropdown && e$1(DropdownList, {
          values: filteredOptions,
          getLabel: o => o.label,
          onValueSelected: o => selectValue(o.value),
          emptyListMessage: hasOptionsLeft ? 'No results' : 'All values selected',
          listenerElement: searchbarRef.current
        })
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Taglist.create = (options = {}) => {
    const defaults = {};

    // provide default values if valuesKey isn't set
    if (!options.valuesKey) {
      defaults.values = [{
        label: 'Value',
        value: 'value'
      }];
    }
    return {
      ...defaults,
      ...options
    };
  };
  Taglist.type = type$3;
  Taglist.label = 'Tag list';
  Taglist.keyed = true;
  Taglist.emptyValue = [];
  Taglist.sanitizeValue = sanitizeMultiSelectValue;
  Taglist.group = 'selection';

  const type$2 = 'text';
  function Text$2(props) {
    const {
      field,
      disableLinks
    } = props;
    const {
      text = ''
    } = field;
    const textValue = useExpressionValue(text) || '';
    const componentOverrides = disableLinks ? {
      'a': DisabledLink
    } : {};
    return e$1("div", {
      class: formFieldClasses(type$2),
      children: e$1(Markup, {
        markup: safeMarkdown(textValue),
        components: componentOverrides,
        trim: false
      })
    });
  }
  Text$2.create = (options = {}) => ({
    text: '# Text',
    ...options
  });
  Text$2.type = type$2;
  Text$2.keyed = false;
  Text$2.group = 'presentation';
  Text$2.label = 'Text view';
  function DisabledLink({
    href,
    children
  }) {
    return e$1("a", {
      class: "fjs-disabled-link",
      href: href,
      tabIndex: -1,
      children: children
    });
  }

  const type$1 = 'textfield';
  function Textfield$1(props) {
    const {
      disabled,
      errors = [],
      field,
      value = ''
    } = props;
    const {
      description,
      id,
      label,
      appearance = {},
      validate = {}
    } = field;
    const {
      prefixAdorner,
      suffixAdorner
    } = appearance;
    const {
      required
    } = validate;
    const onChange = ({
      target
    }) => {
      props.onChange({
        field,
        value: target.value
      });
    };
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: formFieldClasses(type$1, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        id: prefixId(id, formId),
        label: label,
        required: required
      }), e$1(InputAdorner, {
        disabled: disabled,
        pre: prefixAdorner,
        post: suffixAdorner,
        children: e$1("input", {
          class: "fjs-input",
          disabled: disabled,
          id: prefixId(id, formId),
          onInput: onChange,
          type: "text",
          value: value
        })
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Textfield$1.create = (options = {}) => ({
    ...options
  });
  Textfield$1.type = type$1;
  Textfield$1.label = 'Text field';
  Textfield$1.keyed = true;
  Textfield$1.emptyValue = '';
  Textfield$1.sanitizeValue = ({
    value
  }) => isArray$3(value) || isObject$1(value) ? '' : String(value);
  Textfield$1.group = 'basic-input';

  const type = 'textarea';
  function Textarea(props) {
    const {
      disabled,
      errors = [],
      field,
      value = ''
    } = props;
    const {
      description,
      id,
      label,
      validate = {}
    } = field;
    const {
      required
    } = validate;
    const textareaRef = s$1();
    const onInput = ({
      target
    }) => {
      props.onChange({
        field,
        value: target.value
      });
    };
    const autoSizeTextarea = A$1(textarea => {
      // Ensures the textarea shrinks back, and improves resizing behavior consistency
      textarea.style.height = '0px';
      const computed = window.getComputedStyle(textarea);
      const calculatedHeight = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + textarea.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));
      const minHeight = 75;
      const maxHeight = 350;
      const displayHeight = Math.max(Math.min(calculatedHeight, maxHeight), minHeight);
      textarea.style.height = `${displayHeight}px`;

      // Overflow is hidden by default to hide scrollbar flickering
      textarea.style.overflow = calculatedHeight > maxHeight ? 'visible' : 'hidden';
    }, []);
    y(() => {
      autoSizeTextarea(textareaRef.current);
    }, [autoSizeTextarea, value]);
    const {
      formId
    } = F$1(FormContext$1);
    return e$1("div", {
      class: formFieldClasses(type, {
        errors,
        disabled
      }),
      children: [e$1(Label$1, {
        id: prefixId(id, formId),
        label: label,
        required: required
      }), e$1("textarea", {
        class: "fjs-textarea",
        disabled: disabled,
        id: prefixId(id, formId),
        onInput: onInput,
        value: value,
        ref: textareaRef
      }), e$1(Description$2, {
        description: description
      }), e$1(Errors, {
        errors: errors
      })]
    });
  }
  Textarea.create = (options = {}) => ({
    ...options
  });
  Textarea.type = type;
  Textarea.label = 'Text area';
  Textarea.keyed = true;
  Textarea.emptyValue = '';
  Textarea.sanitizeValue = ({
    value
  }) => isArray$3(value) || isObject$1(value) ? '' : String(value);
  Textarea.group = 'basic-input';

  function _extends$d() { _extends$d = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }
  var ButtonIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$d({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M45 17a3 3 0 013 3v14a3 3 0 01-3 3H9a3 3 0 01-3-3V20a3 3 0 013-3h36zm-9 8.889H18v2.222h18V25.89z"
  })));

  function _extends$c() { _extends$c = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }
  var CheckboxIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$c({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M34 18H20a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V20a2 2 0 00-2-2zm-9 14l-5-5 1.41-1.41L25 29.17l7.59-7.59L34 23l-9 9z"
  })));

  function _extends$b() { _extends$b = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }
  var ChecklistIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$b({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54",
    fill: "none"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18 12h-6v6h6v-6zm-6-2a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-6a2 2 0 00-2-2h-6zM18 36h-6v6h6v-6zm-6-2a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-6a2 2 0 00-2-2h-6zM18 24h-6v6h6v-6zm-6-2a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-6a2 2 0 00-2-2h-6z",
    fill: "#161616"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M23 14.5a1 1 0 011-1h19a1 1 0 011 1v1a1 1 0 01-1 1H24a1 1 0 01-1-1v-1zM23 26.5a1 1 0 011-1h19a1 1 0 011 1v1a1 1 0 01-1 1H24a1 1 0 01-1-1v-1zM23 38.5a1 1 0 011-1h19a1 1 0 011 1v1a1 1 0 01-1 1H24a1 1 0 01-1-1v-1z",
    fill: "#161616"
  })));

  function _extends$a() { _extends$a = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }
  var DatetimeIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$a({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54",
    fill: "none"
  }, props), /*#__PURE__*/React.createElement("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M37.908 13.418h-5.004v-2.354h-1.766v2.354H21.13v-2.354h-1.766v2.354H14.36c-1.132 0-2.06.928-2.06 2.06v23.549c0 1.132.928 2.06 2.06 2.06h6.77v-1.766h-6.358a.707.707 0 01-.706-.706V15.89c0-.39.316-.707.706-.707h4.592v2.355h1.766v-2.355h10.008v2.355h1.766v-2.355h4.592c.39 0 .707.317.707.707v6.358h1.765v-6.77c0-1.133-.927-2.06-2.06-2.06z",
    clipRule: "evenodd"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#000",
    d: "M35.13 37.603l1.237-1.237-3.468-3.475v-5.926h-1.754v6.654l3.984 3.984z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M23.08 36.962a9.678 9.678 0 1017.883-7.408 9.678 9.678 0 00-17.882 7.408zm4.54-10.292a7.924 7.924 0 118.805 13.177A7.924 7.924 0 0127.62 26.67z",
    clipRule: "evenodd"
  })));

  function _extends$9() { _extends$9 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }
  var TaglistIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$9({
    width: "54",
    height: "54",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M45 16a3 3 0 013 3v16a3 3 0 01-3 3H9a3 3 0 01-3-3V19a3 3 0 013-3h36zm0 2H9a1 1 0 00-1 1v16a1 1 0 001 1h36a1 1 0 001-1V19a1 1 0 00-1-1z",
    fill: "#000"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M11 22a1 1 0 011-1h19a1 1 0 011 1v10a1 1 0 01-1 1H12a1 1 0 01-1-1V22z",
    fill: "#505562"
  })));

  function _extends$8() { _extends$8 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }
  var FormIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$8({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("rect", {
    x: "15",
    y: "17",
    width: "24",
    height: "4",
    rx: "1"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "15",
    y: "25",
    width: "24",
    height: "4",
    rx: "1"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "15",
    y: "33",
    width: "13",
    height: "4",
    rx: "1"
  })));

  function _extends$7() { _extends$7 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }
  var ColumnsIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$7({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M8 33v5a1 1 0 001 1h4v2H9a3 3 0 01-3-3v-5h2zm18 6v2H15v-2h11zm13 0v2H28v-2h11zm9-6v5a3 3 0 01-3 3h-4v-2h4a1 1 0 00.993-.883L46 38v-5h2zM8 22v9H6v-9h2zm40 0v9h-2v-9h2zm-35-9v2H9a1 1 0 00-.993.883L8 16v4H6v-4a3 3 0 013-3h4zm32 0a3 3 0 013 3v4h-2v-4a1 1 0 00-.883-.993L45 15h-4v-2h4zm-6 0v2H28v-2h11zm-13 0v2H15v-2h11z"
  })));

  function _extends$6() { _extends$6 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }
  var NumberIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$6({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M45 16a3 3 0 013 3v16a3 3 0 01-3 3H9a3 3 0 01-3-3V19a3 3 0 013-3h36zm0 2H9a1 1 0 00-1 1v16a1 1 0 001 1h36a1 1 0 001-1V19a1 1 0 00-1-1zM35 28.444h7l-3.5 4-3.5-4zM35 26h7l-3.5-4-3.5 4z"
  })));

  function _extends$5() { _extends$5 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }
  var RadioIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$5({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M27 22c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  })));

  function _extends$4() { _extends$4 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
  var SelectIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M45 16a3 3 0 013 3v16a3 3 0 01-3 3H9a3 3 0 01-3-3V19a3 3 0 013-3h36zm0 2H9a1 1 0 00-1 1v16a1 1 0 001 1h36a1 1 0 001-1V19a1 1 0 00-1-1zm-12 7h9l-4.5 6-4.5-6z"
  })));

  function _extends$3() { _extends$3 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
  var TextIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M20.58 33.77h-3l-1.18-3.08H11l-1.1 3.08H7l5.27-13.54h2.89zm-5-5.36l-1.86-5-1.83 5zM22 20.23h5.41a15.47 15.47 0 012.4.14 3.42 3.42 0 011.41.55 3.47 3.47 0 011 1.14 3 3 0 01.42 1.58 3.26 3.26 0 01-1.91 2.94 3.63 3.63 0 011.91 1.22 3.28 3.28 0 01.66 2 4 4 0 01-.43 1.8 3.63 3.63 0 01-1.09 1.4 3.89 3.89 0 01-1.83.65q-.69.07-3.3.09H22zm2.73 2.25v3.13h3.8a1.79 1.79 0 001.1-.49 1.41 1.41 0 00.41-1 1.49 1.49 0 00-.35-1 1.54 1.54 0 00-1-.48c-.27 0-1.05-.05-2.34-.05zm0 5.39v3.62h2.57a11.52 11.52 0 001.88-.09 1.65 1.65 0 001-.54 1.6 1.6 0 00.38-1.14 1.75 1.75 0 00-.29-1 1.69 1.69 0 00-.86-.62 9.28 9.28 0 00-2.41-.23zM44.35 28.79l2.65.84a5.94 5.94 0 01-2 3.29A5.74 5.74 0 0141.38 34a5.87 5.87 0 01-4.44-1.84 7.09 7.09 0 01-1.73-5A7.43 7.43 0 0137 21.87 6 6 0 0141.54 20a5.64 5.64 0 014 1.47A5.33 5.33 0 0147 24l-2.7.65a2.8 2.8 0 00-2.86-2.27A3.09 3.09 0 0039 23.42a5.31 5.31 0 00-.93 3.5 5.62 5.62 0 00.93 3.65 3 3 0 002.4 1.09 2.72 2.72 0 001.82-.66 4 4 0 001.13-2.21z"
  })));

  function _extends$2$1() { _extends$2$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2$1.apply(this, arguments); }
  var TextfieldIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$2$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M45 16a3 3 0 013 3v16a3 3 0 01-3 3H9a3 3 0 01-3-3V19a3 3 0 013-3h36zm0 2H9a1 1 0 00-1 1v16a1 1 0 001 1h36a1 1 0 001-1V19a1 1 0 00-1-1zm-32 4v10h-2V22h2z"
  })));

  function _extends$1$1() { _extends$1$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1$1.apply(this, arguments); }
  var TextareaIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$1$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: "54",
    height: "54"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    d: "M45 13a3 3 0 013 3v22a3 3 0 01-3 3H9a3 3 0 01-3-3V16a3 3 0 013-3h36zm0 2H9a1 1 0 00-1 1v22a1 1 0 001 1h36a1 1 0 001-1V16a1 1 0 00-1-1zm-1.136 15.5l.848.849-6.363 6.363-.849-.848 6.364-6.364zm.264 3.5l.849.849-2.828 2.828-.849-.849L44.128 34zM13 19v10h-2V19h2z"
  })));

  function _extends$k() { _extends$k = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$k.apply(this, arguments); }
  var ImageIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$k({
    width: "54",
    height: "54",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M34.636 21.91A3.818 3.818 0 1127 21.908a3.818 3.818 0 017.636 0zm-2 0A1.818 1.818 0 1129 21.908a1.818 1.818 0 013.636 0z",
    fill: "#000"
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15 13a2 2 0 00-2 2v24a2 2 0 002 2h24a2 2 0 002-2V15a2 2 0 00-2-2H15zm24 2H15v12.45l4.71-4.709a1.91 1.91 0 012.702 0l6.695 6.695 2.656-1.77a1.91 1.91 0 012.411.239L39 32.73V15zM15 39v-8.754c.06-.038.116-.083.168-.135l5.893-5.893 6.684 6.685a1.911 1.911 0 002.41.238l2.657-1.77 6.02 6.02c.052.051.108.097.168.135V39H15z",
    fill: "#000"
  })));

  const iconsByType = type => {
    return {
      button: ButtonIcon,
      checkbox: CheckboxIcon,
      checklist: ChecklistIcon,
      columns: ColumnsIcon,
      datetime: DatetimeIcon,
      image: ImageIcon,
      number: NumberIcon,
      radio: RadioIcon,
      select: SelectIcon,
      taglist: TaglistIcon,
      text: TextIcon,
      textfield: TextfieldIcon,
      textarea: TextareaIcon,
      default: FormIcon
    }[type];
  };

  const formFields = [Button, Checkbox$1, Checklist, Default, Image, Numberfield, Datetime, Radio, Select$1, Taglist, Text$2, Textfield$1, Textarea];

  class FormFields {
    constructor() {
      this._formFields = {};
      formFields.forEach(formField => {
        this.register(formField.type, formField);
      });
    }
    register(type, formField) {
      this._formFields[type] = formField;
    }
    get(type) {
      return this._formFields[type];
    }
  }

  function Renderer$1(config, eventBus, form, injector) {
    const App = () => {
      const [state, setState] = l$2(form._getState());
      const formContext = {
        getService(type, strict = true) {
          return injector.get(type, strict);
        },
        formId: form._id
      };
      eventBus.on('changed', newState => {
        setState(newState);
      });
      const onChange = A$1(update => form._update(update), [form]);
      const {
        properties
      } = state;
      const {
        readOnly
      } = properties;
      const onSubmit = A$1(() => {
        if (!readOnly) {
          form.submit();
        }
      }, [form, readOnly]);
      const onReset = A$1(() => form.reset(), [form]);
      const {
        schema
      } = state;
      if (!schema) {
        return null;
      }
      return e$1(FormContext$1.Provider, {
        value: formContext,
        children: e$1(FormComponent, {
          onChange: onChange,
          onSubmit: onSubmit,
          onReset: onReset
        })
      });
    };
    const {
      container
    } = config;
    eventBus.on('form.init', () => {
      S$1(e$1(App, {}), container);
    });
    eventBus.on('form.destroy', () => {
      S$1(null, container);
    });
  }
  Renderer$1.$inject = ['config.renderer', 'eventBus', 'form', 'injector'];

  var renderModule$1 = {
    __init__: ['formFields', 'renderer'],
    formFields: ['type', FormFields],
    renderer: ['type', Renderer$1]
  };

  var core$1 = {
    __depends__: [importModule$1, renderModule$1],
    conditionChecker: ['type', ConditionChecker],
    eventBus: ['type', EventBus$1],
    formFieldRegistry: ['type', FormFieldRegistry$1],
    validator: ['type', Validator]
  };

  /**
   * @typedef { import('./types').Injector } Injector
   * @typedef { import('./types').Data } Data
   * @typedef { import('./types').Errors } Errors
   * @typedef { import('./types').Schema } Schema
   * @typedef { import('./types').FormProperties } FormProperties
   * @typedef { import('./types').FormProperty } FormProperty
   * @typedef { import('./types').FormEvent } FormEvent
   * @typedef { import('./types').FormOptions } FormOptions
   *
   * @typedef { {
   *   data: Data,
   *   initialData: Data,
   *   errors: Errors,
   *   properties: FormProperties,
   *   schema: Schema
   * } } State
   *
   * @typedef { (type:FormEvent, priority:number, handler:Function) => void } OnEventWithPriority
   * @typedef { (type:FormEvent, handler:Function) => void } OnEventWithOutPriority
   * @typedef { OnEventWithPriority & OnEventWithOutPriority } OnEventType
   */

  const ids$1 = new Ids([32, 36, 1]);

  /**
   * The form.
   */
  class Form {
    /**
     * @constructor
     * @param {FormOptions} options
     */
    constructor(options = {}) {
      /**
       * @public
       * @type {OnEventType}
       */
      this.on = this._onEvent;

      /**
       * @public
       * @type {String}
       */
      this._id = ids$1.next();

      /**
       * @private
       * @type {Element}
       */
      this._container = createFormContainer();
      const {
        container,
        injector = this._createInjector(options, this._container),
        properties = {}
      } = options;

      /**
       * @private
       * @type {State}
       */
      this._state = {
        initialData: null,
        data: null,
        properties,
        errors: {},
        schema: null
      };
      this.get = injector.get;
      this.invoke = injector.invoke;
      this.get('eventBus').fire('form.init');
      if (container) {
        this.attachTo(container);
      }
    }
    clear() {
      // clear form services
      this._emit('diagram.clear');

      // clear diagram services (e.g. EventBus)
      this._emit('form.clear');
    }

    /**
     * Destroy the form, removing it from DOM,
     * if attached.
     */
    destroy() {
      // destroy form services
      this.get('eventBus').fire('form.destroy');

      // destroy diagram services (e.g. EventBus)
      this.get('eventBus').fire('diagram.destroy');
      this._detach(false);
    }

    /**
     * Open a form schema with the given initial data.
     *
     * @param {Schema} schema
     * @param {Data} [data]
     *
     * @return Promise<{ warnings: Array<any> }>
     */
    importSchema(schema, data = {}) {
      return new Promise((resolve, reject) => {
        try {
          this.clear();
          const {
            schema: importedSchema,
            data: initializedData,
            warnings
          } = this.get('importer').importSchema(schema, data);
          this._setState({
            data: initializedData,
            errors: {},
            schema: importedSchema,
            initialData: clone(initializedData)
          });
          this._emit('import.done', {
            warnings
          });
          return resolve({
            warnings
          });
        } catch (error) {
          this._emit('import.done', {
            error,
            warnings: error.warnings || []
          });
          return reject(error);
        }
      });
    }

    /**
     * Submit the form, triggering all field validations.
     *
     * @returns { { data: Data, errors: Errors } }
     */
    submit() {
      const {
        properties
      } = this._getState();
      if (properties.readOnly) {
        throw new Error('form is read-only');
      }
      const data = this._getSubmitData();
      const errors = this.validate();
      const filteredErrors = this._applyConditions(errors, data);
      const result = {
        data,
        errors: filteredErrors
      };
      this._emit('submit', result);
      return result;
    }
    reset() {
      this._emit('reset');
      this._setState({
        data: clone(this._state.initialData),
        errors: {}
      });
    }

    /**
     * @returns {Errors}
     */
    validate() {
      const formFieldRegistry = this.get('formFieldRegistry'),
        validator = this.get('validator');
      const {
        data
      } = this._getState();
      const errors = formFieldRegistry.getAll().reduce((errors, field) => {
        const {
          disabled,
          _path
        } = field;
        if (disabled) {
          return errors;
        }
        const value = get$1(data, _path);
        const fieldErrors = validator.validateField(field, value);
        return set$2(errors, [pathStringify(_path)], fieldErrors.length ? fieldErrors : undefined);
      }, /** @type {Errors} */{});
      this._setState({
        errors
      });
      return errors;
    }

    /**
     * @param {Element|string} parentNode
     */
    attachTo(parentNode) {
      if (!parentNode) {
        throw new Error('parentNode required');
      }
      this.detach();
      if (isString$3(parentNode)) {
        parentNode = document.querySelector(parentNode);
      }
      const container = this._container;
      parentNode.appendChild(container);
      this._emit('attach');
    }
    detach() {
      this._detach();
    }

    /**
     * @private
     *
     * @param {boolean} [emit]
     */
    _detach(emit = true) {
      const container = this._container,
        parentNode = container.parentNode;
      if (!parentNode) {
        return;
      }
      if (emit) {
        this._emit('detach');
      }
      parentNode.removeChild(container);
    }

    /**
     * @param {FormProperty} property
     * @param {any} value
     */
    setProperty(property, value) {
      const properties = set$2(this._getState().properties, [property], value);
      this._setState({
        properties
      });
    }

    /**
     * @param {FormEvent} type
     * @param {Function} handler
     */
    off(type, handler) {
      this.get('eventBus').off(type, handler);
    }

    /**
     * @private
     *
     * @param {FormOptions} options
     * @param {Element} container
     *
     * @returns {Injector}
     */
    _createInjector(options, container) {
      const {
        additionalModules = [],
        modules = []
      } = options;
      const config = {
        renderer: {
          container
        }
      };
      return createInjector([{
        config: ['value', config]
      }, {
        form: ['value', this]
      }, core$1, ...modules, ...additionalModules]);
    }

    /**
     * @private
     */
    _emit(type, data) {
      this.get('eventBus').fire(type, data);
    }

    /**
     * @internal
     *
     * @param { { add?: boolean, field: any, remove?: number, value?: any } } update
     */
    _update(update) {
      const {
        field,
        value
      } = update;
      const {
        _path
      } = field;
      let {
        data,
        errors
      } = this._getState();
      const validator = this.get('validator');
      const fieldErrors = validator.validateField(field, value);
      set$2(data, _path, value);
      set$2(errors, [pathStringify(_path)], fieldErrors.length ? fieldErrors : undefined);
      this._setState({
        data: clone(data),
        errors: clone(errors)
      });
    }

    /**
     * @internal
     */
    _getState() {
      return this._state;
    }

    /**
     * @internal
     */
    _setState(state) {
      this._state = {
        ...this._state,
        ...state
      };
      this._emit('changed', this._getState());
    }

    /**
     * @internal
     */
    _onEvent(type, priority, handler) {
      this.get('eventBus').on(type, priority, handler);
    }

    /**
     * @internal
     */
    _getSubmitData() {
      const formFieldRegistry = this.get('formFieldRegistry');
      const formData = this._getState().data;
      const submitData = formFieldRegistry.getAll().reduce((previous, field) => {
        const {
          disabled,
          _path
        } = field;

        // do not submit disabled form fields
        if (disabled || !_path) {
          return previous;
        }
        const value = get$1(formData, _path);
        return {
          ...previous,
          [_path[0]]: value
        };
      }, {});
      const filteredSubmitData = this._applyConditions(submitData, formData);
      return filteredSubmitData;
    }

    /**
     * @internal
     */
    _applyConditions(toFilter, data) {
      const conditionChecker = this.get('conditionChecker');
      return conditionChecker.applyConditions(toFilter, data);
    }
  }

  const schemaVersion = 7;

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */

  const nativeToString = Object.prototype.toString;
  const nativeHasOwnProperty = Object.prototype.hasOwnProperty;

  function isUndefined(obj) {
    return obj === undefined;
  }

  function isDefined(obj) {
    return obj !== undefined;
  }

  function isNil(obj) {
    return obj == null;
  }

  function isArray(obj) {
    return nativeToString.call(obj) === '[object Array]';
  }

  function isObject(obj) {
    return nativeToString.call(obj) === '[object Object]';
  }

  function isNumber(obj) {
    return nativeToString.call(obj) === '[object Number]';
  }

  function isFunction(obj) {
    const tag = nativeToString.call(obj);

    return (
      tag === '[object Function]' ||
      tag === '[object AsyncFunction]' ||
      tag === '[object GeneratorFunction]' ||
      tag === '[object AsyncGeneratorFunction]' ||
      tag === '[object Proxy]'
    );
  }

  function isString(obj) {
    return nativeToString.call(obj) === '[object String]';
  }


  /**
   * Ensure collection is an array.
   *
   * @param {Object} obj
   */
  function ensureArray(obj) {

    if (isArray(obj)) {
      return;
    }

    throw new Error('must supply array');
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has(target, key) {
    return nativeHasOwnProperty.call(target, key);
  }

  /**
   * Find element in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function|Object} matcher
   *
   * @return {Object}
   */
  function find$2(collection, matcher) {

    matcher = toMatcher(matcher);

    let match;

    forEach(collection, function(val, key) {
      if (matcher(val, key)) {
        match = val;

        return false;
      }
    });

    return match;

  }


  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */
  function forEach(collection, iterator) {

    let val,
        result;

    if (isUndefined(collection)) {
      return;
    }

    const convertKey = isArray(collection) ? toNum : identity;

    for (let key in collection) {

      if (has(collection, key)) {
        val = collection[key];

        result = iterator(val, convertKey(key));

        if (result === false) {
          return val;
        }
      }
    }
  }

  /**
   * Return collection without element.
   *
   * @param  {Array} arr
   * @param  {Function} matcher
   *
   * @return {Array}
   */
  function without(arr, matcher) {

    if (isUndefined(arr)) {
      return [];
    }

    ensureArray(arr);

    matcher = toMatcher(matcher);

    return arr.filter(function(el, idx) {
      return !matcher(el, idx);
    });

  }


  /**
   * Transform a collection into another collection
   * by piping each member through the given fn.
   *
   * @param  {Object|Array}   collection
   * @param  {Function} fn
   *
   * @return {Array} transformed collection
   */
  function map$2(collection, fn) {

    let result = [];

    forEach(collection, function(val, key) {
      result.push(fn(val, key));
    });

    return result;
  }


  /**
   * Group collection members by attribute.
   *
   * @param  {Object|Array} collection
   * @param  {Function} extractor
   *
   * @return {Object} map with { attrValue => [ a, b, c ] }
   */
  function groupBy(collection, extractor, grouped = {}) {

    extractor = toExtractor(extractor);

    forEach(collection, function(val) {
      let discriminator = extractor(val) || '_';

      let group = grouped[discriminator];

      if (!group) {
        group = grouped[discriminator] = [];
      }

      group.push(val);
    });

    return grouped;
  }


  function uniqueBy(extractor, ...collections) {

    extractor = toExtractor(extractor);

    let grouped = {};

    forEach(collections, (c) => groupBy(c, extractor, grouped));

    let result = map$2(grouped, function(val, key) {
      return val[0];
    });

    return result;
  }



  /**
   * Sort collection by criteria.
   *
   * @param  {Object|Array} collection
   * @param  {String|Function} extractor
   *
   * @return {Array}
   */
  function sortBy(collection, extractor) {

    extractor = toExtractor(extractor);

    let sorted = [];

    forEach(collection, function(value, key) {
      let disc = extractor(value, key);

      let entry = {
        d: disc,
        v: value
      };

      for (var idx = 0; idx < sorted.length; idx++) {
        let { d } = sorted[idx];

        if (disc < d) {
          sorted.splice(idx, 0, entry);
          return;
        }
      }

      // not inserted, append (!)
      sorted.push(entry);
    });

    return map$2(sorted, (e) => e.v);
  }


  function toExtractor(extractor) {
    return isFunction(extractor) ? extractor : (e) => {
      return e[extractor];
    };
  }


  function toMatcher(matcher) {
    return isFunction(matcher) ? matcher : (e) => {
      return e === matcher;
    };
  }


  function identity(arg) {
    return arg;
  }

  function toNum(arg) {
    return Number(arg);
  }

  /**
   * Debounce fn, calling it only once if the given time
   * elapsed between calls.
   *
   * Lodash-style the function exposes methods to `#clear`
   * and `#flush` to control internal behavior.
   *
   * @param  {Function} fn
   * @param  {Number} timeout
   *
   * @return {Function} debounced function
   */
  function debounce$2(fn, timeout) {

    let timer;

    let lastArgs;
    let lastThis;

    let lastNow;

    function fire(force) {

      let now = Date.now();

      let scheduledDiff = force ? 0 : (lastNow + timeout) - now;

      if (scheduledDiff > 0) {
        return schedule(scheduledDiff);
      }

      fn.apply(lastThis, lastArgs);

      clear();
    }

    function schedule(timeout) {
      timer = setTimeout(fire, timeout);
    }

    function clear() {
      if (timer) {
        clearTimeout(timer);
      }

      timer = lastNow = lastArgs = lastThis = undefined;
    }

    function flush() {
      if (timer) {
        fire(true);
      }

      clear();
    }

    function callback(...args) {
      lastNow = Date.now();

      lastArgs = args;
      lastThis = this;

      // ensure an execution is scheduled
      if (!timer) {
        schedule(timeout);
      }
    }

    callback.flush = flush;
    callback.cancel = clear;

    return callback;
  }

  /**
   * Bind function against target <this>.
   *
   * @param  {Function} fn
   * @param  {Object}   target
   *
   * @return {Function} bound function
   */
  function bind(fn, target) {
    return fn.bind(target);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */
  function assign(target, ...others) {
    return Object.assign(target, ...others);
  }

  /**
   * Sets a nested property of a given object to the specified value.
   *
   * This mutates the object and returns it.
   *
   * @param {Object} target The target of the set operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} value The value to set.
   */
  function set$1(target, path, value) {

    let currentTarget = target;

    forEach(path, function(key, idx) {

      if (typeof key !== 'number' && typeof key !== 'string') {
        throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
      }

      if (key === 'constructor') {
        throw new Error('illegal key: constructor');
      }

      if (key === '__proto__') {
        throw new Error('illegal key: __proto__');
      }

      let nextKey = path[idx + 1];
      let nextTarget = currentTarget[key];

      if (isDefined(nextKey) && isNil(nextTarget)) {
        nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
      }

      if (isUndefined(nextKey)) {
        if (isUndefined(value)) {
          delete currentTarget[key];
        } else {
          currentTarget[key] = value;
        }
      } else {
        currentTarget = nextTarget;
      }
    });

    return target;
  }


  /**
   * Gets a nested property of a given object.
   *
   * @param {Object} target The target of the get operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} [defaultValue] The value to return if no value exists.
   */
  function get(target, path, defaultValue) {

    let currentTarget = target;

    forEach(path, function(key) {

      // accessing nil property yields <undefined>
      if (isNil(currentTarget)) {
        currentTarget = undefined;

        return false;
      }

      currentTarget = currentTarget[key];
    });

    return isUndefined(currentTarget) ? defaultValue : currentTarget;
  }

  var atoa$1 = function atoa (a, n) { return Array.prototype.slice.call(a, n); };

  var si = typeof setImmediate === 'function', tick;
  if (si) {
    tick = function (fn) { setImmediate(fn); };
  } else if (typeof process !== 'undefined' && process.nextTick) {
    tick = process.nextTick;
  } else {
    tick = function (fn) { setTimeout(fn, 0); };
  }

  var ticky$1 = tick;

  var ticky = ticky$1;

  var debounce$1 = function debounce (fn, args, ctx) {
    if (!fn) { return; }
    ticky(function run () {
      fn.apply(ctx || null, args || []);
    });
  };

  var atoa = atoa$1;
  var debounce = debounce$1;

  var emitter$1 = function emitter (thing, options) {
    var opts = options || {};
    var evt = {};
    if (thing === undefined) { thing = {}; }
    thing.on = function (type, fn) {
      if (!evt[type]) {
        evt[type] = [fn];
      } else {
        evt[type].push(fn);
      }
      return thing;
    };
    thing.once = function (type, fn) {
      fn._once = true; // thing.off(fn) still works!
      thing.on(type, fn);
      return thing;
    };
    thing.off = function (type, fn) {
      var c = arguments.length;
      if (c === 1) {
        delete evt[type];
      } else if (c === 0) {
        evt = {};
      } else {
        var et = evt[type];
        if (!et) { return thing; }
        et.splice(et.indexOf(fn), 1);
      }
      return thing;
    };
    thing.emit = function () {
      var args = atoa(arguments);
      return thing.emitterSnapshot(args.shift()).apply(this, args);
    };
    thing.emitterSnapshot = function (type) {
      var et = (evt[type] || []).slice(0);
      return function () {
        var args = atoa(arguments);
        var ctx = this || thing;
        if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }
        et.forEach(function emitter (listen) {
          if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }
          if (listen._once) { thing.off(type, listen); }
        });
        return thing;
      };
    };
    return thing;
  };

  var NativeCustomEvent = commonjsGlobal.CustomEvent;

  function useNative () {
    try {
      var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
      return  'cat' === p.type && 'bar' === p.detail.foo;
    } catch (e) {
    }
    return false;
  }

  /**
   * Cross-browser `CustomEvent` constructor.
   *
   * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
   *
   * @public
   */

  var customEvent$1 = useNative() ? NativeCustomEvent :

  // IE >= 9
  'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {
    var e = document.createEvent('CustomEvent');
    if (params) {
      e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
    } else {
      e.initCustomEvent(type, false, false, void 0);
    }
    return e;
  } :

  // IE <= 8
  function CustomEvent (type, params) {
    var e = document.createEventObject();
    e.type = type;
    if (params) {
      e.bubbles = Boolean(params.bubbles);
      e.cancelable = Boolean(params.cancelable);
      e.detail = params.detail;
    } else {
      e.bubbles = false;
      e.cancelable = false;
      e.detail = void 0;
    }
    return e;
  };

  var eventmap$1 = [];
  var eventname = '';
  var ron = /^on/;

  for (eventname in commonjsGlobal) {
    if (ron.test(eventname)) {
      eventmap$1.push(eventname.slice(2));
    }
  }

  var eventmap_1 = eventmap$1;

  var customEvent = customEvent$1;
  var eventmap = eventmap_1;
  var doc$2 = commonjsGlobal.document;
  var addEvent = addEventEasy;
  var removeEvent = removeEventEasy;
  var hardCache = [];

  if (!commonjsGlobal.addEventListener) {
    addEvent = addEventHard;
    removeEvent = removeEventHard;
  }

  var crossvent$1 = {
    add: addEvent,
    remove: removeEvent,
    fabricate: fabricateEvent
  };

  function addEventEasy (el, type, fn, capturing) {
    return el.addEventListener(type, fn, capturing);
  }

  function addEventHard (el, type, fn) {
    return el.attachEvent('on' + type, wrap$1(el, type, fn));
  }

  function removeEventEasy (el, type, fn, capturing) {
    return el.removeEventListener(type, fn, capturing);
  }

  function removeEventHard (el, type, fn) {
    var listener = unwrap(el, type, fn);
    if (listener) {
      return el.detachEvent('on' + type, listener);
    }
  }

  function fabricateEvent (el, type, model) {
    var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
    if (el.dispatchEvent) {
      el.dispatchEvent(e);
    } else {
      el.fireEvent('on' + type, e);
    }
    function makeClassicEvent () {
      var e;
      if (doc$2.createEvent) {
        e = doc$2.createEvent('Event');
        e.initEvent(type, true, true);
      } else if (doc$2.createEventObject) {
        e = doc$2.createEventObject();
      }
      return e;
    }
    function makeCustomEvent () {
      return new customEvent(type, { detail: model });
    }
  }

  function wrapperFactory (el, type, fn) {
    return function wrapper (originalEvent) {
      var e = originalEvent || commonjsGlobal.event;
      e.target = e.target || e.srcElement;
      e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
      e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
      e.which = e.which || e.keyCode;
      fn.call(el, e);
    };
  }

  function wrap$1 (el, type, fn) {
    var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
    hardCache.push({
      wrapper: wrapper,
      element: el,
      type: type,
      fn: fn
    });
    return wrapper;
  }

  function unwrap (el, type, fn) {
    var i = find$1(el, type, fn);
    if (i) {
      var wrapper = hardCache[i].wrapper;
      hardCache.splice(i, 1); // free up a tad of memory
      return wrapper;
    }
  }

  function find$1 (el, type, fn) {
    var i, item;
    for (i = 0; i < hardCache.length; i++) {
      item = hardCache[i];
      if (item.element === el && item.type === type && item.fn === fn) {
        return i;
      }
    }
  }

  var cache = {};
  var start = '(?:^|\\s)';
  var end = '(?:\\s|$)';

  function lookupClass (className) {
    var cached = cache[className];
    if (cached) {
      cached.lastIndex = 0;
    } else {
      cache[className] = cached = new RegExp(start + className + end, 'g');
    }
    return cached;
  }

  function addClass (el, className) {
    var current = el.className;
    if (!current.length) {
      el.className = className;
    } else if (!lookupClass(className).test(current)) {
      el.className += ' ' + className;
    }
  }

  function rmClass (el, className) {
    el.className = el.className.replace(lookupClass(className), ' ').trim();
  }

  var classes$2 = {
    add: addClass,
    rm: rmClass
  };

  var emitter = emitter$1;
  var crossvent = crossvent$1;
  var classes$1 = classes$2;
  var doc$1 = document;
  var documentElement = doc$1.documentElement;

  function dragula (initialContainers, options) {
    var len = arguments.length;
    if (len === 1 && Array.isArray(initialContainers) === false) {
      options = initialContainers;
      initialContainers = [];
    }
    var _mirror; // mirror image
    var _source; // source container
    var _item; // item being dragged
    var _offsetX; // reference x
    var _offsetY; // reference y
    var _moveX; // reference move x
    var _moveY; // reference move y
    var _initialSibling; // reference sibling when grabbed
    var _currentSibling; // reference sibling now
    var _copy; // item used for copying
    var _renderTimer; // timer for setTimeout renderMirrorImage
    var _lastDropTarget = null; // last container item was over
    var _grabbed; // holds mousedown context until first mousemove

    var o = options || {};
    if (o.moves === void 0) { o.moves = always; }
    if (o.accepts === void 0) { o.accepts = always; }
    if (o.invalid === void 0) { o.invalid = invalidTarget; }
    if (o.containers === void 0) { o.containers = initialContainers || []; }
    if (o.isContainer === void 0) { o.isContainer = never; }
    if (o.copy === void 0) { o.copy = false; }
    if (o.copySortSource === void 0) { o.copySortSource = false; }
    if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
    if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
    if (o.direction === void 0) { o.direction = 'vertical'; }
    if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
    if (o.mirrorContainer === void 0) { o.mirrorContainer = doc$1.body; }

    var drake = emitter({
      containers: o.containers,
      start: manualStart,
      end: end,
      cancel: cancel,
      remove: remove,
      destroy: destroy,
      canMove: canMove,
      dragging: false
    });

    if (o.removeOnSpill === true) {
      drake.on('over', spillOver).on('out', spillOut);
    }

    events();

    return drake;

    function isContainer (el) {
      return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
    }

    function events (remove) {
      var op = remove ? 'remove' : 'add';
      touchy(documentElement, op, 'mousedown', grab);
      touchy(documentElement, op, 'mouseup', release);
    }

    function eventualMovements (remove) {
      var op = remove ? 'remove' : 'add';
      touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
    }

    function movements (remove) {
      var op = remove ? 'remove' : 'add';
      crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8
      crossvent[op](documentElement, 'click', preventGrabbed);
    }

    function destroy () {
      events(true);
      release({});
    }

    function preventGrabbed (e) {
      if (_grabbed) {
        e.preventDefault();
      }
    }

    function grab (e) {
      _moveX = e.clientX;
      _moveY = e.clientY;

      var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
      if (ignore) {
        return; // we only care about honest-to-god left clicks and touch events
      }
      var item = e.target;
      var context = canStart(item);
      if (!context) {
        return;
      }
      _grabbed = context;
      eventualMovements();
      if (e.type === 'mousedown') {
        if (isInput$1(item)) { // see also: https://github.com/bevacqua/dragula/issues/208
          item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
        } else {
          e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
        }
      }
    }

    function startBecauseMouseMoved (e) {
      if (!_grabbed) {
        return;
      }
      if (whichMouseButton(e) === 0) {
        release({});
        return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
      }

      // truthy check fixes #239, equality fixes #207, fixes #501
      if ((e.clientX !== void 0 && Math.abs(e.clientX - _moveX) <= (o.slideFactorX || 0)) &&
        (e.clientY !== void 0 && Math.abs(e.clientY - _moveY) <= (o.slideFactorY || 0))) {
        return;
      }

      if (o.ignoreInputTextSelection) {
        var clientX = getCoord('clientX', e) || 0;
        var clientY = getCoord('clientY', e) || 0;
        var elementBehindCursor = doc$1.elementFromPoint(clientX, clientY);
        if (isInput$1(elementBehindCursor)) {
          return;
        }
      }

      var grabbed = _grabbed; // call to end() unsets _grabbed
      eventualMovements(true);
      movements();
      end();
      start(grabbed);

      var offset = getOffset(_item);
      _offsetX = getCoord('pageX', e) - offset.left;
      _offsetY = getCoord('pageY', e) - offset.top;

      classes$1.add(_copy || _item, 'gu-transit');
      renderMirrorImage();
      drag(e);
    }

    function canStart (item) {
      if (drake.dragging && _mirror) {
        return;
      }
      if (isContainer(item)) {
        return; // don't drag container itself
      }
      var handle = item;
      while (getParent(item) && isContainer(getParent(item)) === false) {
        if (o.invalid(item, handle)) {
          return;
        }
        item = getParent(item); // drag target should be a top element
        if (!item) {
          return;
        }
      }
      var source = getParent(item);
      if (!source) {
        return;
      }
      if (o.invalid(item, handle)) {
        return;
      }

      var movable = o.moves(item, source, handle, nextEl(item));
      if (!movable) {
        return;
      }

      return {
        item: item,
        source: source
      };
    }

    function canMove (item) {
      return !!canStart(item);
    }

    function manualStart (item) {
      var context = canStart(item);
      if (context) {
        start(context);
      }
    }

    function start (context) {
      if (isCopy(context.item, context.source)) {
        _copy = context.item.cloneNode(true);
        drake.emit('cloned', _copy, context.item, 'copy');
      }

      _source = context.source;
      _item = context.item;
      _initialSibling = _currentSibling = nextEl(context.item);

      drake.dragging = true;
      drake.emit('drag', _item, _source);
    }

    function invalidTarget () {
      return false;
    }

    function end () {
      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      drop(item, getParent(item));
    }

    function ungrab () {
      _grabbed = false;
      eventualMovements(true);
      movements(true);
    }

    function release (e) {
      ungrab();

      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      var clientX = getCoord('clientX', e) || 0;
      var clientY = getCoord('clientY', e) || 0;
      var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
      var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
      if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {
        drop(item, dropTarget);
      } else if (o.removeOnSpill) {
        remove();
      } else {
        cancel();
      }
    }

    function drop (item, target) {
      var parent = getParent(item);
      if (_copy && o.copySortSource && target === _source) {
        parent.removeChild(_item);
      }
      if (isInitialPlacement(target)) {
        drake.emit('cancel', item, _source, _source);
      } else {
        drake.emit('drop', item, target, _source, _currentSibling);
      }
      cleanup();
    }

    function remove () {
      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      var parent = getParent(item);
      if (parent) {
        parent.removeChild(item);
      }
      drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
      cleanup();
    }

    function cancel (revert) {
      if (!drake.dragging) {
        return;
      }
      var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
      var item = _copy || _item;
      var parent = getParent(item);
      var initial = isInitialPlacement(parent);
      if (initial === false && reverts) {
        if (_copy) {
          if (parent) {
            parent.removeChild(_copy);
          }
        } else {
          _source.insertBefore(item, _initialSibling);
        }
      }
      if (initial || reverts) {
        drake.emit('cancel', item, _source, _source);
      } else {
        drake.emit('drop', item, parent, _source, _currentSibling);
      }
      cleanup();
    }

    function cleanup () {
      var item = _copy || _item;
      ungrab();
      removeMirrorImage();
      if (item) {
        classes$1.rm(item, 'gu-transit');
      }
      if (_renderTimer) {
        clearTimeout(_renderTimer);
      }
      drake.dragging = false;
      if (_lastDropTarget) {
        drake.emit('out', item, _lastDropTarget, _source);
      }
      drake.emit('dragend', item);
      _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
    }

    function isInitialPlacement (target, s) {
      var sibling;
      if (s !== void 0) {
        sibling = s;
      } else if (_mirror) {
        sibling = _currentSibling;
      } else {
        sibling = nextEl(_copy || _item);
      }
      return target === _source && sibling === _initialSibling;
    }

    function findDropTarget (elementBehindCursor, clientX, clientY) {
      var target = elementBehindCursor;
      while (target && !accepted()) {
        target = getParent(target);
      }
      return target;

      function accepted () {
        var droppable = isContainer(target);
        if (droppable === false) {
          return false;
        }

        var immediate = getImmediateChild(target, elementBehindCursor);
        var reference = getReference(target, immediate, clientX, clientY);
        var initial = isInitialPlacement(target, reference);
        if (initial) {
          return true; // should always be able to drop it right back where it was
        }
        return o.accepts(_item, target, _source, reference);
      }
    }

    function drag (e) {
      if (!_mirror) {
        return;
      }
      e.preventDefault();

      var clientX = getCoord('clientX', e) || 0;
      var clientY = getCoord('clientY', e) || 0;
      var x = clientX - _offsetX;
      var y = clientY - _offsetY;

      _mirror.style.left = x + 'px';
      _mirror.style.top = y + 'px';

      var item = _copy || _item;
      var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
      var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
      var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
      if (changed || dropTarget === null) {
        out();
        _lastDropTarget = dropTarget;
        over();
      }
      var parent = getParent(item);
      if (dropTarget === _source && _copy && !o.copySortSource) {
        if (parent) {
          parent.removeChild(item);
        }
        return;
      }
      var reference;
      var immediate = getImmediateChild(dropTarget, elementBehindCursor);
      if (immediate !== null) {
        reference = getReference(dropTarget, immediate, clientX, clientY);
      } else if (o.revertOnSpill === true && !_copy) {
        reference = _initialSibling;
        dropTarget = _source;
      } else {
        if (_copy && parent) {
          parent.removeChild(item);
        }
        return;
      }
      if (
        (reference === null && changed) ||
        reference !== item &&
        reference !== nextEl(item)
      ) {
        _currentSibling = reference;
        dropTarget.insertBefore(item, reference);
        drake.emit('shadow', item, dropTarget, _source);
      }
      function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
      function over () { if (changed) { moved('over'); } }
      function out () { if (_lastDropTarget) { moved('out'); } }
    }

    function spillOver (el) {
      classes$1.rm(el, 'gu-hide');
    }

    function spillOut (el) {
      if (drake.dragging) { classes$1.add(el, 'gu-hide'); }
    }

    function renderMirrorImage () {
      if (_mirror) {
        return;
      }
      var rect = _item.getBoundingClientRect();
      _mirror = _item.cloneNode(true);
      _mirror.style.width = getRectWidth(rect) + 'px';
      _mirror.style.height = getRectHeight(rect) + 'px';
      classes$1.rm(_mirror, 'gu-transit');
      classes$1.add(_mirror, 'gu-mirror');
      o.mirrorContainer.appendChild(_mirror);
      touchy(documentElement, 'add', 'mousemove', drag);
      classes$1.add(o.mirrorContainer, 'gu-unselectable');
      drake.emit('cloned', _mirror, _item, 'mirror');
    }

    function removeMirrorImage () {
      if (_mirror) {
        classes$1.rm(o.mirrorContainer, 'gu-unselectable');
        touchy(documentElement, 'remove', 'mousemove', drag);
        getParent(_mirror).removeChild(_mirror);
        _mirror = null;
      }
    }

    function getImmediateChild (dropTarget, target) {
      var immediate = target;
      while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
        immediate = getParent(immediate);
      }
      if (immediate === documentElement) {
        return null;
      }
      return immediate;
    }

    function getReference (dropTarget, target, x, y) {
      var horizontal = o.direction === 'horizontal';
      var reference = target !== dropTarget ? inside() : outside();
      return reference;

      function outside () { // slower, but able to figure out any position
        var len = dropTarget.children.length;
        var i;
        var el;
        var rect;
        for (i = 0; i < len; i++) {
          el = dropTarget.children[i];
          rect = el.getBoundingClientRect();
          if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
          if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
        }
        return null;
      }

      function inside () { // faster, but only available if dropped inside a child element
        var rect = target.getBoundingClientRect();
        if (horizontal) {
          return resolve(x > rect.left + getRectWidth(rect) / 2);
        }
        return resolve(y > rect.top + getRectHeight(rect) / 2);
      }

      function resolve (after) {
        return after ? nextEl(target) : target;
      }
    }

    function isCopy (item, container) {
      return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
    }
  }

  function touchy (el, op, type, fn) {
    var touch = {
      mouseup: 'touchend',
      mousedown: 'touchstart',
      mousemove: 'touchmove'
    };
    var pointers = {
      mouseup: 'pointerup',
      mousedown: 'pointerdown',
      mousemove: 'pointermove'
    };
    var microsoft = {
      mouseup: 'MSPointerUp',
      mousedown: 'MSPointerDown',
      mousemove: 'MSPointerMove'
    };
    if (commonjsGlobal.navigator.pointerEnabled) {
      crossvent[op](el, pointers[type], fn);
    } else if (commonjsGlobal.navigator.msPointerEnabled) {
      crossvent[op](el, microsoft[type], fn);
    } else {
      crossvent[op](el, touch[type], fn);
      crossvent[op](el, type, fn);
    }
  }

  function whichMouseButton (e) {
    if (e.touches !== void 0) { return e.touches.length; }
    if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
    if (e.buttons !== void 0) { return e.buttons; }
    var button = e.button;
    if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
      return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
    }
  }

  function getOffset (el) {
    var rect = el.getBoundingClientRect();
    return {
      left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
      top: rect.top + getScroll('scrollTop', 'pageYOffset')
    };
  }

  function getScroll (scrollProp, offsetProp) {
    if (typeof commonjsGlobal[offsetProp] !== 'undefined') {
      return commonjsGlobal[offsetProp];
    }
    if (documentElement.clientHeight) {
      return documentElement[scrollProp];
    }
    return doc$1.body[scrollProp];
  }

  function getElementBehindPoint (point, x, y) {
    point = point || {};
    var state = point.className || '';
    var el;
    point.className += ' gu-hide';
    el = doc$1.elementFromPoint(x, y);
    point.className = state;
    return el;
  }

  function never () { return false; }
  function always () { return true; }
  function getRectWidth (rect) { return rect.width || (rect.right - rect.left); }
  function getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }
  function getParent (el) { return el.parentNode === doc$1 ? null : el.parentNode; }
  function isInput$1 (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }
  function isEditable (el) {
    if (!el) { return false; } // no parents were editable
    if (el.contentEditable === 'false') { return false; } // stop the lookup
    if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
    return isEditable(getParent(el)); // contentEditable is set to 'inherit'
  }

  function nextEl (el) {
    return el.nextElementSibling || manually();
    function manually () {
      var sibling = el;
      do {
        sibling = sibling.nextSibling;
      } while (sibling && sibling.nodeType !== 1);
      return sibling;
    }
  }

  function getEventHost (e) {
    // on touchend event, we have to use `e.changedTouches`
    // see http://stackoverflow.com/questions/7192563/touchend-event-properties
    // see https://github.com/bevacqua/dragula/issues/34
    if (e.targetTouches && e.targetTouches.length) {
      return e.targetTouches[0];
    }
    if (e.changedTouches && e.changedTouches.length) {
      return e.changedTouches[0];
    }
    return e;
  }

  function getCoord (coord, e) {
    var host = getEventHost(e);
    var missMap = {
      pageX: 'clientX', // IE8
      pageY: 'clientY' // IE8
    };
    if (coord in missMap && !(coord in host) && missMap[coord] in host) {
      coord = missMap[coord];
    }
    return host[coord];
  }

  var dragula_1 = dragula;

  function _mergeNamespaces$1(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  /**
   * Taken from https://github.com/component/classes
   *
   * Without the component bits.
   */

  /**
   * toString reference.
   */

  const toString$1 = Object.prototype.toString;

  /**
   * Wrap `el` in a `ClassList`.
   *
   * @param {Element} el
   * @return {ClassList}
   * @api public
   */

  function classes(el) {
    return new ClassList(el);
  }

  /**
   * Initialize a new ClassList for `el`.
   *
   * @param {Element} el
   * @api private
   */

  function ClassList(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
   * Add class `name` if not already present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.add = function(name) {
    this.list.add(name);
    return this;
  };

  /**
   * Remove class `name` when present, or
   * pass a regular expression to remove
   * any which match.
   *
   * @param {String|RegExp} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.remove = function(name) {
    if ('[object RegExp]' == toString$1.call(name)) {
      return this.removeMatching(name);
    }

    this.list.remove(name);
    return this;
  };

  /**
   * Remove all classes matching `re`.
   *
   * @param {RegExp} re
   * @return {ClassList}
   * @api private
   */

  ClassList.prototype.removeMatching = function(re) {
    const arr = this.array();
    for (let i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
   * Toggle class `name`, can force state via `force`.
   *
   * For browsers that support classList, but do not support `force` yet,
   * the mistake will be detected and corrected.
   *
   * @param {String} name
   * @param {Boolean} force
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.toggle = function(name, force) {
    if ('undefined' !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  };

  /**
   * Return an array of classes.
   *
   * @return {Array}
   * @api public
   */

  ClassList.prototype.array = function() {
    return Array.from(this.list);
  };

  /**
   * Check if class `name` is present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.has =
  ClassList.prototype.contains = function(name) {
    return this.list.contains(name);
  };

  /**
   * @param { HTMLElement } element
   * @param { String } selector
   *
   * @return { boolean }
   */
  function matches(element, selector) {
    return element && typeof element.matches === 'function' && element.matches(selector);
  }

  /**
   * Closest
   *
   * @param {Element} el
   * @param {String} selector
   * @param {Boolean} checkYourSelf (optional)
   */
  function closest(element, selector, checkYourSelf) {
    var currentElem = checkYourSelf ? element : element.parentNode;

    while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE &&
        currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {

      if (matches(currentElem, selector)) {
        return currentElem;
      }

      currentElem = currentElem.parentNode;
    }

    return matches(currentElem, selector) ? currentElem : null;
  }

  var componentEvent$1 = {};

  var bind$1$1 = window.addEventListener ? 'addEventListener' : 'attachEvent',
      unbind$1$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
      prefix$1 = bind$1$1 !== 'addEventListener' ? 'on' : '';

  /**
   * Bind `el` event `type` to `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var bind_1 = componentEvent$1.bind = function(el, type, fn, capture){
    el[bind$1$1](prefix$1 + type, fn, capture || false);
    return fn;
  };

  /**
   * Unbind `el` event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var unbind_1 = componentEvent$1.unbind = function(el, type, fn, capture){
    el[unbind$1$1](prefix$1 + type, fn, capture || false);
    return fn;
  };

  var event = /*#__PURE__*/_mergeNamespaces$1({
    __proto__: null,
    bind: bind_1,
    unbind: unbind_1,
    'default': componentEvent$1
  }, [componentEvent$1]);

  /**
   * Expose `parse`.
   */

  var domify$2 = parse$2;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug$1 = false;
  var bugTestDiv$1;
  if (typeof document !== 'undefined') {
    bugTestDiv$1 = document.createElement('div');
    // Setup
    bugTestDiv$1.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug$1 = !bugTestDiv$1.getElementsByTagName('link').length;
    bugTestDiv$1 = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map$1 = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug$1 ? [1, 'X<div>', '</div>'] : [0, '', '']
  };

  map$1.td =
  map$1.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map$1.option =
  map$1.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map$1.thead =
  map$1.tbody =
  map$1.colgroup =
  map$1.caption =
  map$1.tfoot = [1, '<table>', '</table>'];

  map$1.polyline =
  map$1.ellipse =
  map$1.polygon =
  map$1.circle =
  map$1.text =
  map$1.line =
  map$1.path =
  map$1.rect =
  map$1.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse$2(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);

    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = Object.prototype.hasOwnProperty.call(map$1, tag) ? map$1[tag] : map$1._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }

    return fragment;
  }

  var domify$1$1 = domify$2;

  function query(selector, el) {
    el = el || document;

    return el.querySelector(selector);
  }

  var arrayMoveExports = {};
  var arrayMove$1 = {
    get exports(){ return arrayMoveExports; },
    set exports(v){ arrayMoveExports = v; },
  };

  const arrayMoveMutate = (array, from, to) => {
  	const startIndex = from < 0 ? array.length + from : from;

  	if (startIndex >= 0 && startIndex < array.length) {
  		const endIndex = to < 0 ? array.length + to : to;

  		const [item] = array.splice(from, 1);
  		array.splice(endIndex, 0, item);
  	}
  };

  const arrayMove = (array, from, to) => {
  	array = [...array];
  	arrayMoveMutate(array, from, to);
  	return array;
  };

  arrayMove$1.exports = arrayMove;
  var mutate = arrayMoveExports.mutate = arrayMoveMutate;

  /**
  The data structure for documents. @nonabstract
  */
  let Text$1 = class Text {
      /**
      @internal
      */
      constructor() { }
      /**
      Get the line description around the given position.
      */
      lineAt(pos) {
          if (pos < 0 || pos > this.length)
              throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n) {
          if (n < 1 || n > this.lines)
              throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
          return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from, to, text) {
          let parts = [];
          this.decompose(0, from, parts, 2 /* Open.To */);
          if (text.length)
              text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
          this.decompose(to, this.length, parts, 1 /* Open.From */);
          return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
          return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from, to = this.length) {
          let parts = [];
          this.decompose(from, to, parts, 0);
          return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
          if (other == this)
              return true;
          if (other.length != this.length || other.lines != this.lines)
              return false;
          let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
          let a = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start, pos = start;;) {
              a.next(skip);
              b.next(skip);
              skip = 0;
              if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                  return false;
              pos += a.value.length;
              if (a.done || pos >= end)
                  return true;
          }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) { return new RawTextCursor(this, dir); }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from, to) {
          let inner;
          if (from == null) {
              inner = this.iter();
          }
          else {
              if (to == null)
                  to = this.lines + 1;
              let start = this.line(from).from;
              inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
      }
      /**
      @internal
      */
      toString() { return this.sliceString(0); }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
      }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text) {
          if (text.length == 0)
              throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
              return Text$1.empty;
          return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
  };
  // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  class TextLeaf extends Text$1 {
      constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
      }
      get lines() { return this.text.length; }
      get children() { return null; }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let string = this.text[i], end = offset + string.length;
              if ((isLine ? line : end) >= target)
                  return new Line(offset, end, line, string);
              offset = end + 1;
              line++;
          }
      }
      decompose(from, to, target, open) {
          let text = from <= 0 && to >= this.length ? this
              : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
          if (open & 1 /* Open.From */) {
              let prev = target.pop();
              let joined = appendText(text.text, prev.text.slice(), 0, text.length);
              if (joined.length <= 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(joined, prev.length + text.length));
              }
              else {
                  let mid = joined.length >> 1;
                  target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
              }
          }
          else {
              target.push(text);
          }
      }
      replace(from, to, text) {
          if (!(text instanceof TextLeaf))
              return super.replace(from, to, text);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
          let newLen = this.length + text.length - (to - from);
          if (lines.length <= 32 /* Tree.Branch */)
              return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
              let line = this.text[i], end = pos + line.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += line.slice(Math.max(0, from - pos), to - pos);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let line of this.text)
              target.push(line);
      }
      scanIdentical() { return 0; }
      static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
              part.push(line);
              len += line.length + 1;
              if (part.length == 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(part, len));
                  part = [];
                  len = -1;
              }
          }
          if (len > -1)
              target.push(new TextLeaf(part, len));
          return target;
      }
  }
  // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  class TextNode extends Text$1 {
      constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
              this.lines += child.lines;
      }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
              if ((isLine ? endLine : end) >= target)
                  return child.lineInner(target, isLine, line, offset);
              offset = end + 1;
              line = endLine + 1;
          }
      }
      decompose(from, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (from <= end && to >= pos) {
                  let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                  if (pos >= from && end <= to && !childOpen)
                      target.push(child);
                  else
                      child.decompose(from - pos, to - pos, target, childOpen);
              }
              pos = end + 1;
          }
      }
      replace(from, to, text) {
          if (text.lines < this.lines)
              for (let i = 0, pos = 0; i < this.children.length; i++) {
                  let child = this.children[i], end = pos + child.length;
                  // Fast path: if the change only affects one child and the
                  // child's size remains in the acceptable range, only update
                  // that child
                  if (from >= pos && to <= end) {
                      let updated = child.replace(from - pos, to - pos, text);
                      let totalLines = this.lines - child.lines + updated.lines;
                      if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                          updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                          let copy = this.children.slice();
                          copy[i] = updated;
                          return new TextNode(copy, this.length - (to - from) + text.length);
                      }
                      return super.replace(pos, end, updated);
                  }
                  pos = end + 1;
              }
          return super.replace(from, to, text);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += child.sliceString(from - pos, to - pos, lineSep);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let child of this.children)
              child.flatten(target);
      }
      scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
              return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
              : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (;; iA += dir, iB += dir) {
              if (iA == eA || iB == eB)
                  return length;
              let chA = this.children[iA], chB = other.children[iB];
              if (chA != chB)
                  return length + chA.scanIdentical(chB, dir);
              length += chA.length + 1;
          }
      }
      static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
          let lines = 0;
          for (let ch of children)
              lines += ch.lines;
          if (lines < 32 /* Tree.Branch */) {
              let flat = [];
              for (let ch of children)
                  ch.flatten(flat);
              return new TextLeaf(flat, length);
          }
          let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add(child) {
              let last;
              if (child.lines > maxChunk && child instanceof TextNode) {
                  for (let node of child.children)
                      add(node);
              }
              else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                  flush();
                  chunked.push(child);
              }
              else if (child instanceof TextLeaf && currentLines &&
                  (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                  child.lines + last.lines <= 32 /* Tree.Branch */) {
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
              }
              else {
                  if (currentLines + child.lines > chunk)
                      flush();
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk.push(child);
              }
          }
          function flush() {
              if (currentLines == 0)
                  return;
              chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
              currentLen = -1;
              currentLines = currentChunk.length = 0;
          }
          for (let child of children)
              add(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
  }
  Text$1.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
      let length = -1;
      for (let line of text)
          length += line.length + 1;
      return length;
  }
  function appendText(text, target, from = 0, to = 1e9) {
      for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
          let line = text[i], end = pos + line.length;
          if (end >= from) {
              if (end > to)
                  line = line.slice(0, to - pos);
              if (pos < from)
                  line = line.slice(from - pos);
              if (first) {
                  target[target.length - 1] += line;
                  first = false;
              }
              else
                  target.push(line);
          }
          pos = end + 1;
      }
      return target;
  }
  function sliceText(text, from, to) {
      return appendText(text, [""], from, to);
  }
  class RawTextCursor {
      constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
      }
      nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (;;) {
              let last = this.nodes.length - 1;
              let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
              let size = top instanceof TextLeaf ? top.text.length : top.children.length;
              if (offset == (dir > 0 ? size : 0)) {
                  if (last == 0) {
                      this.done = true;
                      this.value = "";
                      return this;
                  }
                  if (dir > 0)
                      this.offsets[last - 1]++;
                  this.nodes.pop();
                  this.offsets.pop();
              }
              else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                  this.offsets[last] += dir;
                  if (skip == 0) {
                      this.lineBreak = true;
                      this.value = "\n";
                      return this;
                  }
                  skip--;
              }
              else if (top instanceof TextLeaf) {
                  // Move to the next string
                  let next = top.text[offset + (dir < 0 ? -1 : 0)];
                  this.offsets[last] += dir;
                  if (next.length > Math.max(0, skip)) {
                      this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                      return this;
                  }
                  skip -= next.length;
              }
              else {
                  let next = top.children[offset + (dir < 0 ? -1 : 0)];
                  if (skip > next.length) {
                      skip -= next.length;
                      this.offsets[last] += dir;
                  }
                  else {
                      if (dir < 0)
                          this.offsets[last]--;
                      this.nodes.push(next);
                      this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                  }
              }
          }
      }
      next(skip = 0) {
          if (skip < 0) {
              this.nextInner(-skip, (-this.dir));
              skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
      }
  }
  class PartialTextCursor {
      constructor(text, start, end) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
      }
      nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
              this.value = "";
              this.done = true;
              return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
              skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
      }
      next(skip = 0) {
          if (skip < 0)
              skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
              skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
  }
  class LineCursor {
      constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
      }
      next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done) {
              this.done = true;
              this.value = "";
          }
          else if (lineBreak) {
              if (this.afterBreak) {
                  this.value = "";
              }
              else {
                  this.afterBreak = true;
                  this.next();
              }
          }
          else {
              this.value = value;
              this.afterBreak = false;
          }
          return this;
      }
      get lineBreak() { return false; }
  }
  if (typeof Symbol != "undefined") {
      Text$1.prototype[Symbol.iterator] = function () { return this.iter(); };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
          LineCursor.prototype[Symbol.iterator] = function () { return this; };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  class Line {
      /**
      @internal
      */
      constructor(
      /**
      The position of the start of the line.
      */
      from, 
      /**
      The position at the end of the line (_before_ the line break,
      or at the end of document for the last line).
      */
      to, 
      /**
      This line's line number (1-based).
      */
      number, 
      /**
      The line's content.
      */
      text) {
          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() { return this.to - this.from; }
  }

  // Compressed representation of the Grapheme_Cluster_Break=Extend
  // information from
  // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
  // Each pair of elements represents a range, as an offet from the
  // previous range and a length. Numbers are in base-36, with the empty
  // string being a shorthand for 1.
  let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
  // Convert offsets into absolute values
  for (let i = 1; i < extend.length; i++)
      extend[i] += extend[i - 1];
  function isExtendingChar(code) {
      for (let i = 1; i < extend.length; i += 2)
          if (extend[i] > code)
              return extend[i - 1] <= code;
      return false;
  }
  function isRegionalIndicator(code) {
      return code >= 0x1F1E6 && code <= 0x1F1FF;
  }
  const ZWJ = 0x200d;
  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
      return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
      if (pos == str.length)
          return pos;
      // If pos is in the middle of a surrogate pair, move to its start
      if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
          pos--;
      let prev = codePointAt(str, pos);
      pos += codePointSize(prev);
      while (pos < str.length) {
          let next = codePointAt(str, pos);
          if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
              pos += codePointSize(next);
              prev = next;
          }
          else if (isRegionalIndicator(next)) {
              let countBefore = 0, i = pos - 2;
              while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                  countBefore++;
                  i -= 2;
              }
              if (countBefore % 2 == 0)
                  break;
              else
                  pos += 2;
          }
          else {
              break;
          }
      }
      return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
      while (pos > 0) {
          let found = nextClusterBreak(str, pos - 2, includeExtending);
          if (found < pos)
              return found;
          pos--;
      }
      return 0;
  }
  function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
  function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh(code0) || pos + 1 == str.length)
          return code0;
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow(code1))
          return code0;
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint(code) {
      if (code <= 0xffff)
          return String.fromCharCode(code);
      code -= 0x10000;
      return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up a JavaScript string.
  */
  function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

  const DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/(function (MapMode) {
      /**
      Map a position to a valid new position, even when its context
      was deleted.
      */
      MapMode[MapMode["Simple"] = 0] = "Simple";
      /**
      Return null if deletion happens across the position.
      */
      MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
      /**
      Return null if the character _before_ the position is deleted.
      */
      MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
      /**
      Return null if the character _after_ the position is deleted.
      */
      MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode})(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  class ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      sections) {
          this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
              result += this.sections[i];
          return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
              let ins = this.sections[i + 1];
              result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0) {
                  f(posA, posB, len);
                  posB += len;
              }
              else {
                  posB += ins;
              }
              posA += len;
          }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0)
                  sections.push(len, ins);
              else
                  sections.push(ins, len);
          }
          return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `other` happened before the ones in `this`.
      */
      mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
      mapPos(pos, assoc = -1, mode = MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
              if (ins < 0) {
                  if (endA > pos)
                      return posB + (pos - posA);
                  posB += len;
              }
              else {
                  if (mode != MapMode.Simple && endA >= pos &&
                      (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                          mode == MapMode.TrackBefore && posA < pos ||
                          mode == MapMode.TrackAfter && endA > pos))
                      return null;
                  if (endA > pos || endA == pos && assoc < 0 && !len)
                      return pos == posA || assoc < 0 ? posB : posB + ins;
                  posB += ins;
              }
              posA = endA;
          }
          if (pos > posA)
              throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from, to = from) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
              let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
              if (ins >= 0 && pos <= to && end >= from)
                  return pos < from && end > to ? "cover" : true;
              pos = end;
          }
          return false;
      }
      /**
      @internal
      */
      toString() {
          let result = "";
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() { return this.sections; }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
              throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json);
      }
      /**
      @internal
      */
      static create(sections) { return new ChangeDesc(sections); }
  }
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  class ChangeSet extends ChangeDesc {
      constructor(sections, 
      /**
      @internal
      */
      inserted) {
          super(sections);
          this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc) {
          if (this.length != doc.length)
              throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
          return doc;
      }
      mapDesc(other, before = false) { return mapSet(this, other, before, true); }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
              let len = sections[i], ins = sections[i + 1];
              if (ins >= 0) {
                  sections[i] = ins;
                  sections[i + 1] = len;
                  let index = i >> 1;
                  while (inserted.length < index)
                      inserted.push(Text$1.empty);
                  inserted.push(len ? doc.slice(pos, pos + len) : Text$1.empty);
              }
              pos += len;
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() { return ChangeDesc.create(this.sections); }
      /**
      @internal
      */
      filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done: for (let i = 0, pos = 0;;) {
              let next = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next || pos == next && iter.len == 0) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, next - pos);
                  addSection(filteredSections, len, -1);
                  let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                  addSection(resultSections, len, ins);
                  if (ins > 0)
                      addInsert(resultInserted, resultSections, iter.text);
                  iter.forward(len);
                  pos += len;
              }
              let end = ranges[i++];
              while (pos < end) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, end - pos);
                  addSection(resultSections, len, -1);
                  addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                  iter.forward(len);
                  pos += len;
              }
          }
          return { changes: new ChangeSet(resultSections, resultInserted),
              filtered: ChangeDesc.create(filteredSections) };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
              let len = this.sections[i], ins = this.sections[i + 1];
              if (ins < 0)
                  parts.push(len);
              else if (ins == 0)
                  parts.push([len]);
              else
                  parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
              if (!force && !sections.length)
                  return;
              if (pos < length)
                  addSection(sections, length - pos, -1);
              let set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
          }
          function process(spec) {
              if (Array.isArray(spec)) {
                  for (let sub of spec)
                      process(sub);
              }
              else if (spec instanceof ChangeSet) {
                  if (spec.length != length)
                      throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                  flush();
                  total = total ? total.compose(spec.map(total)) : spec;
              }
              else {
                  let { from, to = from, insert } = spec;
                  if (from > to || from < 0 || to > length)
                      throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                  let insText = !insert ? Text$1.empty : typeof insert == "string" ? Text$1.of(insert.split(lineSep || DefaultSplit)) : insert;
                  let insLen = insText.length;
                  if (from == to && insLen == 0)
                      return;
                  if (from < pos)
                      flush();
                  if (from > pos)
                      addSection(sections, from - pos, -1);
                  addSection(sections, to - from, insLen);
                  addInsert(inserted, sections, insText);
                  pos = to;
              }
          }
          process(changes);
          flush(!total);
          return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json))
              throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json.length; i++) {
              let part = json[i];
              if (typeof part == "number") {
                  sections.push(part, -1);
              }
              else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                  throw new RangeError("Invalid JSON representation of ChangeSet");
              }
              else if (part.length == 1) {
                  sections.push(part[0], 0);
              }
              else {
                  while (inserted.length < i)
                      inserted.push(Text$1.empty);
                  inserted[i] = Text$1.of(part.slice(1));
                  sections.push(part[0], inserted[i].length);
              }
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
          return new ChangeSet(sections, inserted);
      }
  }
  function addSection(sections, len, ins, forceJoin = false) {
      if (len == 0 && ins <= 0)
          return;
      let last = sections.length - 2;
      if (last >= 0 && ins <= 0 && ins == sections[last + 1])
          sections[last] += len;
      else if (len == 0 && sections[last] == 0)
          sections[last + 1] += ins;
      else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
      }
      else
          sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
      if (value.length == 0)
          return;
      let index = (sections.length - 2) >> 1;
      if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
      }
      else {
          while (values.length < index)
              values.push(Text$1.empty);
          values.push(value);
      }
  }
  function iterChanges(desc, f, individual) {
      let inserted = desc.inserted;
      for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
          let len = desc.sections[i++], ins = desc.sections[i++];
          if (ins < 0) {
              posA += len;
              posB += len;
          }
          else {
              let endA = posA, endB = posB, text = Text$1.empty;
              for (;;) {
                  endA += len;
                  endB += ins;
                  if (ins && inserted)
                      text = text.append(inserted[(i - 2) >> 1]);
                  if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                      break;
                  len = desc.sections[i++];
                  ins = desc.sections[i++];
              }
              f(posA, endA, posB, endB, text);
              posA = endA;
              posB = endB;
          }
      }
  }
  function mapSet(setA, setB, before, mkSet = false) {
      // Produce a copy of setA that applies to the document after setB
      // has been applied (assuming both start at the same document).
      let sections = [], insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      // Iterate over both sets in parallel. inserted tracks, for changes
      // in A that have to be processed piece-by-piece, whether their
      // content has been inserted already, and refers to the section
      // index.
      for (let inserted = -1;;) {
          if (a.ins == -1 && b.ins == -1) {
              // Move across ranges skipped by both sets.
              let len = Math.min(a.len, b.len);
              addSection(sections, len, -1);
              a.forward(len);
              b.forward(len);
          }
          else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
              // If there's a change in B that comes before the next change in
              // A (ordered by start pos, then len, then before flag), skip
              // that (and process any changes in A it covers).
              let len = b.len;
              addSection(sections, b.ins, -1);
              while (len) {
                  let piece = Math.min(a.len, len);
                  if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                      addSection(sections, 0, a.ins);
                      if (insert)
                          addInsert(insert, sections, a.text);
                      inserted = a.i;
                  }
                  a.forward(piece);
                  len -= piece;
              }
              b.next();
          }
          else if (a.ins >= 0) {
              // Process the part of a change in A up to the start of the next
              // non-deletion change in B (if overlapping).
              let len = 0, left = a.len;
              while (left) {
                  if (b.ins == -1) {
                      let piece = Math.min(left, b.len);
                      len += piece;
                      left -= piece;
                      b.forward(piece);
                  }
                  else if (b.ins == 0 && b.len < left) {
                      left -= b.len;
                      b.next();
                  }
                  else {
                      break;
                  }
              }
              addSection(sections, len, inserted < a.i ? a.ins : 0);
              if (insert && inserted < a.i)
                  addInsert(insert, sections, a.text);
              inserted = a.i;
              a.forward(a.len - left);
          }
          else if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else {
              throw new Error("Mismatched change set lengths");
          }
      }
  }
  function composeSets(setA, setB, mkSet = false) {
      let sections = [];
      let insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      for (let open = false;;) {
          if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else if (a.ins == 0) { // Deletion in A
              addSection(sections, a.len, 0, open);
              a.next();
          }
          else if (b.len == 0 && !b.done) { // Insertion in B
              addSection(sections, 0, b.ins, open);
              if (insert)
                  addInsert(insert, sections, b.text);
              b.next();
          }
          else if (a.done || b.done) {
              throw new Error("Mismatched change set lengths");
          }
          else {
              let len = Math.min(a.len2, b.len), sectionLen = sections.length;
              if (a.ins == -1) {
                  let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                  addSection(sections, len, insB, open);
                  if (insert && insB)
                      addInsert(insert, sections, b.text);
              }
              else if (b.ins == -1) {
                  addSection(sections, a.off ? 0 : a.len, len, open);
                  if (insert)
                      addInsert(insert, sections, a.textBit(len));
              }
              else {
                  addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                  if (insert && !b.off)
                      addInsert(insert, sections, b.text);
              }
              open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
              a.forward2(len);
              b.forward(len);
          }
      }
  }
  class SectionIter {
      constructor(set) {
          this.set = set;
          this.i = 0;
          this.next();
      }
      next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
          }
          else {
              this.len = 0;
              this.ins = -2;
          }
          this.off = 0;
      }
      get done() { return this.ins == -2; }
      get len2() { return this.ins < 0 ? this.len : this.ins; }
      get text() {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length ? Text$1.empty : inserted[index];
      }
      textBit(len) {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length && !len ? Text$1.empty
              : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
      forward(len) {
          if (len == this.len)
              this.next();
          else {
              this.len -= len;
              this.off += len;
          }
      }
      forward2(len) {
          if (this.ins == -1)
              this.forward(len);
          else if (len == this.ins)
              this.next();
          else {
              this.ins -= len;
              this.off += len;
          }
      }
  }

  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  class SelectionRange {
      constructor(
      /**
      The lower boundary of the range.
      */
      from, 
      /**
      The upper boundary of the range.
      */
      to, flags) {
          this.from = from;
          this.to = to;
          this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() { return this.from == this.to; }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
          let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
          return level == 3 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
          let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
          return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
          let from, to;
          if (this.empty) {
              from = to = change.mapPos(this.from, assoc);
          }
          else {
              from = change.mapPos(this.from, 1);
              to = change.mapPos(this.to, -1);
          }
          return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from, to = from) {
          if (from <= this.anchor && to >= this.anchor)
              return EditorSelection.range(from, to);
          let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
          return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other) {
          return this.anchor == other.anchor && this.head == other.head;
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() { return { anchor: this.anchor, head: this.head }; }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json) {
          if (!json || typeof json.anchor != "number" || typeof json.head != "number")
              throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
      static create(from, to, flags) {
          return new SelectionRange(from, to, flags);
      }
  }
  /**
  An editor selection holds one or more selection ranges.
  */
  class EditorSelection {
      constructor(
      /**
      The ranges in the selection, sorted by position. Ranges cannot
      overlap (but they may touch, if they aren't empty).
      */
      ranges, 
      /**
      The index of the _main_ range in the selection (which is
      usually the range that was added last).
      */
      mainIndex) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
          if (change.empty)
              return this;
          return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection.
      */
      eq(other) {
          if (this.ranges.length != other.ranges.length ||
              this.mainIndex != other.mainIndex)
              return false;
          for (let i = 0; i < this.ranges.length; i++)
              if (!this.ranges[i].eq(other.ranges[i]))
                  return false;
          return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() { return this.ranges[this.mainIndex]; }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
          return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json) {
          if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
              throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
              throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
              let range = ranges[i];
              if (range.empty ? range.from <= pos : range.from < pos)
                  return EditorSelection.normalized(ranges.slice(), mainIndex);
              pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |
              (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
              ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn) {
          let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */;
          return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | goal | 8 /* RangeFlag.AssocAfter */)
              : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0));
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
          let main = ranges[mainIndex];
          ranges.sort((a, b) => a.from - b.from);
          mainIndex = ranges.indexOf(main);
          for (let i = 1; i < ranges.length; i++) {
              let range = ranges[i], prev = ranges[i - 1];
              if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                  let from = prev.from, to = Math.max(range.to, prev.to);
                  if (i <= mainIndex)
                      mainIndex--;
                  ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
              }
          }
          return new EditorSelection(ranges, mainIndex);
      }
  }
  function checkSelection(selection, docLength) {
      for (let range of selection.ranges)
          if (range.to > docLength)
              throw new RangeError("Selection points outside of document");
  }

  let nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
  */
  class Facet {
      constructor(
      /**
      @internal
      */
      combine, 
      /**
      @internal
      */
      compareInput, 
      /**
      @internal
      */
      compare, isStatic, enables) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          /**
          @internal
          */
          this.id = nextID++;
          this.default = combine([]);
          this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Define a new facet.
      */
      static define(config = {}) {
          return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
          return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
      from(field, get) {
          if (!get)
              get = x => x;
          return this.compute([field], state => get(state.field(field)));
      }
  }
  function sameArray(a, b) {
      return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  class FacetProvider {
      constructor(dependencies, facet, type, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
      }
      dynamicSlot(addresses) {
          var _a;
          let getter = this.value;
          let compare = this.facet.compareInput;
          let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
              if (dep == "doc")
                  depDoc = true;
              else if (dep == "selection")
                  depSel = true;
              else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                  depAddrs.push(addresses[dep.id]);
          }
          return {
              create(state) {
                  state.values[idx] = getter(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update(state, tr) {
                  if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                      let newVal = getter(state);
                      if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                          state.values[idx] = newVal;
                          return 1 /* SlotStatus.Changed */;
                      }
                  }
                  return 0;
              },
              reconfigure: (state, oldState) => {
                  let newVal, oldAddr = oldState.config.address[id];
                  if (oldAddr != null) {
                      let oldVal = getAddr(oldState, oldAddr);
                      if (this.dependencies.every(dep => {
                          return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                              dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                      }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                          state.values[idx] = oldVal;
                          return 0;
                      }
                  }
                  else {
                      newVal = getter(state);
                  }
                  state.values[idx] = newVal;
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
  }
  function compareArray(a, b, compare) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!compare(a[i], b[i]))
              return false;
      return true;
  }
  function ensureAll(state, addrs) {
      let changed = false;
      for (let addr of addrs)
          if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
              changed = true;
      return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
      let providerAddrs = providers.map(p => addresses[p.id]);
      let providerTypes = providers.map(p => p.type);
      let dynamic = providerAddrs.filter(p => !(p & 1));
      let idx = addresses[facet.id] >> 1;
      function get(state) {
          let values = [];
          for (let i = 0; i < providerAddrs.length; i++) {
              let value = getAddr(state, providerAddrs[i]);
              if (providerTypes[i] == 2 /* Provider.Multi */)
                  for (let val of value)
                      values.push(val);
              else
                  values.push(value);
          }
          return facet.combine(values);
      }
      return {
          create(state) {
              for (let addr of providerAddrs)
                  ensureAddr(state, addr);
              state.values[idx] = get(state);
              return 1 /* SlotStatus.Changed */;
          },
          update(state, tr) {
              if (!ensureAll(state, dynamic))
                  return 0;
              let value = get(state);
              if (facet.compare(value, state.values[idx]))
                  return 0;
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          },
          reconfigure(state, oldState) {
              let depChanged = ensureAll(state, providerAddrs);
              let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
              if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              let value = get(state);
              if (facet.compare(value, oldValue)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          }
      };
  }
  const initField = /*@__PURE__*/Facet.define({ static: true });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  class StateField {
      constructor(
      /**
      @internal
      */
      id, createF, updateF, compareF, 
      /**
      @internal
      */
      spec) {
          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */
          this.provides = undefined;
      }
      /**
      Define a state field.
      */
      static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
          if (config.provide)
              field.provides = config.provide(field);
          return field;
      }
      create(state) {
          let init = state.facet(initField).find(i => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return {
              create: (state) => {
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update: (state, tr) => {
                  let oldVal = state.values[idx];
                  let value = this.updateF(oldVal, tr);
                  if (this.compareF(oldVal, value))
                      return 0;
                  state.values[idx] = value;
                  return 1 /* SlotStatus.Changed */;
              },
              reconfigure: (state, oldState) => {
                  if (oldState.config.address[this.id] != null) {
                      state.values[idx] = oldState.field(this);
                      return 0;
                  }
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create) {
          return [this, initField.of({ field: this, create })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() { return this; }
  }
  const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
      return (ext) => new PrecExtension(ext, value);
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  const Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /*@__PURE__*/prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /*@__PURE__*/prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /*@__PURE__*/prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /*@__PURE__*/prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  class PrecExtension {
      constructor(inner, prec) {
          this.inner = inner;
          this.prec = prec;
      }
  }
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  class Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) { return new CompartmentInstance(this, ext); }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content) {
          return Compartment.reconfigure.of({ compartment: this, extension: content });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
          return state.config.compartments.get(this);
      }
  }
  class CompartmentInstance {
      constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
      }
  }
  class Configuration {
      constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.facets = facets;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
              this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
      }
      staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base, compartments, oldState) {
          let fields = [];
          let facets = Object.create(null);
          let newCompartments = new Map();
          for (let ext of flatten(base, compartments, newCompartments)) {
              if (ext instanceof StateField)
                  fields.push(ext);
              else
                  (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          for (let field of fields) {
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(a => field.slot(a));
          }
          let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
          for (let id in facets) {
              let providers = facets[id], facet = providers[0].facet;
              let oldProviders = oldFacets && oldFacets[id] || [];
              if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                  address[facet.id] = (staticValues.length << 1) | 1;
                  if (sameArray(oldProviders, providers)) {
                      staticValues.push(oldState.facet(facet));
                  }
                  else {
                      let value = facet.combine(providers.map(p => p.value));
                      staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                  }
              }
              else {
                  for (let p of providers) {
                      if (p.type == 0 /* Provider.Static */) {
                          address[p.id] = (staticValues.length << 1) | 1;
                          staticValues.push(p.value);
                      }
                      else {
                          address[p.id] = dynamicSlots.length << 1;
                          dynamicSlots.push(a => p.dynamicSlot(a));
                      }
                  }
                  address[facet.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
              }
          }
          let dynamic = dynamicSlots.map(f => f(address));
          return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
  }
  function flatten(extension, compartments, newCompartments) {
      let result = [[], [], [], [], []];
      let seen = new Map();
      function inner(ext, prec) {
          let known = seen.get(ext);
          if (known != null) {
              if (known <= prec)
                  return;
              let found = result[known].indexOf(ext);
              if (found > -1)
                  result[known].splice(found, 1);
              if (ext instanceof CompartmentInstance)
                  newCompartments.delete(ext.compartment);
          }
          seen.set(ext, prec);
          if (Array.isArray(ext)) {
              for (let e of ext)
                  inner(e, prec);
          }
          else if (ext instanceof CompartmentInstance) {
              if (newCompartments.has(ext.compartment))
                  throw new RangeError(`Duplicate use of compartment in extensions`);
              let content = compartments.get(ext.compartment) || ext.inner;
              newCompartments.set(ext.compartment, content);
              inner(content, prec);
          }
          else if (ext instanceof PrecExtension) {
              inner(ext.inner, ext.prec);
          }
          else if (ext instanceof StateField) {
              result[prec].push(ext);
              if (ext.provides)
                  inner(ext.provides, prec);
          }
          else if (ext instanceof FacetProvider) {
              result[prec].push(ext);
              if (ext.facet.extensions)
                  inner(ext.facet.extensions, Prec_.default);
          }
          else {
              let content = ext.extension;
              if (!content)
                  throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
              inner(content, prec);
          }
      }
      inner(extension, Prec_.default);
      return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
      if (addr & 1)
          return 2 /* SlotStatus.Computed */;
      let idx = addr >> 1;
      let status = state.status[idx];
      if (status == 4 /* SlotStatus.Computing */)
          throw new Error("Cyclic dependency between fields and/or facets");
      if (status & 2 /* SlotStatus.Computed */)
          return status;
      state.status[idx] = 4 /* SlotStatus.Computing */;
      let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
      return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
      return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }

  const languageData = /*@__PURE__*/Facet.define();
  const allowMultipleSelections = /*@__PURE__*/Facet.define({
      combine: values => values.some(v => v),
      static: true
  });
  const lineSeparator = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : undefined,
      static: true
  });
  const changeFilter = /*@__PURE__*/Facet.define();
  const transactionFilter = /*@__PURE__*/Facet.define();
  const transactionExtender = /*@__PURE__*/Facet.define();
  const readOnly = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : false
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  class Annotation {
      /**
      @internal
      */
      constructor(
      /**
      The annotation type.
      */
      type, 
      /**
      The value of this annotation.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() { return new AnnotationType(); }
  }
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  class AnnotationType {
      /**
      Create an instance of this annotation.
      */
      of(value) { return new Annotation(this, value); }
  }
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  class StateEffectType {
      /**
      @internal
      */
      constructor(
      // The `any` types in these function types are there to work
      // around TypeScript issue #37631, where the type guard on
      // `StateEffect.is` mysteriously stops working when these properly
      // have type `Value`.
      /**
      @internal
      */
      map) {
          this.map = map;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) { return new StateEffect(this, value); }
  }
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  class StateEffect {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      type, 
      /**
      The value of this effect.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type) { return this.type == type; }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds.
      */
      static define(spec = {}) {
          return new StateEffectType(spec.map || (v => v));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
          if (!effects.length)
              return effects;
          let result = [];
          for (let effect of effects) {
              let mapped = effect.map(mapping);
              if (mapped)
                  result.push(mapped);
          }
          return result;
      }
  }
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  class Transaction {
      constructor(
      /**
      The state from which the transaction starts.
      */
      startState, 
      /**
      The document changes made by this transaction.
      */
      changes, 
      /**
      The selection set by this transaction, or undefined if it
      doesn't explicitly set a selection.
      */
      selection, 
      /**
      The effects added to the transaction.
      */
      effects, 
      /**
      @internal
      */
      annotations, 
      /**
      Whether the selection should be scrolled into view after this
      transaction is dispatched.
      */
      scrollIntoView) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */
          this._doc = null;
          /**
          @internal
          */
          this._state = null;
          if (selection)
              checkSelection(selection, changes.newLength);
          if (!annotations.some((a) => a.type == Transaction.time))
              this.annotations = annotations.concat(Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState, changes, selection, effects, annotations, scrollIntoView) {
          return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
          if (!this._state)
              this.startState.applyTransaction(this);
          return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type) {
          for (let ann of this.annotations)
              if (ann.type == type)
                  return ann.value;
          return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() { return !this.changes.empty; }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() { return this.startState.config != this.state.config; }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
  }
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
      let result = [];
      for (let iA = 0, iB = 0;;) {
          let from, to;
          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
              from = a[iA++];
              to = a[iA++];
          }
          else if (iB < b.length) {
              from = b[iB++];
              to = b[iB++];
          }
          else
              return result;
          if (!result.length || result[result.length - 1] < from)
              result.push(from, to);
          else if (result[result.length - 1] < to)
              result[result.length - 1] = to;
      }
  }
  function mergeTransaction(a, b, sequential) {
      var _a;
      let mapForA, mapForB, changes;
      if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
      }
      else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
      }
      return {
          changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
      };
  }
  function resolveTransactionInner(state, spec, docSize) {
      let sel = spec.selection, annotations = asArray$1(spec.annotations);
      if (spec.userEvent)
          annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
      return {
          changes: spec.changes instanceof ChangeSet ? spec.changes
              : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray$1(spec.effects),
          annotations,
          scrollIntoView: !!spec.scrollIntoView
      };
  }
  function resolveTransaction(state, specs, filter) {
      let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
      if (specs.length && specs[0].filter === false)
          filter = false;
      for (let i = 1; i < specs.length; i++) {
          if (specs[i].filter === false)
              filter = false;
          let seq = !!specs[i].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
      }
      let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
      return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
      let state = tr.startState;
      // Change filters
      let result = true;
      for (let filter of state.facet(changeFilter)) {
          let value = filter(tr);
          if (value === false) {
              result = false;
              break;
          }
          if (Array.isArray(value))
              result = result === true ? value : joinRanges(result, value);
      }
      if (result !== true) {
          let changes, back;
          if (result === false) {
              back = tr.changes.invertedDesc;
              changes = ChangeSet.empty(state.doc.length);
          }
          else {
              let filtered = tr.changes.filter(result);
              changes = filtered.changes;
              back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
          }
          tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
      }
      // Transaction filters
      let filters = state.facet(transactionFilter);
      for (let i = filters.length - 1; i >= 0; i--) {
          let filtered = filters[i](tr);
          if (filtered instanceof Transaction)
              tr = filtered;
          else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
              tr = filtered[0];
          else
              tr = resolveTransaction(state, asArray$1(filtered), false);
      }
      return tr;
  }
  function extendTransaction(tr) {
      let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
      for (let i = extenders.length - 1; i >= 0; i--) {
          let extension = extenders[i](tr);
          if (extension && Object.keys(extension).length)
              spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
      }
      return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  const none$2 = [];
  function asArray$1(value) {
      return value == null ? none$2 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/(function (CharCategory) {
      /**
      Word characters.
      */
      CharCategory[CharCategory["Word"] = 0] = "Word";
      /**
      Whitespace.
      */
      CharCategory[CharCategory["Space"] = 1] = "Space";
      /**
      Anything else.
      */
      CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory})(CharCategory || (CharCategory = {}));
  const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  let wordChar;
  try {
      wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  }
  catch (_) { }
  function hasWordChar(str) {
      if (wordChar)
          return wordChar.test(str);
      for (let i = 0; i < str.length; i++) {
          let ch = str[i];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
              return true;
      }
      return false;
  }
  function makeCategorizer(wordChars) {
      return (char) => {
          if (!/\S/.test(char))
              return CharCategory.Space;
          if (hasWordChar(char))
              return CharCategory.Word;
          for (let i = 0; i < wordChars.length; i++)
              if (char.indexOf(wordChars[i]) > -1)
                  return CharCategory.Word;
          return CharCategory.Other;
      };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  class EditorState {
      constructor(
      /**
      @internal
      */
      config, 
      /**
      The current document.
      */
      doc, 
      /**
      The current selection.
      */
      selection, 
      /**
      @internal
      */
      values, computeSlot, tr) {
          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          this.status = config.statusTemplate.slice();
          this.computeSlot = computeSlot;
          // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state
          if (tr)
              tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
              ensureAddr(this, i << 1);
          this.computeSlot = null;
      }
      field(field, require = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
              if (require)
                  throw new RangeError("Field is not present in this state");
              return undefined;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
          return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
          let conf = this.config, { base, compartments } = conf;
          for (let effect of tr.effects) {
              if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                      compartments = new Map;
                      conf.compartments.forEach((val, key) => compartments.set(key, val));
                      conf = null;
                  }
                  compartments.set(effect.value.compartment, effect.value.extension);
              }
              else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
              }
              else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray$1(base).concat(effect.value);
              }
          }
          let startValues;
          if (!conf) {
              conf = Configuration.resolve(base, compartments, this);
              let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
              startValues = intermediateState.values;
          }
          else {
              startValues = tr.startState.values.slice();
          }
          new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text) {
          if (typeof text == "string")
              text = this.toText(text);
          return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
              range: EditorSelection.cursor(range.from + text.length) }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray$1(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
              let result = f(sel.ranges[i]);
              let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
              for (let j = 0; j < i; j++)
                  ranges[j] = ranges[j].map(newMapped);
              let mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
          }
          return {
              changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects
          };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
          if (spec instanceof ChangeSet)
              return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string) {
          return Text$1.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from = 0, to = this.doc.length) {
          return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
              return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
          let result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
          };
          if (fields)
              for (let prop in fields) {
                  let value = fields[prop];
                  if (value instanceof StateField && this.config.address[value.id] != null)
                      result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
              }
          return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json, config = {}, fields) {
          if (!json || typeof json.doc != "string")
              throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
              for (let prop in fields) {
                  if (Object.prototype.hasOwnProperty.call(json, prop)) {
                      let field = fields[prop], value = json[prop];
                      fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                  }
              }
          return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config = {}) {
          let configuration = Configuration.resolve(config.extensions || [], new Map);
          let doc = config.doc instanceof Text$1 ? config.doc
              : Text$1.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0)
              : config.selection instanceof EditorSelection ? config.selection
                  : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc.length);
          if (!configuration.staticFacet(allowMultipleSelections))
              selection = selection.asSingle();
          return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() { return this.facet(EditorState.tabSize); }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() { return this.facet(readOnly); }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase, ...insert) {
          for (let map of this.facet(EditorState.phrases))
              if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                  phrase = map[phrase];
                  break;
              }
          if (insert.length)
              phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                  if (i == "$")
                      return "$";
                  let n = +(i || 1);
                  return !n || n > insert.length ? m : insert[n - 1];
              });
          return phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name, pos, side = -1) {
          let values = [];
          for (let provider of this.facet(languageData)) {
              for (let result of provider(this, pos, side)) {
                  if (Object.prototype.hasOwnProperty.call(result, name))
                      values.push(result[name]);
              }
          }
          return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos) {
          let { text, from, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start = pos - from, end = pos - from;
          while (start > 0) {
              let prev = findClusterBreak(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word)
                  break;
              start = prev;
          }
          while (end < length) {
              let next = findClusterBreak(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word)
                  break;
              end = next;
          }
          return start == end ? null : EditorSelection.range(start + from, end + from);
      }
  }
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : 4
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
      compare(a, b) {
          let kA = Object.keys(a), kB = Object.keys(b);
          return kA.length == kB.length && kA.every(k => a[k] == b[k]);
      }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
  combine = {}) {
      let result = {};
      for (let config of configs)
          for (let key of Object.keys(config)) {
              let value = config[key], current = result[key];
              if (current === undefined)
                  result[key] = value;
              else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, key))
                  result[key] = combine[key](current, value);
              else
                  throw new Error("Config merge conflict for field " + key);
          }
      for (let key in defaults)
          if (result[key] === undefined)
              result[key] = defaults[key];
      return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  class RangeValue {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) { return this == other; }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from, to = from) { return Range.create(from, to, this); }
  }
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  class Range {
      constructor(
      /**
      The range's start position.
      */
      from, 
      /**
      Its end position.
      */
      to, 
      /**
      The value associated with this range.
      */
      value) {
          this.from = from;
          this.to = to;
          this.value = value;
      }
      /**
      @internal
      */
      static create(from, to, value) {
          return new Range(from, to, value);
      }
  }
  function cmpRange(a, b) {
      return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  class Chunk {
      constructor(from, to, value, 
      // Chunks are marked with the largest point that occurs
      // in them (or -1 for no points), so that scans that are
      // only interested in points (such as the
      // heightmap-related logic) can skip range-only chunks.
      maxPoint) {
          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
      }
      get length() { return this.to[this.to.length - 1]; }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos, side, end, startAt = 0) {
          let arr = end ? this.to : this.from;
          for (let lo = startAt, hi = arr.length;;) {
              if (lo == hi)
                  return lo;
              let mid = (lo + hi) >> 1;
              let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
              if (mid == lo)
                  return diff >= 0 ? lo : hi;
              if (diff >= 0)
                  hi = mid;
              else
                  lo = mid + 1;
          }
      }
      between(offset, from, to, f) {
          for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
              if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                  return false;
      }
      map(offset, changes) {
          let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
              let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
              if (curFrom == curTo) {
                  let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                  if (mapped == null)
                      continue;
                  newFrom = newTo = mapped;
                  if (val.startSide != val.endSide) {
                      newTo = changes.mapPos(curFrom, val.endSide);
                      if (newTo < newFrom)
                          continue;
                  }
              }
              else {
                  newFrom = changes.mapPos(curFrom, val.startSide);
                  newTo = changes.mapPos(curTo, val.endSide);
                  if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                      continue;
              }
              if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                  continue;
              if (newPos < 0)
                  newPos = newFrom;
              if (val.point)
                  maxPoint = Math.max(maxPoint, newTo - newFrom);
              value.push(val);
              from.push(newFrom - newPos);
              to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
      }
  }
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  class RangeSet {
      constructor(
      /**
      @internal
      */
      chunkPos, 
      /**
      @internal
      */
      chunk, 
      /**
      @internal
      */
      nextLayer, 
      /**
      @internal
      */
      maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
          return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
          if (this.isEmpty)
              return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
              size += chunk.value.length;
          return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
          let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add.length == 0 && !filter)
              return this;
          if (sort)
              add = add.slice().sort(cmpRange);
          if (this.isEmpty)
              return add.length ? RangeSet.of(add) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add.length) {
              if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                  let range = add[i++];
                  if (!builder.addInner(range.from, range.to, range.value))
                      spill.push(range);
              }
              else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                  (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                  (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                  builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                  cur.nextChunk();
              }
              else {
                  if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                      if (!builder.addInner(cur.from, cur.to, cur.value))
                          spill.push(Range.create(cur.from, cur.to, cur.value));
                  }
                  cur.next();
              }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
              : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
          if (changes.empty || this.isEmpty)
              return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              let touch = changes.touchesRange(start, start + chunk.length);
              if (touch === false) {
                  maxPoint = Math.max(maxPoint, chunk.maxPoint);
                  chunks.push(chunk);
                  chunkPos.push(changes.mapPos(start));
              }
              else if (touch === true) {
                  let { mapped, pos } = chunk.map(start, changes);
                  if (mapped) {
                      maxPoint = Math.max(maxPoint, mapped.maxPoint);
                      chunks.push(mapped);
                      chunkPos.push(pos);
                  }
              }
          }
          let next = this.nextLayer.map(changes);
          return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from, to, f) {
          if (this.isEmpty)
              return;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              if (to >= start && from <= start + chunk.length &&
                  chunk.between(start, from - start, to - start, f) === false)
                  return;
          }
          this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from = 0) {
          return HeapCursor.from([this]).goto(from);
      }
      /**
      @internal
      */
      get isEmpty() { return this.nextLayer == this; }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from = 0) {
          return HeapCursor.from(sets).goto(from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, 
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration. `from` and
      `to` are coordinates in the _new_ space, after these changes.
      */
      textDiff, comparator, 
      /**
      Can be used to ignore all non-point ranges, and points below
      the given size. When -1, all ranges are compared.
      */
      minPointSize = -1) {
          let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a, b, textDiff);
          let sideA = new SpanCursor(a, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
              compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from = 0, to) {
          if (to == null)
              to = 1000000000 /* C.Far */ - 1;
          let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
          let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
          if (a.length != b.length)
              return false;
          if (!a.length)
              return true;
          let sharedChunks = findSharedChunks(a, b);
          let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
          for (;;) {
              if (sideA.to != sideB.to ||
                  !sameValues(sideA.active, sideB.active) ||
                  sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                  return false;
              if (sideA.to > to)
                  return true;
              sideA.next();
              sideB.next();
          }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from, to, iterator, 
      /**
      When given and greater than -1, only points of at least this
      size are taken into account.
      */
      minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
          let openRanges = cursor.openStart;
          for (;;) {
              let curTo = Math.min(cursor.to, to);
              if (cursor.point) {
                  let active = cursor.activeForPoint(cursor.to);
                  let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
                  iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                  openRanges = Math.min(cursor.openEnd(curTo), active.length);
              }
              else if (curTo > pos) {
                  iterator.span(pos, curTo, cursor.active, openRanges);
                  openRanges = cursor.openEnd(curTo);
              }
              if (cursor.to > to)
                  return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
              pos = cursor.to;
              cursor.next();
          }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
              build.add(range.from, range.to, range.value);
          return build.finish();
      }
  }
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
      if (ranges.length > 1)
          for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
              let cur = ranges[i];
              if (cmpRange(prev, cur) > 0)
                  return ranges.slice().sort(cmpRange);
              prev = cur;
          }
      return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  class RangeSetBuilder {
      /**
      Create an empty builder.
      */
      constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1000000000 /* C.Far */;
          this.lastTo = -1000000000 /* C.Far */;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
      }
      finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
              this.from = [];
              this.to = [];
              this.value = [];
          }
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from, to, value) {
          if (!this.addInner(from, to, value))
              (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
      }
      /**
      @internal
      */
      addInner(from, to, value) {
          let diff = from - this.lastTo || value.startSide - this.last.endSide;
          if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
              throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff < 0)
              return false;
          if (this.from.length == 250 /* C.ChunkSize */)
              this.finishChunk(true);
          if (this.chunkStart < 0)
              this.chunkStart = from;
          this.from.push(from - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
              this.maxPoint = Math.max(this.maxPoint, to - from);
          return true;
      }
      /**
      @internal
      */
      addChunk(from, chunk) {
          if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
              return false;
          if (this.from.length)
              this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from;
          this.lastTo = chunk.to[last] + from;
          return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() { return this.finishInner(RangeSet.empty); }
      /**
      @internal
      */
      finishInner(next) {
          if (this.from.length)
              this.finishChunk(false);
          if (this.chunks.length == 0)
              return next;
          let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
          this.from = null; // Make sure further `add` calls produce errors
          return result;
      }
  }
  function findSharedChunks(a, b, textDiff) {
      let inA = new Map();
      for (let set of a)
          for (let i = 0; i < set.chunk.length; i++)
              if (set.chunk[i].maxPoint <= 0)
                  inA.set(set.chunk[i], set.chunkPos[i]);
      let shared = new Set();
      for (let set of b)
          for (let i = 0; i < set.chunk.length; i++) {
              let known = inA.get(set.chunk[i]);
              if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                  !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                  shared.add(set.chunk[i]);
          }
      return shared;
  }
  class LayerCursor {
      constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      get endSide() { return this.value ? this.value.endSide : 0; }
      goto(pos, side = -1000000000 /* C.Far */) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
      }
      gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
              let next = this.layer.chunk[this.chunkIndex];
              if (!(this.skip && this.skip.has(next) ||
                  this.layer.chunkEnd(this.chunkIndex) < pos ||
                  next.maxPoint < this.minPoint))
                  break;
              this.chunkIndex++;
              forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
              let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
              if (!forward || this.rangeIndex < rangeIndex)
                  this.setRangeIndex(rangeIndex);
          }
          this.next();
      }
      forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
              this.gotoInner(pos, side, true);
      }
      next() {
          for (;;) {
              if (this.chunkIndex == this.layer.chunk.length) {
                  this.from = this.to = 1000000000 /* C.Far */;
                  this.value = null;
                  break;
              }
              else {
                  let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                  let from = chunkPos + chunk.from[this.rangeIndex];
                  this.from = from;
                  this.to = chunkPos + chunk.to[this.rangeIndex];
                  this.value = chunk.value[this.rangeIndex];
                  this.setRangeIndex(this.rangeIndex + 1);
                  if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                      break;
              }
          }
      }
      setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
              this.chunkIndex++;
              if (this.skip) {
                  while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                      this.chunkIndex++;
              }
              this.rangeIndex = 0;
          }
          else {
              this.rangeIndex = index;
          }
      }
      nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
      }
      compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
              this.to - other.to || this.endSide - other.endSide;
      }
  }
  class HeapCursor {
      constructor(heap) {
          this.heap = heap;
      }
      static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
              for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                  if (cur.maxPoint >= minPoint)
                      heap.push(new LayerCursor(cur, skip, minPoint, i));
              }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      goto(pos, side = -1000000000 /* C.Far */) {
          for (let cur of this.heap)
              cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          this.next();
          return this;
      }
      forward(pos, side) {
          for (let cur of this.heap)
              cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
              this.next();
      }
      next() {
          if (this.heap.length == 0) {
              this.from = this.to = 1000000000 /* C.Far */;
              this.value = null;
              this.rank = -1;
          }
          else {
              let top = this.heap[0];
              this.from = top.from;
              this.to = top.to;
              this.value = top.value;
              this.rank = top.rank;
              if (top.value)
                  top.next();
              heapBubble(this.heap, 0);
          }
      }
  }
  function heapBubble(heap, index) {
      for (let cur = heap[index];;) {
          let childIndex = (index << 1) + 1;
          if (childIndex >= heap.length)
              break;
          let child = heap[childIndex];
          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
              child = heap[childIndex + 1];
              childIndex++;
          }
          if (cur.compare(child) < 0)
              break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
      }
  }
  class SpanCursor {
      constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          // A currently active point range, if any
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1000000000 /* C.Far */;
          this.endSide = 0;
          // The amount of open active ranges at the start of the iterator.
          // Not including points.
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos, side = -1000000000 /* C.Far */) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
      }
      forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
              this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
      }
      removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          while (i < this.activeRank.length && this.activeRank[i] <= rank)
              i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
              insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
          let from = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null;
          for (;;) {
              let a = this.minActive;
              if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                  if (this.activeTo[a] > from) {
                      this.to = this.activeTo[a];
                      this.endSide = this.active[a].endSide;
                      break;
                  }
                  this.removeActive(a);
                  if (trackOpen)
                      remove(trackOpen, a);
              }
              else if (!this.cursor.value) {
                  this.to = this.endSide = 1000000000 /* C.Far */;
                  break;
              }
              else if (this.cursor.from > from) {
                  this.to = this.cursor.from;
                  this.endSide = this.cursor.startSide;
                  break;
              }
              else {
                  let nextVal = this.cursor.value;
                  if (!nextVal.point) { // Opening a range
                      this.addActive(trackOpen);
                      this.cursor.next();
                  }
                  else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                      // Ignore any non-empty points that end precisely at the end of the prev point
                      this.cursor.next();
                  }
                  else { // New point
                      this.point = nextVal;
                      this.pointFrom = this.cursor.from;
                      this.pointRank = this.cursor.rank;
                      this.to = this.cursor.to;
                      this.endSide = nextVal.endSide;
                      this.cursor.next();
                      this.forward(this.to, this.endSide);
                      break;
                  }
              }
          }
          if (trackOpen) {
              this.openStart = 0;
              for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                  this.openStart++;
          }
      }
      activeForPoint(to) {
          if (!this.active.length)
              return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
              if (this.activeRank[i] < this.pointRank)
                  break;
              if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                  active.push(this.active[i]);
          }
          return active.reverse();
      }
      openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
              open++;
          return open;
      }
  }
  function compare(a, startA, b, startB, length, comparator) {
      a.goto(startA);
      b.goto(startB);
      let endB = startB + length;
      let pos = startB, dPos = startB - startA;
      for (;;) {
          let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
          let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
          if (a.point || b.point) {
              if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                  sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                  comparator.comparePoint(pos, clipEnd, a.point, b.point);
          }
          else {
              if (clipEnd > pos && !sameValues(a.active, b.active))
                  comparator.compareRange(pos, clipEnd, a.active, b.active);
          }
          if (end > endB)
              break;
          pos = end;
          if (diff <= 0)
              a.next();
          if (diff >= 0)
              b.next();
      }
  }
  function sameValues(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (a[i] != b[i] && !a[i].eq(b[i]))
              return false;
      return true;
  }
  function remove(array, index) {
      for (let i = index, e = array.length - 1; i < e; i++)
          array[i] = array[i + 1];
      array.pop();
  }
  function insert(array, index, value) {
      for (let i = array.length - 1; i >= index; i--)
          array[i + 1] = array[i];
      array[index] = value;
  }
  function findMinIndex(value, array) {
      let found = -1, foundPos = 1000000000 /* C.Far */;
      for (let i = 0; i < array.length; i++)
          if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
              found = i;
              foundPos = array[i];
          }
      return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize, to = string.length) {
      let n = 0;
      for (let i = 0; i < to;) {
          if (string.charCodeAt(i) == 9) {
              n += tabSize - (n % tabSize);
              i++;
          }
          else {
              n++;
              i = findClusterBreak(string, i);
          }
      }
      return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
      for (let i = 0, n = 0;;) {
          if (n >= col)
              return i;
          if (i == string.length)
              break;
          n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
          i = findClusterBreak(string, i);
      }
      return strict === true ? -1 : string.length;
  }

  const C = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {finish} = options || {};

      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
      }

      function render(selectors, spec, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";")
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                   value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                      " {" + local.join(" ") + "}");
        }
      }

      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() { return this.rules.join("\n") }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36)
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    static mount(root, modules) {
      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
    }
  }

  let adoptedSet = null;

  class StyleSet {
    constructor(root) {
      if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
        if (adoptedSet) {
          root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
          return root[SET] = adoptedSet
        }
        this.sheet = new CSSStyleSheet;
        root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
        adoptedSet = this;
      } else {
        this.styleTag = (root.ownerDocument || root).createElement("style");
        let target = root.head || root;
        target.insertBefore(this.styleTag, target.firstChild);
      }
      this.modules = [];
      root[SET] = this;
    }

    mount(modules) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i], index = this.modules.indexOf(mod);
        if (index < j && index > -1) { // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }

      if (!sheet) {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
      }
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  var brokenModifierNames = mac || chrome$1 && +chrome$1[1] < 57;

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

  function keyName(event) {
    var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
      ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
      event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  function getSelection(root) {
      let target;
      // Browsers differ on whether shadow roots have a getSelection
      // method. If it exists, use that, otherwise, call it on the
      // document.
      if (root.nodeType == 11) { // Shadow root
          target = root.getSelection ? root : root.ownerDocument;
      }
      else {
          target = root;
      }
      return target.getSelection();
  }
  function contains(dom, node) {
      return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function deepActiveElement(doc) {
      let elt = doc.activeElement;
      while (elt && elt.shadowRoot)
          elt = elt.shadowRoot.activeElement;
      return elt;
  }
  function hasSelection(dom, selection) {
      if (!selection.anchorNode)
          return false;
      try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
      }
      catch (_) {
          return false;
      }
  }
  function clientRectsFor(dom) {
      if (dom.nodeType == 3)
          return textRange(dom, 0, dom.nodeValue.length).getClientRects();
      else if (dom.nodeType == 1)
          return dom.getClientRects();
      else
          return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
      return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
          scanFor(node, off, targetNode, targetOff, 1)) : false;
  }
  function domIndex(node) {
      for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node)
              return index;
      }
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
          if (node == targetNode && off == targetOff)
              return true;
          if (off == (dir < 0 ? 0 : maxOffset(node))) {
              if (node.nodeName == "DIV")
                  return false;
              let parent = node.parentNode;
              if (!parent || parent.nodeType != 1)
                  return false;
              off = domIndex(node) + (dir < 0 ? 0 : 1);
              node = parent;
          }
          else if (node.nodeType == 1) {
              node = node.childNodes[off + (dir < 0 ? -1 : 0)];
              if (node.nodeType == 1 && node.contentEditable == "false")
                  return false;
              off = dir < 0 ? maxOffset(node) : 0;
          }
          else {
              return false;
          }
      }
  }
  function maxOffset(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
  function flattenRect(rect, left) {
      let x = left ? rect.left : rect.right;
      return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
      return { left: 0, right: win.innerWidth,
          top: 0, bottom: win.innerHeight };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      for (let cur = dom; cur;) {
          if (cur.nodeType == 1) { // Element
              let bounding, top = cur == doc.body;
              if (top) {
                  bounding = windowRect(win);
              }
              else {
                  if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                      cur = cur.assignedSlot || cur.parentNode;
                      continue;
                  }
                  let rect = cur.getBoundingClientRect();
                  // Make sure scrollbar width isn't included in the rectangle
                  bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                      top: rect.top, bottom: rect.top + cur.clientHeight };
              }
              let moveX = 0, moveY = 0;
              if (y == "nearest") {
                  if (rect.top < bounding.top) {
                      moveY = -(bounding.top - rect.top + yMargin);
                      if (side > 0 && rect.bottom > bounding.bottom + moveY)
                          moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                  }
                  else if (rect.bottom > bounding.bottom) {
                      moveY = rect.bottom - bounding.bottom + yMargin;
                      if (side < 0 && (rect.top - moveY) < bounding.top)
                          moveY = -(bounding.top + moveY - rect.top + yMargin);
                  }
              }
              else {
                  let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                  let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                      y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                          rect.bottom - boundingHeight + yMargin;
                  moveY = targetTop - bounding.top;
              }
              if (x == "nearest") {
                  if (rect.left < bounding.left) {
                      moveX = -(bounding.left - rect.left + xMargin);
                      if (side > 0 && rect.right > bounding.right + moveX)
                          moveX = rect.right - bounding.right + moveX + xMargin;
                  }
                  else if (rect.right > bounding.right) {
                      moveX = rect.right - bounding.right + xMargin;
                      if (side < 0 && rect.left < bounding.left + moveX)
                          moveX = -(bounding.left + moveX - rect.left + xMargin);
                  }
              }
              else {
                  let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                      (x == "start") == ltr ? rect.left - xMargin :
                          rect.right - (bounding.right - bounding.left) + xMargin;
                  moveX = targetLeft - bounding.left;
              }
              if (moveX || moveY) {
                  if (top) {
                      win.scrollBy(moveX, moveY);
                  }
                  else {
                      let movedX = 0, movedY = 0;
                      if (moveY) {
                          let start = cur.scrollTop;
                          cur.scrollTop += moveY;
                          movedY = cur.scrollTop - start;
                      }
                      if (moveX) {
                          let start = cur.scrollLeft;
                          cur.scrollLeft += moveX;
                          movedX = cur.scrollLeft - start;
                      }
                      rect = { left: rect.left - movedX, top: rect.top - movedY,
                          right: rect.right - movedX, bottom: rect.bottom - movedY };
                      if (movedX && Math.abs(movedX - moveX) < 1)
                          x = "nearest";
                      if (movedY && Math.abs(movedY - moveY) < 1)
                          y = "nearest";
                  }
              }
              if (top)
                  break;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) { // A shadow root
              cur = cur.host;
          }
          else {
              break;
          }
      }
  }
  class DOMSelectionState {
      constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
      }
      eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
              this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
          this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
      }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
      if (dom.setActive)
          return dom.setActive(); // in IE
      if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
      let stack = [];
      for (let cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument)
              break;
      }
      dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
              preventScrollSupported = { preventScroll: true };
              return true;
          }
      } : undefined);
      if (!preventScrollSupported) {
          preventScrollSupported = false;
          for (let i = 0; i < stack.length;) {
              let elt = stack[i++], top = stack[i++], left = stack[i++];
              if (elt.scrollTop != top)
                  elt.scrollTop = top;
              if (elt.scrollLeft != left)
                  elt.scrollLeft = left;
          }
      }
  }
  let scratchRange;
  function textRange(node, from, to = from) {
      let range = scratchRange || (scratchRange = document.createRange());
      range.setEnd(node, to);
      range.setStart(node, from);
      return range;
  }
  function dispatchKey(elt, name, code) {
      let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
      let down = new KeyboardEvent("keydown", options);
      down.synthetic = true;
      elt.dispatchEvent(down);
      let up = new KeyboardEvent("keyup", options);
      up.synthetic = true;
      elt.dispatchEvent(up);
      return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
      while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
              return node;
          node = node.assignedSlot || node.parentNode;
      }
      return null;
  }
  function clearAttributes(node) {
      while (node.attributes.length)
          node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
      let node = selection.focusNode, offset = selection.focusOffset;
      if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
          return false;
      for (;;) {
          if (offset) {
              if (node.nodeType != 1)
                  return false;
              let prev = node.childNodes[offset - 1];
              if (prev.contentEditable == "false")
                  offset--;
              else {
                  node = prev;
                  offset = maxOffset(node);
              }
          }
          else if (node == doc) {
              return true;
          }
          else {
              offset = domIndex(node);
              node = node.parentNode;
          }
      }
  }

  class DOMPos {
      constructor(node, offset, precise = true) {
          this.node = node;
          this.offset = offset;
          this.precise = precise;
      }
      static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
      static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
  }
  const noChildren = [];
  class ContentView {
      constructor() {
          this.parent = null;
          this.dom = null;
          this.dirty = 2 /* Dirty.Node */;
      }
      get editorView() {
          if (!this.parent)
              throw new Error("Accessing view in orphan content view");
          return this.parent.editorView;
      }
      get overrideDOMText() { return null; }
      get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
          return this.posAtStart + this.length;
      }
      posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
              if (child == view)
                  return pos;
              pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
          return this.posBefore(view) + view.length;
      }
      // Will return a rectangle directly before (when side < 0), after
      // (side > 0) or directly on (when the browser supports it) the
      // given position.
      coordsAt(_pos, _side) { return null; }
      sync(track) {
          if (this.dirty & 2 /* Dirty.Node */) {
              let parent = this.dom;
              let prev = null, next;
              for (let child of this.children) {
                  if (child.dirty) {
                      if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                          let contentView = ContentView.get(next);
                          if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                              child.reuseDOM(next);
                      }
                      child.sync(track);
                      child.dirty = 0 /* Dirty.Not */;
                  }
                  next = prev ? prev.nextSibling : parent.firstChild;
                  if (track && !track.written && track.node == parent && next != child.dom)
                      track.written = true;
                  if (child.dom.parentNode == parent) {
                      while (next && next != child.dom)
                          next = rm$1(next);
                  }
                  else {
                      parent.insertBefore(child.dom, next);
                  }
                  prev = child.dom;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (next && track && track.node == parent)
                  track.written = true;
              while (next)
                  next = rm$1(next);
          }
          else if (this.dirty & 1 /* Dirty.Child */) {
              for (let child of this.children)
                  if (child.dirty) {
                      child.sync(track);
                      child.dirty = 0 /* Dirty.Not */;
                  }
          }
      }
      reuseDOM(_dom) { }
      localPosFromDOM(node, offset) {
          let after;
          if (node == this.dom) {
              after = this.dom.childNodes[offset];
          }
          else {
              let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
              for (;;) {
                  let parent = node.parentNode;
                  if (parent == this.dom)
                      break;
                  if (bias == 0 && parent.firstChild != parent.lastChild) {
                      if (node == parent.firstChild)
                          bias = -1;
                      else
                          bias = 1;
                  }
                  node = parent;
              }
              if (bias < 0)
                  after = node;
              else
                  after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
              return 0;
          while (after && !ContentView.get(after))
              after = after.nextSibling;
          if (!after)
              return this.length;
          for (let i = 0, pos = 0;; i++) {
              let child = this.children[i];
              if (child.dom == after)
                  return pos;
              pos += child.length + child.breakAfter;
          }
      }
      domBoundsAround(from, to, offset = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos < from && end > to)
                  return child.domBoundsAround(from, to, pos);
              if (end >= from && fromI == -1) {
                  fromI = i;
                  fromStart = pos;
              }
              if (pos > to && child.dom.parentNode == this.dom) {
                  toI = i;
                  toEnd = prevEnd;
                  break;
              }
              prevEnd = end;
              pos = end + child.breakAfter;
          }
          return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
      }
      markDirty(andParent = false) {
          this.dirty |= 2 /* Dirty.Node */;
          this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
              if (childList)
                  parent.dirty |= 2 /* Dirty.Node */;
              if (parent.dirty & 1 /* Dirty.Child */)
                  return;
              parent.dirty |= 1 /* Dirty.Child */;
              childList = false;
          }
      }
      setParent(parent) {
          if (this.parent != parent) {
              this.parent = parent;
              if (this.dirty)
                  this.markParentsDirty(true);
          }
      }
      setDOM(dom) {
          if (this.dom)
              this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
      }
      get rootView() {
          for (let v = this;;) {
              let parent = v.parent;
              if (!parent)
                  return v;
              v = parent;
          }
      }
      replaceChildren(from, to, children = noChildren) {
          this.markDirty();
          for (let i = from; i < to; i++) {
              let child = this.children[i];
              if (child.parent == this)
                  child.destroy();
          }
          this.children.splice(from, to - from, ...children);
          for (let i = 0; i < children.length; i++)
              children[i].setParent(this);
      }
      ignoreMutation(_rec) { return false; }
      ignoreEvent(_event) { return false; }
      childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
      }
      childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
      }
      toString() {
          let name = this.constructor.name.replace("View", "");
          return name + (this.children.length ? "(" + this.children.join() + ")" :
              this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
              (this.breakAfter ? "#" : "");
      }
      static get(node) { return node.cmView; }
      get isEditable() { return true; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          return false;
      }
      become(other) { return false; }
      canReuseDOM(other) { return other.constructor == this.constructor; }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() { return 0; }
      destroy() {
          this.parent = null;
      }
  }
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
  }
  class ChildCursor {
      constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
      }
      findPos(pos, bias = 1) {
          for (;;) {
              if (pos > this.pos || pos == this.pos &&
                  (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                  this.off = pos - this.pos;
                  return this;
              }
              let next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
          }
      }
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
      let { children } = parent;
      let before = children.length ? children[fromI] : null;
      let last = insert.length ? insert[insert.length - 1] : null;
      let breakAtEnd = last ? last.breakAfter : breakAtStart;
      // Change within a single child
      if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
          before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
          return;
      if (toI < children.length) {
          let after = children[toI];
          // Make sure the end of the child after the update is preserved in `after`
          if (after && toOff < after.length) {
              // If we're splitting a child, separate part of it to avoid that
              // being mangled when updating the child before the update.
              if (fromI == toI) {
                  after = after.split(toOff);
                  toOff = 0;
              }
              // If the element after the replacement should be merged with
              // the last replacing element, update `content`
              if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                  insert[insert.length - 1] = after;
              }
              else {
                  // Remove the start of the after element, if necessary, and
                  // add it to `content`.
                  if (toOff)
                      after.merge(0, toOff, null, false, 0, openEnd);
                  insert.push(after);
              }
          }
          else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
              // The element at `toI` is entirely covered by this range.
              // Preserve its line break, if any.
              if (last)
                  last.breakAfter = 1;
              else
                  breakAtStart = 1;
          }
          // Since we've handled the next element from the current elements
          // now, make sure `toI` points after that.
          toI++;
      }
      if (before) {
          before.breakAfter = breakAtStart;
          if (fromOff > 0) {
              if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                  before.breakAfter = insert.shift().breakAfter;
              }
              else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                  before.merge(fromOff, before.length, null, false, openStart, 0);
              }
              fromI++;
          }
      }
      // Try to merge widgets on the boundaries of the replacement
      while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
              toI--;
              insert.pop();
              openEnd = insert.length ? 0 : openStart;
          }
          else if (children[fromI].become(insert[0])) {
              fromI++;
              insert.shift();
              openStart = insert.length ? 0 : openEnd;
          }
          else {
              break;
          }
      }
      if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
          children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
          fromI--;
      if (fromI < toI || insert.length)
          parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
      let cur = parent.childCursor();
      let { i: toI, off: toOff } = cur.findPos(to, 1);
      let { i: fromI, off: fromOff } = cur.findPos(from, -1);
      let dLen = from - to;
      for (let view of insert)
          dLen += view.length;
      parent.length += dLen;
      replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }

  let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
  const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
  const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  const ie = !!(ie_upto10 || ie_11up || ie_edge);
  const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
  const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
  const webkit = "webkitFontSmoothing" in doc.documentElement.style;
  const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
  const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
      mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
      windows: /*@__PURE__*//Win/.test(nav.platform),
      linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
      ie,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /*@__PURE__*//Android\b/.test(nav.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };

  const MaxJoinLen = 256;
  class TextView extends ContentView {
      constructor(text) {
          super();
          this.text = text;
      }
      get length() { return this.text.length; }
      createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(track) {
          if (!this.dom)
              this.createDOM();
          if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom)
                  track.written = true;
              this.dom.nodeValue = this.text;
          }
      }
      reuseDOM(dom) {
          if (dom.nodeType == 3)
              this.createDOM(dom);
      }
      merge(from, to, source) {
          if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
              return false;
          this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = new TextView(this.text.slice(from));
          this.text = this.text.slice(0, from);
          this.markDirty();
          return result;
      }
      localPosFromDOM(node, offset) {
          return node == this.dom ? offset : offset ? this.text.length : 0;
      }
      domAtPos(pos) { return new DOMPos(this.dom, pos); }
      domBoundsAround(_from, _to, offset) {
          return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
      }
  }
  class MarkView extends ContentView {
      constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch of children)
              ch.setParent(this);
      }
      setAttrs(dom) {
          clearAttributes(dom);
          if (this.mark.class)
              dom.className = this.mark.class;
          if (this.mark.attrs)
              for (let name in this.mark.attrs)
                  dom.setAttribute(name, this.mark.attrs[name]);
          return dom;
      }
      reuseDOM(node) {
          if (node.nodeName == this.mark.tagName.toUpperCase()) {
              this.setDOM(node);
              this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
          }
      }
      sync(track) {
          if (!this.dom)
              this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
          else if (this.dirty & 4 /* Dirty.Attrs */)
              this.setAttrs(this.dom);
          super.sync(track);
      }
      merge(from, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
              (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
              return false;
          mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt of this.children) {
              let end = off + elt.length;
              if (end > from)
                  result.push(off < from ? elt.split(from - off) : elt);
              if (detachFrom < 0 && off >= from)
                  detachFrom = i;
              off = end;
              i++;
          }
          let length = this.length - from;
          this.length = from;
          if (detachFrom > -1) {
              this.children.length = detachFrom;
              this.markDirty();
          }
          return new MarkView(this.mark, result, length);
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
      }
  }
  function textCoords(text, pos, side) {
      let length = text.nodeValue.length;
      if (pos > length)
          pos = length;
      let from = pos, to = pos, flatten = 0;
      if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
              if (pos) {
                  from--;
                  flatten = 1;
              } // FIXME this is wrong in RTL text
              else if (to < length) {
                  to++;
                  flatten = -1;
              }
          }
      }
      else {
          if (side < 0)
              from--;
          else if (to < length)
              to++;
      }
      let rects = textRange(text, from, to).getClientRects();
      if (!rects.length)
          return Rect0;
      let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
      if (browser.safari && !flatten && rect.width == 0)
          rect = Array.prototype.find.call(rects, r => r.width) || rect;
      return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  class WidgetView extends ContentView {
      constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
          this.prevWidget = null;
      }
      static create(widget, length, side) {
          return new (widget.customView || WidgetView)(widget, length, side);
      }
      split(from) {
          let result = WidgetView.create(this.widget, this.length - from, this.side);
          this.length -= from;
          return result;
      }
      sync() {
          if (!this.dom || !this.widget.updateDOM(this.dom)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
          }
      }
      getSide() { return this.side; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      become(other) {
          if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
              if (this.widget.constructor == other.widget.constructor) {
                  if (!this.widget.eq(other.widget))
                      this.markDirty(true);
                  if (this.dom && !this.prevWidget)
                      this.prevWidget = this.widget;
                  this.widget = other.widget;
                  return true;
              }
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get overrideDOMText() {
          if (this.length == 0)
              return Text$1.empty;
          let top = this;
          while (top.parent)
              top = top.parent;
          let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
          return text ? text.slice(start, start + this.length) : Text$1.empty;
      }
      domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      domBoundsAround() { return null; }
      coordsAt(pos, side) {
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
              return Rect0;
          for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
              rect = rects[i];
              if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                  break;
          }
          return this.length ? rect : flattenRect(rect, this.side > 0);
      }
      get isEditable() { return false; }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
  }
  class CompositionView extends WidgetView {
      domAtPos(pos) {
          let { topView, text } = this.widget;
          if (!topView)
              return new DOMPos(text, Math.min(pos, text.nodeValue.length));
          return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
      }
      sync() { this.setDOM(this.widget.toDOM()); }
      localPosFromDOM(node, offset) {
          let { topView, text } = this.widget;
          if (!topView)
              return Math.min(offset, this.length);
          return posFromDOMInCompositionTree(node, offset, topView, text);
      }
      ignoreMutation() { return false; }
      get overrideDOMText() { return null; }
      coordsAt(pos, side) {
          let { topView, text } = this.widget;
          if (!topView)
              return textCoords(text, pos, side);
          return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
      }
      destroy() {
          var _a;
          super.destroy();
          (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
      }
      get isEditable() { return true; }
      canReuseDOM() { return true; }
  }
  // Uses the old structure of a chunk of content view frozen for
  // composition to try and find a reasonable DOM location for the given
  // offset.
  function scanCompositionTree(pos, side, view, text, enterView, fromText) {
      if (view instanceof MarkView) {
          for (let child = view.dom.firstChild; child; child = child.nextSibling) {
              let desc = ContentView.get(child);
              if (!desc)
                  return fromText(pos, side);
              let hasComp = contains(child, text);
              let len = desc.length + (hasComp ? text.nodeValue.length : 0);
              if (pos < len || pos == len && desc.getSide() <= 0)
                  return hasComp ? scanCompositionTree(pos, side, desc, text, enterView, fromText) : enterView(desc, pos, side);
              pos -= len;
          }
          return enterView(view, view.length, -1);
      }
      else if (view.dom == text) {
          return fromText(pos, side);
      }
      else {
          return enterView(view, pos, side);
      }
  }
  function posFromDOMInCompositionTree(node, offset, view, text) {
      if (view instanceof MarkView) {
          for (let child of view.children) {
              let pos = 0, hasComp = contains(child.dom, text);
              if (contains(child.dom, node))
                  return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
              pos += hasComp ? text.nodeValue.length : child.length;
          }
      }
      else if (view.dom == text) {
          return Math.min(offset, text.nodeValue.length);
      }
      return view.localPosFromDOM(node, offset);
  }
  // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  class WidgetBufferView extends ContentView {
      constructor(side) {
          super();
          this.side = side;
      }
      get length() { return 0; }
      merge() { return false; }
      become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
      }
      split() { return new WidgetBufferView(this.side); }
      sync() {
          if (!this.dom) {
              let dom = document.createElement("img");
              dom.className = "cm-widgetBuffer";
              dom.setAttribute("aria-hidden", "true");
              this.setDOM(dom);
          }
      }
      getSide() { return this.side; }
      domAtPos(pos) { return DOMPos.before(this.dom); }
      localPosFromDOM() { return 0; }
      domBoundsAround() { return null; }
      coordsAt(pos) {
          let imgRect = this.dom.getBoundingClientRect();
          // Since the <img> height doesn't correspond to text height, try
          // to borrow the height from some sibling node.
          let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
          return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top
              ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
      }
      get overrideDOMText() {
          return Text$1.empty;
      }
  }
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineSiblingRect(view, side) {
      let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
      while (parent && index >= 0) {
          if (side < 0 ? index > 0 : index < parent.children.length) {
              let next = parent.children[index + side];
              if (next instanceof TextView) {
                  let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
                  if (nextRect)
                      return nextRect;
              }
              index += side;
          }
          else if (parent instanceof MarkView && parent.parent) {
              index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
              parent = parent.parent;
          }
          else {
              let last = parent.dom.lastChild;
              if (last && last.nodeName == "BR")
                  return last.getClientRects()[0];
              break;
          }
      }
      return undefined;
  }
  function inlineDOMAtPos(parent, pos) {
      let dom = parent.dom, { children } = parent, i = 0;
      for (let off = 0; i < children.length; i++) {
          let child = children[i], end = off + child.length;
          if (end == off && child.getSide() <= 0)
              continue;
          if (pos > off && pos < end && child.dom.parentNode == dom)
              return child.domAtPos(pos - off);
          if (pos <= off)
              break;
          off = end;
      }
      for (let j = i; j > 0; j--) {
          let prev = children[j - 1];
          if (prev.dom.parentNode == dom)
              return prev.domAtPos(prev.length);
      }
      for (let j = i; j < children.length; j++) {
          let next = children[j];
          if (next.dom.parentNode == dom)
              return next.domAtPos(0);
      }
      return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
      let last, { children } = parent;
      if (open > 0 && view instanceof MarkView && children.length &&
          (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
      }
      else {
          children.push(view);
          view.setParent(parent);
      }
      parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
      let before = null, beforePos = -1, after = null, afterPos = -1;
      function scan(view, pos) {
          for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
              let child = view.children[i], end = off + child.length;
              if (end >= pos) {
                  if (child.children.length) {
                      scan(child, pos - off);
                  }
                  else if (!after && (end > pos || off == end && child.getSide() > 0)) {
                      after = child;
                      afterPos = pos - off;
                  }
                  else if (off < pos || (off == end && child.getSide() < 0)) {
                      before = child;
                      beforePos = pos - off;
                  }
              }
              off = end;
          }
      }
      scan(view, pos);
      let target = (side < 0 ? before : after) || before || after;
      if (target)
          return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
      return fallbackRect(view);
  }
  function fallbackRect(view) {
      let last = view.dom.lastChild;
      if (!last)
          return view.dom.getBoundingClientRect();
      let rects = clientRectsFor(last);
      return rects[rects.length - 1] || null;
  }

  function combineAttrs(source, target) {
      for (let name in source) {
          if (name == "class" && target.class)
              target.class += " " + source.class;
          else if (name == "style" && target.style)
              target.style += ";" + source.style;
          else
              target[name] = source[name];
      }
      return target;
  }
  function attrsEq(a, b) {
      if (a == b)
          return true;
      if (!a || !b)
          return false;
      let keysA = Object.keys(a), keysB = Object.keys(b);
      if (keysA.length != keysB.length)
          return false;
      for (let key of keysA) {
          if (keysB.indexOf(key) == -1 || a[key] !== b[key])
              return false;
      }
      return true;
  }
  function updateAttrs(dom, prev, attrs) {
      let changed = null;
      if (prev)
          for (let name in prev)
              if (!(attrs && name in attrs))
                  dom.removeAttribute(changed = name);
      if (attrs)
          for (let name in attrs)
              if (!(prev && prev[name] == attrs[name]))
                  dom.setAttribute(changed = name, attrs[name]);
      return !!changed;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  class WidgetType {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) { return false; }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom) { return false; }
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() { return -1; }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) { return true; }
      /**
      @internal
      */
      get customView() { return null; }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) { }
  }
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/(function (BlockType) {
      /**
      A line of text.
      */
      BlockType[BlockType["Text"] = 0] = "Text";
      /**
      A block widget associated with the position after it.
      */
      BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
      /**
      A block widget associated with the position before it.
      */
      BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
      /**
      A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
      */
      BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType})(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  class Decoration extends RangeValue {
      constructor(
      /**
      @internal
      */
      startSide, 
      /**
      @internal
      */
      endSide, 
      /**
      @internal
      */
      widget, 
      /**
      The config object used to create this decoration. You can
      include additional properties in there to store metadata about
      your decoration.
      */
      spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() { return false; }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
          return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
          let side = spec.side || 0, block = !!spec.block;
          side += block ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */) : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
          return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
          let block = !!spec.block, startSide, endSide;
          if (spec.isBlockGap) {
              startSide = -500000000 /* Side.GapStart */;
              endSide = 400000000 /* Side.GapEnd */;
          }
          else {
              let { start, end } = getInclusive(spec, block);
              startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
              endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
          }
          return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
          return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
          return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
  }
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  class MarkDecoration extends Decoration {
      constructor(spec) {
          let { start, end } = getInclusive(spec);
          super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
      }
      eq(other) {
          return this == other ||
              other instanceof MarkDecoration &&
                  this.tagName == other.tagName &&
                  this.class == other.class &&
                  attrsEq(this.attrs, other.attrs);
      }
      range(from, to = from) {
          if (from >= to)
              throw new RangeError("Mark decorations may not be empty");
          return super.range(from, to);
      }
  }
  MarkDecoration.prototype.point = false;
  class LineDecoration extends Decoration {
      constructor(spec) {
          super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
      }
      eq(other) {
          return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from, to = from) {
          if (to != from)
              throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from, to);
      }
  }
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  class PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block;
          this.isReplace = isReplace;
          this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
          return this.startSide < this.endSide ? BlockType.WidgetRange
              : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
      eq(other) {
          return other instanceof PointDecoration &&
              widgetsEq(this.widget, other.widget) &&
              this.block == other.block &&
              this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from, to = from) {
          if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
              throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from)
              throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from, to);
      }
  }
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
      let { inclusiveStart: start, inclusiveEnd: end } = spec;
      if (start == null)
          start = spec.inclusive;
      if (end == null)
          end = spec.inclusive;
      return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a, b) {
      return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last] + margin >= from)
          ranges[last] = Math.max(ranges[last], to);
      else
          ranges.push(from, to);
  }

  class LineView extends ContentView {
      constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = undefined;
          this.attrs = null;
          this.breakAfter = 0;
      }
      // Consumes source
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source) {
              if (!(source instanceof LineView))
                  return false;
              if (!this.dom)
                  source.transferDOM(this); // Reuse source.dom when appropriate
          }
          if (hasStart)
              this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
          return true;
      }
      split(at) {
          let end = new LineView;
          end.breakAfter = this.breakAfter;
          if (this.length == 0)
              return end;
          let { i, off } = this.childPos(at);
          if (off) {
              end.append(this.children[i].split(off), 0);
              this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
              i++;
          }
          for (let j = i; j < this.children.length; j++)
              end.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
              this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end;
      }
      transferDOM(other) {
          if (!this.dom)
              return;
          this.markDirty();
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
          this.prevAttrs = undefined;
          this.dom = null;
      }
      setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                  this.prevAttrs = this.attrs;
                  this.markDirty();
              }
              this.attrs = attrs;
          }
      }
      append(child, openStart) {
          joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
              this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
              this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      reuseDOM(node) {
          if (node.nodeName == "DIV") {
              this.setDOM(node);
              this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
          }
      }
      sync(track) {
          var _a;
          if (!this.dom) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          else if (this.dirty & 4 /* Dirty.Attrs */) {
              clearAttributes(this.dom);
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          if (this.prevAttrs !== undefined) {
              updateAttrs(this.dom, this.prevAttrs, this.attrs);
              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
          }
          super.sync(track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
              last = last.lastChild;
          if (!last || !this.length ||
              last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                  (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
              let hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
          }
      }
      measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
              return null;
          let totalWidth = 0;
          for (let child of this.children) {
              if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                  return null;
              let rects = clientRectsFor(child.dom);
              if (rects.length != 1)
                  return null;
              totalWidth += rects[0].width;
          }
          return !totalWidth ? null : {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length
          };
      }
      coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
      }
      become(_other) { return false; }
      get type() { return BlockType.Text; }
      static find(docView, pos) {
          for (let i = 0, off = 0; i < docView.children.length; i++) {
              let block = docView.children[i], end = off + block.length;
              if (end >= pos) {
                  if (block instanceof LineView)
                      return block;
                  if (end > pos)
                      break;
              }
              off = end + block.breakAfter;
          }
          return null;
      }
  }
  class BlockWidgetView extends ContentView {
      constructor(widget, length, type) {
          super();
          this.widget = widget;
          this.length = length;
          this.type = type;
          this.breakAfter = 0;
          this.prevWidget = null;
      }
      merge(from, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      split(at) {
          let len = this.length - at;
          this.length = at;
          let end = new BlockWidgetView(this.widget, len, this.type);
          end.breakAfter = this.breakAfter;
          return end;
      }
      get children() { return noChildren; }
      sync() {
          if (!this.dom || !this.widget.updateDOM(this.dom)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
          }
      }
      get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text$1.empty;
      }
      domBoundsAround() { return null; }
      become(other) {
          if (other instanceof BlockWidgetView && other.type == this.type &&
              other.widget.constructor == this.widget.constructor) {
              if (!other.widget.eq(this.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              this.breakAfter = other.breakAfter;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
  }

  class ContentBuilder {
      constructor(doc, pos, end, disallowBlockEffectsFor) {
          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.disallowBlockEffectsFor = disallowBlockEffectsFor;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0 /* Buf.No */;
          this.bufferMarks = [];
          // Set to false directly after a widget that covers the position after it
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
      }
      posCovered() {
          if (this.content.length == 0)
              return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
      }
      getLine() {
          if (!this.curLine) {
              this.content.push(this.curLine = new LineView);
              this.atCursorPos = true;
          }
          return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
          if (this.pendingBuffer) {
              this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
              this.pendingBuffer = 0 /* Buf.No */;
          }
      }
      addBlockWidget(view) {
          this.flushBuffer();
          this.curLine = null;
          this.content.push(view);
      }
      finish(openEnd) {
          if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
              this.flushBuffer();
          else
              this.pendingBuffer = 0 /* Buf.No */;
          if (!this.posCovered())
              this.getLine();
      }
      buildText(length, active, openStart) {
          while (length > 0) {
              if (this.textOff == this.text.length) {
                  let { value, lineBreak, done } = this.cursor.next(this.skip);
                  this.skip = 0;
                  if (done)
                      throw new Error("Ran out of text content when drawing inline views");
                  if (lineBreak) {
                      if (!this.posCovered())
                          this.getLine();
                      if (this.content.length)
                          this.content[this.content.length - 1].breakAfter = 1;
                      else
                          this.breakAtStart = 1;
                      this.flushBuffer();
                      this.curLine = null;
                      this.atCursorPos = true;
                      length--;
                      continue;
                  }
                  else {
                      this.text = value;
                      this.textOff = 0;
                  }
              }
              let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
              this.flushBuffer(active.slice(active.length - openStart));
              this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.atCursorPos = true;
              this.textOff += take;
              length -= take;
              openStart = 0;
          }
      }
      span(from, to, active, openStart) {
          this.buildText(to - from, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      point(from, to, deco, active, openStart, index) {
          if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
              if (deco.block)
                  throw new RangeError("Block decorations may not be specified via plugins");
              if (to > this.doc.lineAt(this.pos).to)
                  throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
          }
          let len = to - from;
          if (deco instanceof PointDecoration) {
              if (deco.block) {
                  let { type } = deco;
                  if (type == BlockType.WidgetAfter && !this.posCovered())
                      this.getLine();
                  this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
              }
              else {
                  let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
                  let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
                  let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                  let line = this.getLine();
                  if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore)
                      this.pendingBuffer = 0 /* Buf.No */;
                  this.flushBuffer(active);
                  if (cursorBefore) {
                      line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                      openStart = active.length + Math.max(0, openStart - active.length);
                  }
                  line.append(wrapMarks(view, active), openStart);
                  this.atCursorPos = cursorAfter;
                  this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                  if (this.pendingBuffer)
                      this.bufferMarks = active.slice();
              }
          }
          else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
              this.getLine().addLineDeco(deco);
          }
          if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                  this.textOff += len;
              }
              else {
                  this.skip += len - (this.text.length - this.textOff);
                  this.text = "";
                  this.textOff = 0;
              }
              this.pos = to;
          }
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      static build(text, from, to, decorations, dynamicDecorationMap) {
          let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
          builder.openEnd = RangeSet.spans(decorations, from, to, builder);
          if (builder.openStart < 0)
              builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
      }
  }
  function wrapMarks(view, active) {
      for (let mark of active)
          view = new MarkView(mark, [view], view.length);
      return view;
  }
  class NullWidget extends WidgetType {
      constructor(tag) {
          super();
          this.tag = tag;
      }
      eq(other) { return other.tag == this.tag; }
      toDOM() { return document.createElement(this.tag); }
      updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
  }

  const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  const mouseSelectionStyle = /*@__PURE__*/Facet.define();
  const exceptionSink = /*@__PURE__*/Facet.define();
  const updateListener = /*@__PURE__*/Facet.define();
  const inputHandler$1 = /*@__PURE__*/Facet.define();
  const perLineTextDirection = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const nativeSelectionHidden = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  class ScrollTarget {
      constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
      }
      map(changes) {
          return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
      }
  }
  const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
      let handler = state.facet(exceptionSink);
      if (handler.length)
          handler[0](exception);
      else if (window.onerror)
          window.onerror(String(exception), context, undefined, undefined, exception);
      else if (context)
          console.error(context + ":", exception);
      else
          console.error(exception);
  }
  const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
  let nextPluginID = 0;
  const viewPlugin = /*@__PURE__*/Facet.define();
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view.
  */
  class ViewPlugin {
      constructor(
      /**
      @internal
      */
      id, 
      /**
      @internal
      */
      create, 
      /**
      @internal
      */
      domEventHandlers, buildExtensions) {
          this.id = id;
          this.create = create;
          this.domEventHandlers = domEventHandlers;
          this.extension = buildExtensions(this);
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create, spec) {
          const { eventHandlers, provide, decorations: deco } = spec || {};
          return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
              let ext = [viewPlugin.of(plugin)];
              if (deco)
                  ext.push(decorations.of(view => {
                      let pluginInst = view.plugin(plugin);
                      return pluginInst ? deco(pluginInst) : Decoration.none;
                  }));
              if (provide)
                  ext.push(provide(plugin));
              return ext;
          });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
          return ViewPlugin.define(view => new cls(view), spec);
      }
  }
  class PluginInstance {
      constructor(spec) {
          this.spec = spec;
          // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `false`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.
          this.mustUpdate = null;
          // This is null when the plugin is initially created, but
          // initialized on the first update.
          this.value = null;
      }
      update(view) {
          if (!this.value) {
              if (this.spec) {
                  try {
                      this.value = this.spec.create(view);
                  }
                  catch (e) {
                      logException(view.state, e, "CodeMirror plugin crashed");
                      this.deactivate();
                  }
              }
          }
          else if (this.mustUpdate) {
              let update = this.mustUpdate;
              this.mustUpdate = null;
              if (this.value.update) {
                  try {
                      this.value.update(update);
                  }
                  catch (e) {
                      logException(update.state, e, "CodeMirror plugin crashed");
                      if (this.value.destroy)
                          try {
                              this.value.destroy();
                          }
                          catch (_) { }
                      this.deactivate();
                  }
              }
          }
          return this;
      }
      destroy(view) {
          var _a;
          if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                  this.value.destroy();
              }
              catch (e) {
                  logException(view.state, e, "CodeMirror plugin crashed");
              }
          }
      }
      deactivate() {
          this.spec = this.value = null;
      }
  }
  const editorAttributes = /*@__PURE__*/Facet.define();
  const contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  const decorations = /*@__PURE__*/Facet.define();
  const atomicRanges = /*@__PURE__*/Facet.define();
  const scrollMargins = /*@__PURE__*/Facet.define();
  const styleModule = /*@__PURE__*/Facet.define();
  class ChangedRange {
      constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
      }
      join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set) {
          let i = set.length, me = this;
          for (; i > 0; i--) {
              let range = set[i - 1];
              if (range.fromA > me.toA)
                  continue;
              if (range.toA < me.fromA)
                  break;
              me = me.join(range);
              set.splice(i - 1, 1);
          }
          set.splice(i, 0, me);
          return set;
      }
      static extendWithRanges(diff, ranges) {
          if (ranges.length == 0)
              return diff;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              let next = dI == diff.length ? null : diff[dI], off = posA - posB;
              let end = next ? next.fromB : 1e9;
              while (rI < ranges.length && ranges[rI] < end) {
                  let from = ranges[rI], to = ranges[rI + 1];
                  let fromB = Math.max(posB, from), toB = Math.min(end, to);
                  if (fromB <= toB)
                      new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                  if (to > end)
                      break;
                  else
                      rI += 2;
              }
              if (!next)
                  return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
          }
      }
  }
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  class ViewUpdate {
      constructor(
      /**
      The editor view that the update is associated with.
      */
      view, 
      /**
      The new editor state.
      */
      state, 
      /**
      The transactions involved in the update. May be empty.
      */
      transactions) {
          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */
          this.flags = 0;
          this.startState = view.state;
          this.changes = ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
              this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
          let focus = view.hasFocus;
          if (focus != view.inputState.notifiedFocused) {
              view.inputState.notifiedFocused = focus;
              this.flags |= 1 /* UpdateFlag.Focus */;
          }
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
          return new ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
          return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
          return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
          return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
          return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
          return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
          return this.transactions.some(tr => tr.selection);
      }
      /**
      @internal
      */
      get empty() { return this.flags == 0 && this.transactions.length == 0; }
  }

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/(function (Direction) {
      // (These are chosen to match the base levels, in bidi algorithm
      // terms, of spans in that direction.)
      /**
      Left-to-right.
      */
      Direction[Direction["LTR"] = 0] = "LTR";
      /**
      Right-to-left.
      */
      Direction[Direction["RTL"] = 1] = "RTL";
  return Direction})(Direction || (Direction = {}));
  const LTR = Direction.LTR, RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
      let result = [];
      for (let i = 0; i < str.length; i++)
          result.push(1 << +str[i]);
      return result;
  }
  // Character types for codepoints 0 to 0xf8
  const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (let p of ["()", "[]", "{}"]) {
      let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
      Brackets[l] = r;
      Brackets[r] = -l;
  }
  function charType(ch) {
      return ch <= 0xf7 ? LowTypes[ch] :
          0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
              0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                  0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                      0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ :
                          0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ :
                              ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
  }
  const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  class BidiSpan {
      /**
      @internal
      */
      constructor(
      /**
      The start of the span (relative to the start of the line).
      */
      from, 
      /**
      The end of the span.
      */
      to, 
      /**
      The ["bidi
      level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
      of the span (in this context, 0 means
      left-to-right, 1 means right-to-left, 2 means left-to-right
      number inside right-to-left text).
      */
      level) {
          this.from = from;
          this.to = to;
          this.level = level;
      }
      /**
      The direction of this span.
      */
      get dir() { return this.level % 2 ? RTL : LTR; }
      /**
      @internal
      */
      side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
      /**
      @internal
      */
      static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
              let span = order[i];
              if (span.from <= index && span.to >= index) {
                  if (span.level == level)
                      return i;
                  // When multiple spans match, if assoc != 0, take the one that
                  // covers that side, otherwise take the one with the minimum
                  // level.
                  if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                      maybe = i;
              }
          }
          if (maybe < 0)
              throw new RangeError("Index out of range");
          return maybe;
      }
  }
  // Reused array of character types
  const types = [];
  function computeOrder(line, direction) {
      let len = line.length, outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */, oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;
      if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line))
          return trivialOrder(len);
      // W1. Examine each non-spacing mark (NSM) in the level run, and
      // change the type of the NSM to the type of the previous
      // character. If the NSM is at the start of the level run, it will
      // get the type of sor.
      // W2. Search backwards from each instance of a European number
      // until the first strong type (R, L, AL, or sor) is found. If an
      // AL is found, change the type of the European number to Arabic
      // number.
      // W3. Change all ALs to R.
      // (Left after this: L, R, EN, AN, ET, CS, NI)
      for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
          let type = charType(line.charCodeAt(i));
          if (type == 512 /* T.NSM */)
              type = prev;
          else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
              type = 16 /* T.AN */;
          types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
          if (type & 7 /* T.Strong */)
              prevStrong = type;
          prev = type;
      }
      // W5. A sequence of European terminators adjacent to European
      // numbers changes to all European numbers.
      // W6. Otherwise, separators and terminators change to Other
      // Neutral.
      // W7. Search backwards from each instance of a European number
      // until the first strong type (R, L, or sor) is found. If an L is
      // found, then change the type of the European number to L.
      // (Left after this: L, R, EN+AN, NI)
      for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
          let type = types[i];
          if (type == 128 /* T.CS */) {
              if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                  type = types[i] = prev;
              else
                  types[i] = 256 /* T.NI */;
          }
          else if (type == 64 /* T.ET */) {
              let end = i + 1;
              while (end < len && types[end] == 64 /* T.ET */)
                  end++;
              let replace = (i && prev == 8 /* T.EN */) || (end < len && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
              for (let j = i; j < end; j++)
                  types[j] = replace;
              i = end - 1;
          }
          else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
              types[i] = 1 /* T.L */;
          }
          prev = type;
          if (type & 7 /* T.Strong */)
              prevStrong = type;
      }
      // N0. Process bracket pairs in an isolating run sequence
      // sequentially in the logical order of the text positions of the
      // opening paired brackets using the logic given below. Within this
      // scope, bidirectional types EN and AN are treated as R.
      for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
          // Keeps [startIndex, type, strongSeen] triples for each open
          // bracket on BracketStack.
          if (br = Brackets[ch = line.charCodeAt(i)]) {
              if (br < 0) { // Closing bracket
                  for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                      if (BracketStack[sJ + 1] == -br) {
                          let flags = BracketStack[sJ + 2];
                          let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                              !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                  (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                          if (type)
                              types[i] = types[BracketStack[sJ]] = type;
                          sI = sJ;
                          break;
                      }
                  }
              }
              else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                  break;
              }
              else {
                  BracketStack[sI++] = i;
                  BracketStack[sI++] = ch;
                  BracketStack[sI++] = context;
              }
          }
          else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
              let embed = type == outerType;
              context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
              for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                  let cur = BracketStack[sJ + 2];
                  if (cur & 2 /* Bracketed.EmbedInside */)
                      break;
                  if (embed) {
                      BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                  }
                  else {
                      if (cur & 4 /* Bracketed.OppositeInside */)
                          break;
                      BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                  }
              }
          }
      }
      // N1. A sequence of neutrals takes the direction of the
      // surrounding strong text if the text on both sides has the same
      // direction. European and Arabic numbers act as if they were R in
      // terms of their influence on neutrals. Start-of-level-run (sor)
      // and end-of-level-run (eor) are used at level run boundaries.
      // N2. Any remaining neutrals take the embedding direction.
      // (Left after this: L, R, EN+AN)
      for (let i = 0; i < len; i++) {
          if (types[i] == 256 /* T.NI */) {
              let end = i + 1;
              while (end < len && types[end] == 256 /* T.NI */)
                  end++;
              let beforeL = (i ? types[i - 1] : outerType) == 1 /* T.L */;
              let afterL = (end < len ? types[end] : outerType) == 1 /* T.L */;
              let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
              for (let j = i; j < end; j++)
                  types[j] = replace;
              i = end - 1;
          }
      }
      // Here we depart from the documented algorithm, in order to avoid
      // building up an actual levels array. Since there are only three
      // levels (0, 1, 2) in an implementation that doesn't take
      // explicit embedding into account, we can build up the order on
      // the fly, without following the level-based algorithm.
      let order = [];
      if (outerType == 1 /* T.L */) {
          for (let i = 0; i < len;) {
              let start = i, rtl = types[i++] != 1 /* T.L */;
              while (i < len && rtl == (types[i] != 1 /* T.L */))
                  i++;
              if (rtl) {
                  for (let j = i; j > start;) {
                      let end = j, l = types[--j] != 2 /* T.R */;
                      while (j > start && l == (types[j - 1] != 2 /* T.R */))
                          j--;
                      order.push(new BidiSpan(j, end, l ? 2 : 1));
                  }
              }
              else {
                  order.push(new BidiSpan(start, i, 0));
              }
          }
      }
      else {
          for (let i = 0; i < len;) {
              let start = i, rtl = types[i++] == 2 /* T.R */;
              while (i < len && rtl == (types[i] == 2 /* T.R */))
                  i++;
              order.push(new BidiSpan(start, i, rtl ? 1 : 2));
          }
      }
      return order;
  }
  function trivialOrder(length) {
      return [new BidiSpan(0, length, 0)];
  }
  let movedOver = "";
  function moveVisually(line, order, dir, start, forward) {
      var _a;
      let startIndex = start.head - line.from, spanI = -1;
      if (startIndex == 0) {
          if (!forward || !line.length)
              return null;
          if (order[0].level != dir) {
              startIndex = order[0].side(false, dir);
              spanI = 0;
          }
      }
      else if (startIndex == line.length) {
          if (forward)
              return null;
          let last = order[order.length - 1];
          if (last.level != dir) {
              startIndex = last.side(true, dir);
              spanI = order.length - 1;
          }
      }
      if (spanI < 0)
          spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
      let span = order[spanI];
      // End of span. (But not end of line--that was checked for above.)
      if (startIndex == span.side(forward, dir)) {
          span = order[spanI += forward ? 1 : -1];
          startIndex = span.side(!forward, dir);
      }
      let indexForward = forward == (span.dir == dir);
      let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
      movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
      if (nextIndex != span.side(forward, dir))
          return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
      let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
      if (!nextSpan && span.level != dir)
          return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
      if (nextSpan && nextSpan.level < span.level)
          return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
      return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
  }

  const LineBreakPlaceholder = "\uffff";
  class DOMReader {
      constructor(points, state) {
          this.points = points;
          this.text = "";
          this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text) {
          this.text += text;
      }
      lineBreak() {
          this.text += LineBreakPlaceholder;
      }
      readRange(start, end) {
          if (!start)
              return this;
          let parent = start.parentNode;
          for (let cur = start;;) {
              this.findPointBefore(parent, cur);
              this.readNode(cur);
              let next = cur.nextSibling;
              if (next == end)
                  break;
              let view = ContentView.get(cur), nextView = ContentView.get(next);
              if (view && nextView ? view.breakAfter :
                  (view ? view.breakAfter : isBlockElement(cur)) ||
                      (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
                  this.lineBreak();
              cur = next;
          }
          this.findPointBefore(parent, end);
          return this;
      }
      readTextNode(node) {
          let text = node.nodeValue;
          for (let point of this.points)
              if (point.node == node)
                  point.pos = this.text.length + Math.min(point.offset, text.length);
          for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
              let nextBreak = -1, breakSize = 1, m;
              if (this.lineSeparator) {
                  nextBreak = text.indexOf(this.lineSeparator, off);
                  breakSize = this.lineSeparator.length;
              }
              else if (m = re.exec(text)) {
                  nextBreak = m.index;
                  breakSize = m[0].length;
              }
              this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
              if (nextBreak < 0)
                  break;
              this.lineBreak();
              if (breakSize > 1)
                  for (let point of this.points)
                      if (point.node == node && point.pos > this.text.length)
                          point.pos -= breakSize - 1;
              off = nextBreak + breakSize;
          }
      }
      readNode(node) {
          if (node.cmIgnore)
              return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          if (fromView != null) {
              this.findPointInside(node, fromView.length);
              for (let i = fromView.iter(); !i.next().done;) {
                  if (i.lineBreak)
                      this.lineBreak();
                  else
                      this.append(i.value);
              }
          }
          else if (node.nodeType == 3) {
              this.readTextNode(node);
          }
          else if (node.nodeName == "BR") {
              if (node.nextSibling)
                  this.lineBreak();
          }
          else if (node.nodeType == 1) {
              this.readRange(node.firstChild, null);
          }
      }
      findPointBefore(node, next) {
          for (let point of this.points)
              if (point.node == node && node.childNodes[point.offset] == next)
                  point.pos = this.text.length;
      }
      findPointInside(node, maxLen) {
          for (let point of this.points)
              if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                  point.pos = this.text.length + Math.min(maxLen, point.offset);
      }
  }
  function isBlockElement(node) {
      return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  class DOMPoint {
      constructor(node, offset) {
          this.node = node;
          this.offset = offset;
          this.pos = -1;
      }
  }

  class DocView extends ContentView {
      constructor(view) {
          super();
          this.view = view;
          this.compositionDeco = Decoration.none;
          this.decorations = [];
          this.dynamicDecorationMap = [];
          // Track a minimum width for the editor. When measuring sizes in
          // measureVisibleLineHeights, this is updated to point at the width
          // of a given element and its extent in the document. When a change
          // happens in that range, these are reset. That way, once we've seen
          // a line/element of a given length, we keep the editor wide enough
          // to fit at least that element, until it is changed, at which point
          // we forget it again.
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          // Used by the resize observer to ignore resizes that we caused
          // ourselves
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView];
          this.children[0].setParent(this);
          this.updateDeco();
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
      }
      get editorView() { return this.view; }
      get length() { return this.view.state.doc.length; }
      // Update the document view to a given state. scrollIntoView can be
      // used as a hint to compute a new viewport that includes that
      // position, if we know the editor is going to scroll that position
      // into view.
      update(update) {
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                  this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
              }
              else {
                  this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                  this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
              }
          }
          if (this.view.inputState.composing < 0)
              this.compositionDeco = Decoration.none;
          else if (update.transactions.length || this.dirty)
              this.compositionDeco = computeCompositionDeco(this.view, update.changes);
          // When the DOM nodes around the selection are moved to another
          // parent, Chrome sometimes reports a different selection through
          // getSelection than the one that it actually shows to the user.
          // This forces a selection update when lines are joined to work
          // around that. Issue #54
          if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
              update.state.doc.lines != update.startState.doc.lines)
              this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {
              return false;
          }
          else {
              this.updateInner(changedRanges, update.startState.doc.length);
              if (update.transactions.length)
                  this.lastUpdate = Date.now();
              return true;
          }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, oldLength);
          let { observer } = this.view;
          observer.ignore(() => {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              this.dom.style.height = this.view.viewState.contentHeight + "px";
              this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
              // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.
              let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
              this.sync(track);
              this.dirty = 0 /* Dirty.Not */;
              if (track && (track.written || observer.selectionRange.focusNode != track.node))
                  this.forceSelection = true;
              this.dom.style.height = "";
          });
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
              for (let child of this.children)
                  if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                      gaps.push(child.dom);
          observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength) {
          let cursor = this.childCursor(oldLength);
          for (let i = changes.length - 1;; i--) {
              let next = i >= 0 ? changes[i] : null;
              if (!next)
                  break;
              let { fromA, toA, fromB, toB } = next;
              let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
              let { i: toI, off: toOff } = cursor.findPos(toA, 1);
              let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
              replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
          }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead || !this.view.observer.selectionRange.focusNode)
              this.view.observer.readSelectionRange();
          if (!(fromPointer || this.mayControlSelection()))
              return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          // FIXME need to handle the case where the selection falls inside a block range
          let anchor = this.domAtPos(main.anchor);
          let head = main.empty ? anchor : this.domAtPos(main.head);
          // Always reset on Firefox when next to an uneditable node to
          // avoid invisible cursor bugs (#111)
          if (browser.gecko && main.empty && betweenUneditable(anchor)) {
              let dummy = document.createTextNode("");
              this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
              anchor = head = new DOMPos(dummy, 0);
              force = true;
          }
          let domSel = this.view.observer.selectionRange;
          // If the selection is already here, or in an equivalent position, don't touch it
          if (force || !domSel.focusNode ||
              !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
              !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
              this.view.observer.ignore(() => {
                  // Chrome Android will hide the virtual keyboard when tapping
                  // inside an uneditable node, and not bring it back when we
                  // move the cursor to its proper position. This tries to
                  // restore the keyboard by cycling focus.
                  if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                      inUneditable(domSel.focusNode, this.dom)) {
                      this.dom.blur();
                      this.dom.focus({ preventScroll: true });
                  }
                  let rawSel = getSelection(this.view.root);
                  if (!rawSel) ;
                  else if (main.empty) {
                      // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                      if (browser.gecko) {
                          let nextTo = nextToUneditable(anchor.node, anchor.offset);
                          if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                              let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                              if (text)
                                  anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
                          }
                      }
                      rawSel.collapse(anchor.node, anchor.offset);
                      if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                          domSel.cursorBidiLevel = main.bidiLevel;
                  }
                  else if (rawSel.extend) {
                      // Selection.extend can be used to create an 'inverted' selection
                      // (one where the focus is before the anchor), but not all
                      // browsers support it yet.
                      rawSel.collapse(anchor.node, anchor.offset);
                      // Safari will ignore the call above when the editor is
                      // hidden, and then raise an error on the call to extend
                      // (#940).
                      try {
                          rawSel.extend(head.node, head.offset);
                      }
                      catch (_) { }
                  }
                  else {
                      // Primitive (IE) way
                      let range = document.createRange();
                      if (main.anchor > main.head)
                          [anchor, head] = [head, anchor];
                      range.setEnd(head.node, head.offset);
                      range.setStart(anchor.node, anchor.offset);
                      rawSel.removeAllRanges();
                      rawSel.addRange(range);
                  }
              });
              this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      enforceCursorAssoc() {
          if (this.compositionDeco.size)
              return;
          let { view } = this, cursor = view.state.selection.main;
          let sel = getSelection(view.root);
          let { anchorNode, anchorOffset } = view.observer.selectionRange;
          if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
              return;
          let line = LineView.find(this, cursor.head);
          if (!line)
              return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
              return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
              return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          // This can go wrong in corner cases like single-character lines,
          // so check and reset if necessary.
          view.observer.readSelectionRange();
          let newRange = view.observer.selectionRange;
          if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
              sel.collapse(anchorNode, anchorOffset);
      }
      mayControlSelection() {
          let active = this.view.root.activeElement;
          return active == this.dom ||
              hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
      }
      nearest(dom) {
          for (let cur = dom; cur;) {
              let domView = ContentView.get(cur);
              if (domView && domView.rootView == this)
                  return domView;
              cur = cur.parentNode;
          }
          return null;
      }
      posFromDOM(node, offset) {
          let view = this.nearest(node);
          if (!view)
              throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
      domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1;) {
              let child = this.children[i];
              if (off < child.length || child instanceof LineView)
                  break;
              i++;
              off = 0;
          }
          return this.children[i].domAtPos(off);
      }
      coordsAt(pos, side) {
          for (let off = this.length, i = this.children.length - 1;; i--) {
              let child = this.children[i], start = off - child.breakAfter - child.length;
              if (pos > start ||
                  (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                      (!i || side == 2 || this.children[i - 1].breakAfter ||
                          (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                  return child.coordsAt(pos - start, side);
              off = start;
          }
      }
      measureVisibleLineHeights(viewport) {
          let result = [], { from, to } = viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1, ltr = this.view.textDirection == Direction.LTR;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (end > to)
                  break;
              if (pos >= from) {
                  let childRect = child.dom.getBoundingClientRect();
                  result.push(childRect.height);
                  if (isWider) {
                      let last = child.dom.lastChild;
                      let rects = last ? clientRectsFor(last) : [];
                      if (rects.length) {
                          let rect = rects[rects.length - 1];
                          let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                          if (width > widest) {
                              widest = width;
                              this.minWidth = contentWidth;
                              this.minWidthFrom = pos;
                              this.minWidthTo = end;
                          }
                      }
                  }
              }
              pos = end + child.breakAfter;
          }
          return result;
      }
      textDirectionAt(pos) {
          let { i } = this.childPos(pos, 1);
          return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
      measureTextSize() {
          for (let child of this.children) {
              if (child instanceof LineView) {
                  let measure = child.measureTextSize();
                  if (measure)
                      return measure;
              }
          }
          // If no workable line exists, force a layout of a measurable element
          let dummy = document.createElement("div"), lineHeight, charWidth;
          dummy.className = "cm-line";
          dummy.style.width = "99999px";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
              this.dom.appendChild(dummy);
              let rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              dummy.remove();
          });
          return { lineHeight, charWidth };
      }
      childCursor(pos = this.length) {
          // Move back to start of last element when possible, so that
          // `ChildCursor.findPos` doesn't have to deal with the edge case
          // of being after the last element.
          let i = this.children.length;
          if (i)
              pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
      }
      computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0;; i++) {
              let next = i == vs.viewports.length ? null : vs.viewports[i];
              let end = next ? next.from - 1 : this.length;
              if (end > pos) {
                  let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                  deco.push(Decoration.replace({
                      widget: new BlockGapWidget(height),
                      block: true,
                      inclusive: true,
                      isBlockGap: true,
                  }).range(pos, end));
              }
              if (!next)
                  break;
              pos = next.to + 1;
          }
          return Decoration.set(deco);
      }
      updateDeco() {
          let allDeco = this.view.state.facet(decorations).map((d, i) => {
              let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
              return dynamic ? d(this.view) : d;
          });
          for (let i = allDeco.length; i < allDeco.length + 3; i++)
              this.dynamicDecorationMap[i] = false;
          return this.decorations = [
              ...allDeco,
              this.compositionDeco,
              this.computeBlockGapDeco(),
              this.view.viewState.lineGapDeco
          ];
      }
      scrollIntoView(target) {
          let { range } = target;
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
              return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
              rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                  right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
          let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
          for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))
              if (margins) {
                  let { left, right, top, bottom } = margins;
                  if (left != null)
                      mLeft = Math.max(mLeft, left);
                  if (right != null)
                      mRight = Math.max(mRight, right);
                  if (top != null)
                      mTop = Math.max(mTop, top);
                  if (bottom != null)
                      mBottom = Math.max(mBottom, bottom);
              }
          let targetRect = {
              left: rect.left - mLeft, top: rect.top - mTop,
              right: rect.right + mRight, bottom: rect.bottom + mBottom
          };
          scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
      }
  }
  function betweenUneditable(pos) {
      return pos.node.nodeType == 1 && pos.node.firstChild &&
          (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
          (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  class BlockGapWidget extends WidgetType {
      constructor(height) {
          super();
          this.height = height;
      }
      toDOM() {
          let elt = document.createElement("div");
          this.updateDOM(elt);
          return elt;
      }
      eq(other) { return other.height == this.height; }
      updateDOM(elt) {
          elt.style.height = this.height + "px";
          return true;
      }
      get estimatedHeight() { return this.height; }
  }
  function compositionSurroundingNode(view) {
      let sel = view.observer.selectionRange;
      let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
      if (!textNode)
          return null;
      let cView = view.docView.nearest(textNode);
      if (!cView)
          return null;
      if (cView instanceof LineView) {
          let topNode = textNode;
          while (topNode.parentNode != cView.dom)
              topNode = topNode.parentNode;
          let prev = topNode.previousSibling;
          while (prev && !ContentView.get(prev))
              prev = prev.previousSibling;
          let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
          return { from: pos, to: pos, node: topNode, text: textNode };
      }
      else {
          for (;;) {
              let { parent } = cView;
              if (!parent)
                  return null;
              if (parent instanceof LineView)
                  break;
              cView = parent;
          }
          let from = cView.posAtStart;
          return { from, to: from + cView.length, node: cView.dom, text: textNode };
      }
  }
  function computeCompositionDeco(view, changes) {
      let surrounding = compositionSurroundingNode(view);
      if (!surrounding)
          return Decoration.none;
      let { from, to, node, text: textNode } = surrounding;
      let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
      let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
          new DOMReader([], state).readRange(node.firstChild, null).text;
      if (newTo - newFrom < text.length) {
          if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
              newTo = newFrom + text.length;
          else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
              newFrom = newTo - text.length;
          else
              return Decoration.none;
      }
      else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
          return Decoration.none;
      }
      let topView = ContentView.get(node);
      if (topView instanceof CompositionView)
          topView = topView.widget.topView;
      else if (topView)
          topView.parent = null;
      return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
          .range(newFrom, newTo));
  }
  class CompositionWidget extends WidgetType {
      constructor(top, text, topView) {
          super();
          this.top = top;
          this.text = text;
          this.topView = topView;
      }
      eq(other) { return this.top == other.top && this.text == other.text; }
      toDOM() { return this.top; }
      ignoreEvent() { return false; }
      get customView() { return CompositionView; }
  }
  function nearbyTextNode(node, offset, side) {
      for (;;) {
          if (node.nodeType == 3)
              return node;
          if (node.nodeType == 1 && offset > 0 && side <= 0) {
              node = node.childNodes[offset - 1];
              offset = maxOffset(node);
          }
          else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
              node = node.childNodes[offset];
              offset = 0;
          }
          else {
              return null;
          }
      }
  }
  function nextToUneditable(node, offset) {
      if (node.nodeType != 1)
          return 0;
      return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
          (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  class DecorationComparator$1 {
      constructor() {
          this.changes = [];
      }
      compareRange(from, to) { addRange(from, to, this.changes); }
      comparePoint(from, to) { addRange(from, to, this.changes); }
  }
  function findChangedDeco(a, b, diff) {
      let comp = new DecorationComparator$1;
      RangeSet.compare(a, b, diff, comp);
      return comp.changes;
  }
  function inUneditable(node, inside) {
      for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == 'false') {
              return true;
          }
      }
      return false;
  }

  function groupAt(state, pos, bias = 1) {
      let categorize = state.charCategorizer(pos);
      let line = state.doc.lineAt(pos), linePos = pos - line.from;
      if (line.length == 0)
          return EditorSelection.cursor(pos);
      if (linePos == 0)
          bias = 1;
      else if (linePos == line.length)
          bias = -1;
      let from = linePos, to = linePos;
      if (bias < 0)
          from = findClusterBreak(line.text, linePos, false);
      else
          to = findClusterBreak(line.text, linePos);
      let cat = categorize(line.text.slice(from, to));
      while (from > 0) {
          let prev = findClusterBreak(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat)
              break;
          from = prev;
      }
      while (to < line.length) {
          let next = findClusterBreak(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat)
              break;
          to = next;
      }
      return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
      return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
      return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
      return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
      return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
      return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
      let closest, closestRect, closestX, closestY, closestOverlap = false;
      let above, below, aboveRect, belowRect;
      for (let child = parent.firstChild; child; child = child.nextSibling) {
          let rects = clientRectsFor(child);
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (closestRect && yOverlap(closestRect, rect))
                  rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
              let dx = getdx(x, rect), dy = getdy(y, rect);
              if (dx == 0 && dy == 0)
                  return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
              if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                  closest = child;
                  closestRect = rect;
                  closestX = dx;
                  closestY = dy;
                  closestOverlap = !dx || (dx > 0 ? i < rects.length - 1 : i > 0);
              }
              if (dx == 0) {
                  if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                      above = child;
                      aboveRect = rect;
                  }
                  else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                      below = child;
                      belowRect = rect;
                  }
              }
              else if (aboveRect && yOverlap(aboveRect, rect)) {
                  aboveRect = upBot(aboveRect, rect.bottom);
              }
              else if (belowRect && yOverlap(belowRect, rect)) {
                  belowRect = upTop(belowRect, rect.top);
              }
          }
      }
      if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
      }
      else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
      }
      if (!closest)
          return { node: parent, offset: 0 };
      let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
      if (closest.nodeType == 3)
          return domPosInText(closest, clipX, y);
      if (closestOverlap && closest.contentEditable != "false")
          return domPosAtCoords(closest, clipX, y);
      let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
          (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
      return { node: parent, offset };
  }
  function domPosInText(node, x, y) {
      let len = node.nodeValue.length;
      let closestOffset = -1, closestDY = 1e9, generalSide = 0;
      for (let i = 0; i < len; i++) {
          let rects = textRange(node, i, i + 1).getClientRects();
          for (let j = 0; j < rects.length; j++) {
              let rect = rects[j];
              if (rect.top == rect.bottom)
                  continue;
              if (!generalSide)
                  generalSide = x - rect.left;
              let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
              if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                  let right = x >= (rect.left + rect.right) / 2, after = right;
                  if (browser.chrome || browser.gecko) {
                      // Check for RTL on browsers that support getting client
                      // rects for empty ranges.
                      let rectBefore = textRange(node, i).getBoundingClientRect();
                      if (rectBefore.left == rect.right)
                          after = !right;
                  }
                  if (dy <= 0)
                      return { node, offset: i + (after ? 1 : 0) };
                  closestOffset = i + (after ? 1 : 0);
                  closestDY = dy;
              }
          }
      }
      return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, { x, y }, precise, bias = -1) {
      var _a;
      let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
      let block, { docHeight } = view.viewState;
      let yOffset = y - docTop;
      if (yOffset < 0)
          return 0;
      if (yOffset > docHeight)
          return view.state.doc.length;
      // Scan for a text block near the queried y position
      for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
          block = view.elementAtHeight(yOffset);
          if (block.type == BlockType.Text)
              break;
          for (;;) {
              // Move the y position out of this block
              yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
              if (yOffset >= 0 && yOffset <= docHeight)
                  break;
              // If the document consists entirely of replaced widgets, we
              // won't find a text block, so return 0
              if (bounced)
                  return precise ? null : 0;
              bounced = true;
              bias = -bias;
          }
      }
      y = docTop + yOffset;
      let lineStart = block.from;
      // If this is outside of the rendered viewport, we can't determine a position
      if (lineStart < view.viewport.from)
          return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      if (lineStart > view.viewport.to)
          return view.viewport.to == view.state.doc.length ? view.state.doc.length :
              precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
      let doc = view.dom.ownerDocument;
      let root = view.root.elementFromPoint ? view.root : doc;
      let element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element))
          element = null;
      // If the element is unexpected, clip x at the sides of the content area and try again
      if (!element) {
          x = Math.max(content.left + 1, Math.min(content.right - 1, x));
          element = root.elementFromPoint(x, y);
          if (element && !view.contentDOM.contains(element))
              element = null;
      }
      // There's visible editor content under the point, so we can try
      // using caret(Position|Range)FromPoint as a shortcut
      let node, offset = -1;
      if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc.caretPositionFromPoint) {
              let pos = doc.caretPositionFromPoint(x, y);
              if (pos)
                  ({ offsetNode: node, offset } = pos);
          }
          else if (doc.caretRangeFromPoint) {
              let range = doc.caretRangeFromPoint(x, y);
              if (range) {
                  ({ startContainer: node, startOffset: offset } = range);
                  if (!view.contentDOM.contains(node) ||
                      browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                      browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                      node = undefined;
              }
          }
      }
      // No luck, do our own (potentially expensive) search
      if (!node || !view.docView.dom.contains(node)) {
          let line = LineView.find(view.docView, lineStart);
          if (!line)
              return yOffset > block.top + block.height / 2 ? block.to : block.from;
          ({ node, offset } = domPosAtCoords(line.dom, x, y));
      }
      return view.docView.posFromDOM(node, offset);
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
      let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
      if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          let line = Math.floor((y - block.top) / view.defaultLineHeight);
          into += line * view.viewState.heightOracle.lineLength;
      }
      let content = view.state.sliceDoc(block.from, block.to);
      return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
      let len;
      if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
          return false;
      for (let next = node.nextSibling; next; next = next.nextSibling)
          if (next.nodeType != 1 || next.nodeName != "BR")
              return false;
      return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
      if (offset != 0)
          return false;
      for (let cur = node;;) {
          let parent = cur.parentNode;
          if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
              return false;
          if (parent.classList.contains("cm-line"))
              break;
          cur = parent;
      }
      let rect = node.nodeType == 1 ? node.getBoundingClientRect()
          : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
      return x - rect.left > 5;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
      let line = view.state.doc.lineAt(start.head);
      let coords = !includeWrap || !view.lineWrapping ? null
          : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
      if (coords) {
          let editorRect = view.dom.getBoundingClientRect();
          let direction = view.textDirectionAt(line.from);
          let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
              y: (coords.top + coords.bottom) / 2 });
          if (pos != null)
              return EditorSelection.cursor(pos, forward ? -1 : 1);
      }
      let lineView = LineView.find(view.docView, start.head);
      let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
      return EditorSelection.cursor(end, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
      let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
      let direction = view.textDirectionAt(line.from);
      for (let cur = start, check = null;;) {
          let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
          if (!next) {
              if (line.number == (forward ? view.state.doc.lines : 1))
                  return cur;
              char = "\n";
              line = view.state.doc.line(line.number + (forward ? 1 : -1));
              spans = view.bidiSpans(line);
              next = EditorSelection.cursor(forward ? line.from : line.to);
          }
          if (!check) {
              if (!by)
                  return next;
              check = by(char);
          }
          else if (!check(char)) {
              return cur;
          }
          cur = next;
      }
  }
  function byGroup(view, pos, start) {
      let categorize = view.state.charCategorizer(pos);
      let cat = categorize(start);
      return (next) => {
          let nextCat = categorize(next);
          if (cat == CharCategory.Space)
              cat = nextCat;
          return cat == nextCat;
      };
  }
  function moveVertically(view, start, forward, distance) {
      let startPos = start.head, dir = forward ? 1 : -1;
      if (startPos == (forward ? view.state.doc.length : 0))
          return EditorSelection.cursor(startPos, start.assoc);
      let goal = start.goalColumn, startY;
      let rect = view.contentDOM.getBoundingClientRect();
      let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
      if (startCoords) {
          if (goal == null)
              goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
      }
      else {
          let line = view.viewState.lineBlockAt(startPos);
          if (goal == null)
              goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
      }
      let resolvedGoal = rect.left + goal;
      let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
      for (let extra = 0;; extra += 10) {
          let curY = startY + (dist + extra) * dir;
          let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
              return EditorSelection.cursor(pos, start.assoc, undefined, goal);
      }
  }
  function skipAtoms(view, oldPos, pos) {
      let atoms = view.state.facet(atomicRanges).map(f => f(view));
      for (;;) {
          let moved = false;
          for (let set of atoms) {
              set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                  if (pos.from > from && pos.from < to) {
                      pos = oldPos.head > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                      moved = true;
                  }
              });
          }
          if (!moved)
              return pos;
      }
  }

  // This will also be where dragging info and such goes
  class InputState {
      constructor(view) {
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.lastTouchTime = 0;
          this.lastFocusTime = 0;
          this.lastScrollTop = 0;
          this.lastScrollLeft = 0;
          this.chromeScrollHack = -1;
          // On iOS, some keys need to have their default behavior happen
          // (after which we retroactively handle them and reset the DOM) to
          // avoid messing up the virtual keyboard state.
          this.pendingIOSKey = undefined;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastEscPress = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.registeredEvents = [];
          this.customHandlers = [];
          // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.
          this.composing = -1;
          // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)
          this.compositionFirstChange = null;
          this.compositionEndedAt = 0;
          this.mouseSelection = null;
          for (let type in handlers) {
              let handler = handlers[type];
              view.contentDOM.addEventListener(type, (event) => {
                  if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                      return;
                  if (type == "keydown" && this.keydown(view, event))
                      return;
                  if (this.mustFlushObserver(event))
                      view.observer.forceFlush();
                  if (this.runCustomHandlers(type, view, event))
                      event.preventDefault();
                  else
                      handler(view, event);
              }, handlerOptions[type]);
              this.registeredEvents.push(type);
          }
          if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point
              // On Chrome 102, viewport updates somehow stop wheel-based
              // scrolling. Turning off pointer events during the scroll seems
              // to avoid the issue.
              view.scrollDOM.addEventListener("wheel", () => {
                  if (this.chromeScrollHack < 0)
                      view.contentDOM.style.pointerEvents = "none";
                  else
                      window.clearTimeout(this.chromeScrollHack);
                  this.chromeScrollHack = setTimeout(() => {
                      this.chromeScrollHack = -1;
                      view.contentDOM.style.pointerEvents = "";
                  }, 100);
              }, { passive: true });
          }
          this.notifiedFocused = view.hasFocus;
          // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.
          if (browser.safari)
              view.contentDOM.addEventListener("input", () => null);
      }
      setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
      }
      ensureHandlers(view, plugins) {
          var _a;
          let handlers;
          this.customHandlers = [];
          for (let plugin of plugins)
              if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                  this.customHandlers.push({ plugin: plugin.value, handlers });
                  for (let type in handlers)
                      if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                          this.registeredEvents.push(type);
                          view.contentDOM.addEventListener(type, (event) => {
                              if (!eventBelongsToEditor(view, event))
                                  return;
                              if (this.runCustomHandlers(type, view, event))
                                  event.preventDefault();
                          });
                      }
              }
      }
      runCustomHandlers(type, view, event) {
          for (let set of this.customHandlers) {
              let handler = set.handlers[type];
              if (handler) {
                  try {
                      if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                          return true;
                  }
                  catch (e) {
                      logException(view.state, e);
                  }
              }
          }
          return false;
      }
      runScrollHandlers(view, event) {
          this.lastScrollTop = view.scrollDOM.scrollTop;
          this.lastScrollLeft = view.scrollDOM.scrollLeft;
          for (let set of this.customHandlers) {
              let handler = set.handlers.scroll;
              if (handler) {
                  try {
                      handler.call(set.plugin, event, view);
                  }
                  catch (e) {
                      logException(view.state, e);
                  }
              }
          }
      }
      keydown(view, event) {
          // Must always run, even if a custom handler handled the event
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
              return true;
          // Chrome for Android usually doesn't fire proper key events, but
          // occasionally does, usually surrounded by a bunch of complicated
          // composition changes. When an enter or backspace key event is
          // seen, hold off on handling DOM events for a bit, and then
          // dispatch it.
          if (browser.android && browser.chrome && !event.synthetic &&
              (event.keyCode == 13 || event.keyCode == 8)) {
              view.observer.delayAndroidKey(event.key, event.keyCode);
              return true;
          }
          // Prevent the default behavior of Enter on iOS makes the
          // virtual keyboard get stuck in the wrong (lowercase)
          // state. So we let it go through, and then, in
          // applyDOMChange, notify key handlers of it and reset to
          // the state they produce.
          let pending;
          if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
              ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                  EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
              this.pendingIOSKey = pending || event;
              setTimeout(() => this.flushIOSKey(view), 250);
              return true;
          }
          return false;
      }
      flushIOSKey(view) {
          let key = this.pendingIOSKey;
          if (!key)
              return false;
          this.pendingIOSKey = undefined;
          return dispatchKey(view.contentDOM, key.key, key.keyCode);
      }
      ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
              return false;
          if (this.composing > 0)
              return true;
          // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
          // On some input method editors (IMEs), the Enter key is used to
          // confirm character selection. On Safari, when Enter is pressed,
          // compositionend and keydown events are sometimes emitted in the
          // wrong order. The key event should still be ignored, even when
          // it happens after the compositionend event.
          if (browser.safari && !browser.ios && Date.now() - this.compositionEndedAt < 100) {
              this.compositionEndedAt = 0;
              return true;
          }
          return false;
      }
      mustFlushObserver(event) {
          return event.type == "keydown" && event.keyCode != 229;
      }
      startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
      }
      update(update) {
          if (this.mouseSelection)
              this.mouseSelection.update(update);
          if (update.transactions.length)
              this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
      }
  }
  const PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  const EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  class MouseSelection {
      constructor(view, startEvent, style, mustSelect) {
          this.view = view;
          this.style = style;
          this.mustSelect = mustSelect;
          this.lastEvent = startEvent;
          let doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragMove = dragMovesSelection(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
          // When clicking outside of the selection, immediately apply the
          // effect of starting the selection
          if (this.dragging === false) {
              startEvent.preventDefault();
              this.select(startEvent);
          }
      }
      move(event) {
          if (event.buttons == 0)
              return this.destroy();
          if (this.dragging !== false)
              return;
          this.select(this.lastEvent = event);
      }
      up(event) {
          if (this.dragging == null)
              this.select(this.lastEvent);
          if (!this.dragging)
              event.preventDefault();
          this.destroy();
      }
      destroy() {
          let doc = this.view.contentDOM.ownerDocument;
          doc.removeEventListener("mousemove", this.move);
          doc.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = null;
      }
      select(event) {
          let selection = this.style.get(event, this.extend, this.multiple);
          if (this.mustSelect || !selection.eq(this.view.state.selection) ||
              selection.main.assoc != this.view.state.selection.main.assoc)
              this.view.dispatch({
                  selection,
                  userEvent: "select.pointer",
                  scrollIntoView: true
              });
          this.mustSelect = false;
      }
      update(update) {
          if (update.docChanged && this.dragging)
              this.dragging = this.dragging.map(update.changes);
          if (this.style.update(update))
              setTimeout(() => this.select(this.lastEvent), 20);
      }
  }
  function addsSelectionRange(view, event) {
      let facet = view.state.facet(clickAddsSelectionRange);
      return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
      let facet = view.state.facet(dragMovesSelection$1);
      return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
      let { main } = view.state.selection;
      if (main.empty)
          return false;
      // On boundary clicks, check whether the coordinates are inside the
      // selection's client rectangles
      let sel = getSelection(view.root);
      if (!sel || sel.rangeCount == 0)
          return true;
      let rects = sel.getRangeAt(0).getClientRects();
      for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          if (rect.left <= event.clientX && rect.right >= event.clientX &&
              rect.top <= event.clientY && rect.bottom >= event.clientY)
              return true;
      }
      return false;
  }
  function eventBelongsToEditor(view, event) {
      if (!event.bubbles)
          return true;
      if (event.defaultPrevented)
          return false;
      for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
          if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
              return false;
      return true;
  }
  const handlers = /*@__PURE__*/Object.create(null);
  const handlerOptions = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
      (browser.ios && browser.webkit_version < 604);
  function capturePaste(view) {
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
          view.focus();
          target.remove();
          doPaste(view, target.value);
      }, 50);
  }
  function doPaste(view, input) {
      let { state } = view, changes, i = 1, text = state.toText(input);
      let byLine = text.lines == state.selection.ranges.length;
      let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
      if (linewise) {
          let lastLine = -1;
          changes = state.changeByRange(range => {
              let line = state.doc.lineAt(range.from);
              if (line.from == lastLine)
                  return { range };
              lastLine = line.from;
              let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
              return { changes: { from: line.from, insert },
                  range: EditorSelection.cursor(range.from + insert.length) };
          });
      }
      else if (byLine) {
          changes = state.changeByRange(range => {
              let line = text.line(i++);
              return { changes: { from: range.from, to: range.to, insert: line.text },
                  range: EditorSelection.cursor(range.from + line.length) };
          });
      }
      else {
          changes = state.replaceSelection(text);
      }
      view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
      });
  }
  handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27)
          view.inputState.lastEscPress = Date.now();
      else if (modifierCodes.indexOf(event.keyCode) < 0)
          view.inputState.lastEscPress = 0;
  };
  handlers.touchstart = (view, e) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.touchmove = view => {
      view.inputState.setSelectionOrigin("select.pointer");
  };
  handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
  handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2000)
          return; // Ignore touch interaction
      let style = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style = makeStyle(view, event);
          if (style)
              break;
      }
      if (!style && event.button == 0)
          style = basicMouseSelection(view, event);
      if (style) {
          let mustFocus = view.root.activeElement != view.contentDOM;
          if (mustFocus)
              view.observer.ignore(() => focusPreventScroll(view.contentDOM));
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
      }
  };
  function rangeForClick(view, pos, bias, type) {
      if (type == 1) { // Single click
          return EditorSelection.cursor(pos, bias);
      }
      else if (type == 2) { // Double click
          return groupAt(view.state, pos, bias);
      }
      else { // Triple click
          let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to)
              to++;
          return EditorSelection.range(from, to);
      }
  }
  let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
  let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
      let line = LineView.find(view.docView, pos);
      if (!line)
          return 1;
      let off = pos - line.posAtStart;
      // Line boundaries point into the line
      if (off == 0)
          return 1;
      if (off == line.length)
          return -1;
      // Positions on top of an element point at that element
      let before = line.coordsAt(off, -1);
      if (before && inside(x, y, before))
          return -1;
      let after = line.coordsAt(off, 1);
      if (after && inside(x, y, after))
          return 1;
      // This is probably a line wrap point. Pick before if the point is
      // beside it.
      return before && insideY(y, before) ? -1 : 1;
  }
  function queryPos(view, event) {
      let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  const BadMouseDetail = browser.ie && browser.ie_version <= 11;
  let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
  function getClickType(event) {
      if (!BadMouseDetail)
          return event.detail;
      let last = lastMouseDown, lastTime = lastMouseDownTime;
      lastMouseDown = event;
      lastMouseDownTime = Date.now();
      return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
          Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
      let start = queryPos(view, event), type = getClickType(event);
      let startSel = view.state.selection;
      let last = start, lastEvent = event;
      return {
          update(update) {
              if (update.docChanged) {
                  start.pos = update.changes.mapPos(start.pos);
                  startSel = startSel.map(update.changes);
                  lastEvent = null;
              }
          },
          get(event, extend, multiple) {
              let cur;
              if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                  cur = last;
              else {
                  cur = last = queryPos(view, event);
                  lastEvent = event;
              }
              let range = rangeForClick(view, cur.pos, cur.bias, type);
              if (start.pos != cur.pos && !extend) {
                  let startRange = rangeForClick(view, start.pos, start.bias, type);
                  let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                  range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
              }
              if (extend)
                  return startSel.replaceRange(startSel.main.extend(range.from, range.to));
              else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some(r => r.eq(range)))
                  return removeRange(startSel, range);
              else if (multiple)
                  return startSel.addRange(range);
              else
                  return EditorSelection.create([range]);
          }
      };
  }
  function removeRange(sel, range) {
      for (let i = 0;; i++) {
          if (sel.ranges[i].eq(range))
              return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
      }
  }
  handlers.dragstart = (view, event) => {
      let { selection: { main } } = view.state;
      let { mouseSelection } = view.inputState;
      if (mouseSelection)
          mouseSelection.dragging = main;
      if (event.dataTransfer) {
          event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
          event.dataTransfer.effectAllowed = "copyMove";
      }
  };
  function dropText(view, event, text, direct) {
      if (!text)
          return;
      let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      event.preventDefault();
      let { mouseSelection } = view.inputState;
      let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
          { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
      let ins = { from: dropPos, insert: text };
      let changes = view.state.changes(del ? [del, ins] : ins);
      view.focus();
      view.dispatch({
          changes,
          selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
          userEvent: del ? "move.drop" : "input.drop"
      });
  }
  handlers.drop = (view, event) => {
      if (!event.dataTransfer)
          return;
      if (view.state.readOnly)
          return event.preventDefault();
      let files = event.dataTransfer.files;
      if (files && files.length) { // For a file drop, read the file's text.
          event.preventDefault();
          let text = Array(files.length), read = 0;
          let finishFile = () => {
              if (++read == files.length)
                  dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
              let reader = new FileReader;
              reader.onerror = finishFile;
              reader.onload = () => {
                  if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                      text[i] = reader.result;
                  finishFile();
              };
              reader.readAsText(files[i]);
          }
      }
      else {
          dropText(view, event, event.dataTransfer.getData("Text"), true);
      }
  };
  handlers.paste = (view, event) => {
      if (view.state.readOnly)
          return event.preventDefault();
      view.observer.flush();
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          doPaste(view, data.getData("text/plain"));
          event.preventDefault();
      }
      else {
          capturePaste(view);
      }
  };
  function captureCopy(view, text) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.value = text;
      target.focus();
      target.selectionEnd = text.length;
      target.selectionStart = 0;
      setTimeout(() => {
          target.remove();
          view.focus();
      }, 50);
  }
  function copiedRange(state) {
      let content = [], ranges = [], linewise = false;
      for (let range of state.selection.ranges)
          if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
          }
      if (!content.length) {
          // Nothing selected, do a line-wise copy
          let upto = -1;
          for (let { from } of state.selection.ranges) {
              let line = state.doc.lineAt(from);
              if (line.number > upto) {
                  content.push(line.text);
                  ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
              }
              upto = line.number;
          }
          linewise = true;
      }
      return { text: content.join(state.lineBreak), ranges, linewise };
  }
  let lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
      let { text, ranges, linewise } = copiedRange(view.state);
      if (!text && !linewise)
          return;
      lastLinewiseCopy = linewise ? text : null;
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          event.preventDefault();
          data.clearData();
          data.setData("text/plain", text);
      }
      else {
          captureCopy(view, text);
      }
      if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
              changes: ranges,
              scrollIntoView: true,
              userEvent: "delete.cut"
          });
  };
  function updateForFocusChange(view) {
      setTimeout(() => {
          if (view.hasFocus != view.inputState.notifiedFocused)
              view.update([]);
      }, 10);
  }
  handlers.focus = view => {
      view.inputState.lastFocusTime = Date.now();
      // When focusing reset the scroll position, move it back to where it was
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
          view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
          view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
  };
  handlers.blur = view => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
  };
  handlers.compositionstart = handlers.compositionupdate = view => {
      if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
          // FIXME possibly set a timeout to clear it again on Android
          view.inputState.composing = 0;
      }
  };
  handlers.compositionend = view => {
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android)
          view.observer.flushSoon();
      setTimeout(() => {
          // Force the composition state to be cleared if it hasn't already been
          if (view.inputState.composing < 0 && view.docView.compositionDeco.size)
              view.update([]);
      }, 50);
  };
  handlers.contextmenu = view => {
      view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
      var _a;
      // Because Chrome Android doesn't fire useful key events, use
      // beforeinput to detect backspace (and possibly enter and delete,
      // but those usually don't even seem to fire beforeinput events at
      // the moment) and fake a key event for it.
      //
      // (preventDefault on beforeinput, though supported in the spec,
      // seems to do nothing at all on Chrome).
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);
          if (pending.key == "Backspace" || pending.key == "Delete") {
              let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
              setTimeout(() => {
                  var _a;
                  // Backspacing near uneditable nodes on Chrome Android sometimes
                  // closes the virtual keyboard. This tries to crudely detect
                  // that and refocus to get it back.
                  if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                      view.contentDOM.blur();
                      view.focus();
                  }
              }, 100);
          }
      }
  };

  const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  class HeightOracle {
      constructor(lineWrapping) {
          this.lineWrapping = lineWrapping;
          this.doc = Text$1.empty;
          this.heightSamples = {};
          this.lineHeight = 14;
          this.charWidth = 7;
          this.lineLength = 30;
          // Used to track, during updateHeight, if any actual heights changed
          this.heightChanged = false;
      }
      heightForGap(from, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
          if (this.lineWrapping)
              lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
          return this.lineHeight * lines;
      }
      heightForLine(length) {
          if (!this.lineWrapping)
              return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
          return lines * this.lineHeight;
      }
      setDoc(doc) { this.doc = doc; return this; }
      mustRefreshForWrapping(whiteSpace) {
          return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
              let h = lineHeights[i];
              if (h < 0) {
                  i++;
              }
              else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                  newHeight = true;
                  this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
          this.lineWrapping = lineWrapping;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.lineLength = lineLength;
          if (changed) {
              this.heightSamples = {};
              for (let i = 0; i < knownHeights.length; i++) {
                  let h = knownHeights[i];
                  if (h < 0)
                      i++;
                  else
                      this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return changed;
      }
  }
  // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  class MeasuredHeights {
      constructor(from, heights) {
          this.from = from;
          this.heights = heights;
          this.index = 0;
      }
      get more() { return this.index < this.heights.length; }
  }
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  class BlockInfo {
      /**
      @internal
      */
      constructor(
      /**
      The start of the element in the document.
      */
      from, 
      /**
      The length of the element.
      */
      length, 
      /**
      The top position of the element (relative to the top of the
      document).
      */
      top, 
      /**
      Its height.
      */
      height, 
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      type) {
          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this.type = type;
      }
      /**
      The end of the element as a document position.
      */
      get to() { return this.from + this.length; }
      /**
      The bottom position of the element.
      */
      get bottom() { return this.top + this.height; }
      /**
      @internal
      */
      join(other) {
          let detail = (Array.isArray(this.type) ? this.type : [this])
              .concat(Array.isArray(other.type) ? other.type : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
      }
  }
  var QueryType$1 = /*@__PURE__*/(function (QueryType) {
      QueryType[QueryType["ByPos"] = 0] = "ByPos";
      QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
      QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType})(QueryType$1 || (QueryType$1 = {}));
  const Epsilon = 1e-3;
  class HeightMap {
      constructor(length, // The number of characters covered
      height, // Height of this part of the document
      flags = 2 /* Flag.Outdated */) {
          this.length = length;
          this.height = height;
          this.flags = flags;
      }
      get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
      set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
      setHeight(oracle, height) {
          if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon)
                  oracle.heightChanged = true;
              this.height = height;
          }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) { result.push(this); }
      decomposeRight(_from, result) { result.push(this); }
      applyChanges(decorations, oldDoc, oracle, changes) {
          let me = this;
          for (let i = changes.length - 1; i >= 0; i--) {
              let { fromA, toA, fromB, toB } = changes[i];
              let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
              let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
              toB += end.to - toA;
              toA = end.to;
              while (i > 0 && start.from <= changes[i - 1].toA) {
                  fromA = changes[i - 1].fromA;
                  fromB = changes[i - 1].fromB;
                  i--;
                  if (fromA < start.from)
                      start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
              }
              fromB += start.from - fromA;
              fromA = start.from;
              let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
              me = me.replace(fromA, toA, nodes);
          }
          return me.updateHeight(oracle, 0);
      }
      static empty() { return new HeightMapText(0, 0); }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
          if (nodes.length == 1)
              return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (;;) {
              if (i == j) {
                  if (before > after * 2) {
                      let split = nodes[i - 1];
                      if (split.break)
                          nodes.splice(--i, 1, split.left, null, split.right);
                      else
                          nodes.splice(--i, 1, split.left, split.right);
                      j += 1 + split.break;
                      before -= split.size;
                  }
                  else if (after > before * 2) {
                      let split = nodes[j];
                      if (split.break)
                          nodes.splice(j, 1, split.left, null, split.right);
                      else
                          nodes.splice(j, 1, split.left, split.right);
                      j += 2 + split.break;
                      after -= split.size;
                  }
                  else {
                      break;
                  }
              }
              else if (before < after) {
                  let next = nodes[i++];
                  if (next)
                      before += next.size;
              }
              else {
                  let next = nodes[--j];
                  if (next)
                      after += next.size;
              }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
              brk = 1;
              i--;
          }
          else if (nodes[i] == null) {
              brk = 1;
              j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
  }
  HeightMap.prototype.size = 1;
  class HeightMapBlock extends HeightMap {
      constructor(length, height, type) {
          super(length, height);
          this.type = type;
      }
      blockAt(_height, _doc, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.type);
      }
      lineAt(_value, _type, doc, top, offset) {
          return this.blockAt(0, doc, top, offset);
      }
      forEachLine(from, to, doc, top, offset, f) {
          if (from <= offset + this.length && to >= offset)
              f(this.blockAt(0, doc, top, offset));
      }
      updateHeight(oracle, offset = 0, _force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(oracle, measured.heights[measured.index++]);
          this.outdated = false;
          return this;
      }
      toString() { return `block(${this.length})`; }
  }
  class HeightMapText extends HeightMapBlock {
      constructor(length, height) {
          super(length, height, BlockType.Text);
          this.collapsed = 0; // Amount of collapsed content in the line
          this.widgetHeight = 0; // Maximum inline widget height
      }
      replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
              Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap)
                  node = new HeightMapText(node.length, this.height);
              else
                  node.height = this.height;
              if (!this.outdated)
                  node.outdated = false;
              return node;
          }
          else {
              return HeightMap.of(nodes);
          }
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(oracle, measured.heights[measured.index++]);
          else if (force || this.outdated)
              this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
          this.outdated = false;
          return this;
      }
      toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
  }
  class HeightMapGap extends HeightMap {
      constructor(length) { super(length, 0); }
      lines(doc, offset) {
          let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
          return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
      }
      blockAt(height, doc, top, offset) {
          let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
          let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
          let { from, length } = doc.line(firstLine + line);
          return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
      }
      lineAt(value, type, doc, top, offset) {
          if (type == QueryType$1.ByHeight)
              return this.blockAt(value, doc, top, offset);
          if (type == QueryType$1.ByPosNoHeight) {
              let { from, to } = doc.lineAt(value);
              return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
          }
          let { firstLine, lineHeight } = this.lines(doc, offset);
          let { from, length, number } = doc.lineAt(value);
          return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
      }
      forEachLine(from, to, doc, top, offset, f) {
          let { firstLine, lineHeight } = this.lines(doc, offset);
          for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
              let line = doc.lineAt(pos);
              if (pos == from)
                  top += lineHeight * (line.number - firstLine);
              f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
              top += lineHeight;
              pos = line.to + 1;
          }
      }
      replace(from, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
              let last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap)
                  nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
              else
                  nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from > 0) {
              let first = nodes[0];
              if (first instanceof HeightMapGap)
                  nodes[0] = new HeightMapGap(from + first.length);
              else
                  nodes.unshift(new HeightMapGap(from - 1), null);
          }
          return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
      }
      decomposeRight(from, result) {
          result.push(null, new HeightMapGap(this.length - from - 1));
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let end = offset + this.length;
          if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
              let wasChanged = oracle.heightChanged;
              if (measured.from > offset)
                  nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
              while (pos <= end && measured.more) {
                  let len = oracle.doc.lineAt(pos).length;
                  if (nodes.length)
                      nodes.push(null);
                  let height = measured.heights[measured.index++];
                  if (singleHeight == -1)
                      singleHeight = height;
                  else if (Math.abs(height - singleHeight) >= Epsilon)
                      singleHeight = -2;
                  let line = new HeightMapText(len, height);
                  line.outdated = false;
                  nodes.push(line);
                  pos += len + 1;
              }
              if (pos <= end)
                  nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              let result = HeightMap.of(nodes);
              oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                  Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
              return result;
          }
          else if (force || this.outdated) {
              this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
          }
          return this;
      }
      toString() { return `gap(${this.length})`; }
  }
  class HeightMapBranch extends HeightMap {
      constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
      }
      get break() { return this.flags & 1 /* Flag.Break */; }
      blockAt(height, doc, top, offset) {
          let mid = top + this.left.height;
          return height < mid ? this.left.blockAt(height, doc, top, offset)
              : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
      }
      lineAt(value, type, doc, top, offset) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
          let base = left ? this.left.lineAt(value, type, doc, top, offset)
              : this.right.lineAt(value, type, doc, rightTop, rightOffset);
          if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
              return base;
          let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
          if (left)
              return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
          else
              return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
      }
      forEachLine(from, to, doc, top, offset, f) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          if (this.break) {
              if (from < rightOffset)
                  this.left.forEachLine(from, to, doc, top, offset, f);
              if (to >= rightOffset)
                  this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
          }
          else {
              let mid = this.lineAt(rightOffset, QueryType$1.ByPos, doc, top, offset);
              if (from < mid.from)
                  this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
              if (mid.to >= from && mid.from <= to)
                  f(mid);
              if (to > mid.to)
                  this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
          }
      }
      replace(from, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
              return this.balanced(this.left.replace(from, to, nodes), this.right);
          if (from > this.left.length)
              return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
          let result = [];
          if (from > 0)
              this.decomposeLeft(from, result);
          let left = result.length;
          for (let node of nodes)
              result.push(node);
          if (from > 0)
              mergeGaps(result, left - 1);
          if (to < this.length) {
              let right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
          }
          return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
              return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
              left++;
              if (to >= left)
                  result.push(null);
          }
          if (to > left)
              this.right.decomposeLeft(to - left, result);
      }
      decomposeRight(from, result) {
          let left = this.left.length, right = left + this.break;
          if (from >= right)
              return this.right.decomposeRight(from - right, result);
          if (from < left)
              this.left.decomposeRight(from, result);
          if (this.break && from < right)
              result.push(null);
          result.push(this.right);
      }
      balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
              return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = left;
          this.right = right;
          this.height = left.height + right.height;
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset + left.length && measured.more)
              rebalance = left = left.updateHeight(oracle, offset, force, measured);
          else
              left.updateHeight(oracle, offset, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
              rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
              right.updateHeight(oracle, rightStart, force);
          if (rebalance)
              return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
      }
      toString() { return this.left + (this.break ? " " : "-") + this.right; }
  }
  function mergeGaps(nodes, around) {
      let before, after;
      if (nodes[around] == null &&
          (before = nodes[around - 1]) instanceof HeightMapGap &&
          (after = nodes[around + 1]) instanceof HeightMapGap)
          nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  const relevantWidgetHeight = 5;
  class NodeBuilder {
      constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
      }
      get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
          if (this.lineStart > -1) {
              let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText)
                  last.length += end - this.pos;
              else if (end > this.pos || !this.isCovered)
                  this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;
              if (to > end) {
                  this.nodes.push(null);
                  this.writtenTo++;
                  this.lineStart = -1;
              }
          }
          this.pos = to;
      }
      point(from, to, deco) {
          if (from < to || deco.heightRelevant) {
              let height = deco.widget ? deco.widget.estimatedHeight : 0;
              if (height < 0)
                  height = this.oracle.lineHeight;
              let len = to - from;
              if (deco.block) {
                  this.addBlock(new HeightMapBlock(len, height, deco.type));
              }
              else if (len || height >= relevantWidgetHeight) {
                  this.addLineDeco(height, len);
              }
          }
          else if (to > from) {
              this.span(from, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
              this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
          if (this.lineStart > -1)
              return;
          let { from, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from;
          this.lineEnd = to;
          if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                  this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
          }
          if (this.pos > from)
              this.nodes.push(new HeightMapText(this.pos - from, -1));
          this.writtenTo = this.pos;
      }
      blankContent(from, to) {
          let gap = new HeightMapGap(to - from);
          if (this.oracle.doc.lineAt(from).to == to)
              gap.flags |= 4 /* Flag.SingleLine */;
          return gap;
      }
      ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
              return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
      }
      addBlock(block) {
          this.enterLine();
          if (block.type == BlockType.WidgetAfter && !this.isCovered)
              this.ensureLine();
          this.nodes.push(block);
          this.writtenTo = this.pos = this.pos + block.length;
          if (block.type != BlockType.WidgetBefore)
              this.covering = block;
      }
      addLineDeco(height, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          this.writtenTo = this.pos = this.pos + length;
      }
      finish(from) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
              this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
              this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from;
          for (let node of this.nodes) {
              if (node instanceof HeightMapText)
                  node.updateHeight(this.oracle, pos);
              pos += node ? node.length : 1;
          }
          return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations, from, to) {
          let builder = new NodeBuilder(from, oracle);
          RangeSet.spans(decorations, from, to, builder, 0);
          return builder.finish(from);
      }
  }
  function heightRelevantDecoChanges(a, b, diff) {
      let comp = new DecorationComparator;
      RangeSet.compare(a, b, diff, comp, 0);
      return comp.changes;
  }
  class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange() { }
      comparePoint(from, to, a, b) {
          if (from < to || a && a.heightRelevant || b && b.heightRelevant)
              addRange(from, to, this.changes, 5);
      }
  }

  function visiblePixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
      let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
      for (let parent = dom.parentNode; parent && parent != doc.body;) {
          if (parent.nodeType == 1) {
              let elt = parent;
              let style = window.getComputedStyle(elt);
              if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                  style.overflow != "visible") {
                  let parentRect = elt.getBoundingClientRect();
                  left = Math.max(left, parentRect.left);
                  right = Math.min(right, parentRect.right);
                  top = Math.max(top, parentRect.top);
                  bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
              }
              parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          }
          else if (parent.nodeType == 11) { // Shadow root
              parent = parent.host;
          }
          else {
              break;
          }
      }
      return { left: left - rect.left, right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
  }
  function fullPixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      return { left: 0, right: rect.right - rect.left,
          top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  class LineGap {
      constructor(from, to, size) {
          this.from = from;
          this.to = to;
          this.size = size;
      }
      static same(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++) {
              let gA = a[i], gB = b[i];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                  return false;
          }
          return true;
      }
      draw(wrapping) {
          return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
      }
  }
  class LineGapWidget extends WidgetType {
      constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
      }
      eq(other) { return other.size == this.size && other.vertical == this.vertical; }
      toDOM() {
          let elt = document.createElement("div");
          if (this.vertical) {
              elt.style.height = this.size + "px";
          }
          else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
          }
          return elt;
      }
      get estimatedHeight() { return this.vertical ? this.size : -1; }
  }
  class ViewState {
      constructor(state) {
          this.state = state;
          // These are contentDOM-local coordinates
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0;
          this.paddingBottom = 0;
          this.contentDOMWidth = 0;
          this.contentDOMHeight = 0;
          this.editorHeight = 0;
          this.editorWidth = 0;
          // See VP.MaxDOMHeight
          this.scaler = IdScaler;
          this.scrollTarget = null;
          // Briefly set to true when printing, to disable viewport limiting
          this.printing = false;
          // Flag set when editor content was redrawn, so that the next
          // measure stage knows it must read DOM layout
          this.mustMeasureContent = true;
          this.defaultTextDirection = Direction.LTR;
          this.visibleRanges = [];
          // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.
          this.mustEnforceCursorAssoc = false;
          let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
          this.heightOracle = new HeightOracle(guessWrapping);
          this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
          this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          this.viewport = this.getViewport(0, null);
          this.updateViewportLines();
          this.updateForViewport();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
          this.computeVisibleRanges();
      }
      updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
              let pos = i ? main.head : main.anchor;
              if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                  let { from, to } = this.lineBlockAt(pos);
                  viewports.push(new Viewport(from, to));
              }
          }
          this.viewports = viewports.sort((a, b) => a.from - b.from);
          this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
              new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
      }
      updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
              this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
          });
      }
      update(update, scrollTarget = null) {
          this.state = update.state;
          let prevDeco = this.stateDeco;
          this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight)
              update.flags |= 2 /* UpdateFlag.Height */;
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
              !this.viewportIsAppropriate(viewport))
              viewport = this.getViewport(0, scrollTarget);
          let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
              viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          this.updateForViewport();
          if (updateLines)
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges();
          if (scrollTarget)
              this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
              update.state.selection.main.empty && update.state.selection.main.assoc &&
              !update.state.facet(nativeSelectionHidden))
              this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
          let dom = view.contentDOM, style = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style.whiteSpace;
          this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
          let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
          this.contentDOMHeight = dom.clientHeight;
          this.mustMeasureContent = false;
          let result = 0, bias = 0;
          // Vertical padding
          let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
          if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
              this.paddingTop = paddingTop;
              this.paddingBottom = paddingBottom;
              result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
          }
          if (this.editorWidth != view.scrollDOM.clientWidth) {
              if (oracle.lineWrapping)
                  measureContent = true;
              this.editorWidth = view.scrollDOM.clientWidth;
              result |= 8 /* UpdateFlag.Geometry */;
          }
          // Pixel viewport
          let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (inView != this.inView) {
              this.inView = inView;
              if (inView)
                  measureContent = true;
          }
          if (!this.inView && !this.scrollTarget)
              return 0;
          let contentWidth = dom.clientWidth;
          if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
              this.contentDOMWidth = contentWidth;
              this.editorHeight = view.scrollDOM.clientHeight;
              result |= 8 /* UpdateFlag.Geometry */;
          }
          if (measureContent) {
              let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
              if (oracle.mustRefreshForHeights(lineHeights))
                  refresh = true;
              if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                  let { lineHeight, charWidth } = view.docView.measureTextSize();
                  refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                  if (refresh) {
                      view.docView.minWidth = 0;
                      result |= 8 /* UpdateFlag.Geometry */;
                  }
              }
              if (dTop > 0 && dBottom > 0)
                  bias = Math.max(dTop, dBottom);
              else if (dTop < 0 && dBottom < 0)
                  bias = Math.min(dTop, dBottom);
              oracle.heightChanged = false;
              for (let vp of this.viewports) {
                  let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                  this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
              }
              if (oracle.heightChanged)
                  result |= 2 /* UpdateFlag.Height */;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
              this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange)
              this.viewport = this.getViewport(bias, this.scrollTarget);
          this.updateForViewport();
          if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false;
              // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.
              view.docView.enforceCursorAssoc();
          }
          return result;
      }
      get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
      get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
      getViewport(bias, scrollTarget) {
          // This will divide VP.Margin between the top and the
          // bottom, depending on the bias (the change in viewport position
          // since the last update). It'll hold a number between 0 and 1
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
          let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, doc, 0, 0).to);
          // If scrollTarget is given, make sure the viewport includes that position
          if (scrollTarget) {
              let { head } = scrollTarget.range;
              if (head < viewport.from || head > viewport.to) {
                  let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                  let block = map.lineAt(head, QueryType$1.ByPos, doc, 0, 0), topPos;
                  if (scrollTarget.y == "center")
                      topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                  else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                      topPos = block.top;
                  else
                      topPos = block.bottom - viewHeight;
                  viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
              }
          }
          return viewport;
      }
      mapViewport(viewport, changes) {
          let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from, to }, bias = 0) {
          if (!this.inView)
              return true;
          let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
              (to == this.state.doc.length ||
                  bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
              (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
      }
      mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
              return gaps;
          let mapped = [];
          for (let gap of gaps)
              if (!changes.touchesRange(gap.from, gap.to))
                  mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
          return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
          let wrapping = this.heightOracle.lineWrapping;
          let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
          // The non-wrapping logic won't work at all in predominantly right-to-left text.
          if (this.defaultTextDirection != Direction.LTR && !wrapping)
              return [];
          let gaps = [];
          let addGap = (from, to, line, structure) => {
              if (to - from < halfMargin)
                  return;
              let sel = this.state.selection.main, avoid = [sel.from];
              if (!sel.empty)
                  avoid.push(sel.to);
              for (let pos of avoid) {
                  if (pos > from && pos < to) {
                      addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                      addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                      return;
                  }
              }
              let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                  Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                  !avoid.some(pos => gap.from < pos && gap.to > pos));
              if (!gap) {
                  // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                  if (to < line.to && mayMeasure && wrapping &&
                      mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                      let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                      if (lineStart > from)
                          to = lineStart;
                  }
                  gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
              }
              gaps.push(gap);
          };
          for (let line of this.viewportLines) {
              if (line.length < doubleMargin)
                  continue;
              let structure = lineStructure(line.from, line.to, this.stateDeco);
              if (structure.total < doubleMargin)
                  continue;
              let target = this.scrollTarget ? this.scrollTarget.range.head : null;
              let viewFrom, viewTo;
              if (wrapping) {
                  let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                  let top, bot;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                      top = targetFrac - spaceFrac;
                      bot = targetFrac + spaceFrac;
                  }
                  else {
                      top = (this.visibleTop - line.top - marginHeight) / line.height;
                      bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                  }
                  viewFrom = findPosition(structure, top);
                  viewTo = findPosition(structure, bot);
              }
              else {
                  let totalWidth = structure.total * this.heightOracle.charWidth;
                  let marginWidth = margin * this.heightOracle.charWidth;
                  let left, right;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                      left = targetFrac - spaceFrac;
                      right = targetFrac + spaceFrac;
                  }
                  else {
                      left = (this.pixelViewport.left - marginWidth) / totalWidth;
                      right = (this.pixelViewport.right + marginWidth) / totalWidth;
                  }
                  viewFrom = findPosition(structure, left);
                  viewTo = findPosition(structure, right);
              }
              if (viewFrom > line.from)
                  addGap(line.from, viewFrom, line, structure);
              if (viewTo < line.to)
                  addGap(viewTo, line.to, line, structure);
          }
          return gaps;
      }
      gapSize(line, from, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from);
          if (this.heightOracle.lineWrapping) {
              return line.height * fraction;
          }
          else {
              return structure.total * this.heightOracle.charWidth * fraction;
          }
      }
      updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
          }
      }
      computeVisibleRanges() {
          let deco = this.stateDeco;
          if (this.lineGaps.length)
              deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
              span(from, to) { ranges.push({ from, to }); },
              point() { }
          }, 20);
          let changed = ranges.length != this.visibleRanges.length ||
              this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
          this.visibleRanges = ranges;
          return changed ? 4 /* UpdateFlag.Viewport */ : 0;
      }
      lineBlockAt(pos) {
          return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
              scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.state.doc, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
          return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.state.doc, 0, 0), this.scaler);
      }
      elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
      }
      get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
      }
  }
  class Viewport {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  function lineStructure(from, to, stateDeco) {
      let ranges = [], pos = from, total = 0;
      RangeSet.spans(stateDeco, from, to, {
          span() { },
          point(from, to) {
              if (from > pos) {
                  ranges.push({ from: pos, to: from });
                  total += from - pos;
              }
              pos = to;
          }
      }, 20); // We're only interested in collapsed ranges of a significant size
      if (pos < to) {
          ranges.push({ from: pos, to });
          total += to - pos;
      }
      return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
      if (ratio <= 0)
          return ranges[0].from;
      if (ratio >= 1)
          return ranges[ranges.length - 1].to;
      let dist = Math.floor(total * ratio);
      for (let i = 0;; i++) {
          let { from, to } = ranges[i], size = to - from;
          if (dist <= size)
              return from + dist;
          dist -= size;
      }
  }
  function findFraction(structure, pos) {
      let counted = 0;
      for (let { from, to } of structure.ranges) {
          if (pos <= to) {
              counted += pos - from;
              break;
          }
          counted += to - from;
      }
      return counted / structure.total;
  }
  function find(array, f) {
      for (let val of array)
          if (f(val))
              return val;
      return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  const IdScaler = {
      toDOM(n) { return n; },
      fromDOM(n) { return n; },
      scale: 1
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  class BigScaler {
      constructor(doc, heightMap, viewports) {
          let vpHeight = 0, base = 0, domBase = 0;
          this.viewports = viewports.map(({ from, to }) => {
              let top = heightMap.lineAt(from, QueryType$1.ByPos, doc, 0, 0).top;
              let bottom = heightMap.lineAt(to, QueryType$1.ByPos, doc, 0, 0).bottom;
              vpHeight += bottom - top;
              return { from, to, top, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
          }
      }
      toDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.top)
                  return domBase + (n - base) * this.scale;
              if (n <= vp.bottom)
                  return vp.domTop + (n - vp.top);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      fromDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.domTop)
                  return base + (n - domBase) / this.scale;
              if (n <= vp.domBottom)
                  return vp.top + (n - vp.domTop);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
  }
  function scaleBlock(block, scaler) {
      if (scaler.scale == 1)
          return block;
      let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
      return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
  }

  const theme$1 = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
  const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
  const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
  const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
      return new StyleModule(spec, {
          finish(sel) {
              return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                  if (m == "&")
                      return main;
                  if (!scopes || !scopes[m])
                      throw new RangeError(`Unsupported selector: ${m}`);
                  return scopes[m];
              }) : main + " " + sel;
          }
      });
  }
  const baseTheme$1$2 = /*@__PURE__*/buildTheme("." + baseThemeID, {
      "&.cm-editor": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
              // Provide a simple default outline to make sure a focused
              // editor is visually distinct. Can't leave the default behavior
              // because that will apply to the content element, which is
              // inside the scrollable container and doesn't include the
              // gutters. We also can't use an 'auto' outline, since those
              // are, for some reason, drawn behind the element content, which
              // will cause things like the active line background to cover
              // the outline (#297).
              outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
      },
      ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0
      },
      ".cm-content": {
          margin: 0,
          flexGrow: 2,
          flexShrink: 0,
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal",
          boxSizing: "border-box",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
              WebkitUserModify: "read-write-plaintext-only",
          }
      },
      ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap",
          whiteSpace: "break-spaces",
          wordBreak: "break-word",
          overflowWrap: "anywhere",
          flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
          display: "block",
          padding: "0 2px 0 6px"
      },
      ".cm-layer": {
          contain: "size style",
          "& > *": {
              position: "absolute"
          }
      },
      "&light .cm-selectionBackground": {
          background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
          background: "#222"
      },
      "&light.cm-focused .cm-selectionBackground": {
          background: "#d7d4f0"
      },
      "&dark.cm-focused .cm-selectionBackground": {
          background: "#233"
      },
      ".cm-cursorLayer": {
          pointerEvents: "none"
      },
      "&.cm-focused .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
      },
      ".cm-cursor": {
          display: "none"
      },
      "&dark .cm-cursor": {
          borderLeftColor: "#444"
      },
      "&.cm-focused .cm-cursor": {
          display: "block"
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
          flexShrink: 0,
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          left: 0,
          zIndex: 200
      },
      "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#6c6c6c",
          borderRight: "1px solid #ddd"
      },
      "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
      },
      ".cm-gutter": {
          display: "flex !important",
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
      },
      ".cm-gutterElement": {
          boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
      },
      ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0
      },
      "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
      },
      "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
          verticalAlign: "text-top",
          height: "1em",
          width: 0,
          display: "inline"
      },
      ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top",
      },
      ".cm-highlightSpace:before": {
          content: "attr(data-display)",
          position: "absolute",
          pointerEvents: "none",
          color: "#888"
      },
      ".cm-highlightTab": {
          backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
          backgroundSize: "auto 100%",
          backgroundPosition: "right 90%",
          backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
          backgroundColor: "#ff332255"
      },
      ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
      },
      "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
      },
      "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#111, #333)"
          }
      },
      ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
      },
      "&light .cm-textfield": {
          backgroundColor: "white"
      },
      "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
      }
  }, lightDarkIDs);

  class DOMChange {
      constructor(view, start, end, typeOver) {
          this.typeOver = typeOver;
          this.bounds = null;
          this.text = "";
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          if (view.state.readOnly && start > -1) {
              // Ignore changes when the editor is read-only
              this.newSel = null;
          }
          else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
              let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
              let reader = new DOMReader(selPoints, view.state);
              reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
              this.text = reader.text;
              this.newSel = selectionFromPoints(selPoints, this.bounds.from);
          }
          else {
              let domSel = view.observer.selectionRange;
              let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                  !contains(view.contentDOM, domSel.focusNode)
                  ? view.state.selection.main.head
                  : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
              let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                  !contains(view.contentDOM, domSel.anchorNode)
                  ? view.state.selection.main.anchor
                  : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
              this.newSel = EditorSelection.single(anchor, head);
          }
      }
  }
  function applyDOMChange(view, domChange) {
      let change;
      let { newSel } = domChange, sel = view.state.selection.main;
      if (domChange.bounds) {
          let { from, to } = domChange.bounds;
          let preferredPos = sel.from, preferredSide = null;
          // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)
          if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
              browser.android && domChange.text.length < to - from) {
              preferredPos = sel.to;
              preferredSide = "end";
          }
          let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
          if (diff) {
              // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. DomChange drops one of those.
              if (browser.chrome && view.inputState.lastKeyCode == 13 &&
                  diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                  diff.toB--;
              change = { from: from + diff.from, to: from + diff.toA,
                  insert: Text$1.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
          }
      }
      else if (newSel && (!view.hasFocus || !view.state.facet(editable) || newSel.main.eq(sel))) {
          newSel = null;
      }
      if (!change && !newSel)
          return false;
      if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
          // Heuristic to notice typing over a selected character
          change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
      }
      else if (change && change.from >= sel.from && change.to <= sel.to &&
          (change.from != sel.from || change.to != sel.to) &&
          (sel.to - sel.from) - (change.to - change.from) <= 4) {
          // If the change is inside the selection and covers most of it,
          // assume it is a selection replace (with identical characters at
          // the start/end not included in the diff)
          change = {
              from: sel.from, to: sel.to,
              insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
          };
      }
      else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
          /^\. ?$/.test(change.insert.toString())) {
          // Detect insert-period-on-double-space Mac and Android behavior,
          // and transform it into a regular space insert.
          if (newSel && change.insert.length == 2)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: sel.from, to: sel.to, insert: Text$1.of([" "]) };
      }
      else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
          change.insert.toString() == "\n " && view.lineWrapping) {
          // In Chrome, if you insert a space at the start of a wrapped
          // line, it will actually insert a newline and a space, causing a
          // bogus new line to be created in CodeMirror (#968)
          if (newSel)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: sel.from, to: sel.to, insert: Text$1.of([" "]) };
      }
      if (change) {
          let startState = view.state;
          if (browser.ios && view.inputState.flushIOSKey(view))
              return true;
          // Android browsers don't fire reasonable key events for enter,
          // backspace, or delete. So this detects changes that look like
          // they're caused by those keys, and reinterprets them as key
          // events. (Some of these keys are also handled by beforeinput
          // events and the pendingAndroidKey mechanism, but that's not
          // reliable in all situations.)
          if (browser.android &&
              ((change.from == sel.from && change.to == sel.to &&
                  change.insert.length == 1 && change.insert.lines == 2 &&
                  dispatchKey(view.contentDOM, "Enter", 13)) ||
                  (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                      dispatchKey(view.contentDOM, "Backspace", 8)) ||
                  (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                      dispatchKey(view.contentDOM, "Delete", 46))))
              return true;
          let text = change.insert.toString();
          if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
              return true;
          if (view.inputState.composing >= 0)
              view.inputState.composing++;
          let tr;
          if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
              (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
              view.inputState.composing < 0) {
              let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
              let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
              tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
          }
          else {
              let changes = startState.changes(change);
              let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                  ? newSel.main : undefined;
              // Try to apply a composition change to all cursors
              if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                  change.to <= sel.to && change.to >= sel.to - 10) {
                  let replaced = view.state.sliceDoc(change.from, change.to);
                  let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                  let offset = sel.to - change.to, size = sel.to - sel.from;
                  tr = startState.changeByRange(range => {
                      if (range.from == sel.from && range.to == sel.to)
                          return { changes, range: mainSel || range.map(changes) };
                      let to = range.to - offset, from = to - replaced.length;
                      if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                          // Unfortunately, there's no way to make multiple
                          // changes in the same node work without aborting
                          // composition, so cursors in the composition range are
                          // ignored.
                          compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                          return { range };
                      let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                      return {
                          changes: rangeChanges,
                          range: !mainSel ? range.map(rangeChanges) :
                              EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                      };
                  });
              }
              else {
                  tr = {
                      changes,
                      selection: mainSel && startState.selection.replaceRange(mainSel)
                  };
              }
          }
          let userEvent = "input.type";
          if (view.composing) {
              userEvent += ".compose";
              if (view.inputState.compositionFirstChange) {
                  userEvent += ".start";
                  view.inputState.compositionFirstChange = false;
              }
          }
          view.dispatch(tr, { scrollIntoView: true, userEvent });
          return true;
      }
      else if (newSel && !newSel.main.eq(sel)) {
          let scrollIntoView = false, userEvent = "select";
          if (view.inputState.lastSelectionTime > Date.now() - 50) {
              if (view.inputState.lastSelectionOrigin == "select")
                  scrollIntoView = true;
              userEvent = view.inputState.lastSelectionOrigin;
          }
          view.dispatch({ selection: newSel, scrollIntoView, userEvent });
          return true;
      }
      else {
          return false;
      }
  }
  function findDiff(a, b, preferredPos, preferredSide) {
      let minLen = Math.min(a.length, b.length);
      let from = 0;
      while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
          from++;
      if (from == minLen && a.length == b.length)
          return null;
      let toA = a.length, toB = b.length;
      while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
      }
      if (preferredSide == "end") {
          let adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
      }
      if (toA < from && a.length < b.length) {
          let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
      }
      else if (toB < from) {
          let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
          from -= move;
          toA = from + (toA - toB);
          toB = from;
      }
      return { from, toA, toB };
  }
  function selectionPoints(view) {
      let result = [];
      if (view.root.activeElement != view.contentDOM)
          return result;
      let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
      if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset)
              result.push(new DOMPoint(focusNode, focusOffset));
      }
      return result;
  }
  function selectionFromPoints(points, base) {
      if (points.length == 0)
          return null;
      let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
      return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }

  const observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  const useCharData = browser.ie && browser.ie_version <= 11;
  class DOMObserver {
      constructor(view) {
          this.view = view;
          this.active = false;
          // The known selection. Kept in our own object, as opposed to just
          // directly accessing the selection because:
          //  - Safari doesn't report the right selection in shadow DOM
          //  - Reading from the selection forces a DOM layout
          //  - This way, we can ignore selectionchange events if we have
          //    already seen the 'new' selection
          this.selectionRange = new DOMSelectionState;
          // Set when a selection change is detected, cleared on flush
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
          this.lastChange = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.resizeScroll = null;
          this.resizeContent = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          // Timeout for scheduling check of the parents that need scroll handlers
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(mutations => {
              for (let mut of mutations)
                  this.queue.push(mut);
              // IE11 will sometimes (on typing over a selection or
              // backspacing out a single character text node) call the
              // observer callback before actually updating the DOM.
              //
              // Unrelatedly, iOS Safari will, when ending a composition,
              // sometimes first clear it, deliver the mutations, and then
              // reinsert the finished text. CodeMirror's handling of the
              // deletion will prevent the reinsertion from happening,
              // breaking composition.
              if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                  mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                      m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                  this.flushSoon();
              else
                  this.flush();
          });
          if (useCharData)
              this.onCharData = (event) => {
                  this.queue.push({ target: event.target,
                      type: "characterData",
                      oldValue: event.prevValue });
                  this.flushSoon();
              };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.onResize = this.onResize.bind(this);
          this.onPrint = this.onPrint.bind(this);
          this.onScroll = this.onScroll.bind(this);
          if (typeof ResizeObserver == "function") {
              this.resizeScroll = new ResizeObserver(() => {
                  var _a;
                  if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                      this.onResize();
              });
              this.resizeScroll.observe(view.scrollDOM);
              this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
              this.resizeContent.observe(view.contentDOM);
          }
          this.addWindowListeners(this.win = view.win);
          this.start();
          if (typeof IntersectionObserver == "function") {
              this.intersection = new IntersectionObserver(entries => {
                  if (this.parentCheck < 0)
                      this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                  if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                      this.intersecting = !this.intersecting;
                      if (this.intersecting != this.view.inView)
                          this.onScrollChanged(document.createEvent("Event"));
                  }
              }, {});
              this.intersection.observe(this.dom);
              this.gapIntersection = new IntersectionObserver(entries => {
                  if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                      this.onScrollChanged(document.createEvent("Event"));
              }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
      }
      onScrollChanged(e) {
          this.view.inputState.runScrollHandlers(this.view, e);
          if (this.intersecting)
              this.view.measure();
      }
      onScroll(e) {
          if (this.intersecting)
              this.flush(false);
          this.onScrollChanged(e);
      }
      onResize() {
          if (this.resizeTimeout < 0)
              this.resizeTimeout = setTimeout(() => {
                  this.resizeTimeout = -1;
                  this.view.requestMeasure();
              }, 50);
      }
      onPrint() {
          this.view.viewState.printing = true;
          this.view.measure();
          setTimeout(() => {
              this.view.viewState.printing = false;
              this.view.requestMeasure();
          }, 500);
      }
      updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
              this.gapIntersection.disconnect();
              for (let gap of gaps)
                  this.gapIntersection.observe(gap);
              this.gaps = gaps;
          }
      }
      onSelectionChange(event) {
          let wasChanged = this.selectionChanged;
          if (!this.readSelectionRange() || this.delayedAndroidKey)
              return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
              return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event)) {
              if (!wasChanged)
                  this.selectionChanged = false;
              return;
          }
          // Deletions on IE11 fire their events in the wrong order, giving
          // us a selection change event before the DOM changes are
          // reported.
          // Chrome Android has a similar issue when backspacing out a
          // selection (#645).
          if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
              // (Selection.isCollapsed isn't reliable on IE)
              sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
              this.flushSoon();
          else
              this.flush(false);
      }
      readSelectionRange() {
          let { view } = this;
          // The Selection object is broken in shadow roots in Safari. See
          // https://github.com/codemirror/dev/issues/414
          let range = browser.safari && view.root.nodeType == 11 &&
              deepActiveElement(this.dom.ownerDocument) == this.dom &&
              safariSelectionRangeHack(this.view) || getSelection(view.root);
          if (!range || this.selectionRange.eq(range))
              return false;
          let local = hasSelection(this.dom, range);
          // Detect the situation where the browser has, on focus, moved the
          // selection to the start of the content element. Reset it to the
          // position from the editor state.
          if (local && !this.selectionChanged &&
              view.inputState.lastFocusTime > Date.now() - 200 &&
              view.inputState.lastTouchTime < Date.now() - 300 &&
              atElementStart(this.dom, range)) {
              this.view.inputState.lastFocusTime = 0;
              view.docView.updateSelection();
              return false;
          }
          this.selectionRange.setRange(range);
          if (local)
              this.selectionChanged = true;
          return true;
      }
      setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
      }
      clearSelectionRange() {
          this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                  if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                      i++;
                  else if (!changed)
                      changed = this.scrollTargets.slice(0, i);
                  if (changed)
                      changed.push(dom);
                  dom = dom.assignedSlot || dom.parentNode;
              }
              else if (dom.nodeType == 11) { // Shadow root
                  dom = dom.host;
              }
              else {
                  break;
              }
          }
          if (i < this.scrollTargets.length && !changed)
              changed = this.scrollTargets.slice(0, i);
          if (changed) {
              for (let dom of this.scrollTargets)
                  dom.removeEventListener("scroll", this.onScroll);
              for (let dom of this.scrollTargets = changed)
                  dom.addEventListener("scroll", this.onScroll);
          }
      }
      ignore(f) {
          if (!this.active)
              return f();
          try {
              this.stop();
              return f();
          }
          finally {
              this.start();
              this.clear();
          }
      }
      start() {
          if (this.active)
              return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
              this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
      }
      stop() {
          if (!this.active)
              return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
              this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
          this.processRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key, keyCode) {
          var _a;
          if (!this.delayedAndroidKey) {
              let flush = () => {
                  let key = this.delayedAndroidKey;
                  if (key) {
                      this.clearDelayedAndroidKey();
                      if (!this.flush() && key.force)
                          dispatchKey(this.dom, key.key, key.keyCode);
                  }
              };
              this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
          }
          // Since backspace beforeinput is sometimes signalled spuriously,
          // Enter always takes precedence.
          if (!this.delayedAndroidKey || key == "Enter")
              this.delayedAndroidKey = {
                  key, keyCode,
                  // Only run the key handler when no changes are detected if
                  // this isn't coming right after another change, in which case
                  // it is probably part of a weird chain of updates, and should
                  // be ignored if it returns the DOM to its previous state.
                  force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
              };
      }
      clearDelayedAndroidKey() {
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
      }
      flushSoon() {
          if (this.delayedFlush < 0)
              this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
      }
      forceFlush() {
          if (this.delayedFlush >= 0) {
              this.view.win.cancelAnimationFrame(this.delayedFlush);
              this.delayedFlush = -1;
          }
          this.flush();
      }
      processRecords() {
          let records = this.queue;
          for (let mut of this.observer.takeRecords())
              records.push(mut);
          if (records.length)
              this.queue = [];
          let from = -1, to = -1, typeOver = false;
          for (let record of records) {
              let range = this.readMutation(record);
              if (!range)
                  continue;
              if (range.typeOver)
                  typeOver = true;
              if (from == -1) {
                  ({ from, to } = range);
              }
              else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
              }
          }
          return { from, to, typeOver };
      }
      readChange() {
          let { from, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from < 0 && !newSel)
              return null;
          if (from > -1)
              this.lastChange = Date.now();
          this.view.inputState.lastFocusTime = 0;
          this.selectionChanged = false;
          return new DOMChange(this.view, from, to, typeOver);
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
          // Completely hold off flushing when pending keys are set—the code
          // managing those will make sure processRecords is called and the
          // view is resynchronized after
          if (this.delayedFlush >= 0 || this.delayedAndroidKey)
              return false;
          if (readSelection)
              this.readSelectionRange();
          let domChange = this.readChange();
          if (!domChange)
              return false;
          let startState = this.view.state;
          let handled = applyDOMChange(this.view, domChange);
          // The view wasn't updated
          if (this.view.state == startState)
              this.view.update([]);
          return handled;
      }
      readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
              return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
              cView.dirty |= 4 /* Dirty.Attrs */;
          if (rec.type == "childList") {
              let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                  to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
          }
          else if (rec.type == "characterData") {
              return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          }
          else {
              return null;
          }
      }
      setWindow(win) {
          if (win != this.win) {
              this.removeWindowListeners(this.win);
              this.win = win;
              this.addWindowListeners(this.win);
          }
      }
      addWindowListeners(win) {
          win.addEventListener("resize", this.onResize);
          win.addEventListener("beforeprint", this.onPrint);
          win.addEventListener("scroll", this.onScroll);
          win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
          win.removeEventListener("scroll", this.onScroll);
          win.removeEventListener("resize", this.onResize);
          win.removeEventListener("beforeprint", this.onPrint);
          win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      destroy() {
          var _a, _b, _c, _d;
          this.stop();
          (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
          (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
          (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
          for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
          this.removeWindowListeners(this.win);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
          this.win.cancelAnimationFrame(this.delayedFlush);
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
      }
  }
  function findChild(cView, dom, dir) {
      while (dom) {
          let curView = ContentView.get(dom);
          if (curView && curView.parent == cView)
              return curView;
          let parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
      }
      return null;
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view) {
      let found = null;
      // Because Safari (at least in 2018-2021) doesn't provide regular
      // access to the selection inside a shadowroot, we have to perform a
      // ridiculous hack to get at it—using `execCommand` to trigger a
      // `beforeInput` event so that we can read the target range from the
      // event.
      function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
      }
      view.contentDOM.addEventListener("beforeinput", read, true);
      view.dom.ownerDocument.execCommand("indent");
      view.contentDOM.removeEventListener("beforeinput", read, true);
      if (!found)
          return null;
      let anchorNode = found.startContainer, anchorOffset = found.startOffset;
      let focusNode = found.endContainer, focusOffset = found.endOffset;
      let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
      // Since such a range doesn't distinguish between anchor and head,
      // use a heuristic that flips it around if its end matches the
      // current anchor.
      if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
  }

  // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  class EditorView {
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config = {}) {
          this.plugins = [];
          this.pluginMap = new Map;
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          /**
          @internal
          */
          this.updateState = 2 /* UpdateState.Updating */;
          /**
          @internal
          */
          this.measureScheduled = -1;
          /**
          @internal
          */
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.style.cssText = "position: fixed; top: -10000px";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          this._dispatch = config.dispatch || ((tr) => this.update([tr]));
          this.dispatch = this.dispatch.bind(this);
          this._root = (config.root || getRoot(config.parent) || document);
          this.viewState = new ViewState(config.state || EditorState.create(config));
          this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
          for (let plugin of this.plugins)
              plugin.update(this);
          this.observer = new DOMObserver(this);
          this.inputState = new InputState(this);
          this.inputState.ensureHandlers(this, this.plugins);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0 /* UpdateState.Idle */;
          this.requestMeasure();
          if (config.parent)
              config.parent.appendChild(this.dom);
      }
      /**
      The current editor state.
      */
      get state() { return this.viewState.state; }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() { return this.viewState.viewport; }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() { return this.viewState.visibleRanges; }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() { return this.viewState.inView; }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() { return this.inputState.composing > 0; }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() { return this.inputState.composing >= 0; }
      /**
      The document or shadow root that the view lives in.
      */
      get root() { return this._root; }
      /**
      @internal
      */
      get win() { return this.dom.ownerDocument.defaultView || window; }
      dispatch(...input) {
          this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
              : this.state.update(...input));
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, attrsChanged = false, update;
          let state = this.state;
          for (let tr of transactions) {
              if (tr.startState != state)
                  throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
              state = tr.state;
          }
          if (this.destroyed) {
              this.viewState.state = state;
              return;
          }
          // If there was a pending DOM change, eagerly read it and try to
          // apply it after the given transactions.
          let pendingKey = this.observer.delayedAndroidKey, domChange = null;
          if (pendingKey) {
              this.observer.clearDelayedAndroidKey();
              domChange = this.observer.readChange();
              // Only try to apply DOM changes if the transactions didn't
              // change the doc or selection.
              if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                  domChange = null;
          }
          else {
              this.observer.clear();
          }
          // When the phrases change, redraw the editor
          if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
              return this.setState(state);
          update = ViewUpdate.create(this, state, transactions);
          let scrollTarget = this.viewState.scrollTarget;
          try {
              this.updateState = 2 /* UpdateState.Updating */;
              for (let tr of transactions) {
                  if (scrollTarget)
                      scrollTarget = scrollTarget.map(tr.changes);
                  if (tr.scrollIntoView) {
                      let { main } = tr.state.selection;
                      scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                  }
                  for (let e of tr.effects)
                      if (e.is(scrollIntoView$1))
                          scrollTarget = e.value;
              }
              this.viewState.update(update, scrollTarget);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
              if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
              }
              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules)
                  this.mountStyles();
              attrsChanged = this.updateAttrs();
              this.showAnnouncements(transactions);
              this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (update.startState.facet(theme$1) != update.state.facet(theme$1))
              this.viewState.mustMeasureContent = true;
          if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
              this.requestMeasure();
          if (!update.empty)
              for (let listener of this.state.facet(updateListener))
                  listener(update);
          if (domChange) {
              if (!applyDOMChange(this, domChange) && pendingKey.force)
                  dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
              this.viewState.state = newState;
              return;
          }
          this.updateState = 2 /* UpdateState.Updating */;
          let hadFocus = this.hasFocus;
          try {
              for (let plugin of this.plugins)
                  plugin.destroy(this);
              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
              this.pluginMap.clear();
              for (let plugin of this.plugins)
                  plugin.update(this);
              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this, this.plugins);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (hadFocus)
              this.focus();
          this.requestMeasure();
      }
      updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
              let newPlugins = [];
              for (let spec of specs) {
                  let found = prevSpecs.indexOf(spec);
                  if (found < 0) {
                      newPlugins.push(new PluginInstance(spec));
                  }
                  else {
                      let plugin = this.plugins[found];
                      plugin.mustUpdate = update;
                      newPlugins.push(plugin);
                  }
              }
              for (let plugin of this.plugins)
                  if (plugin.mustUpdate != update)
                      plugin.destroy(this);
              this.plugins = newPlugins;
              this.pluginMap.clear();
              this.inputState.ensureHandlers(this, this.plugins);
          }
          else {
              for (let p of this.plugins)
                  p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
              this.plugins[i].update(this);
      }
      /**
      @internal
      */
      measure(flush = true) {
          if (this.destroyed)
              return;
          if (this.measureScheduled > -1)
              cancelAnimationFrame(this.measureScheduled);
          this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
          if (flush)
              this.observer.forceFlush();
          let updated = null;
          let { scrollHeight, scrollTop, clientHeight } = this.scrollDOM;
          let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
          try {
              for (let i = 0;; i++) {
                  this.updateState = 1 /* UpdateState.Measuring */;
                  let oldViewport = this.viewport;
                  let refBlock = this.viewState.lineBlockAtHeight(refHeight);
                  let changed = this.viewState.measure(this);
                  if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                      break;
                  if (i > 5) {
                      console.warn(this.measureRequests.length
                          ? "Measure loop restarted more than 5 times"
                          : "Viewport failed to stabilize");
                      break;
                  }
                  let measuring = [];
                  // Only run measure requests in this cycle when the viewport didn't change
                  if (!(changed & 4 /* UpdateFlag.Viewport */))
                      [this.measureRequests, measuring] = [measuring, this.measureRequests];
                  let measured = measuring.map(m => {
                      try {
                          return m.read(this);
                      }
                      catch (e) {
                          logException(this.state, e);
                          return BadMeasure;
                      }
                  });
                  let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                  update.flags |= changed;
                  if (!updated)
                      updated = update;
                  else
                      updated.flags |= changed;
                  this.updateState = 2 /* UpdateState.Updating */;
                  if (!update.empty) {
                      this.updatePlugins(update);
                      this.inputState.update(update);
                      this.updateAttrs();
                      redrawn = this.docView.update(update);
                  }
                  for (let i = 0; i < measuring.length; i++)
                      if (measured[i] != BadMeasure) {
                          try {
                              let m = measuring[i];
                              if (m.write)
                                  m.write(measured[i], this);
                          }
                          catch (e) {
                              logException(this.state, e);
                          }
                      }
                  if (this.viewState.editorHeight) {
                      if (this.viewState.scrollTarget) {
                          this.docView.scrollIntoView(this.viewState.scrollTarget);
                          this.viewState.scrollTarget = null;
                          scrolled = true;
                      }
                      else {
                          let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
                          if (diff > 1 || diff < -1) {
                              this.scrollDOM.scrollTop += diff;
                              scrolled = true;
                          }
                      }
                  }
                  if (redrawn)
                      this.docView.updateSelection(true);
                  if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                      !scrolled && this.measureRequests.length == 0)
                      break;
              }
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
              this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
              for (let listener of this.state.facet(updateListener))
                  listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
          return baseThemeID + " " +
              (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
              this.state.facet(theme$1);
      }
      updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
              class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              translate: "no",
              contenteditable: !this.state.facet(editable) ? "false" : "true",
              class: "cm-content",
              style: `${browser.tabSize}: ${this.state.tabSize}`,
              role: "textbox",
              "aria-multiline": "true"
          };
          if (this.state.readOnly)
              contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          let changed = this.observer.ignore(() => {
              let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
              let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
              return changedContent || changedEditor;
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
          return changed;
      }
      showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
              for (let effect of tr.effects)
                  if (effect.is(EditorView.announce)) {
                      if (first)
                          this.announceDOM.textContent = "";
                      first = false;
                      let div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                  }
      }
      mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$2).reverse());
      }
      readMeasured() {
          if (this.updateState == 2 /* UpdateState.Updating */)
              throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
              this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
          if (this.measureScheduled < 0)
              this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
          if (request) {
              if (request.key != null)
                  for (let i = 0; i < this.measureRequests.length; i++) {
                      if (this.measureRequests[i].key === request.key) {
                          this.measureRequests[i] = request;
                          return;
                      }
                  }
              this.measureRequests.push(request);
          }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
          let known = this.pluginMap.get(plugin);
          if (known === undefined || known && known.spec != plugin)
              this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
          return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
          return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
          return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start, forward, by) {
          return skipAtoms(this, start, moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start, forward) {
          return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start, forward, includeWrap = true) {
          return moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start, forward, distance) {
          return skipAtoms(this, start, moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos) {
          return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset = 0) {
          return this.docView.posFromDOM(node, offset);
      }
      posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
              return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() { return this.viewState.defaultTextDirection; }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos) {
          let perLine = this.state.facet(perLineTextDirection);
          if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
              return this.textDirection;
          this.readMeasured();
          return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line) {
          if (line.length > MaxBidiLine)
              return trivialOrder(line.length);
          let dir = this.textDirectionAt(line.from);
          for (let entry of this.bidiCache)
              if (entry.from == line.from && entry.dir == dir)
                  return entry.order;
          let order = computeOrder(line.text, dir);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
          return order;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
          var _a;
          // Safari return false for hasFocus when the context menu is open
          // or closing, which leads us to ignore selection changes from the
          // context menu because it looks like the editor isn't focused.
          // This kludges around that.
          return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
              this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
          this.observer.ignore(() => {
              focusPreventScroll(this.contentDOM);
              this.docView.updateSelection();
          });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root) {
          if (this._root != root) {
              this._root = root;
              this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
              this.mountStyles();
          }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
          for (let plugin of this.plugins)
              plugin.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
              cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos, options = {}) {
          return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
          let prefix = StyleModule.newName();
          let result = [theme$1.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
          if (options && options.dark)
              result.push(darkTheme.of(true));
          return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
          return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
          var _a;
          let content = dom.querySelector(".cm-content");
          let cView = content && ContentView.get(content) || ContentView.get(dom);
          return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
  }
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  const MaxBidiLine = 4096;
  const BadMeasure = {};
  class CachedOrder {
      constructor(from, to, dir, order) {
          this.from = from;
          this.to = to;
          this.dir = dir;
          this.order = order;
      }
      static update(cache, changes) {
          if (changes.empty)
              return cache;
          let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
          for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
              let entry = cache[i];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                  result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
          }
          return result;
      }
  }
  function attrsFromFacet(view, facet, base) {
      for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
          let source = sources[i], value = typeof source == "function" ? source(view) : source;
          if (value)
              combineAttrs(value, base);
      }
      return base;
  }

  const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
      const parts = name.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result == "Space")
          result = " ";
      let alt, ctrl, shift, meta;
      for (let i = 0; i < parts.length - 1; ++i) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
              meta = true;
          else if (/^a(lt)?$/i.test(mod))
              alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
              ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
              shift = true;
          else if (/^mod$/i.test(mod)) {
              if (platform == "mac")
                  meta = true;
              else
                  ctrl = true;
          }
          else
              throw new Error("Unrecognized modifier name: " + mod);
      }
      if (alt)
          result = "Alt-" + result;
      if (ctrl)
          result = "Ctrl-" + result;
      if (meta)
          result = "Meta-" + result;
      if (shift)
          result = "Shift-" + result;
      return result;
  }
  function modifiers(name, event, shift) {
      if (event.altKey)
          name = "Alt-" + name;
      if (event.ctrlKey)
          name = "Ctrl-" + name;
      if (event.metaKey)
          name = "Meta-" + name;
      if (shift !== false && event.shiftKey)
          name = "Shift-" + name;
      return name;
  }
  const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
      }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
  const Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
      let bindings = state.facet(keymap);
      let map = Keymaps.get(bindings);
      if (!map)
          Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
      return map;
  }
  /**
  Run the key handlers registered for a given scope. The event
  object should be a `"keydown"` event. Returns true if any of the
  handlers handled it.
  */
  function runScopeHandlers(view, event, scope) {
      return runHandlers(getKeymap(view.state), event, view, scope);
  }
  let storedPrefix = null;
  const PrefixTimeout = 4000;
  function buildKeymap(bindings, platform = currentPlatform) {
      let bound = Object.create(null);
      let isPrefix = Object.create(null);
      let checkPrefix = (name, is) => {
          let current = isPrefix[name];
          if (current == null)
              isPrefix[name] = is;
          else if (current != is)
              throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
      };
      let add = (scope, key, command, preventDefault) => {
          var _a, _b;
          let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
          for (let i = 1; i < parts.length; i++) {
              let prefix = parts.slice(0, i).join(" ");
              checkPrefix(prefix, true);
              if (!scopeObj[prefix])
                  scopeObj[prefix] = {
                      preventDefault: true,
                      run: [(view) => {
                              let ourObj = storedPrefix = { view, prefix, scope };
                              setTimeout(() => { if (storedPrefix == ourObj)
                                  storedPrefix = null; }, PrefixTimeout);
                              return true;
                          }]
                  };
          }
          let full = parts.join(" ");
          checkPrefix(full, false);
          let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || [] });
          if (command)
              binding.run.push(command);
          if (preventDefault)
              binding.preventDefault = true;
      };
      for (let b of bindings) {
          let scopes = b.scope ? b.scope.split(" ") : ["editor"];
          if (b.any)
              for (let scope of scopes) {
                  let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                  if (!scopeObj._any)
                      scopeObj._any = { preventDefault: false, run: [] };
                  for (let key in scopeObj)
                      scopeObj[key].run.push(b.any);
              }
          let name = b[platform] || b.key;
          if (!name)
              continue;
          for (let scope of scopes) {
              add(scope, name, b.run, b.preventDefault);
              if (b.shift)
                  add(scope, "Shift-" + name, b.shift, b.preventDefault);
          }
      }
      return bound;
  }
  function runHandlers(map, event, view, scope) {
      let name = keyName(event);
      let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
      let prefix = "", fallthrough = false;
      if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
              storedPrefix = null;
      }
      let ran = new Set;
      let runFor = (binding) => {
          if (binding) {
              for (let cmd of binding.run)
                  if (!ran.has(cmd)) {
                      ran.add(cmd);
                      if (cmd(view, event))
                          return true;
                  }
              if (binding.preventDefault)
                  fallthrough = true;
          }
          return false;
      };
      let scopeObj = map[scope], baseName, shiftName;
      if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
              return true;
          if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
              (baseName = base[event.keyCode]) && baseName != name) {
              if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                  return true;
              else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                  runFor(scopeObj[prefix + modifiers(shiftName, event, false)]))
                  return true;
          }
          else if (isChar && event.shiftKey) {
              if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                  return true;
          }
          if (runFor(scopeObj._any))
              return true;
      }
      return fallthrough;
  }

  /**
  Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
  a rectangle at a given set of coordinates.
  */
  class RectangleMarker {
      /**
      Create a marker with the given class and dimensions. If `width`
      is null, the DOM element will get no width style.
      */
      constructor(className, left, top, width, height) {
          this.className = className;
          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
      }
      draw() {
          let elt = document.createElement("div");
          elt.className = this.className;
          this.adjust(elt);
          return elt;
      }
      update(elt, prev) {
          if (prev.className != this.className)
              return false;
          this.adjust(elt);
          return true;
      }
      adjust(elt) {
          elt.style.left = this.left + "px";
          elt.style.top = this.top + "px";
          if (this.width != null)
              elt.style.width = this.width + "px";
          elt.style.height = this.height + "px";
      }
      eq(p) {
          return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
              this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
      static forRange(view, className, range) {
          if (range.empty) {
              let pos = view.coordsAtPos(range.head, range.assoc || 1);
              if (!pos)
                  return [];
              let base = getBase(view);
              return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
          }
          else {
              return rectanglesForRange(view, className, range);
          }
      }
  }
  function getBase(view) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
      return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
  }
  function wrappedLine(view, pos, inside) {
      let range = EditorSelection.cursor(pos);
      return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
          to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
          type: BlockType.Text };
  }
  function blockAt(view, pos) {
      let line = view.lineBlockAt(pos);
      if (Array.isArray(line.type))
          for (let l of line.type) {
              if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                  return l;
          }
      return line;
  }
  function rectanglesForRange(view, className, range) {
      if (range.to <= view.viewport.from || range.from >= view.viewport.to)
          return [];
      let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
      let ltr = view.textDirection == Direction.LTR;
      let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
      let lineStyle = window.getComputedStyle(content.firstChild);
      let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
      let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
      let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
      let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
      let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
      if (view.lineWrapping) {
          if (visualStart)
              visualStart = wrappedLine(view, from, visualStart);
          if (visualEnd)
              visualEnd = wrappedLine(view, to, visualEnd);
      }
      if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
          return pieces(drawForLine(range.from, range.to, visualStart));
      }
      else {
          let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          let between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
              between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
          else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
              top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
      }
      function piece(left, top, right, bottom) {
          return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);
      }
      function pieces({ top, bottom, horizontal }) {
          let pieces = [];
          for (let i = 0; i < horizontal.length; i += 2)
              pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
          return pieces;
      }
      // Gets passed from/to in line-local positions
      function drawForLine(from, to, line) {
          let top = 1e9, bottom = -1e9, horizontal = [];
          function addSpan(from, fromOpen, to, toOpen, dir) {
              // Passing 2/-2 is a kludge to force the view to return
              // coordinates on the proper side of block widgets, since
              // normalizing the side there, though appropriate for most
              // coordsAtPos queries, would break selection drawing.
              let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
              let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
              top = Math.min(fromCoords.top, toCoords.top, top);
              bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
              if (dir == Direction.LTR)
                  horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
              else
                  horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }
          let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
          // Split the range by visible range and document line
          for (let r of view.visibleRanges)
              if (r.to > start && r.from < end) {
                  for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                      let docLine = view.state.doc.lineAt(pos);
                      for (let span of view.bidiSpans(docLine)) {
                          let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                          if (spanFrom >= endPos)
                              break;
                          if (spanTo > pos)
                              addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                      }
                      pos = docLine.to + 1;
                      if (pos >= endPos)
                          break;
                  }
              }
          if (horizontal.length == 0)
              addSpan(start, from == null, end, to == null, view.textDirection);
          return { top, bottom, horizontal };
      }
      function drawForWidget(block, top) {
          let y = contentRect.top + (top ? block.top : block.bottom);
          return { top: y, bottom: y, horizontal: [] };
      }
  }
  function sameMarker(a, b) {
      return a.constructor == b.constructor && a.eq(b);
  }
  class LayerView {
      constructor(view, layer) {
          this.view = view;
          this.layer = layer;
          this.drawn = [];
          this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
          this.dom = view.scrollDOM.appendChild(document.createElement("div"));
          this.dom.classList.add("cm-layer");
          if (layer.above)
              this.dom.classList.add("cm-layer-above");
          if (layer.class)
              this.dom.classList.add(layer.class);
          this.dom.setAttribute("aria-hidden", "true");
          this.setOrder(view.state);
          view.requestMeasure(this.measureReq);
          if (layer.mount)
              layer.mount(this.dom, view);
      }
      update(update) {
          if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
              this.setOrder(update.state);
          if (this.layer.update(update, this.dom) || update.geometryChanged)
              update.view.requestMeasure(this.measureReq);
      }
      setOrder(state) {
          let pos = 0, order = state.facet(layerOrder);
          while (pos < order.length && order[pos] != this.layer)
              pos++;
          this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
      measure() {
          return this.layer.markers(this.view);
      }
      draw(markers) {
          if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
              let old = this.dom.firstChild, oldI = 0;
              for (let marker of markers) {
                  if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
                      marker.update(old, this.drawn[oldI])) {
                      old = old.nextSibling;
                      oldI++;
                  }
                  else {
                      this.dom.insertBefore(marker.draw(), old);
                  }
              }
              while (old) {
                  let next = old.nextSibling;
                  old.remove();
                  old = next;
              }
              this.drawn = markers;
          }
      }
      destroy() {
          if (this.layer.destroy)
              this.layer.destroy(this.dom, this.view);
          this.dom.remove();
      }
  }
  const layerOrder = /*@__PURE__*/Facet.define();
  /**
  Define a layer.
  */
  function layer(config) {
      return [
          ViewPlugin.define(v => new LayerView(v, config)),
          layerOrder.of(config)
      ];
  }

  const CanHidePrimary = !browser.ios; // FIXME test IE
  const selectionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              cursorBlinkRate: 1200,
              drawRangeCursor: true
          }, {
              cursorBlinkRate: (a, b) => Math.min(a, b),
              drawRangeCursor: (a, b) => a || b
          });
      }
  });
  /**
  Returns an extension that hides the browser's native selection and
  cursor, replacing the selection with a background behind the text
  (with the `cm-selectionBackground` class), and the
  cursors with elements overlaid over the code (using
  `cm-cursor-primary` and `cm-cursor-secondary`).

  This allows the editor to display secondary selection ranges, and
  tends to produce a type of selection more in line with that users
  expect in a text editor (the native selection styling will often
  leave gaps between lines and won't fill the horizontal space after
  a line when the selection continues past it).

  It does have a performance cost, in that it requires an extra DOM
  layout cycle for many updates (the selection is drawn based on DOM
  layout information that's only available after laying out the
  content).
  */
  function drawSelection(config = {}) {
      return [
          selectionConfig.of(config),
          cursorLayer,
          selectionLayer,
          hideNativeSelection,
          nativeSelectionHidden.of(true)
      ];
  }
  function configChanged(update) {
      return update.startState.facet(selectionConfig) != update.startState.facet(selectionConfig);
  }
  const cursorLayer = /*@__PURE__*/layer({
      above: true,
      markers(view) {
          let { state } = view, conf = state.facet(selectionConfig);
          let cursors = [];
          for (let r of state.selection.ranges) {
              let prim = r == state.selection.main;
              if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                  let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
                  let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
                  for (let piece of RectangleMarker.forRange(view, className, cursor))
                      cursors.push(piece);
              }
          }
          return cursors;
      },
      update(update, dom) {
          if (update.transactions.some(tr => tr.scrollIntoView))
              dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
          let confChange = configChanged(update);
          if (confChange)
              setBlinkRate(update.state, dom);
          return update.docChanged || update.selectionSet || confChange;
      },
      mount(dom, view) {
          setBlinkRate(view.state, dom);
      },
      class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
      dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  const selectionLayer = /*@__PURE__*/layer({
      above: false,
      markers(view) {
          return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
              .reduce((a, b) => a.concat(b));
      },
      update(update, dom) {
          return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
      },
      class: "cm-selectionLayer"
  });
  const themeSpec = {
      ".cm-line": {
          "& ::selection": { backgroundColor: "transparent !important" },
          "&::selection": { backgroundColor: "transparent !important" }
      }
  };
  if (CanHidePrimary)
      themeSpec[".cm-line"].caretColor = "transparent !important";
  const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));

  const setDropCursorPos = /*@__PURE__*/StateEffect.define({
      map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
  });
  const dropCursorPos = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(pos, tr) {
          if (pos != null)
              pos = tr.changes.mapPos(pos);
          return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
      }
  });
  const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.cursor = null;
          this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
      }
      update(update) {
          var _a;
          let cursorPos = update.state.field(dropCursorPos);
          if (cursorPos == null) {
              if (this.cursor != null) {
                  (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                  this.cursor = null;
              }
          }
          else {
              if (!this.cursor) {
                  this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                  this.cursor.className = "cm-dropCursor";
              }
              if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                  this.view.requestMeasure(this.measureReq);
          }
      }
      readPos() {
          let pos = this.view.state.field(dropCursorPos);
          let rect = pos != null && this.view.coordsAtPos(pos);
          if (!rect)
              return null;
          let outer = this.view.scrollDOM.getBoundingClientRect();
          return {
              left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
              top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
              height: rect.bottom - rect.top
          };
      }
      drawCursor(pos) {
          if (this.cursor) {
              if (pos) {
                  this.cursor.style.left = pos.left + "px";
                  this.cursor.style.top = pos.top + "px";
                  this.cursor.style.height = pos.height + "px";
              }
              else {
                  this.cursor.style.left = "-100000px";
              }
          }
      }
      destroy() {
          if (this.cursor)
              this.cursor.remove();
      }
      setDropPos(pos) {
          if (this.view.state.field(dropCursorPos) != pos)
              this.view.dispatch({ effects: setDropCursorPos.of(pos) });
      }
  }, {
      eventHandlers: {
          dragover(event) {
              this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
          },
          dragleave(event) {
              if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                  this.setDropPos(null);
          },
          dragend() {
              this.setDropPos(null);
          },
          drop() {
              this.setDropPos(null);
          }
      }
  });
  /**
  Draws a cursor at the current drop position when something is
  dragged over the editor.
  */
  function dropCursor() {
      return [dropCursorPos, drawDropCursor];
  }

  function iterMatches(doc, re, from, to, f) {
      re.lastIndex = 0;
      for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak)
              while (m = re.exec(cursor.value))
                  f(pos + m.index, m);
      }
  }
  function matchRanges(view, maxLength) {
      let visible = view.visibleRanges;
      if (visible.length == 1 && visible[0].from == view.viewport.from &&
          visible[0].to == view.viewport.to)
          return visible;
      let result = [];
      for (let { from, to } of visible) {
          from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
          to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
          if (result.length && result[result.length - 1].to >= from)
              result[result.length - 1].to = to;
          else
              result.push({ from, to });
      }
      return result;
  }
  /**
  Helper class used to make it easier to maintain decorations on
  visible code that matches a given regular expression. To be used
  in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
  represent a matching configuration.
  */
  class MatchDecorator {
      /**
      Create a decorator.
      */
      constructor(config) {
          const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
          if (!regexp.global)
              throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
          this.regexp = regexp;
          if (decorate) {
              this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
          }
          else if (typeof decoration == "function") {
              this.addMatch = (match, view, from, add) => {
                  let deco = decoration(match, view, from);
                  if (deco)
                      add(from, from + match[0].length, deco);
              };
          }
          else if (decoration) {
              this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
          }
          else {
              throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
          }
          this.boundary = boundary;
          this.maxLength = maxLength;
      }
      /**
      Compute the full set of decorations for matches in the given
      view's viewport. You'll want to call this when initializing your
      plugin.
      */
      createDeco(view) {
          let build = new RangeSetBuilder(), add = build.add.bind(build);
          for (let { from, to } of matchRanges(view, this.maxLength))
              iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
          return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
      updateDeco(update, deco) {
          let changeFrom = 1e9, changeTo = -1;
          if (update.docChanged)
              update.changes.iterChanges((_f, _t, from, to) => {
                  if (to > update.view.viewport.from && from < update.view.viewport.to) {
                      changeFrom = Math.min(from, changeFrom);
                      changeTo = Math.max(to, changeTo);
                  }
              });
          if (update.viewportChanged || changeTo - changeFrom > 1000)
              return this.createDeco(update.view);
          if (changeTo > -1)
              return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
          return deco;
      }
      updateRange(view, deco, updateFrom, updateTo) {
          for (let r of view.visibleRanges) {
              let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
              if (to > from) {
                  let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                  let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                  if (this.boundary) {
                      for (; from > fromLine.from; from--)
                          if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                              start = from;
                              break;
                          }
                      for (; to < toLine.to; to++)
                          if (this.boundary.test(toLine.text[to - toLine.from])) {
                              end = to;
                              break;
                          }
                  }
                  let ranges = [], m;
                  let add = (from, to, deco) => ranges.push(deco.range(from, to));
                  if (fromLine == toLine) {
                      this.regexp.lastIndex = start - fromLine.from;
                      while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
                          this.addMatch(m, view, m.index + fromLine.from, add);
                  }
                  else {
                      iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
                  }
                  deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
              }
          }
          return deco;
      }
  }

  const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
  const Names = {
      0: "null",
      7: "bell",
      8: "backspace",
      10: "newline",
      11: "vertical tab",
      13: "carriage return",
      27: "escape",
      8203: "zero width space",
      8204: "zero width non-joiner",
      8205: "zero width joiner",
      8206: "left-to-right mark",
      8207: "right-to-left mark",
      8232: "line separator",
      8237: "left-to-right override",
      8238: "right-to-left override",
      8294: "left-to-right isolate",
      8295: "right-to-left isolate",
      8297: "pop directional isolate",
      8233: "paragraph separator",
      65279: "zero width no-break space",
      65532: "object replacement"
  };
  let _supportsTabSize = null;
  function supportsTabSize() {
      var _a;
      if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
          let styles = document.body.style;
          _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
      }
      return _supportsTabSize || false;
  }
  const specialCharConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          let config = combineConfig(configs, {
              render: null,
              specialChars: Specials,
              addSpecialChars: null
          });
          if (config.replaceTabs = !supportsTabSize())
              config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
          if (config.addSpecialChars)
              config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
          return config;
      }
  });
  /**
  Returns an extension that installs highlighting of special
  characters.
  */
  function highlightSpecialChars(
  /**
  Configuration options.
  */
  config = {}) {
      return [specialCharConfig.of(config), specialCharPlugin()];
  }
  let _plugin = null;
  function specialCharPlugin() {
      return _plugin || (_plugin = ViewPlugin.fromClass(class {
          constructor(view) {
              this.view = view;
              this.decorations = Decoration.none;
              this.decorationCache = Object.create(null);
              this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
              this.decorations = this.decorator.createDeco(view);
          }
          makeDecorator(conf) {
              return new MatchDecorator({
                  regexp: conf.specialChars,
                  decoration: (m, view, pos) => {
                      let { doc } = view.state;
                      let code = codePointAt(m[0], 0);
                      if (code == 9) {
                          let line = doc.lineAt(pos);
                          let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                          return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                      }
                      return this.decorationCache[code] ||
                          (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                  },
                  boundary: conf.replaceTabs ? undefined : /[^]/
              });
          }
          update(update) {
              let conf = update.state.facet(specialCharConfig);
              if (update.startState.facet(specialCharConfig) != conf) {
                  this.decorator = this.makeDecorator(conf);
                  this.decorations = this.decorator.createDeco(update.view);
              }
              else {
                  this.decorations = this.decorator.updateDeco(update, this.decorations);
              }
          }
      }, {
          decorations: v => v.decorations
      }));
  }
  const DefaultPlaceholder = "\u2022";
  // Assigns placeholder characters from the Control Pictures block to
  // ASCII control characters
  function placeholder$1(code) {
      if (code >= 32)
          return DefaultPlaceholder;
      if (code == 10)
          return "\u2424";
      return String.fromCharCode(9216 + code);
  }
  class SpecialCharWidget extends WidgetType {
      constructor(options, code) {
          super();
          this.options = options;
          this.code = code;
      }
      eq(other) { return other.code == this.code; }
      toDOM(view) {
          let ph = placeholder$1(this.code);
          let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
          let custom = this.options.render && this.options.render(this.code, desc, ph);
          if (custom)
              return custom;
          let span = document.createElement("span");
          span.textContent = ph;
          span.title = desc;
          span.setAttribute("aria-label", desc);
          span.className = "cm-specialChar";
          return span;
      }
      ignoreEvent() { return false; }
  }
  class TabWidget extends WidgetType {
      constructor(width) {
          super();
          this.width = width;
      }
      eq(other) { return other.width == this.width; }
      toDOM() {
          let span = document.createElement("span");
          span.textContent = "\t";
          span.className = "cm-tab";
          span.style.width = this.width + "px";
          return span;
      }
      ignoreEvent() { return false; }
  }

  /**
  Mark lines that have a cursor on them with the `"cm-activeLine"`
  DOM class.
  */
  function highlightActiveLine() {
      return activeLineHighlighter;
  }
  const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
  const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.decorations = this.getDeco(view);
      }
      update(update) {
          if (update.docChanged || update.selectionSet)
              this.decorations = this.getDeco(update.view);
      }
      getDeco(view) {
          let lastLineStart = -1, deco = [];
          for (let r of view.state.selection.ranges) {
              let line = view.lineBlockAt(r.head);
              if (line.from > lastLineStart) {
                  deco.push(lineDeco.range(line.from));
                  lastLineStart = line.from;
              }
          }
          return Decoration.set(deco);
      }
  }, {
      decorations: v => v.decorations
  });

  // Don't compute precise column positions for line offsets above this
  // (since it could get expensive). Assume offset==column for them.
  const MaxOff = 2000;
  function rectangleFor(state, a, b) {
      let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
      let ranges = [];
      if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
          let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
          for (let i = startLine; i <= endLine; i++) {
              let line = state.doc.line(i);
              if (line.length <= endOff)
                  ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
          }
      }
      else {
          let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
          for (let i = startLine; i <= endLine; i++) {
              let line = state.doc.line(i);
              let start = findColumn(line.text, startCol, state.tabSize, true);
              if (start < 0) {
                  ranges.push(EditorSelection.cursor(line.to));
              }
              else {
                  let end = findColumn(line.text, endCol, state.tabSize);
                  ranges.push(EditorSelection.range(line.from + start, line.from + end));
              }
          }
      }
      return ranges;
  }
  function absoluteColumn(view, x) {
      let ref = view.coordsAtPos(view.viewport.from);
      return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
      let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let line = view.state.doc.lineAt(offset), off = offset - line.from;
      let col = off > MaxOff ? -1
          : off == line.length ? absoluteColumn(view, event.clientX)
              : countColumn(line.text, view.state.tabSize, offset - line.from);
      return { line: line.number, col, off };
  }
  function rectangleSelectionStyle(view, event) {
      let start = getPos(view, event), startSel = view.state.selection;
      if (!start)
          return null;
      return {
          update(update) {
              if (update.docChanged) {
                  let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                  let newLine = update.state.doc.lineAt(newStart);
                  start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                  startSel = startSel.map(update.changes);
              }
          },
          get(event, _extend, multiple) {
              let cur = getPos(view, event);
              if (!cur)
                  return startSel;
              let ranges = rectangleFor(view.state, start, cur);
              if (!ranges.length)
                  return startSel;
              if (multiple)
                  return EditorSelection.create(ranges.concat(startSel.ranges));
              else
                  return EditorSelection.create(ranges);
          }
      };
  }
  /**
  Create an extension that enables rectangular selections. By
  default, it will react to left mouse drag with the Alt key held
  down. When such a selection occurs, the text within the rectangle
  that was dragged over will be selected, as one selection
  [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
  */
  function rectangularSelection(options) {
      let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
      return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
  }
  const keys = {
      Alt: [18, e => e.altKey],
      Control: [17, e => e.ctrlKey],
      Shift: [16, e => e.shiftKey],
      Meta: [91, e => e.metaKey]
  };
  const showCrosshair = { style: "cursor: crosshair" };
  /**
  Returns an extension that turns the pointer cursor into a
  crosshair when a given modifier key, defaulting to Alt, is held
  down. Can serve as a visual hint that rectangular selection is
  going to happen when paired with
  [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
  */
  function crosshairCursor(options = {}) {
      let [code, getter] = keys[options.key || "Alt"];
      let plugin = ViewPlugin.fromClass(class {
          constructor(view) {
              this.view = view;
              this.isDown = false;
          }
          set(isDown) {
              if (this.isDown != isDown) {
                  this.isDown = isDown;
                  this.view.update([]);
              }
          }
      }, {
          eventHandlers: {
              keydown(e) {
                  this.set(e.keyCode == code || getter(e));
              },
              keyup(e) {
                  if (e.keyCode == code || !getter(e))
                      this.set(false);
              },
              mousemove(e) {
                  this.set(getter(e));
              }
          }
      });
      return [
          plugin,
          EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
      ];
  }

  const Outside = "-10000px";
  class TooltipViewManager {
      constructor(view, facet, createTooltipView) {
          this.facet = facet;
          this.createTooltipView = createTooltipView;
          this.input = view.state.facet(facet);
          this.tooltips = this.input.filter(t => t);
          this.tooltipViews = this.tooltips.map(createTooltipView);
      }
      update(update) {
          var _a;
          let input = update.state.facet(this.facet);
          let tooltips = input.filter(x => x);
          if (input === this.input) {
              for (let t of this.tooltipViews)
                  if (t.update)
                      t.update(update);
              return false;
          }
          let tooltipViews = [];
          for (let i = 0; i < tooltips.length; i++) {
              let tip = tooltips[i], known = -1;
              if (!tip)
                  continue;
              for (let i = 0; i < this.tooltips.length; i++) {
                  let other = this.tooltips[i];
                  if (other && other.create == tip.create)
                      known = i;
              }
              if (known < 0) {
                  tooltipViews[i] = this.createTooltipView(tip);
              }
              else {
                  let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                  if (tooltipView.update)
                      tooltipView.update(update);
              }
          }
          for (let t of this.tooltipViews)
              if (tooltipViews.indexOf(t) < 0) {
                  t.dom.remove();
                  (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
              }
          this.input = input;
          this.tooltips = tooltips;
          this.tooltipViews = tooltipViews;
          return true;
      }
  }
  /**
  Creates an extension that configures tooltip behavior.
  */
  function tooltips(config = {}) {
      return tooltipConfig.of(config);
  }
  function windowSpace(view) {
      let { win } = view;
      return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
  }
  const tooltipConfig = /*@__PURE__*/Facet.define({
      combine: values => {
          var _a, _b, _c;
          return ({
              position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
              parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
              tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
          });
      }
  });
  const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.inView = true;
          this.lastTransaction = 0;
          this.measureTimeout = -1;
          let config = view.state.facet(tooltipConfig);
          this.position = config.position;
          this.parent = config.parent;
          this.classes = view.themeClasses;
          this.createContainer();
          this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
          this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
          this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
              if (Date.now() > this.lastTransaction - 50 &&
                  entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                  this.measureSoon();
          }, { threshold: [1] }) : null;
          this.observeIntersection();
          view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
          this.maybeMeasure();
      }
      createContainer() {
          if (this.parent) {
              this.container = document.createElement("div");
              this.container.style.position = "relative";
              this.container.className = this.view.themeClasses;
              this.parent.appendChild(this.container);
          }
          else {
              this.container = this.view.dom;
          }
      }
      observeIntersection() {
          if (this.intersectionObserver) {
              this.intersectionObserver.disconnect();
              for (let tooltip of this.manager.tooltipViews)
                  this.intersectionObserver.observe(tooltip.dom);
          }
      }
      measureSoon() {
          if (this.measureTimeout < 0)
              this.measureTimeout = setTimeout(() => {
                  this.measureTimeout = -1;
                  this.maybeMeasure();
              }, 50);
      }
      update(update) {
          if (update.transactions.length)
              this.lastTransaction = Date.now();
          let updated = this.manager.update(update);
          if (updated)
              this.observeIntersection();
          let shouldMeasure = updated || update.geometryChanged;
          let newConfig = update.state.facet(tooltipConfig);
          if (newConfig.position != this.position) {
              this.position = newConfig.position;
              for (let t of this.manager.tooltipViews)
                  t.dom.style.position = this.position;
              shouldMeasure = true;
          }
          if (newConfig.parent != this.parent) {
              if (this.parent)
                  this.container.remove();
              this.parent = newConfig.parent;
              this.createContainer();
              for (let t of this.manager.tooltipViews)
                  this.container.appendChild(t.dom);
              shouldMeasure = true;
          }
          else if (this.parent && this.view.themeClasses != this.classes) {
              this.classes = this.container.className = this.view.themeClasses;
          }
          if (shouldMeasure)
              this.maybeMeasure();
      }
      createTooltip(tooltip) {
          let tooltipView = tooltip.create(this.view);
          tooltipView.dom.classList.add("cm-tooltip");
          if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
              let arrow = document.createElement("div");
              arrow.className = "cm-tooltip-arrow";
              tooltipView.dom.appendChild(arrow);
          }
          tooltipView.dom.style.position = this.position;
          tooltipView.dom.style.top = Outside;
          this.container.appendChild(tooltipView.dom);
          if (tooltipView.mount)
              tooltipView.mount(this.view);
          return tooltipView;
      }
      destroy() {
          var _a, _b;
          this.view.win.removeEventListener("resize", this.measureSoon);
          for (let tooltipView of this.manager.tooltipViews) {
              tooltipView.dom.remove();
              (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
          }
          (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
          clearTimeout(this.measureTimeout);
      }
      readMeasure() {
          let editor = this.view.dom.getBoundingClientRect();
          return {
              editor,
              parent: this.parent ? this.container.getBoundingClientRect() : editor,
              pos: this.manager.tooltips.map((t, i) => {
                  let tv = this.manager.tooltipViews[i];
                  return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
              }),
              size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
              space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
          };
      }
      writeMeasure(measured) {
          let { editor, space } = measured;
          let others = [];
          for (let i = 0; i < this.manager.tooltips.length; i++) {
              let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
              let pos = measured.pos[i], size = measured.size[i];
              // Hide tooltips that are outside of the editor.
              if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                  pos.top >= Math.min(editor.bottom, space.bottom) ||
                  pos.right < Math.max(editor.left, space.left) - .1 ||
                  pos.left > Math.min(editor.right, space.right) + .1) {
                  dom.style.top = Outside;
                  continue;
              }
              let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
              let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
              let width = size.right - size.left, height = size.bottom - size.top;
              let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
              let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                  : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)
                      : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
              let above = !!tooltip.above;
              if (!tooltip.strictSide && (above
                  ? pos.top - (size.bottom - size.top) - offset.y < space.top
                  : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                  above == (space.bottom - pos.bottom > pos.top - space.top))
                  above = !above;
              let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
              if (spaceVert < height && tView.resize !== false) {
                  if (spaceVert < this.view.defaultLineHeight) {
                      dom.style.top = Outside;
                      continue;
                  }
                  dom.style.height = (height = spaceVert) + "px";
              }
              else if (dom.style.height) {
                  dom.style.height = "";
              }
              let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
              let right = left + width;
              if (tView.overlap !== true)
                  for (let r of others)
                      if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                          top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
              if (this.position == "absolute") {
                  dom.style.top = (top - measured.parent.top) + "px";
                  dom.style.left = (left - measured.parent.left) + "px";
              }
              else {
                  dom.style.top = top + "px";
                  dom.style.left = left + "px";
              }
              if (arrow)
                  arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */)}px`;
              if (tView.overlap !== true)
                  others.push({ left, top, right, bottom: top + height });
              dom.classList.toggle("cm-tooltip-above", above);
              dom.classList.toggle("cm-tooltip-below", !above);
              if (tView.positioned)
                  tView.positioned(measured.space);
          }
      }
      maybeMeasure() {
          if (this.manager.tooltips.length) {
              if (this.view.inView)
                  this.view.requestMeasure(this.measureReq);
              if (this.inView != this.view.inView) {
                  this.inView = this.view.inView;
                  if (!this.inView)
                      for (let tv of this.manager.tooltipViews)
                          tv.dom.style.top = Outside;
              }
          }
      }
  }, {
      eventHandlers: {
          scroll() { this.maybeMeasure(); }
      }
  });
  const baseTheme$6 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip": {
          zIndex: 100,
          boxSizing: "border-box"
      },
      "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
      },
      "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb",
      },
      "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tooltip-arrow": {
          height: `${7 /* Arrow.Size */}px`,
          width: `${7 /* Arrow.Size */ * 2}px`,
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
              content: "''",
              position: "absolute",
              width: 0,
              height: 0,
              borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
              borderRight: `${7 /* Arrow.Size */}px solid transparent`,
          },
          ".cm-tooltip-above &": {
              bottom: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  bottom: "1px"
              }
          },
          ".cm-tooltip-below &": {
              top: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  top: "1px"
              }
          },
      },
      "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
              borderTopColor: "#333338",
              borderBottomColor: "#333338"
          },
          "&:after": {
              borderTopColor: "transparent",
              borderBottomColor: "transparent"
          }
      }
  });
  const noOffset = { x: 0, y: 0 };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  const showTooltip = /*@__PURE__*/Facet.define({
      enables: [tooltipPlugin, baseTheme$6]
  });
  const showHoverTooltip = /*@__PURE__*/Facet.define();
  class HoverTooltipHost {
      constructor(view) {
          this.view = view;
          this.mounted = false;
          this.dom = document.createElement("div");
          this.dom.classList.add("cm-tooltip-hover");
          this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
      }
      // Needs to be static so that host tooltip instances always match
      static create(view) {
          return new HoverTooltipHost(view);
      }
      createHostedView(tooltip) {
          let hostedView = tooltip.create(this.view);
          hostedView.dom.classList.add("cm-tooltip-section");
          this.dom.appendChild(hostedView.dom);
          if (this.mounted && hostedView.mount)
              hostedView.mount(this.view);
          return hostedView;
      }
      mount(view) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.mount)
                  hostedView.mount(view);
          }
          this.mounted = true;
      }
      positioned(space) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.positioned)
                  hostedView.positioned(space);
          }
      }
      update(update) {
          this.manager.update(update);
      }
  }
  const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
      let tooltips = state.facet(showHoverTooltip).filter(t => t);
      if (tooltips.length === 0)
          return null;
      return {
          pos: Math.min(...tooltips.map(t => t.pos)),
          end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
          create: HoverTooltipHost.create,
          above: tooltips[0].above,
          arrow: tooltips.some(t => t.arrow),
      };
  });
  class HoverPlugin {
      constructor(view, source, field, setHover, hoverTime) {
          this.view = view;
          this.source = source;
          this.field = field;
          this.setHover = setHover;
          this.hoverTime = hoverTime;
          this.hoverTimeout = -1;
          this.restartTimeout = -1;
          this.pending = null;
          this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
          this.checkHover = this.checkHover.bind(this);
          view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
          view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
      }
      update() {
          if (this.pending) {
              this.pending = null;
              clearTimeout(this.restartTimeout);
              this.restartTimeout = setTimeout(() => this.startHover(), 20);
          }
      }
      get active() {
          return this.view.state.field(this.field);
      }
      checkHover() {
          this.hoverTimeout = -1;
          if (this.active)
              return;
          let hovered = Date.now() - this.lastMove.time;
          if (hovered < this.hoverTime)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
          else
              this.startHover();
      }
      startHover() {
          clearTimeout(this.restartTimeout);
          let { lastMove } = this;
          let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
          if (pos == null)
              return;
          let posCoords = this.view.coordsAtPos(pos);
          if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
              lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||
              lastMove.x > posCoords.right + this.view.defaultCharacterWidth)
              return;
          let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
          let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
          let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));
          if (open === null || open === void 0 ? void 0 : open.then) {
              let pending = this.pending = { pos };
              open.then(result => {
                  if (this.pending == pending) {
                      this.pending = null;
                      if (result)
                          this.view.dispatch({ effects: this.setHover.of(result) });
                  }
              }, e => logException(this.view.state, e, "hover tooltip"));
          }
          else if (open) {
              this.view.dispatch({ effects: this.setHover.of(open) });
          }
      }
      mousemove(event) {
          var _a;
          this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
          if (this.hoverTimeout < 0)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
          let tooltip = this.active;
          if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
              let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
              if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                  : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* Hover.MaxDist */))) {
                  this.view.dispatch({ effects: this.setHover.of(null) });
                  this.pending = null;
              }
          }
      }
      mouseleave(e) {
          clearTimeout(this.hoverTimeout);
          this.hoverTimeout = -1;
          if (this.active && !isInTooltip(e.relatedTarget))
              this.view.dispatch({ effects: this.setHover.of(null) });
      }
      destroy() {
          clearTimeout(this.hoverTimeout);
          this.view.dom.removeEventListener("mouseleave", this.mouseleave);
          this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
  }
  function isInTooltip(elt) {
      for (let cur = elt; cur; cur = cur.parentNode)
          if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
              return true;
      return false;
  }
  function isOverRange(view, from, to, x, y, margin) {
      let range = document.createRange();
      let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
      range.setEnd(toDOM.node, toDOM.offset);
      range.setStart(fromDOM.node, fromDOM.offset);
      let rects = range.getClientRects();
      range.detach();
      for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
          if (dist <= margin)
              return true;
      }
      return false;
  }
  /**
  Set up a hover tooltip, which shows up when the pointer hovers
  over ranges of text. The callback is called when the mouse hovers
  over the document text. It should, if there is a tooltip
  associated with position `pos`, return the tooltip description
  (either directly or in a promise). The `side` argument indicates
  on which side of the position the pointer is—it will be -1 if the
  pointer is before the position, 1 if after the position.

  Note that all hover tooltips are hosted within a single tooltip
  container element. This allows multiple tooltips over the same
  range to be "merged" together without overlapping.
  */
  function hoverTooltip(source, options = {}) {
      let setHover = StateEffect.define();
      let hoverState = StateField.define({
          create() { return null; },
          update(value, tr) {
              if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||
                  options.hideOn && options.hideOn(tr, value)))
                  return null;
              if (value && tr.docChanged) {
                  let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                  if (newPos == null)
                      return null;
                  let copy = Object.assign(Object.create(null), value);
                  copy.pos = newPos;
                  if (value.end != null)
                      copy.end = tr.changes.mapPos(value.end);
                  value = copy;
              }
              for (let effect of tr.effects) {
                  if (effect.is(setHover))
                      value = effect.value;
                  if (effect.is(closeHoverTooltipEffect))
                      value = null;
              }
              return value;
          },
          provide: f => showHoverTooltip.from(f)
      });
      return [
          hoverState,
          ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
          showHoverTooltipHost
      ];
  }
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
      let plugin = view.plugin(tooltipPlugin);
      if (!plugin)
          return null;
      let found = plugin.manager.tooltips.indexOf(tooltip);
      return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

  const panelConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          let topContainer, bottomContainer;
          for (let c of configs) {
              topContainer = topContainer || c.topContainer;
              bottomContainer = bottomContainer || c.bottomContainer;
          }
          return { topContainer, bottomContainer };
      }
  });
  /**
  Get the active panel created by the given constructor, if any.
  This can be useful when you need access to your panels' DOM
  structure.
  */
  function getPanel(view, panel) {
      let plugin = view.plugin(panelPlugin);
      let index = plugin ? plugin.specs.indexOf(panel) : -1;
      return index > -1 ? plugin.panels[index] : null;
  }
  const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.input = view.state.facet(showPanel);
          this.specs = this.input.filter(s => s);
          this.panels = this.specs.map(spec => spec(view));
          let conf = view.state.facet(panelConfig);
          this.top = new PanelGroup(view, true, conf.topContainer);
          this.bottom = new PanelGroup(view, false, conf.bottomContainer);
          this.top.sync(this.panels.filter(p => p.top));
          this.bottom.sync(this.panels.filter(p => !p.top));
          for (let p of this.panels) {
              p.dom.classList.add("cm-panel");
              if (p.mount)
                  p.mount();
          }
      }
      update(update) {
          let conf = update.state.facet(panelConfig);
          if (this.top.container != conf.topContainer) {
              this.top.sync([]);
              this.top = new PanelGroup(update.view, true, conf.topContainer);
          }
          if (this.bottom.container != conf.bottomContainer) {
              this.bottom.sync([]);
              this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
          }
          this.top.syncClasses();
          this.bottom.syncClasses();
          let input = update.state.facet(showPanel);
          if (input != this.input) {
              let specs = input.filter(x => x);
              let panels = [], top = [], bottom = [], mount = [];
              for (let spec of specs) {
                  let known = this.specs.indexOf(spec), panel;
                  if (known < 0) {
                      panel = spec(update.view);
                      mount.push(panel);
                  }
                  else {
                      panel = this.panels[known];
                      if (panel.update)
                          panel.update(update);
                  }
                  panels.push(panel);
                  (panel.top ? top : bottom).push(panel);
              }
              this.specs = specs;
              this.panels = panels;
              this.top.sync(top);
              this.bottom.sync(bottom);
              for (let p of mount) {
                  p.dom.classList.add("cm-panel");
                  if (p.mount)
                      p.mount();
              }
          }
          else {
              for (let p of this.panels)
                  if (p.update)
                      p.update(update);
          }
      }
      destroy() {
          this.top.sync([]);
          this.bottom.sync([]);
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
      })
  });
  class PanelGroup {
      constructor(view, top, container) {
          this.view = view;
          this.top = top;
          this.container = container;
          this.dom = undefined;
          this.classes = "";
          this.panels = [];
          this.syncClasses();
      }
      sync(panels) {
          for (let p of this.panels)
              if (p.destroy && panels.indexOf(p) < 0)
                  p.destroy();
          this.panels = panels;
          this.syncDOM();
      }
      syncDOM() {
          if (this.panels.length == 0) {
              if (this.dom) {
                  this.dom.remove();
                  this.dom = undefined;
              }
              return;
          }
          if (!this.dom) {
              this.dom = document.createElement("div");
              this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
              this.dom.style[this.top ? "top" : "bottom"] = "0";
              let parent = this.container || this.view.dom;
              parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
          }
          let curDOM = this.dom.firstChild;
          for (let panel of this.panels) {
              if (panel.dom.parentNode == this.dom) {
                  while (curDOM != panel.dom)
                      curDOM = rm(curDOM);
                  curDOM = curDOM.nextSibling;
              }
              else {
                  this.dom.insertBefore(panel.dom, curDOM);
              }
          }
          while (curDOM)
              curDOM = rm(curDOM);
      }
      scrollMargin() {
          return !this.dom || this.container ? 0
              : Math.max(0, this.top ?
                  this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                  Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
      syncClasses() {
          if (!this.container || this.classes == this.view.themeClasses)
              return;
          for (let cls of this.classes.split(" "))
              if (cls)
                  this.container.classList.remove(cls);
          for (let cls of (this.classes = this.view.themeClasses).split(" "))
              if (cls)
                  this.container.classList.add(cls);
      }
  }
  function rm(node) {
      let next = node.nextSibling;
      node.remove();
      return next;
  }
  /**
  Opening a panel is done by providing a constructor function for
  the panel through this facet. (The panel is closed again when its
  constructor is no longer provided.) Values of `null` are ignored.
  */
  const showPanel = /*@__PURE__*/Facet.define({
      enables: panelPlugin
  });

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  class GutterMarker extends RangeValue {
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) { return false; }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) { }
  }
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  const gutterLineClass = /*@__PURE__*/Facet.define();
  const defaults$1 = {
      class: "",
      renderEmptyElements: false,
      elementStyle: "",
      markers: () => RangeSet.empty,
      lineMarker: () => null,
      lineMarkerChange: null,
      initialSpacer: null,
      updateSpacer: null,
      domEventHandlers: {}
  };
  const activeGutters = /*@__PURE__*/Facet.define();
  /**
  Define an editor gutter. The order in which the gutters appear is
  determined by their extension priority.
  */
  function gutter(config) {
      return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
  }
  const unfixGutters = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.

  Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
      let result = [
          gutterView,
      ];
      if (config && config.fixed === false)
          result.push(unfixGutters.of(true));
      return result;
  }
  const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.prevViewport = view.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = this.view.contentHeight + "px";
          this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
          for (let gutter of this.gutters)
              this.dom.appendChild(gutter.dom);
          this.fixed = !view.state.facet(unfixGutters);
          if (this.fixed) {
              // FIXME IE11 fallback, which doesn't support position: sticky,
              // by using position: relative + event handlers that realign the
              // gutter (or just force fixed=false on IE11?)
              this.dom.style.position = "sticky";
          }
          this.syncGutters(false);
          view.scrollDOM.insertBefore(this.dom, view.contentDOM);
      }
      update(update) {
          if (this.updateGutters(update)) {
              // Detach during sync when the viewport changed significantly
              // (such as during scrolling), since for large updates that is
              // faster.
              let vpA = this.prevViewport, vpB = update.view.viewport;
              let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
              this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
          }
          if (update.geometryChanged)
              this.dom.style.minHeight = this.view.contentHeight + "px";
          if (this.view.state.facet(unfixGutters) != !this.fixed) {
              this.fixed = !this.fixed;
              this.dom.style.position = this.fixed ? "sticky" : "";
          }
          this.prevViewport = update.view.viewport;
      }
      syncGutters(detach) {
          let after = this.dom.nextSibling;
          if (detach)
              this.dom.remove();
          let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
          let classSet = [];
          let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
          for (let line of this.view.viewportLineBlocks) {
              let text;
              if (Array.isArray(line.type)) {
                  for (let b of line.type)
                      if (b.type == BlockType.Text) {
                          text = b;
                          break;
                      }
              }
              else {
                  text = line.type == BlockType.Text ? line : undefined;
              }
              if (!text)
                  continue;
              if (classSet.length)
                  classSet = [];
              advanceCursor(lineClasses, classSet, line.from);
              for (let cx of contexts)
                  cx.line(this.view, text, classSet);
          }
          for (let cx of contexts)
              cx.finish();
          if (detach)
              this.view.scrollDOM.insertBefore(this.dom, after);
      }
      updateGutters(update) {
          let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
          let change = update.docChanged || update.heightChanged || update.viewportChanged ||
              !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
          if (prev == cur) {
              for (let gutter of this.gutters)
                  if (gutter.update(update))
                      change = true;
          }
          else {
              change = true;
              let gutters = [];
              for (let conf of cur) {
                  let known = prev.indexOf(conf);
                  if (known < 0) {
                      gutters.push(new SingleGutterView(this.view, conf));
                  }
                  else {
                      this.gutters[known].update(update);
                      gutters.push(this.gutters[known]);
                  }
              }
              for (let g of this.gutters) {
                  g.dom.remove();
                  if (gutters.indexOf(g) < 0)
                      g.destroy();
              }
              for (let g of gutters)
                  this.dom.appendChild(g.dom);
              this.gutters = gutters;
          }
          return change;
      }
      destroy() {
          for (let view of this.gutters)
              view.destroy();
          this.dom.remove();
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          if (!value || value.gutters.length == 0 || !value.fixed)
              return null;
          return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
      })
  });
  function asArray(val) { return (Array.isArray(val) ? val : [val]); }
  function advanceCursor(cursor, collect, pos) {
      while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos)
              collect.push(cursor.value);
          cursor.next();
      }
  }
  class UpdateContext {
      constructor(gutter, viewport, height) {
          this.gutter = gutter;
          this.height = height;
          this.localMarkers = [];
          this.i = 0;
          this.cursor = RangeSet.iter(gutter.markers, viewport.from);
      }
      line(view, line, extraMarkers) {
          if (this.localMarkers.length)
              this.localMarkers = [];
          advanceCursor(this.cursor, this.localMarkers, line.from);
          let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
          let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
          if (forLine)
              localMarkers.unshift(forLine);
          let gutter = this.gutter;
          if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
              return;
          let above = line.top - this.height;
          if (this.i == gutter.elements.length) {
              let newElt = new GutterElement(view, line.height, above, localMarkers);
              gutter.elements.push(newElt);
              gutter.dom.appendChild(newElt.dom);
          }
          else {
              gutter.elements[this.i].update(view, line.height, above, localMarkers);
          }
          this.height = line.bottom;
          this.i++;
      }
      finish() {
          let gutter = this.gutter;
          while (gutter.elements.length > this.i) {
              let last = gutter.elements.pop();
              gutter.dom.removeChild(last.dom);
              last.destroy();
          }
      }
  }
  class SingleGutterView {
      constructor(view, config) {
          this.view = view;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
          for (let prop in config.domEventHandlers) {
              this.dom.addEventListener(prop, (event) => {
                  let line = view.lineBlockAtHeight(event.clientY - view.documentTop);
                  if (config.domEventHandlers[prop](view, line, event))
                      event.preventDefault();
              });
          }
          this.markers = asArray(config.markers(view));
          if (config.initialSpacer) {
              this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
              this.dom.appendChild(this.spacer.dom);
              this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
      }
      update(update) {
          let prevMarkers = this.markers;
          this.markers = asArray(this.config.markers(update.view));
          if (this.spacer && this.config.updateSpacer) {
              let updated = this.config.updateSpacer(this.spacer.markers[0], update);
              if (updated != this.spacer.markers[0])
                  this.spacer.update(update.view, 0, 0, [updated]);
          }
          let vp = update.view.viewport;
          return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
              (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
      }
      destroy() {
          for (let elt of this.elements)
              elt.destroy();
      }
  }
  class GutterElement {
      constructor(view, height, above, markers) {
          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutterElement";
          this.update(view, height, above, markers);
      }
      update(view, height, above, markers) {
          if (this.height != height)
              this.dom.style.height = (this.height = height) + "px";
          if (this.above != above)
              this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
          if (!sameMarkers(this.markers, markers))
              this.setMarkers(view, markers);
      }
      setMarkers(view, markers) {
          let cls = "cm-gutterElement", domPos = this.dom.firstChild;
          for (let iNew = 0, iOld = 0;;) {
              let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
              if (marker) {
                  let c = marker.elementClass;
                  if (c)
                      cls += " " + c;
                  for (let i = iOld; i < this.markers.length; i++)
                      if (this.markers[i].compare(marker)) {
                          skipTo = i;
                          matched = true;
                          break;
                      }
              }
              else {
                  skipTo = this.markers.length;
              }
              while (iOld < skipTo) {
                  let next = this.markers[iOld++];
                  if (next.toDOM) {
                      next.destroy(domPos);
                      let after = domPos.nextSibling;
                      domPos.remove();
                      domPos = after;
                  }
              }
              if (!marker)
                  break;
              if (marker.toDOM) {
                  if (matched)
                      domPos = domPos.nextSibling;
                  else
                      this.dom.insertBefore(marker.toDOM(view), domPos);
              }
              if (matched)
                  iOld++;
          }
          this.dom.className = cls;
          this.markers = markers;
      }
      destroy() {
          this.setMarkers(null, []); // First argument not used unless creating markers
      }
  }
  function sameMarkers(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!a[i].compare(b[i]))
              return false;
      return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  const lineNumberMarkers = /*@__PURE__*/Facet.define();
  const lineNumberConfig = /*@__PURE__*/Facet.define({
      combine(values) {
          return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
              domEventHandlers(a, b) {
                  let result = Object.assign({}, a);
                  for (let event in b) {
                      let exists = result[event], add = b[event];
                      result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                  }
                  return result;
              }
          });
      }
  });
  class NumberMarker extends GutterMarker {
      constructor(number) {
          super();
          this.number = number;
      }
      eq(other) { return this.number == other.number; }
      toDOM() { return document.createTextNode(this.number); }
  }
  function formatNumber(view, number) {
      return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
      class: "cm-lineNumbers",
      renderEmptyElements: false,
      markers(view) { return view.state.facet(lineNumberMarkers); },
      lineMarker(view, line, others) {
          if (others.some(m => m.toDOM))
              return null;
          return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
      initialSpacer(view) {
          return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer(spacer, update) {
          let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
          return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  /**
  Create a line number gutter extension.
  */
  function lineNumbers(config = {}) {
      return [
          lineNumberConfig.of(config),
          gutters(),
          lineNumberGutter
      ];
  }
  function maxLineNumber(lines) {
      let last = 9;
      while (last < lines)
          last = last * 10 + 9;
      return last;
  }
  const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
      constructor() {
          super(...arguments);
          this.elementClass = "cm-activeLineGutter";
      }
  };
  const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
      let marks = [], last = -1;
      for (let range of state.selection.ranges) {
          let linePos = state.doc.lineAt(range.head).from;
          if (linePos > last) {
              last = linePos;
              marks.push(activeLineGutterMarker.range(linePos));
          }
      }
      return RangeSet.of(marks);
  });
  /**
  Returns an extension that adds a `cm-activeLineGutter` class to
  all gutter elements on the [active
  line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
  */
  function highlightActiveLineGutter() {
      return activeLineGutterHighlighter;
  }

  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  const languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
      return Facet.define({
          combine: baseData ? values => values.concat(baseData) : undefined
      });
  }
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  class Language {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(
      /**
      The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
      used for this language.
      */
      data, parser, extraExtensions = [], 
      /**
      A language name.
      */
      name = "") {
          this.data = data;
          this.name = name;
          // Kludge to define EditorState.tree as a debugging helper,
          // without the EditorState package actually knowing about
          // languages and lezer trees.
          if (!EditorState.prototype.hasOwnProperty("tree"))
              Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
          this.parser = parser;
          this.extension = [
              language$1.of(this),
              EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
          ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos, side = -1) {
          return languageDataFacetAt(state, pos, side) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
          let lang = state.facet(language$1);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
              return [{ from: 0, to: state.doc.length }];
          if (!lang || !lang.allowsNesting)
              return [];
          let result = [];
          let explore = (tree, from) => {
              if (tree.prop(languageDataProp) == this.data) {
                  result.push({ from, to: from + tree.length });
                  return;
              }
              let mount = tree.prop(NodeProp.mounted);
              if (mount) {
                  if (mount.tree.prop(languageDataProp) == this.data) {
                      if (mount.overlay)
                          for (let r of mount.overlay)
                              result.push({ from: r.from + from, to: r.to + from });
                      else
                          result.push({ from: from, to: from + tree.length });
                      return;
                  }
                  else if (mount.overlay) {
                      let size = result.length;
                      explore(mount.tree, mount.overlay[0].from + from);
                      if (result.length > size)
                          return;
                  }
              }
              for (let i = 0; i < tree.children.length; i++) {
                  let ch = tree.children[i];
                  if (ch instanceof Tree)
                      explore(ch, tree.positions[i] + from);
              }
          };
          explore(syntaxTree(state), 0);
          return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() { return true; }
  }
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function languageDataFacetAt(state, pos, side) {
      let topLang = state.facet(language$1);
      if (!topLang)
          return null;
      let facet = topLang.data;
      if (topLang.allowsNesting) {
          for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
              facet = node.type.prop(languageDataProp) || facet;
      }
      return facet;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  class LRLanguage extends Language {
      constructor(data, parser, name) {
          super(data, parser, [], name);
          this.parser = parser;
      }
      /**
      Define a language from a parser.
      */
      static define(spec) {
          let data = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data, spec.parser.configure({
              props: [languageDataProp.add(type => type.isTop ? data : undefined)]
          }), spec.name);
      }
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      configure(options, name) {
          return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
      get allowsNesting() { return this.parser.hasWrappers(); }
  }
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
      let field = state.field(Language.state, false);
      return field ? field.tree : Tree.empty;
  }
  // Lezer-style Input object for a Text document.
  class DocInput {
      constructor(doc, length = doc.length) {
          this.doc = doc;
          this.length = length;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
      }
      syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
      }
      chunk(pos) {
          this.syncTo(pos);
          return this.string;
      }
      get lineChunks() { return true; }
      read(from, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from < stringStart || to >= this.cursorPos)
              return this.doc.sliceString(from, to);
          else
              return this.string.slice(from - stringStart, to - stringStart);
      }
  }
  let currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  class ParseContext {
      constructor(parser, 
      /**
      The current editor state.
      */
      state, 
      /**
      Tree fragments that can be reused by incremental re-parses.
      */
      fragments = [], 
      /**
      @internal
      */
      tree, 
      /**
      @internal
      */
      treeLen, 
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport, 
      /**
      @internal
      */
      skipped, 
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn) {
          this.parser = parser;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          /**
          @internal
          */
          this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser, state, viewport) {
          return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
      startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
          if (upto != null && upto >= this.state.doc.length)
              upto = undefined;
          if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
              this.takeTree();
              return true;
          }
          return this.withContext(() => {
              var _a;
              if (typeof until == "number") {
                  let endTime = Date.now() + until;
                  until = () => Date.now() > endTime;
              }
              if (!this.parse)
                  this.parse = this.startParse();
              if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                  upto < this.state.doc.length)
                  this.parse.stopAt(upto);
              for (;;) {
                  let done = this.parse.advance();
                  if (done) {
                      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                      this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                      this.tree = done;
                      this.parse = null;
                      if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                          this.parse = this.startParse();
                      else
                          return true;
                  }
                  if (until())
                      return false;
              }
          });
      }
      /**
      @internal
      */
      takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
              if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                  this.parse.stopAt(pos);
              this.withContext(() => { while (!(tree = this.parse.advance())) { } });
              this.treeLen = pos;
              this.tree = tree;
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
              this.parse = null;
          }
      }
      withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
              return f();
          }
          finally {
              currentContext = prev;
          }
      }
      withoutTempSkipped(fragments) {
          for (let r; r = this.tempSkipped.pop();)
              fragments = cutFragments(fragments, r.from, r.to);
          return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
              let ranges = [];
              changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
              fragments = TreeFragment.applyChanges(fragments, ranges);
              tree = Tree.empty;
              treeLen = 0;
              viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
              if (this.skipped.length) {
                  skipped = [];
                  for (let r of this.skipped) {
                      let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                      if (from < to)
                          skipped.push({ from, to });
                  }
              }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
              return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
              let { from, to } = this.skipped[i];
              if (from < viewport.to && to > viewport.from) {
                  this.fragments = cutFragments(this.fragments, from, to);
                  this.skipped.splice(i--, 1);
              }
          }
          if (this.skipped.length >= startLen)
              return false;
          this.reset();
          return true;
      }
      /**
      @internal
      */
      reset() {
          if (this.parse) {
              this.takeTree();
              this.parse = null;
          }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from, to) {
          this.skipped.push({ from, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
          return new class extends Parser {
              createParse(input, fragments, ranges) {
                  let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                  let parser = {
                      parsedPos: from,
                      advance() {
                          let cx = currentContext;
                          if (cx) {
                              for (let r of ranges)
                                  cx.tempSkipped.push(r);
                              if (until)
                                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                          }
                          this.parsedPos = to;
                          return new Tree(NodeType.none, [], [], to - from);
                      },
                      stoppedAt: null,
                      stopAt() { }
                  };
                  return parser;
              }
          };
      }
      /**
      @internal
      */
      isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() { return currentContext; }
  }
  function cutFragments(fragments, from, to) {
      return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  class LanguageState {
      constructor(
      // A mutable parse state that is used to preserve work done during
      // the lifetime of a state when moving to the next state.
      context) {
          this.context = context;
          this.tree = context.tree;
      }
      apply(tr) {
          if (!tr.docChanged && this.tree == this.context.tree)
              return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          // If the previous parse wasn't done, go forward only up to its
          // end position or the end of the viewport, to avoid slowing down
          // state updates with parse work beyond the viewport.
          let upto = this.context.treeLen == tr.startState.doc.length ? undefined
              : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20 /* Work.Apply */, upto))
              newCx.takeTree();
          return new LanguageState(newCx);
      }
      static init(state) {
          let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
          let parseState = ParseContext.create(state.facet(language$1).parser, state, { from: 0, to: vpTo });
          if (!parseState.work(20 /* Work.Apply */, vpTo))
              parseState.takeTree();
          return new LanguageState(parseState);
      }
  }
  Language.state = /*@__PURE__*/StateField.define({
      create: LanguageState.init,
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(Language.setState))
                  return e.value;
          if (tr.startState.facet(language$1) != tr.state.facet(language$1))
              return LanguageState.init(tr.state);
          return value.apply(tr);
      }
  });
  let requestIdle = (callback) => {
      let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
      return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(() => {
              idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
          }, 100 /* Work.MinPause */);
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
  const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
      ? () => navigator.scheduling.isInputPending() : null;
  const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
          this.view = view;
          this.working = null;
          this.workScheduled = 0;
          // End of the current time chunk
          this.chunkEnd = -1;
          // Milliseconds of budget left for this chunk
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
      }
      update(update) {
          let cx = this.view.state.field(Language.state).context;
          if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
              this.scheduleWork();
          if (update.docChanged) {
              if (this.view.hasFocus)
                  this.chunkBudget += 50 /* Work.ChangeBonus */;
              this.scheduleWork();
          }
          this.checkAsyncSchedule(cx);
      }
      scheduleWork() {
          if (this.working)
              return;
          let { state } = this.view, field = state.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
              this.working = requestIdle(this.work);
      }
      work(deadline) {
          this.working = null;
          let now = Date.now();
          if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
              this.chunkEnd = now + 30000 /* Work.ChunkTime */;
              this.chunkBudget = 3000 /* Work.ChunkBudget */;
          }
          if (this.chunkBudget <= 0)
              return; // No more budget
          let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
              return;
          let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
          let done = field.context.work(() => {
              return isInputPending && isInputPending() || Date.now() > endTime;
          }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
          this.chunkBudget -= Date.now() - now;
          if (done || this.chunkBudget <= 0) {
              field.context.takeTree();
              this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
              this.scheduleWork();
          this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx) {
          if (cx.scheduleOn) {
              this.workScheduled++;
              cx.scheduleOn
                  .then(() => this.scheduleWork())
                  .catch(err => logException(this.view.state, err))
                  .then(() => this.workScheduled--);
              cx.scheduleOn = null;
          }
      }
      destroy() {
          if (this.working)
              this.working();
      }
      isWorking() {
          return !!(this.working || this.workScheduled > 0);
      }
  }, {
      eventHandlers: { focus() { this.scheduleWork(); } }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  const language$1 = /*@__PURE__*/Facet.define({
      combine(languages) { return languages.length ? languages[0] : null; },
      enables: language => [
          Language.state,
          parseWorker,
          EditorView.contentAttributes.compute([language], state => {
              let lang = state.facet(language);
              return lang && lang.name ? { "data-language": lang.name } : {};
          })
      ]
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  class LanguageSupport {
      /**
      Create a language support object.
      */
      constructor(
      /**
      The language object.
      */
      language, 
      /**
      An optional set of supporting extensions. When nesting a
      language in another language, the outer language is encouraged
      to include the supporting extensions for its inner languages
      in its own set of support extensions.
      */
      support = []) {
          this.language = language;
          this.support = support;
          this.extension = [language, support];
      }
  }

  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  const indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens.
  Should be a string consisting either entirely of spaces or
  entirely of tabs. When not set, this defaults to 2 spaces.
  */
  const indentUnit = /*@__PURE__*/Facet.define({
      combine: values => {
          if (!values.length)
              return "  ";
          if (!/^(?: +|\t+)$/.test(values[0]))
              throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return values[0];
      }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
      let unit = state.facet(indentUnit);
      return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
      let result = "", ts = state.tabSize;
      if (state.facet(indentUnit).charCodeAt(0) == 9)
          while (cols >= ts) {
              result += "\t";
              cols -= ts;
          }
      for (let i = 0; i < cols; i++)
          result += " ";
      return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
      if (context instanceof EditorState)
          context = new IndentContext(context);
      for (let service of context.state.facet(indentService)) {
          let result = service(context, pos);
          if (result !== undefined)
              return result;
      }
      let tree = syntaxTree(context.state);
      return tree ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  class IndentContext {
      /**
      Create an indent context.
      */
      constructor(
      /**
      The editor state.
      */
      state, 
      /**
      @internal
      */
      options = {}) {
          this.state = state;
          this.options = options;
          this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos, bias = 1) {
          let line = this.state.doc.lineAt(pos);
          let { simulateBreak, simulateDoubleBreak } = this.options;
          if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
              if (simulateDoubleBreak && simulateBreak == pos)
                  return { text: "", from: pos };
              else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                  return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
              else
                  return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
          }
          return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos, bias = 1) {
          if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
              return "";
          let { text, from } = this.lineAt(pos, bias);
          return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
      column(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let result = this.countColumn(text, pos - from);
          let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
          if (override > -1)
              result += override - this.countColumn(text, text.search(/\S|$/));
          return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line, pos = line.length) {
          return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let override = this.options.overrideIndentation;
          if (override) {
              let overriden = override(from);
              if (overriden > -1)
                  return overriden;
          }
          return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
          return this.options.simulateBreak || null;
      }
  }
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  const indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
      return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
  }
  function ignoreClosed(cx) {
      return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
      let strategy = tree.type.prop(indentNodeProp);
      if (strategy)
          return strategy;
      let first = tree.firstChild, close;
      if (first && (close = first.type.prop(NodeProp.closedBy))) {
          let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
          return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      }
      return tree.parent == null ? topIndent : null;
  }
  function indentFrom(node, pos, base) {
      for (; node; node = node.parent) {
          let strategy = indentStrategy(node);
          if (strategy)
              return strategy(TreeIndentContext.create(base, pos, node));
      }
      return null;
  }
  function topIndent() { return 0; }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  class TreeIndentContext extends IndentContext {
      constructor(base, 
      /**
      The position at which indentation is being computed.
      */
      pos, 
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      node) {
          super(base.state, base.options);
          this.base = base;
          this.pos = pos;
          this.node = node;
      }
      /**
      @internal
      */
      static create(base, pos, node) {
          return new TreeIndentContext(base, pos, node);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
          return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
          let line = this.state.doc.lineAt(this.node.from);
          // Skip line starts that are covered by a sibling (or cousin, etc)
          for (;;) {
              let atBreak = this.node.resolve(line.from);
              while (atBreak.parent && atBreak.parent.from == atBreak.from)
                  atBreak = atBreak.parent;
              if (isParent(atBreak, this.node))
                  break;
              line = this.state.doc.lineAt(atBreak.from);
          }
          return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
          let parent = this.node.parent;
          return parent ? indentFrom(parent, this.pos, this.base) : 0;
      }
  }
  function isParent(parent, of) {
      for (let cur = of; cur; cur = cur.parent)
          if (parent == cur)
              return true;
      return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
      let tree = context.node;
      let openToken = tree.childAfter(tree.from), last = tree.lastChild;
      if (!openToken)
          return null;
      let sim = context.options.simulateBreak;
      let openLine = context.state.doc.lineAt(openToken.from);
      let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
      for (let pos = openToken.to;;) {
          let next = tree.childAfter(pos);
          if (!next || next == last)
              return null;
          if (!next.type.isSkipped)
              return next.from < lineEnd ? openToken : null;
          pos = next.to;
      }
  }
  /**
  An indentation strategy for delimited (usually bracketed) nodes.
  Will, by default, indent one unit more than the parent's base
  indent unless the line starts with a closing token. When `align`
  is true and there are non-skipped nodes on the node's opening
  line, the content of the node will be aligned with the end of the
  opening node, like this:

      foo(bar,
          baz)
  */
  function delimitedIndent({ closing, align = true, units = 1 }) {
      return (context) => delimitedStrategy(context, align, units, closing);
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
      let after = context.textAfter, space = after.match(/^\s*/)[0].length;
      let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
      let aligned = align ? bracketedAligned(context) : null;
      if (aligned)
          return closed ? context.column(aligned.from) : context.column(aligned.to);
      return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent({ except, units = 1 } = {}) {
      return (context) => {
          let matchExcept = except && except.test(context.textAfter);
          return context.baseIndent + (matchExcept ? 0 : units * context.unit);
      };
  }
  const DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.

  To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
      return EditorState.transactionFilter.of(tr => {
          if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
              return tr;
          let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
          if (!rules.length)
              return tr;
          let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
          if (head > line.from + DontIndentBeyond)
              return tr;
          let lineStart = doc.sliceString(line.from, head);
          if (!rules.some(r => r.test(lineStart)))
              return tr;
          let { state } = tr, last = -1, changes = [];
          for (let { head } of state.selection.ranges) {
              let line = state.doc.lineAt(head);
              if (line.from == last)
                  continue;
              last = line.from;
              let indent = getIndentation(state, line.from);
              if (indent == null)
                  continue;
              let cur = /^\s*/.exec(line.text)[0];
              let norm = indentString(state, indent);
              if (cur != norm)
                  changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
          return changes.length ? [tr, { changes, sequential: true }] : tr;
      });
  }

  /**
  A facet that registers a code folding service. When called with
  the extent of a line, such a function should return a foldable
  range that starts on that line (but continues beyond it), if one
  can be found.
  */
  const foldService = /*@__PURE__*/Facet.define();
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  const foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
      let first = node.firstChild, last = node.lastChild;
      return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
  }
  function syntaxFolding(state, start, end) {
      let tree = syntaxTree(state);
      if (tree.length < end)
          return null;
      let inner = tree.resolveInner(end, 1);
      let found = null;
      for (let cur = inner; cur; cur = cur.parent) {
          if (cur.to <= end || cur.from > end)
              continue;
          if (found && cur.from < start)
              break;
          let prop = cur.type.prop(foldNodeProp);
          if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
              let value = prop(cur, state);
              if (value && value.from <= end && value.from >= start && value.to > end)
                  found = value;
          }
      }
      return found;
  }
  function isUnfinished(node) {
      let ch = node.lastChild;
      return ch && ch.to == node.to && ch.type.isError;
  }
  /**
  Check whether the given line is foldable. First asks any fold
  services registered through
  [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
  a result, tries to query the [fold node
  prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
  of the line.
  */
  function foldable(state, lineStart, lineEnd) {
      for (let service of state.facet(foldService)) {
          let result = service(state, lineStart, lineEnd);
          if (result)
              return result;
      }
      return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
      let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
      return from >= to ? undefined : { from, to };
  }
  /**
  State effect that can be attached to a transaction to fold the
  given range. (You probably only need this in exceptional
  circumstances—usually you'll just want to let
  [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
  gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
  */
  const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  /**
  State effect that unfolds the given range (if it was folded).
  */
  const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  function selectedLines(view) {
      let lines = [];
      for (let { head } of view.state.selection.ranges) {
          if (lines.some(l => l.from <= head && l.to >= head))
              continue;
          lines.push(view.lineBlockAt(head));
      }
      return lines;
  }
  /**
  The state field that stores the folded ranges (as a [decoration
  set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
  [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
  [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
  state.
  */
  const foldState = /*@__PURE__*/StateField.define({
      create() {
          return Decoration.none;
      },
      update(folded, tr) {
          folded = folded.map(tr.changes);
          for (let e of tr.effects) {
              if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                  folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
              else if (e.is(unfoldEffect))
                  folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                      filterFrom: e.value.from, filterTo: e.value.to });
          }
          // Clear folded ranges that cover the selection head
          if (tr.selection) {
              let onSelection = false, { head } = tr.selection.main;
              folded.between(head, head, (a, b) => { if (a < head && b > head)
                  onSelection = true; });
              if (onSelection)
                  folded = folded.update({
                      filterFrom: head,
                      filterTo: head,
                      filter: (a, b) => b <= head || a >= head
                  });
          }
          return folded;
      },
      provide: f => EditorView.decorations.from(f),
      toJSON(folded, state) {
          let ranges = [];
          folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
          return ranges;
      },
      fromJSON(value) {
          if (!Array.isArray(value) || value.length % 2)
              throw new RangeError("Invalid JSON for fold state");
          let ranges = [];
          for (let i = 0; i < value.length;) {
              let from = value[i++], to = value[i++];
              if (typeof from != "number" || typeof to != "number")
                  throw new RangeError("Invalid JSON for fold state");
              ranges.push(foldWidget.range(from, to));
          }
          return Decoration.set(ranges, true);
      }
  });
  function findFold(state, from, to) {
      var _a;
      let found = null;
      (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
          if (!found || found.from > from)
              found = { from, to };
      });
      return found;
  }
  function foldExists(folded, from, to) {
      let found = false;
      folded.between(from, from, (a, b) => { if (a == from && b == to)
          found = true; });
      return found;
  }
  function maybeEnable(state, other) {
      return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  /**
  Fold the lines that are selected, if possible.
  */
  const foldCode = view => {
      for (let line of selectedLines(view)) {
          let range = foldable(view.state, line.from, line.to);
          if (range) {
              view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
              return true;
          }
      }
      return false;
  };
  /**
  Unfold folded ranges on selected lines.
  */
  const unfoldCode = view => {
      if (!view.state.field(foldState, false))
          return false;
      let effects = [];
      for (let line of selectedLines(view)) {
          let folded = findFold(view.state, line.from, line.to);
          if (folded)
              effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      }
      if (effects.length)
          view.dispatch({ effects });
      return effects.length > 0;
  };
  function announceFold(view, range, fold = true) {
      let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
      return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
  }
  /**
  Fold all top-level foldable ranges. Note that, in most cases,
  folding information will depend on the [syntax
  tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
  reliably when the document hasn't been fully parsed (either
  because the editor state was only just initialized, or because the
  document is so big that the parser decided not to parse it
  entirely).
  */
  const foldAll = view => {
      let { state } = view, effects = [];
      for (let pos = 0; pos < state.doc.length;) {
          let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
          if (range)
              effects.push(foldEffect.of(range));
          pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
      }
      if (effects.length)
          view.dispatch({ effects: maybeEnable(view.state, effects) });
      return !!effects.length;
  };
  /**
  Unfold all folded code.
  */
  const unfoldAll = view => {
      let field = view.state.field(foldState, false);
      if (!field || !field.size)
          return false;
      let effects = [];
      field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
      view.dispatch({ effects });
      return true;
  };
  /**
  Default fold-related key bindings.

   - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
   - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
   - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
   - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
  */
  const foldKeymap = [
      { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
      { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
      { key: "Ctrl-Alt-[", run: foldAll },
      { key: "Ctrl-Alt-]", run: unfoldAll }
  ];
  const defaultConfig = {
      placeholderDOM: null,
      placeholderText: "…"
  };
  const foldConfig = /*@__PURE__*/Facet.define({
      combine(values) { return combineConfig(values, defaultConfig); }
  });
  /**
  Create an extension that configures code folding.
  */
  function codeFolding(config) {
      let result = [foldState, baseTheme$1$1];
      if (config)
          result.push(foldConfig.of(config));
      return result;
  }
  const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM(view) {
              let { state } = view, conf = state.facet(foldConfig);
              let onclick = (event) => {
                  let line = view.lineBlockAt(view.posAtDOM(event.target));
                  let folded = findFold(view.state, line.from, line.to);
                  if (folded)
                      view.dispatch({ effects: unfoldEffect.of(folded) });
                  event.preventDefault();
              };
              if (conf.placeholderDOM)
                  return conf.placeholderDOM(view, onclick);
              let element = document.createElement("span");
              element.textContent = conf.placeholderText;
              element.setAttribute("aria-label", state.phrase("folded code"));
              element.title = state.phrase("unfold");
              element.className = "cm-foldPlaceholder";
              element.onclick = onclick;
              return element;
          }
      } });
  const foldGutterDefaults = {
      openText: "⌄",
      closedText: "›",
      markerDOM: null,
      domEventHandlers: {},
      foldingChanged: () => false
  };
  class FoldMarker extends GutterMarker {
      constructor(config, open) {
          super();
          this.config = config;
          this.open = open;
      }
      eq(other) { return this.config == other.config && this.open == other.open; }
      toDOM(view) {
          if (this.config.markerDOM)
              return this.config.markerDOM(this.open);
          let span = document.createElement("span");
          span.textContent = this.open ? this.config.openText : this.config.closedText;
          span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
          return span;
      }
  }
  /**
  Create an extension that registers a fold gutter, which shows a
  fold status indicator before foldable lines (which can be clicked
  to fold or unfold the line).
  */
  function foldGutter(config = {}) {
      let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
      let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
      let markers = ViewPlugin.fromClass(class {
          constructor(view) {
              this.from = view.viewport.from;
              this.markers = this.buildMarkers(view);
          }
          update(update) {
              if (update.docChanged || update.viewportChanged ||
                  update.startState.facet(language$1) != update.state.facet(language$1) ||
                  update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                  syntaxTree(update.startState) != syntaxTree(update.state) ||
                  fullConfig.foldingChanged(update))
                  this.markers = this.buildMarkers(update.view);
          }
          buildMarkers(view) {
              let builder = new RangeSetBuilder();
              for (let line of view.viewportLineBlocks) {
                  let mark = findFold(view.state, line.from, line.to) ? canUnfold
                      : foldable(view.state, line.from, line.to) ? canFold : null;
                  if (mark)
                      builder.add(line.from, line.from, mark);
              }
              return builder.finish();
          }
      });
      let { domEventHandlers } = fullConfig;
      return [
          markers,
          gutter({
              class: "cm-foldGutter",
              markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
              initialSpacer() {
                  return new FoldMarker(fullConfig, false);
              },
              domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
                      if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                          return true;
                      let folded = findFold(view.state, line.from, line.to);
                      if (folded) {
                          view.dispatch({ effects: unfoldEffect.of(folded) });
                          return true;
                      }
                      let range = foldable(view.state, line.from, line.to);
                      if (range) {
                          view.dispatch({ effects: foldEffect.of(range) });
                          return true;
                      }
                      return false;
                  } })
          }),
          codeFolding()
      ];
  }
  const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-foldPlaceholder": {
          backgroundColor: "#eee",
          border: "1px solid #ddd",
          color: "#888",
          borderRadius: ".2em",
          margin: "0 1px",
          padding: "0 1px",
          cursor: "pointer"
      },
      ".cm-foldGutter span": {
          padding: "0 1px",
          cursor: "pointer"
      }
  });

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  class HighlightStyle {
      constructor(
      /**
      The tag styles used to create this highlight style.
      */
      specs, options) {
          this.specs = specs;
          let modSpec;
          function def(spec) {
              let cls = StyleModule.newName();
              (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
              return cls;
          }
          const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
          const scopeOpt = options.scope;
          this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
              : scopeOpt ? (type) => type == scopeOpt : undefined;
          this.style = tagHighlighter(specs.map(style => ({
              tag: style.tag,
              class: style.class || def(Object.assign({}, style, { tag: null }))
          })), {
              all,
          }).style;
          this.module = modSpec ? new StyleModule(modSpec) : null;
          this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
          return new HighlightStyle(specs, options || {});
      }
  }
  const highlighterFacet = /*@__PURE__*/Facet.define();
  const fallbackHighlighter = /*@__PURE__*/Facet.define({
      combine(values) { return values.length ? [values[0]] : null; }
  });
  function getHighlighters(state) {
      let main = state.facet(highlighterFacet);
      return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
      let ext = [treeHighlighter], themeType;
      if (highlighter instanceof HighlightStyle) {
          if (highlighter.module)
              ext.push(EditorView.styleModule.of(highlighter.module));
          themeType = highlighter.themeType;
      }
      if (options === null || options === void 0 ? void 0 : options.fallback)
          ext.push(fallbackHighlighter.of(highlighter));
      else if (themeType)
          ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
              return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
          }));
      else
          ext.push(highlighterFacet.of(highlighter));
      return ext;
  }
  class TreeHighlighter {
      constructor(view) {
          this.markCache = Object.create(null);
          this.tree = syntaxTree(view.state);
          this.decorations = this.buildDeco(view, getHighlighters(view.state));
      }
      update(update) {
          let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
          let styleChange = highlighters != getHighlighters(update.startState);
          if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
              this.decorations = this.decorations.map(update.changes);
          }
          else if (tree != this.tree || update.viewportChanged || styleChange) {
              this.tree = tree;
              this.decorations = this.buildDeco(update.view, highlighters);
          }
      }
      buildDeco(view, highlighters) {
          if (!highlighters || !this.tree.length)
              return Decoration.none;
          let builder = new RangeSetBuilder();
          for (let { from, to } of view.visibleRanges) {
              highlightTree(this.tree, highlighters, (from, to, style) => {
                  builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
              }, from, to);
          }
          return builder.finish();
      }
  }
  const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
      decorations: v => v.decorations
  }));
  /**
  A default highlight style (works well with light themes).
  */
  const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
      { tag: tags$1.meta,
          color: "#7a757a" },
      { tag: tags$1.link,
          textDecoration: "underline" },
      { tag: tags$1.heading,
          textDecoration: "underline",
          fontWeight: "bold" },
      { tag: tags$1.emphasis,
          fontStyle: "italic" },
      { tag: tags$1.strong,
          fontWeight: "bold" },
      { tag: tags$1.strikethrough,
          textDecoration: "line-through" },
      { tag: tags$1.keyword,
          color: "#708" },
      { tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
          color: "#219" },
      { tag: [tags$1.literal, tags$1.inserted],
          color: "#164" },
      { tag: [tags$1.string, tags$1.deleted],
          color: "#a11" },
      { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
          color: "#e40" },
      { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
          color: "#00f" },
      { tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
          color: "#30a" },
      { tag: [tags$1.typeName, tags$1.namespace],
          color: "#085" },
      { tag: tags$1.className,
          color: "#167" },
      { tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
          color: "#256" },
      { tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
          color: "#00c" },
      { tag: tags$1.comment,
          color: "#940" },
      { tag: tags$1.invalid,
          color: "#f00" }
  ]);

  const baseTheme$5 = /*@__PURE__*/EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
  const bracketMatchingConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              afterCursor: true,
              brackets: DefaultBrackets,
              maxScanDistance: DefaultScanDist,
              renderMatch: defaultRenderMatch
          });
      }
  });
  const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
      let decorations = [];
      let mark = match.matched ? matchingMark : nonmatchingMark;
      decorations.push(mark.range(match.start.from, match.start.to));
      if (match.end)
          decorations.push(mark.range(match.end.from, match.end.to));
      return decorations;
  }
  const bracketMatchingState = /*@__PURE__*/StateField.define({
      create() { return Decoration.none; },
      update(deco, tr) {
          if (!tr.docChanged && !tr.selection)
              return deco;
          let decorations = [];
          let config = tr.state.facet(bracketMatchingConfig);
          for (let range of tr.state.selection.ranges) {
              if (!range.empty)
                  continue;
              let match = matchBrackets(tr.state, range.head, -1, config)
                  || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                  || (config.afterCursor &&
                      (matchBrackets(tr.state, range.head, 1, config) ||
                          (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
              if (match)
                  decorations = decorations.concat(config.renderMatch(match, tr.state));
          }
          return Decoration.set(decorations, true);
      },
      provide: f => EditorView.decorations.from(f)
  });
  const bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme$5
  ];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching(config = {}) {
      return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  function matchingNodes(node, dir, brackets) {
      let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
      if (byProp)
          return byProp;
      if (node.name.length == 1) {
          let index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
              return [brackets[index + dir]];
      }
      return null;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir, config = {}) {
      let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
      let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
      for (let cur = node; cur; cur = cur.parent) {
          let matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to)
              return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
      }
      return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
      let parent = token.parent, firstToken = { from: token.from, to: token.to };
      let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
      if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
          do {
              if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                  if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                      return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                  }
                  else if (matchingNodes(cursor.type, dir, brackets)) {
                      depth++;
                  }
                  else if (matchingNodes(cursor.type, -dir, brackets)) {
                      if (depth == 0)
                          return {
                              start: firstToken,
                              end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },
                              matched: false
                          };
                      depth--;
                  }
              }
          } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
      return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
      let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
      let bracket = brackets.indexOf(startCh);
      if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
          return null;
      let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
      let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
      for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
          let text = iter.value;
          if (dir < 0)
              distance += text.length;
          let basePos = pos + distance * dir;
          for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
              let found = brackets.indexOf(text[pos]);
              if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                  continue;
              if ((found % 2 == 0) == (dir > 0)) {
                  depth++;
              }
              else if (depth == 1) { // Closing
                  return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
              }
              else {
                  depth--;
              }
          }
          if (dir > 0)
              distance += text.length;
      }
      return iter.done ? { start: startToken, matched: false } : null;
  }
  const noTokens = /*@__PURE__*/Object.create(null);
  const typeArray = [NodeType.none];
  const warned = [];
  const defaultTable = /*@__PURE__*/Object.create(null);
  for (let [legacyName, name] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
  ])
      defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  function warnForPart(part, msg) {
      if (warned.indexOf(part) > -1)
          return;
      warned.push(part);
      console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
      let tag = null;
      for (let part of tagStr.split(".")) {
          let value = (extra[part] || tags$1[part]);
          if (!value) {
              warnForPart(part, `Unknown highlighting tag ${part}`);
          }
          else if (typeof value == "function") {
              if (!tag)
                  warnForPart(part, `Modifier ${part} used at start of tag`);
              else
                  tag = value(tag);
          }
          else {
              if (tag)
                  warnForPart(part, `Tag ${part} used as modifier`);
              else
                  tag = value;
          }
      }
      if (!tag)
          return 0;
      let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
          id: typeArray.length,
          name,
          props: [styleTags({ [name]: tag })]
      });
      typeArray.push(type);
      return type.id;
  }

  /**
  An instance of this is passed to completion source functions.
  */
  class CompletionContext {
      /**
      Create a new completion context. (Mostly useful for testing
      completion sources—in the editor, the extension will create
      these for you.)
      */
      constructor(
      /**
      The editor state that the completion happens in.
      */
      state, 
      /**
      The position at which the completion is happening.
      */
      pos, 
      /**
      Indicates whether completion was activated explicitly, or
      implicitly by typing. The usual way to respond to this is to
      only return completions when either there is part of a
      completable entity before the cursor, or `explicit` is true.
      */
      explicit) {
          this.state = state;
          this.pos = pos;
          this.explicit = explicit;
          /**
          @internal
          */
          this.abortListeners = [];
      }
      /**
      Get the extent, content, and (if there is a token) type of the
      token before `this.pos`.
      */
      tokenBefore(types) {
          let token = syntaxTree(this.state).resolveInner(this.pos, -1);
          while (token && types.indexOf(token.name) < 0)
              token = token.parent;
          return token ? { from: token.from, to: this.pos,
              text: this.state.sliceDoc(token.from, this.pos),
              type: token.type } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
      matchBefore(expr) {
          let line = this.state.doc.lineAt(this.pos);
          let start = Math.max(line.from, this.pos - 250);
          let str = line.text.slice(start - line.from, this.pos - line.from);
          let found = str.search(ensureAnchor(expr, false));
          return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
      get aborted() { return this.abortListeners == null; }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      */
      addEventListener(type, listener) {
          if (type == "abort" && this.abortListeners)
              this.abortListeners.push(listener);
      }
  }
  function toSet(chars) {
      let flat = Object.keys(chars).join("");
      let words = /\w/.test(flat);
      if (words)
          flat = flat.replace(/\w/g, "");
      return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
      let first = Object.create(null), rest = Object.create(null);
      for (let { label } of options) {
          first[label[0]] = true;
          for (let i = 1; i < label.length; i++)
              rest[label[i]] = true;
      }
      let source = toSet(first) + toSet(rest) + "*$";
      return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
      let options = list.map(o => typeof o == "string" ? { label: o } : o);
      let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
      return (context) => {
          let token = context.matchBefore(match);
          return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
      };
  }
  class Option {
      constructor(completion, source, match) {
          this.completion = completion;
          this.source = source;
          this.match = match;
      }
  }
  function cur(state) { return state.selection.main.head; }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
      var _a;
      let { source } = expr;
      let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
      if (!addStart && !addEnd)
          return expr;
      return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  const pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
      return Object.assign(Object.assign({}, state.changeByRange(range => {
          if (range == state.selection.main)
              return {
                  changes: { from: from, to: to, insert: text },
                  range: EditorSelection.cursor(from + text.length)
              };
          let len = to - from;
          if (!range.empty ||
              len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))
              return { range };
          return {
              changes: { from: range.from - len, to: range.from, insert: text },
              range: EditorSelection.cursor(range.from - len + text.length)
          };
      })), { userEvent: "input.complete" });
  }
  function applyCompletion(view, option) {
      const apply = option.completion.apply || option.completion.label;
      let result = option.source;
      if (typeof apply == "string")
          view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
      else
          apply(view, option.completion, result.from, result.to);
  }
  const SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
      if (!Array.isArray(source))
          return source;
      let known = SourceCache.get(source);
      if (!known)
          SourceCache.set(source, known = completeFromList(source));
      return known;
  }

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  class FuzzyMatcher {
      constructor(pattern) {
          this.pattern = pattern;
          this.chars = [];
          this.folded = [];
          // Buffers reused by calls to `match` to track matched character
          // positions.
          this.any = [];
          this.precise = [];
          this.byWord = [];
          for (let p = 0; p < pattern.length;) {
              let char = codePointAt(pattern, p), size = codePointSize(char);
              this.chars.push(char);
              let part = pattern.slice(p, p + size), upper = part.toUpperCase();
              this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
              p += size;
          }
          this.astral = pattern.length != this.chars.length;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return null for no match, and otherwise an array that starts
      // with the match score, followed by any number of `from, to` pairs
      // indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
      match(word) {
          if (this.pattern.length == 0)
              return [0];
          if (word.length < this.pattern.length)
              return null;
          let { chars, folded, any, precise, byWord } = this;
          // For single-character queries, only match when they occur right
          // at the start
          if (chars.length == 1) {
              let first = codePointAt(word, 0);
              return first == chars[0] ? [0, 0, codePointSize(first)]
                  : first == folded[0] ? [-200 /* Penalty.CaseFold */, 0, codePointSize(first)] : null;
          }
          let direct = word.indexOf(this.pattern);
          if (direct == 0)
              return [0, 0, this.pattern.length];
          let len = chars.length, anyTo = 0;
          if (direct < 0) {
              for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                  let next = codePointAt(word, i);
                  if (next == chars[anyTo] || next == folded[anyTo])
                      any[anyTo++] = i;
                  i += codePointSize(next);
              }
              // No match, exit immediately
              if (anyTo < len)
                  return null;
          }
          // This tracks the extent of the precise (non-folded, not
          // necessarily adjacent) match
          let preciseTo = 0;
          // Tracks whether there is a match that hits only characters that
          // appear to be starting words. `byWordFolded` is set to true when
          // a case folded character is encountered in such a match
          let byWordTo = 0, byWordFolded = false;
          // If we've found a partial adjacent match, these track its state
          let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
          let hasLower = /[a-z]/.test(word), wordAdjacent = true;
          // Go over the option's text, scanning for the various kinds of matches
          for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
              let next = codePointAt(word, i);
              if (direct < 0) {
                  if (preciseTo < len && next == chars[preciseTo])
                      precise[preciseTo++] = i;
                  if (adjacentTo < len) {
                      if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                          if (adjacentTo == 0)
                              adjacentStart = i;
                          adjacentEnd = i + 1;
                          adjacentTo++;
                      }
                      else {
                          adjacentTo = 0;
                      }
                  }
              }
              let ch, type = next < 0xff
                  ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                  : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
              if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                  if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                      byWord[byWordTo++] = i;
                  else if (byWord.length)
                      wordAdjacent = false;
              }
              prevType = type;
              i += codePointSize(next);
          }
          if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
          if (adjacentTo == len && adjacentStart == 0)
              return [-200 /* Penalty.CaseFold */ - word.length, 0, adjacentEnd];
          if (direct > -1)
              return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];
          if (adjacentTo == len)
              return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];
          if (byWordTo == len)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                  (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
          return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
      }
      result(score, positions, word) {
          let result = [score - word.length], i = 1;
          for (let pos of positions) {
              let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
              if (i > 1 && result[i - 1] == pos)
                  result[i - 1] = to;
              else {
                  result[i++] = pos;
                  result[i++] = to;
              }
          }
          return result;
      }
  }

  const completionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              activateOnTyping: true,
              selectOnOpen: true,
              override: null,
              closeOnBlur: true,
              maxRenderedOptions: 100,
              defaultKeymap: true,
              optionClass: () => "",
              aboveCursor: false,
              icons: true,
              addToOptions: [],
              compareCompletions: (a, b) => a.label.localeCompare(b.label),
              interactionDelay: 75
          }, {
              defaultKeymap: (a, b) => a && b,
              closeOnBlur: (a, b) => a && b,
              icons: (a, b) => a && b,
              optionClass: (a, b) => c => joinClass(a(c), b(c)),
              addToOptions: (a, b) => a.concat(b)
          });
      }
  });
  function joinClass(a, b) {
      return a ? b ? a + " " + b : a : b;
  }

  function optionContent(config) {
      let content = config.addToOptions.slice();
      if (config.icons)
          content.push({
              render(completion) {
                  let icon = document.createElement("div");
                  icon.classList.add("cm-completionIcon");
                  if (completion.type)
                      icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                  icon.setAttribute("aria-hidden", "true");
                  return icon;
              },
              position: 20
          });
      content.push({
          render(completion, _s, match) {
              let labelElt = document.createElement("span");
              labelElt.className = "cm-completionLabel";
              let { label } = completion, off = 0;
              for (let j = 1; j < match.length;) {
                  let from = match[j++], to = match[j++];
                  if (from > off)
                      labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                  let span = labelElt.appendChild(document.createElement("span"));
                  span.appendChild(document.createTextNode(label.slice(from, to)));
                  span.className = "cm-completionMatchedText";
                  off = to;
              }
              if (off < label.length)
                  labelElt.appendChild(document.createTextNode(label.slice(off)));
              return labelElt;
          },
          position: 50
      }, {
          render(completion) {
              if (!completion.detail)
                  return null;
              let detailElt = document.createElement("span");
              detailElt.className = "cm-completionDetail";
              detailElt.textContent = completion.detail;
              return detailElt;
          },
          position: 80
      });
      return content.sort((a, b) => a.position - b.position).map(a => a.render);
  }
  function rangeAroundSelected(total, selected, max) {
      if (total <= max)
          return { from: 0, to: total };
      if (selected < 0)
          selected = 0;
      if (selected <= (total >> 1)) {
          let off = Math.floor(selected / max);
          return { from: off * max, to: (off + 1) * max };
      }
      let off = Math.floor((total - selected) / max);
      return { from: total - (off + 1) * max, to: total - off * max };
  }
  class CompletionTooltip {
      constructor(view, stateField) {
          this.view = view;
          this.stateField = stateField;
          this.info = null;
          this.placeInfo = {
              read: () => this.measureInfo(),
              write: (pos) => this.positionInfo(pos),
              key: this
          };
          this.space = null;
          let cState = view.state.field(stateField);
          let { options, selected } = cState.open;
          let config = view.state.facet(completionConfig);
          this.optionContent = optionContent(config);
          this.optionClass = config.optionClass;
          this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
          this.dom = document.createElement("div");
          this.dom.className = "cm-tooltip-autocomplete";
          this.dom.addEventListener("mousedown", (e) => {
              for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                  if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                      applyCompletion(view, options[+match[1]]);
                      e.preventDefault();
                      return;
                  }
              }
          });
          this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
          this.list.addEventListener("scroll", () => {
              if (this.info)
                  this.view.requestMeasure(this.placeInfo);
          });
      }
      mount() { this.updateSel(); }
      update(update) {
          var _a, _b, _c;
          let cState = update.state.field(this.stateField);
          let prevState = update.startState.field(this.stateField);
          if (cState != prevState) {
              this.updateSel();
              if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled))
                  this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));
          }
      }
      positioned(space) {
          this.space = space;
          if (this.info)
              this.view.requestMeasure(this.placeInfo);
      }
      updateSel() {
          let cState = this.view.state.field(this.stateField), open = cState.open;
          if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
              this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
              this.list.remove();
              this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
              this.list.addEventListener("scroll", () => {
                  if (this.info)
                      this.view.requestMeasure(this.placeInfo);
              });
          }
          if (this.updateSelectedOption(open.selected)) {
              if (this.info) {
                  this.info.remove();
                  this.info = null;
              }
              let { completion } = open.options[open.selected];
              let { info } = completion;
              if (!info)
                  return;
              let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
              if (!infoResult)
                  return;
              if ('then' in infoResult) {
                  infoResult.then(node => {
                      if (node && this.view.state.field(this.stateField, false) == cState)
                          this.addInfoPane(node);
                  }).catch(e => logException(this.view.state, e, "completion info"));
              }
              else {
                  this.addInfoPane(infoResult);
              }
          }
      }
      addInfoPane(content) {
          let dom = this.info = document.createElement("div");
          dom.className = "cm-tooltip cm-completionInfo";
          dom.appendChild(content);
          this.dom.appendChild(dom);
          this.view.requestMeasure(this.placeInfo);
      }
      updateSelectedOption(selected) {
          let set = null;
          for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
              if (i == selected) {
                  if (!opt.hasAttribute("aria-selected")) {
                      opt.setAttribute("aria-selected", "true");
                      set = opt;
                  }
              }
              else {
                  if (opt.hasAttribute("aria-selected"))
                      opt.removeAttribute("aria-selected");
              }
          }
          if (set)
              scrollIntoView(this.list, set);
          return set;
      }
      measureInfo() {
          let sel = this.dom.querySelector("[aria-selected]");
          if (!sel || !this.info)
              return null;
          let listRect = this.dom.getBoundingClientRect();
          let infoRect = this.info.getBoundingClientRect();
          let selRect = sel.getBoundingClientRect();
          let space = this.space;
          if (!space) {
              let win = this.dom.ownerDocument.defaultView || window;
              space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
          }
          if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
              selRect.bottom < Math.max(space.top, listRect.top) + 10)
              return null;
          let rtl = this.view.textDirection == Direction.RTL, left = rtl, narrow = false, maxWidth;
          let top = "", bottom = "";
          let spaceLeft = listRect.left - space.left, spaceRight = space.right - listRect.right;
          if (left && spaceLeft < Math.min(infoRect.width, spaceRight))
              left = false;
          else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))
              left = true;
          if (infoRect.width <= (left ? spaceLeft : spaceRight)) {
              top = (Math.max(space.top, Math.min(selRect.top, space.bottom - infoRect.height)) - listRect.top) + "px";
              maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight) + "px";
          }
          else {
              narrow = true;
              maxWidth = Math.min(400 /* Info.Width */, (rtl ? listRect.right : space.right - listRect.left) - 30 /* Info.Margin */) + "px";
              let spaceBelow = space.bottom - listRect.bottom;
              if (spaceBelow >= infoRect.height || spaceBelow > listRect.top) // Below the completion
                  top = (selRect.bottom - listRect.top) + "px";
              else // Above it
                  bottom = (listRect.bottom - selRect.top) + "px";
          }
          return {
              top, bottom, maxWidth,
              class: narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right",
          };
      }
      positionInfo(pos) {
          if (this.info) {
              if (pos) {
                  this.info.style.top = pos.top;
                  this.info.style.bottom = pos.bottom;
                  this.info.style.maxWidth = pos.maxWidth;
                  this.info.className = "cm-tooltip cm-completionInfo cm-completionInfo-" + pos.class;
              }
              else {
                  this.info.style.top = "-1e6px";
              }
          }
      }
      createListBox(options, id, range) {
          const ul = document.createElement("ul");
          ul.id = id;
          ul.setAttribute("role", "listbox");
          ul.setAttribute("aria-expanded", "true");
          ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
          for (let i = range.from; i < range.to; i++) {
              let { completion, match } = options[i];
              const li = ul.appendChild(document.createElement("li"));
              li.id = id + "-" + i;
              li.setAttribute("role", "option");
              let cls = this.optionClass(completion);
              if (cls)
                  li.className = cls;
              for (let source of this.optionContent) {
                  let node = source(completion, this.view.state, match);
                  if (node)
                      li.appendChild(node);
              }
          }
          if (range.from)
              ul.classList.add("cm-completionListIncompleteTop");
          if (range.to < options.length)
              ul.classList.add("cm-completionListIncompleteBottom");
          return ul;
      }
  }
  // We allocate a new function instance every time the completion
  // changes to force redrawing/repositioning of the tooltip
  function completionTooltip(stateField) {
      return (view) => new CompletionTooltip(view, stateField);
  }
  function scrollIntoView(container, element) {
      let parent = container.getBoundingClientRect();
      let self = element.getBoundingClientRect();
      if (self.top < parent.top)
          container.scrollTop -= parent.top - self.top;
      else if (self.bottom > parent.bottom)
          container.scrollTop += self.bottom - parent.bottom;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
      return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
          (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
      let options = [], i = 0;
      for (let a of active)
          if (a.hasResult()) {
              if (a.result.filter === false) {
                  let getMatch = a.result.getMatch;
                  for (let option of a.result.options) {
                      let match = [1e9 - i++];
                      if (getMatch)
                          for (let n of getMatch(option))
                              match.push(n);
                      options.push(new Option(option, a, match));
                  }
              }
              else {
                  let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                  for (let option of a.result.options)
                      if (match = matcher.match(option.label)) {
                          if (option.boost != null)
                              match[0] += option.boost;
                          options.push(new Option(option, a, match));
                      }
              }
          }
      let result = [], prev = null;
      let compare = state.facet(completionConfig).compareCompletions;
      for (let opt of options.sort((a, b) => (b.match[0] - a.match[0]) || compare(a.completion, b.completion))) {
          if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||
              (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||
              prev.apply != opt.completion.apply)
              result.push(opt);
          else if (score(opt.completion) > score(prev))
              result[result.length - 1] = opt;
          prev = opt.completion;
      }
      return result;
  }
  class CompletionDialog {
      constructor(options, attrs, tooltip, timestamp, selected, disabled) {
          this.options = options;
          this.attrs = attrs;
          this.tooltip = tooltip;
          this.timestamp = timestamp;
          this.selected = selected;
          this.disabled = disabled;
      }
      setSelected(selected, id) {
          return selected == this.selected || selected >= this.options.length ? this
              : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
      static build(active, state, id, prev, conf) {
          let options = sortOptions(active, state);
          if (!options.length) {
              return prev && active.some(a => a.state == 1 /* State.Pending */) ?
                  new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
          }
          let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
          if (prev && prev.selected != selected && prev.selected != -1) {
              let selectedValue = prev.options[prev.selected].completion;
              for (let i = 0; i < options.length; i++)
                  if (options[i].completion == selectedValue) {
                      selected = i;
                      break;
                  }
          }
          return new CompletionDialog(options, makeAttrs(id, selected), {
              pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
              create: completionTooltip(completionState),
              above: conf.aboveCursor,
          }, prev ? prev.timestamp : Date.now(), selected, false);
      }
      map(changes) {
          return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
      }
  }
  class CompletionState {
      constructor(active, id, open) {
          this.active = active;
          this.id = id;
          this.open = open;
      }
      static start() {
          return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
      update(tr) {
          let { state } = tr, conf = state.facet(completionConfig);
          let sources = conf.override ||
              state.languageDataAt("autocomplete", cur(state)).map(asSource);
          let active = sources.map(source => {
              let value = this.active.find(s => s.source == source) ||
                  new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
              return value.update(tr, conf);
          });
          if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
              active = this.active;
          let open = this.open;
          if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
              !sameResults(active, this.active))
              open = CompletionDialog.build(active, state, this.id, this.open, conf);
          else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */))
              open = null;
          else if (open && tr.docChanged)
              open = open.map(tr.changes);
          if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult()))
              active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
          for (let effect of tr.effects)
              if (effect.is(setSelectedEffect))
                  open = open && open.setSelected(effect.value, this.id);
          return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
      get tooltip() { return this.open ? this.open.tooltip : null; }
      get attrs() { return this.open ? this.open.attrs : baseAttrs; }
  }
  function sameResults(a, b) {
      if (a == b)
          return true;
      for (let iA = 0, iB = 0;;) {
          while (iA < a.length && !a[iA].hasResult)
              iA++;
          while (iB < b.length && !b[iB].hasResult)
              iB++;
          let endA = iA == a.length, endB = iB == b.length;
          if (endA || endB)
              return endA == endB;
          if (a[iA++].result != b[iB++].result)
              return false;
      }
  }
  const baseAttrs = {
      "aria-autocomplete": "list"
  };
  function makeAttrs(id, selected) {
      let result = {
          "aria-autocomplete": "list",
          "aria-haspopup": "listbox",
          "aria-controls": id
      };
      if (selected > -1)
          result["aria-activedescendant"] = id + "-" + selected;
      return result;
  }
  const none$1 = [];
  function getUserEvent(tr) {
      return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
  }
  class ActiveSource {
      constructor(source, state, explicitPos = -1) {
          this.source = source;
          this.state = state;
          this.explicitPos = explicitPos;
      }
      hasResult() { return false; }
      update(tr, conf) {
          let event = getUserEvent(tr), value = this;
          if (event)
              value = value.handleUserEvent(tr, event, conf);
          else if (tr.docChanged)
              value = value.handleChange(tr);
          else if (tr.selection && value.state != 0 /* State.Inactive */)
              value = new ActiveSource(value.source, 0 /* State.Inactive */);
          for (let effect of tr.effects) {
              if (effect.is(startCompletionEffect))
                  value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);
              else if (effect.is(closeCompletionEffect))
                  value = new ActiveSource(value.source, 0 /* State.Inactive */);
              else if (effect.is(setActiveEffect))
                  for (let active of effect.value)
                      if (active.source == value.source)
                          value = active;
          }
          return value;
      }
      handleUserEvent(tr, type, conf) {
          return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
      }
      handleChange(tr) {
          return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
      }
      map(changes) {
          return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
      }
  }
  class ActiveResult extends ActiveSource {
      constructor(source, explicitPos, result, from, to) {
          super(source, 2 /* State.Result */, explicitPos);
          this.result = result;
          this.from = from;
          this.to = to;
      }
      hasResult() { return true; }
      handleUserEvent(tr, type, conf) {
          var _a;
          let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
          let pos = cur(tr.state);
          if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
              pos > to ||
              type == "delete" && cur(tr.startState) == this.from)
              return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
          let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
          if (checkValid(this.result.validFor, tr.state, from, to))
              return new ActiveResult(this.source, explicitPos, this.result, from, to);
          if (this.result.update &&
              (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
              return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
          return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
      }
      handleChange(tr) {
          return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
      }
      map(mapping) {
          return mapping.empty ? this :
              new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
  }
  function checkValid(validFor, state, from, to) {
      if (!validFor)
          return false;
      let text = state.sliceDoc(from, to);
      return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  const startCompletionEffect = /*@__PURE__*/StateEffect.define();
  const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
  const setActiveEffect = /*@__PURE__*/StateEffect.define({
      map(sources, mapping) { return sources.map(s => s.map(mapping)); }
  });
  const setSelectedEffect = /*@__PURE__*/StateEffect.define();
  const completionState = /*@__PURE__*/StateField.define({
      create() { return CompletionState.start(); },
      update(value, tr) { return value.update(tr); },
      provide: f => [
          showTooltip.from(f, val => val.tooltip),
          EditorView.contentAttributes.from(f, state => state.attrs)
      ]
  });

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward, by = "option") {
      return (view) => {
          let cState = view.state.field(completionState, false);
          if (!cState || !cState.open || cState.open.disabled ||
              Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
              return false;
          let step = 1, tooltip;
          if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
              step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                  tooltip.dom.querySelector("li").offsetHeight) - 1);
          let { length } = cState.open.options;
          let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
          if (selected < 0)
              selected = by == "page" ? 0 : length - 1;
          else if (selected >= length)
              selected = by == "page" ? length - 1 : 0;
          view.dispatch({ effects: setSelectedEffect.of(selected) });
          return true;
      };
  }
  /**
  Accept the current completion.
  */
  const acceptCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 ||
          Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
          return false;
      if (!cState.open.disabled)
          applyCompletion(view, cState.open.options[cState.open.selected]);
      return true;
  };
  /**
  Explicitly start autocompletion.
  */
  const startCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState)
          return false;
      view.dispatch({ effects: startCompletionEffect.of(true) });
      return true;
  };
  /**
  Close the currently active completion.
  */
  const closeCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
          return false;
      view.dispatch({ effects: closeCompletionEffect.of(null) });
      return true;
  };
  class RunningQuery {
      constructor(active, context) {
          this.active = active;
          this.context = context;
          this.time = Date.now();
          this.updates = [];
          // Note that 'undefined' means 'not done yet', whereas 'null' means
          // 'query returned null'.
          this.done = undefined;
      }
  }
  const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
  const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.debounceUpdate = -1;
          this.running = [];
          this.debounceAccept = -1;
          this.composing = 0 /* CompositionState.None */;
          for (let active of view.state.field(completionState).active)
              if (active.state == 1 /* State.Pending */)
                  this.startQuery(active);
      }
      update(update) {
          let cState = update.state.field(completionState);
          if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
              return;
          let doesReset = update.transactions.some(tr => {
              return (tr.selection || tr.docChanged) && !getUserEvent(tr);
          });
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (doesReset ||
                  query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                  for (let handler of query.context.abortListeners) {
                      try {
                          handler();
                      }
                      catch (e) {
                          logException(this.view.state, e);
                      }
                  }
                  query.context.abortListeners = null;
                  this.running.splice(i--, 1);
              }
              else {
                  query.updates.push(...update.transactions);
              }
          }
          if (this.debounceUpdate > -1)
              clearTimeout(this.debounceUpdate);
          this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source))
              ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
          if (this.composing != 0 /* CompositionState.None */)
              for (let tr of update.transactions) {
                  if (getUserEvent(tr) == "input")
                      this.composing = 2 /* CompositionState.Changed */;
                  else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                      this.composing = 3 /* CompositionState.ChangedAndMoved */;
              }
      }
      startUpdate() {
          this.debounceUpdate = -1;
          let { state } = this.view, cState = state.field(completionState);
          for (let active of cState.active) {
              if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source))
                  this.startQuery(active);
          }
      }
      startQuery(active) {
          let { state } = this.view, pos = cur(state);
          let context = new CompletionContext(state, pos, active.explicitPos == pos);
          let pending = new RunningQuery(active, context);
          this.running.push(pending);
          Promise.resolve(active.source(context)).then(result => {
              if (!pending.context.aborted) {
                  pending.done = result || null;
                  this.scheduleAccept();
              }
          }, err => {
              this.view.dispatch({ effects: closeCompletionEffect.of(null) });
              logException(this.view.state, err);
          });
      }
      scheduleAccept() {
          if (this.running.every(q => q.done !== undefined))
              this.accept();
          else if (this.debounceAccept < 0)
              this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
          var _a;
          if (this.debounceAccept > -1)
              clearTimeout(this.debounceAccept);
          this.debounceAccept = -1;
          let updated = [];
          let conf = this.view.state.facet(completionConfig);
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (query.done === undefined)
                  continue;
              this.running.splice(i--, 1);
              if (query.done) {
                  let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
                  // Replay the transactions that happened since the start of
                  // the request and see if that preserves the result
                  for (let tr of query.updates)
                      active = active.update(tr, conf);
                  if (active.hasResult()) {
                      updated.push(active);
                      continue;
                  }
              }
              let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
              if (current && current.state == 1 /* State.Pending */) {
                  if (query.done == null) {
                      // Explicitly failed. Should clear the pending status if it
                      // hasn't been re-set in the meantime.
                      let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                      for (let tr of query.updates)
                          active = active.update(tr, conf);
                      if (active.state != 1 /* State.Pending */)
                          updated.push(active);
                  }
                  else {
                      // Cleared by subsequent transactions. Restart.
                      this.startQuery(current);
                  }
              }
          }
          if (updated.length)
              this.view.dispatch({ effects: setActiveEffect.of(updated) });
      }
  }, {
      eventHandlers: {
          blur() {
              let state = this.view.state.field(completionState, false);
              if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)
                  this.view.dispatch({ effects: closeCompletionEffect.of(null) });
          },
          compositionstart() {
              this.composing = 1 /* CompositionState.Started */;
          },
          compositionend() {
              if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                  // Safari fires compositionend events synchronously, possibly
                  // from inside an update, so dispatch asynchronously to avoid reentrancy
                  setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
              }
              this.composing = 0 /* CompositionState.None */;
          }
      }
  });

  const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
              fontFamily: "monospace",
              whiteSpace: "nowrap",
              overflow: "hidden auto",
              maxWidth_fallback: "700px",
              maxWidth: "min(700px, 95vw)",
              minWidth: "250px",
              maxHeight: "10em",
              height: "100%",
              listStyle: "none",
              margin: 0,
              padding: 0,
              "& > li": {
                  overflowX: "hidden",
                  textOverflow: "ellipsis",
                  cursor: "pointer",
                  padding: "1px 3px",
                  lineHeight: 1.2
              },
          }
      },
      "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#17c",
          color: "white",
      },
      "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#777",
      },
      "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#347",
          color: "white",
      },
      "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#444",
      },
      ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"···"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
      },
      ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: `${400 /* Info.Width */}px`,
          boxSizing: "border-box"
      },
      ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
      ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
      ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
      ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
      "&light .cm-snippetField": { backgroundColor: "#00000022" },
      "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
      ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          display: "inline-block",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
      },
      ".cm-completionMatchedText": {
          textDecoration: "underline"
      },
      ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
      },
      ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6",
          boxSizing: "content-box"
      },
      ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": { content: "'ƒ'" }
      },
      ".cm-completionIcon-class": {
          "&:after": { content: "'○'" }
      },
      ".cm-completionIcon-interface": {
          "&:after": { content: "'◌'" }
      },
      ".cm-completionIcon-variable": {
          "&:after": { content: "'𝑥'" }
      },
      ".cm-completionIcon-constant": {
          "&:after": { content: "'𝐶'" }
      },
      ".cm-completionIcon-type": {
          "&:after": { content: "'𝑡'" }
      },
      ".cm-completionIcon-enum": {
          "&:after": { content: "'∪'" }
      },
      ".cm-completionIcon-property": {
          "&:after": { content: "'□'" }
      },
      ".cm-completionIcon-keyword": {
          "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
      },
      ".cm-completionIcon-namespace": {
          "&:after": { content: "'▢'" }
      },
      ".cm-completionIcon-text": {
          "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
      }
  });

  class FieldPos {
      constructor(field, line, from, to) {
          this.field = field;
          this.line = line;
          this.from = from;
          this.to = to;
      }
  }
  class FieldRange {
      constructor(field, from, to) {
          this.field = field;
          this.from = from;
          this.to = to;
      }
      map(changes) {
          let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
          let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
          return from == null || to == null ? null : new FieldRange(this.field, from, to);
      }
  }
  class Snippet {
      constructor(lines, fieldPositions) {
          this.lines = lines;
          this.fieldPositions = fieldPositions;
      }
      instantiate(state, pos) {
          let text = [], lineStart = [pos];
          let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
          for (let line of this.lines) {
              if (text.length) {
                  let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                  for (let i = 0; i < tabs; i++)
                      indent += state.facet(indentUnit);
                  lineStart.push(pos + indent.length - tabs);
                  line = indent + line.slice(tabs);
              }
              text.push(line);
              pos += line.length + 1;
          }
          let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
          return { text, ranges };
      }
      static parse(template) {
          let fields = [];
          let lines = [], positions = [], m;
          for (let line of template.split(/\r\n?|\n/)) {
              while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                  let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
                  for (let i = 0; i < fields.length; i++) {
                      if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                          found = i;
                  }
                  if (found < 0) {
                      let i = 0;
                      while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                          i++;
                      fields.splice(i, 0, { seq, name });
                      found = i;
                      for (let pos of positions)
                          if (pos.field >= found)
                              pos.field++;
                  }
                  positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                  line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
              }
              for (let esc; esc = /\\([{}])/.exec(line);) {
                  line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
                  for (let pos of positions)
                      if (pos.line == lines.length && pos.from > esc.index) {
                          pos.from--;
                          pos.to--;
                      }
              }
              lines.push(line);
          }
          return new Snippet(lines, positions);
      }
  }
  let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM() {
              let span = document.createElement("span");
              span.className = "cm-snippetFieldPosition";
              return span;
          }
          ignoreEvent() { return false; }
      } });
  let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
  class ActiveSnippet {
      constructor(ranges, active) {
          this.ranges = ranges;
          this.active = active;
          this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
      }
      map(changes) {
          let ranges = [];
          for (let r of this.ranges) {
              let mapped = r.map(changes);
              if (!mapped)
                  return null;
              ranges.push(mapped);
          }
          return new ActiveSnippet(ranges, this.active);
      }
      selectionInsideField(sel) {
          return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
      }
  }
  const setActive = /*@__PURE__*/StateEffect.define({
      map(value, changes) { return value && value.map(changes); }
  });
  const moveToField = /*@__PURE__*/StateEffect.define();
  const snippetState = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(value, tr) {
          for (let effect of tr.effects) {
              if (effect.is(setActive))
                  return effect.value;
              if (effect.is(moveToField) && value)
                  return new ActiveSnippet(value.ranges, effect.value);
          }
          if (value && tr.docChanged)
              value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection))
              value = null;
          return value;
      },
      provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
      return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:

      "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

  Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.

  When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.

  On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.

  The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.

  To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
      let snippet = Snippet.parse(template);
      return (editor, _completion, from, to) => {
          let { text, ranges } = snippet.instantiate(editor.state, from);
          let spec = {
              changes: { from, to, insert: Text$1.of(text) },
              scrollIntoView: true
          };
          if (ranges.length)
              spec.selection = fieldSelection(ranges, 0);
          if (ranges.length > 1) {
              let active = new ActiveSnippet(ranges, 0);
              let effects = spec.effects = [setActive.of(active)];
              if (editor.state.field(snippetState, false) === undefined)
                  effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$4]));
          }
          editor.dispatch(editor.state.update(spec));
      };
  }
  function moveField(dir) {
      return ({ state, dispatch }) => {
          let active = state.field(snippetState, false);
          if (!active || dir < 0 && active.active == 0)
              return false;
          let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
          dispatch(state.update({
              selection: fieldSelection(active.ranges, next),
              effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
          }));
          return true;
      };
  }
  /**
  A command that clears the active snippet, if any.
  */
  const clearSnippet = ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active)
          return false;
      dispatch(state.update({ effects: setActive.of(null) }));
      return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  const nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  const prevSnippetField = /*@__PURE__*/moveField(-1);
  const defaultSnippetKeymap = [
      { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
      { key: "Escape", run: clearSnippet }
  ];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  const snippetKeymap = /*@__PURE__*/Facet.define({
      combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
  });
  const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
      return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
      mousedown(event, view) {
          let active = view.state.field(snippetState, false), pos;
          if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
              return false;
          let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
          if (!match || match.field == active.active)
              return false;
          view.dispatch({
              selection: fieldSelection(active.ranges, match.field),
              effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
          });
          return true;
      }
  });

  const defaults = {
      brackets: ["(", "[", "{", "'", '"'],
      before: ")]}:;>",
      stringPrefixes: []
  };
  const closeBracketEffect = /*@__PURE__*/StateEffect.define({
      map(value, mapping) {
          let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
          return mapped == null ? undefined : mapped;
      }
  });
  const skipBracketEffect = /*@__PURE__*/StateEffect.define({
      map(value, mapping) { return mapping.mapPos(value); }
  });
  const closedBracket = /*@__PURE__*/new class extends RangeValue {
  };
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  const bracketState = /*@__PURE__*/StateField.define({
      create() { return RangeSet.empty; },
      update(value, tr) {
          if (tr.selection) {
              let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
              let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
              if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                  value = RangeSet.empty;
          }
          value = value.map(tr.changes);
          for (let effect of tr.effects) {
              if (effect.is(closeBracketEffect))
                  value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
              else if (effect.is(skipBracketEffect))
                  value = value.update({ filter: from => from != effect.value });
          }
          return value;
      }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
      return [inputHandler, bracketState];
  }
  const definedClosing = "()[]{}<>";
  function closing(ch) {
      for (let i = 0; i < definedClosing.length; i += 2)
          if (definedClosing.charCodeAt(i) == ch)
              return definedClosing.charAt(i + 1);
      return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
      return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
      if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
          return false;
      let sel = view.state.selection.main;
      if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
          from != sel.from || to != sel.to)
          return false;
      let tr = insertBracket(view.state, insert);
      if (!tr)
          return false;
      view.dispatch(tr);
      return true;
  });
  /**
  Command that implements deleting a pair of matching brackets when
  the cursor is between them.
  */
  const deleteBracketPair = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let conf = config(state, state.selection.main.head);
      let tokens = conf.brackets || defaults.brackets;
      let dont = null, changes = state.changeByRange(range => {
          if (range.empty) {
              let before = prevChar(state.doc, range.head);
              for (let token of tokens) {
                  if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                      return { changes: { from: range.head - token.length, to: range.head + token.length },
                          range: EditorSelection.cursor(range.head - token.length) };
              }
          }
          return { range: dont = range };
      });
      if (!dont)
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
      return !dont;
  };
  /**
  Close-brackets related key bindings. Binds Backspace to
  [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
  */
  const closeBracketsKeymap = [
      { key: "Backspace", run: deleteBracketPair }
  ];
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
      let conf = config(state, state.selection.main.head);
      let tokens = conf.brackets || defaults.brackets;
      for (let tok of tokens) {
          let closed = closing(codePointAt(tok, 0));
          if (bracket == tok)
              return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                  : handleOpen(state, tok, closed, conf.before || defaults.before);
          if (bracket == closed && closedBracketAt(state, state.selection.main.from))
              return handleClose(state, tok, closed);
      }
      return null;
  }
  function closedBracketAt(state, pos) {
      let found = false;
      state.field(bracketState).between(0, state.doc.length, from => {
          if (from == pos)
              found = true;
      });
      return found;
  }
  function nextChar(doc, pos) {
      let next = doc.sliceString(pos, pos + 2);
      return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function prevChar(doc, pos) {
      let prev = doc.sliceString(pos - 2, pos);
      return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close, closeBefore) {
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                  effects: closeBracketEffect.of(range.to + open.length),
                  range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
          let next = nextChar(state.doc, range.head);
          if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
              return { changes: { insert: open + close, from: range.head },
                  effects: closeBracketEffect.of(range.head + open.length),
                  range: EditorSelection.cursor(range.head + open.length) };
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function handleClose(state, _open, close) {
      let dont = null, moved = state.selection.ranges.map(range => {
          if (range.empty && nextChar(state.doc, range.head) == close)
              return EditorSelection.cursor(range.head + close.length);
          return dont = range;
      });
      return dont ? null : state.update({
          selection: EditorSelection.create(moved, state.selection.mainIndex),
          scrollIntoView: true,
          effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
      });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
      let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                  effects: closeBracketEffect.of(range.to + token.length),
                  range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
          let pos = range.head, next = nextChar(state.doc, pos), start;
          if (next == token) {
              if (nodeStart(state, pos)) {
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
              }
              else if (closedBracketAt(state, pos)) {
                  let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                  return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                      effects: skipBracketEffect.of(pos) };
              }
          }
          else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
              (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
              nodeStart(state, start)) {
              return { changes: { insert: token + token + token + token, from: pos },
                  effects: closeBracketEffect.of(pos + token.length),
                  range: EditorSelection.cursor(pos + token.length) };
          }
          else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
              if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
          }
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function nodeStart(state, pos) {
      let tree = syntaxTree(state).resolveInner(pos + 1);
      return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
      let node = syntaxTree(state).resolveInner(pos, -1);
      let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
      for (let i = 0; i < 5; i++) {
          let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
          let quotePos = start.indexOf(quoteToken);
          if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
              let first = node.firstChild;
              while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                  if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                      return false;
                  first = first.firstChild;
              }
              return true;
          }
          let parent = node.to == pos && node.parent;
          if (!parent)
              break;
          node = parent;
      }
      return false;
  }
  function canStartStringAt(state, pos, prefixes) {
      let charCat = state.charCategorizer(pos);
      if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
          return pos;
      for (let prefix of prefixes) {
          let start = pos - prefix.length;
          if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
              return start;
      }
      return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion$2(config = {}) {
      return [
          completionState,
          completionConfig.of(config),
          completionPlugin,
          completionKeymapExt,
          baseTheme$4
      ];
  }
  /**
  Basic keybindings for autocompletion.

   - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  const completionKeymap = [
      { key: "Ctrl-Space", run: startCompletion },
      { key: "Escape", run: closeCompletion },
      { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
      { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
      { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
      { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
      { key: "Enter", run: acceptCompletion }
  ];
  const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  const toggleComment = target => {
      let config = getConfig(target.state);
      return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let tr = f(option, state);
          if (!tr)
              return false;
          dispatch(state.update(tr));
          return true;
      };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
  function getConfig(state, pos = state.selection.main.head) {
      let data = state.languageDataAt("commentTokens", pos);
      return data.length ? data[0] : {};
  }
  const SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, { open, close }, from, to) {
      let textBefore = state.sliceDoc(from - SearchMargin, from);
      let textAfter = state.sliceDoc(to, to + SearchMargin);
      let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
      let beforeOff = textBefore.length - spaceBefore;
      if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
          textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
          return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
              close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
      }
      let startText, endText;
      if (to - from <= 2 * SearchMargin) {
          startText = endText = state.sliceDoc(from, to);
      }
      else {
          startText = state.sliceDoc(from, from + SearchMargin);
          endText = state.sliceDoc(to - SearchMargin, to);
      }
      let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
      let endOff = endText.length - endSpace - close.length;
      if (startText.slice(startSpace, startSpace + open.length) == open &&
          endText.slice(endOff, endOff + close.length) == close) {
          return { open: { pos: from + startSpace + open.length,
                  margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
              close: { pos: to - endSpace - close.length,
                  margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
      }
      return null;
  }
  function selectedLineRanges(state) {
      let ranges = [];
      for (let r of state.selection.ranges) {
          let fromLine = state.doc.lineAt(r.from);
          let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
          let last = ranges.length - 1;
          if (last >= 0 && ranges[last].to > fromLine.from)
              ranges[last].to = toLine.to;
          else
              ranges.push({ from: fromLine.from, to: toLine.to });
      }
      return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
      let tokens = ranges.map(r => getConfig(state, r.from).block);
      if (!tokens.every(c => c))
          return null;
      let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
      if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
          return { changes: state.changes(ranges.map((range, i) => {
                  if (comments[i])
                      return [];
                  return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
              })) };
      }
      else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
          let changes = [];
          for (let i = 0, comment; i < comments.length; i++)
              if (comment = comments[i]) {
                  let token = tokens[i], { open, close } = comment;
                  changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
              }
          return { changes };
      }
      return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state, ranges = state.selection.ranges) {
      let lines = [];
      let prevLine = -1;
      for (let { from, to } of ranges) {
          let startI = lines.length, minIndent = 1e9;
          for (let pos = from; pos <= to;) {
              let line = state.doc.lineAt(pos);
              if (line.from > prevLine && (from == to || to > line.from)) {
                  prevLine = line.from;
                  let token = getConfig(state, pos).line;
                  if (!token)
                      continue;
                  let indent = /^\s*/.exec(line.text)[0].length;
                  let empty = indent == line.length;
                  let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                  if (indent < line.text.length && indent < minIndent)
                      minIndent = indent;
                  lines.push({ line, comment, token, indent, empty, single: false });
              }
              pos = line.to + 1;
          }
          if (minIndent < 1e9)
              for (let i = startI; i < lines.length; i++)
                  if (lines[i].indent < lines[i].line.text.length)
                      lines[i].indent = minIndent;
          if (lines.length == startI + 1)
              lines[startI].single = true;
      }
      if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
          let changes = [];
          for (let { line, token, indent, empty, single } of lines)
              if (single || !empty)
                  changes.push({ from: line.from + indent, insert: token + " " });
          let changeSet = state.changes(changes);
          return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
      }
      else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
          let changes = [];
          for (let { line, comment, token } of lines)
              if (comment >= 0) {
                  let from = line.from + comment, to = from + token.length;
                  if (line.text[to - line.from] == " ")
                      to++;
                  changes.push({ from, to });
              }
          return { changes };
      }
      return null;
  }

  const fromHistory = /*@__PURE__*/Annotation.define();
  /**
  Transaction annotation that will prevent that transaction from
  being combined with other transactions in the undo history. Given
  `"before"`, it'll prevent merging with previous transactions. With
  `"after"`, subsequent transactions won't be combined with this
  one. With `"full"`, the transaction is isolated on both sides.
  */
  const isolateHistory = /*@__PURE__*/Annotation.define();
  /**
  This facet provides a way to register functions that, given a
  transaction, provide a set of effects that the history should
  store when inverting the transaction. This can be used to
  integrate some kinds of effects in the history, so that they can
  be undone (and redone again).
  */
  const invertedEffects = /*@__PURE__*/Facet.define();
  const historyConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              minDepth: 100,
              newGroupDelay: 500
          }, { minDepth: Math.max, newGroupDelay: Math.min });
      }
  });
  function changeEnd(changes) {
      let end = 0;
      changes.iterChangedRanges((_, to) => end = to);
      return end;
  }
  const historyField_ = /*@__PURE__*/StateField.define({
      create() {
          return HistoryState.empty;
      },
      update(state, tr) {
          let config = tr.state.facet(historyConfig);
          let fromHist = tr.annotation(fromHistory);
          if (fromHist) {
              let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
              let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
              let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
              if (item)
                  other = updateBranch(other, other.length, config.minDepth, item);
              else
                  other = addSelection(other, tr.startState.selection);
              return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
          }
          let isolate = tr.annotation(isolateHistory);
          if (isolate == "full" || isolate == "before")
              state = state.isolate();
          if (tr.annotation(Transaction.addToHistory) === false)
              return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
          let event = HistEvent.fromTransaction(tr);
          let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
          if (event)
              state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
          else if (tr.selection)
              state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
          if (isolate == "full" || isolate == "after")
              state = state.isolate();
          return state;
      },
      toJSON(value) {
          return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
      },
      fromJSON(json) {
          return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
      }
  });
  /**
  Create a history extension with the given configuration.
  */
  function history(config = {}) {
      return [
          historyField_,
          historyConfig.of(config),
          EditorView.domEventHandlers({
              beforeinput(e, view) {
                  let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                  if (!command)
                      return false;
                  e.preventDefault();
                  return command(view);
              }
          })
      ];
  }
  function cmd(side, selection) {
      return function ({ state, dispatch }) {
          if (!selection && state.readOnly)
              return false;
          let historyState = state.field(historyField_, false);
          if (!historyState)
              return false;
          let tr = historyState.pop(side, state, selection);
          if (!tr)
              return false;
          dispatch(tr);
          return true;
      };
  }
  /**
  Undo a single group of history events. Returns false if no group
  was available.
  */
  const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
  /**
  Redo a group of history events. Returns false if no group was
  available.
  */
  const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
  /**
  Undo a change or selection change.
  */
  const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
  /**
  Redo a change or selection change.
  */
  const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
  // History events store groups of changes or effects that need to be
  // undone/redone together.
  class HistEvent {
      constructor(
      // The changes in this event. Normal events hold at least one
      // change or effect. But it may be necessary to store selection
      // events before the first change, in which case a special type of
      // instance is created which doesn't hold any changes, with
      // changes == startSelection == undefined
      changes, 
      // The effects associated with this event
      effects, 
      // Accumulated mapping (from addToHistory==false) that should be
      // applied to events below this one.
      mapped, 
      // The selection before this event
      startSelection, 
      // Stores selection changes after this event, to be used for
      // selection undo/redo.
      selectionsAfter) {
          this.changes = changes;
          this.effects = effects;
          this.mapped = mapped;
          this.startSelection = startSelection;
          this.selectionsAfter = selectionsAfter;
      }
      setSelAfter(after) {
          return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
      toJSON() {
          var _a, _b, _c;
          return {
              changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
              mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
              startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
              selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
          };
      }
      static fromJSON(json) {
          return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
      static fromTransaction(tr, selection) {
          let effects = none;
          for (let invert of tr.startState.facet(invertedEffects)) {
              let result = invert(tr);
              if (result.length)
                  effects = effects.concat(result);
          }
          if (!effects.length && tr.changes.empty)
              return null;
          return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
      }
      static selection(selections) {
          return new HistEvent(undefined, none, undefined, undefined, selections);
      }
  }
  function updateBranch(branch, to, maxLen, newEvent) {
      let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
      let newBranch = branch.slice(start, to);
      newBranch.push(newEvent);
      return newBranch;
  }
  function isAdjacent(a, b) {
      let ranges = [], isAdjacent = false;
      a.iterChangedRanges((f, t) => ranges.push(f, t));
      b.iterChangedRanges((_f, _t, f, t) => {
          for (let i = 0; i < ranges.length;) {
              let from = ranges[i++], to = ranges[i++];
              if (t >= from && f <= to)
                  isAdjacent = true;
          }
      });
      return isAdjacent;
  }
  function eqSelectionShape(a, b) {
      return a.ranges.length == b.ranges.length &&
          a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
  }
  function conc(a, b) {
      return !a.length ? b : !b.length ? a : a.concat(b);
  }
  const none = [];
  const MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
      if (!branch.length) {
          return [HistEvent.selection([selection])];
      }
      else {
          let lastEvent = branch[branch.length - 1];
          let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
          if (sels.length && sels[sels.length - 1].eq(selection))
              return branch;
          sels.push(selection);
          return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
      }
  }
  // Assumes the top item has one or more selectionAfter values
  function popSelection(branch) {
      let last = branch[branch.length - 1];
      let newBranch = branch.slice();
      newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
      return newBranch;
  }
  // Add a mapping to the top event in the given branch. If this maps
  // away all the changes and effects in that item, drop it and
  // propagate the mapping to the next item.
  function addMappingToBranch(branch, mapping) {
      if (!branch.length)
          return branch;
      let length = branch.length, selections = none;
      while (length) {
          let event = mapEvent(branch[length - 1], mapping, selections);
          if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
              let result = branch.slice(0, length);
              result[length - 1] = event;
              return result;
          }
          else { // Drop this event, since there's no changes or effects left
              mapping = event.mapped;
              length--;
              selections = event.selectionsAfter;
          }
      }
      return selections.length ? [HistEvent.selection(selections)] : none;
  }
  function mapEvent(event, mapping, extraSelections) {
      let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
      // Change-less events don't store mappings (they are always the last event in a branch)
      if (!event.changes)
          return HistEvent.selection(selections);
      let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
      let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
      return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  const joinableUserEvent = /^(input\.type|delete)($|\.)/;
  class HistoryState {
      constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
          this.done = done;
          this.undone = undone;
          this.prevTime = prevTime;
          this.prevUserEvent = prevUserEvent;
      }
      isolate() {
          return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
      addChanges(event, time, userEvent, newGroupDelay, maxLen) {
          let done = this.done, lastEvent = done[done.length - 1];
          if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
              (!userEvent || joinableUserEvent.test(userEvent)) &&
              ((!lastEvent.selectionsAfter.length &&
                  time - this.prevTime < newGroupDelay &&
                  isAdjacent(lastEvent.changes, event.changes)) ||
                  // For compose (but not compose.start) events, always join with previous event
                  userEvent == "input.type.compose")) {
              done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
          }
          else {
              done = updateBranch(done, done.length, maxLen, event);
          }
          return new HistoryState(done, none, time, userEvent);
      }
      addSelection(selection, time, userEvent, newGroupDelay) {
          let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
          if (last.length > 0 &&
              time - this.prevTime < newGroupDelay &&
              userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
              eqSelectionShape(last[last.length - 1], selection))
              return this;
          return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
      }
      addMapping(mapping) {
          return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
      pop(side, state, selection) {
          let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
          if (branch.length == 0)
              return null;
          let event = branch[branch.length - 1];
          if (selection && event.selectionsAfter.length) {
              return state.update({
                  selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                  annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                  userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                  scrollIntoView: true
              });
          }
          else if (!event.changes) {
              return null;
          }
          else {
              let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
              if (event.mapped)
                  rest = addMappingToBranch(rest, event.mapped);
              return state.update({
                  changes: event.changes,
                  selection: event.startSelection,
                  effects: event.effects,
                  annotations: fromHistory.of({ side, rest }),
                  filter: false,
                  userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                  scrollIntoView: true
              });
          }
      }
  }
  HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
  /**
  Default key bindings for the undo history.

  - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
  - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
  - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
  - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
  */
  const historyKeymap = [
      { key: "Mod-z", run: undo, preventDefault: true },
      { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
      { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
      { key: "Mod-u", run: undoSelection, preventDefault: true },
      { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];

  function updateSel(sel, by) {
      return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
      return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
      let selection = updateSel(state.selection, how);
      if (selection.eq(state.selection))
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  function rangeEnd(range, forward) {
      return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
      return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
  /**
  Move the selection one character to the right.
  */
  const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection one group to the right.
  */
  const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
  function interestingNode(state, node, bracketProp) {
      if (node.type.prop(bracketProp))
          return true;
      let len = node.to - node.from;
      return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
      let pos = syntaxTree(state).resolveInner(start.head);
      let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
      // Scan forward through child nodes to see if there's an interesting
      // node ahead.
      for (let at = start.head;;) {
          let next = forward ? pos.childAfter(at) : pos.childBefore(at);
          if (!next)
              break;
          if (interestingNode(state, next, bracketProp))
              pos = next;
          else
              at = forward ? next.to : next.from;
      }
      let bracket = pos.type.prop(bracketProp), match, newPos;
      if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
          newPos = forward ? match.end.to : match.end.from;
      else
          newPos = forward ? pos.to : pos.from;
      return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the cursor over the next syntactic element to the right.
  */
  const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
      return moveSel(view, range => {
          if (!range.empty)
              return rangeEnd(range, forward);
          let moved = view.moveVertically(range, forward);
          return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
      });
  }
  /**
  Move the selection one line up.
  */
  const cursorLineUp = view => cursorByLine(view, false);
  /**
  Move the selection one line down.
  */
  const cursorLineDown = view => cursorByLine(view, true);
  function pageHeight(view) {
      return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
  }
  function cursorByPage(view, forward) {
      let { state } = view, selection = updateSel(state.selection, range => {
          return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
      });
      if (selection.eq(state.selection))
          return false;
      let startPos = view.coordsAtPos(state.selection.main.head);
      let scrollRect = view.scrollDOM.getBoundingClientRect();
      let effect;
      if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&
          startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)
          effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollRect.top });
      view.dispatch(setSel(state, selection), { effects: effect });
      return true;
  }
  /**
  Move the selection one page up.
  */
  const cursorPageUp = view => cursorByPage(view, false);
  /**
  Move the selection one page down.
  */
  const cursorPageDown = view => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
      let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
      if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
          moved = view.moveToLineBoundary(start, forward, false);
      if (!forward && moved.head == line.from && line.length) {
          let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space)
              moved = EditorSelection.cursor(line.from + space);
      }
      return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection one line wrap point to the left.
  */
  const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection one line wrap point to the right.
  */
  const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection to the start of the line.
  */
  const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  /**
  Move the selection to the end of the line.
  */
  const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend) {
      let found = false, selection = updateSel(state.selection, range => {
          let matching = matchBrackets(state, range.head, -1)
              || matchBrackets(state, range.head, 1)
              || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
              || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
          if (!matching || !matching.end)
              return range;
          found = true;
          let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
          return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
      });
      if (!found)
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
  function extendSel(view, how) {
      let selection = updateSel(view.state.selection, range => {
          let head = how(range);
          return EditorSelection.range(range.anchor, head.head, head.goalColumn);
      });
      if (selection.eq(view.state.selection))
          return false;
      view.dispatch(setSel(view.state, selection));
      return true;
  }
  function selectByChar(view, forward) {
      return extendSel(view, range => view.moveByChar(range, forward));
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
  /**
  Move the selection head one character to the right.
  */
  const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
      return extendSel(view, range => view.moveByGroup(range, forward));
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection head one group to the right.
  */
  const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
  /**
  Move the selection head over the next syntactic element to the left.
  */
  const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the selection head over the next syntactic element to the right.
  */
  const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward));
  }
  /**
  Move the selection head one line up.
  */
  const selectLineUp = view => selectByLine(view, false);
  /**
  Move the selection head one line down.
  */
  const selectLineDown = view => selectByLine(view, true);
  function selectByPage(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
  }
  /**
  Move the selection head one page up.
  */
  const selectPageUp = view => selectByPage(view, false);
  /**
  Move the selection head one page down.
  */
  const selectPageDown = view => selectByPage(view, true);
  /**
  Move the selection head to the next line boundary.
  */
  const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection head to the previous line boundary.
  */
  const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection head one line boundary to the left.
  */
  const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection head one line boundary to the right.
  */
  const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection head to the start of the line.
  */
  const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  /**
  Move the selection head to the end of the line.
  */
  const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  /**
  Move the selection to the start of the document.
  */
  const cursorDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: 0 }));
      return true;
  };
  /**
  Move the selection to the end of the document.
  */
  const cursorDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.doc.length }));
      return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  const selectDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
      return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  const selectDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
      return true;
  };
  /**
  Select the entire document.
  */
  const selectAll = ({ state, dispatch }) => {
      dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
      return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  const selectLine = ({ state, dispatch }) => {
      let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
      dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
      return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  const selectParentSyntax = ({ state, dispatch }) => {
      let selection = updateSel(state.selection, range => {
          var _a;
          let context = syntaxTree(state).resolveInner(range.head, 1);
          while (!((context.from < range.from && context.to >= range.to) ||
              (context.to > range.to && context.from <= range.from) ||
              !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
              context = context.parent;
          return EditorSelection.range(context.to, context.from);
      });
      dispatch(setSel(state, selection));
      return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  const simplifySelection = ({ state, dispatch }) => {
      let cur = state.selection, selection = null;
      if (cur.ranges.length > 1)
          selection = EditorSelection.create([cur.main]);
      else if (!cur.main.empty)
          selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
      if (!selection)
          return false;
      dispatch(setSel(state, selection));
      return true;
  };
  function deleteBy(target, by) {
      if (target.state.readOnly)
          return false;
      let event = "delete.selection", { state } = target;
      let changes = state.changeByRange(range => {
          let { from, to } = range;
          if (from == to) {
              let towards = by(from);
              if (towards < from) {
                  event = "delete.backward";
                  towards = skipAtomic(target, towards, false);
              }
              else if (towards > from) {
                  event = "delete.forward";
                  towards = skipAtomic(target, towards, true);
              }
              from = Math.min(from, towards);
              to = Math.max(to, towards);
          }
          else {
              from = skipAtomic(target, from, false);
              to = skipAtomic(target, to, true);
          }
          return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
      });
      if (changes.changes.empty)
          return false;
      target.dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: event,
          effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
      }));
      return true;
  }
  function skipAtomic(target, pos, forward) {
      if (target instanceof EditorView)
          for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
              ranges.between(pos, pos, (from, to) => {
                  if (from < pos && to > pos)
                      pos = forward ? to : from;
              });
      return pos;
  }
  const deleteByChar = (target, forward) => deleteBy(target, pos => {
      let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
      if (!forward && pos > line.from && pos < line.from + 200 &&
          !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
          if (before[before.length - 1] == "\t")
              return pos - 1;
          let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
          for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
              pos--;
          targetPos = pos;
      }
      else {
          targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
          if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
              targetPos += forward ? 1 : -1;
      }
      return targetPos;
  });
  /**
  Delete the selection, or, for cursor selections, the character
  before the cursor.
  */
  const deleteCharBackward = view => deleteByChar(view, false);
  /**
  Delete the selection or the character after the cursor.
  */
  const deleteCharForward = view => deleteByChar(view, true);
  const deleteByGroup = (target, forward) => deleteBy(target, start => {
      let pos = start, { state } = target, line = state.doc.lineAt(pos);
      let categorize = state.charCategorizer(pos);
      for (let cat = null;;) {
          if (pos == (forward ? line.to : line.from)) {
              if (pos == start && line.number != (forward ? state.doc.lines : 1))
                  pos += forward ? 1 : -1;
              break;
          }
          let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
          let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
          let nextCat = categorize(nextChar);
          if (cat != null && nextCat != cat)
              break;
          if (nextChar != " " || pos != start)
              cat = nextCat;
          pos = next;
      }
      return pos;
  });
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  const deleteGroupBackward = target => deleteByGroup(target, false);
  /**
  Delete the selection or forward until the end of the next group.
  */
  const deleteGroupForward = target => deleteByGroup(target, true);
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  const deleteToLineEnd = view => deleteBy(view, pos => {
      let lineEnd = view.lineBlockAt(pos).to;
      return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line. If the cursor is directly at the start of the
  line, delete the line break before it.
  */
  const deleteToLineStart = view => deleteBy(view, pos => {
      let lineStart = view.lineBlockAt(pos).from;
      return pos > lineStart ? lineStart : Math.max(0, pos - 1);
  });
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  const splitLine = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          return { changes: { from: range.from, to: range.to, insert: Text$1.of(["", ""]) },
              range: EditorSelection.cursor(range.from) };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  const transposeChars = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          if (!range.empty || range.from == 0 || range.from == state.doc.length)
              return { range };
          let pos = range.from, line = state.doc.lineAt(pos);
          let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
          let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
          return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
              range: EditorSelection.cursor(to) };
      });
      if (changes.changes.empty)
          return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
      return true;
  };
  function selectedLineBlocks(state) {
      let blocks = [], upto = -1;
      for (let range of state.selection.ranges) {
          let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
          if (!range.empty && range.to == endLine.from)
              endLine = state.doc.lineAt(range.to - 1);
          if (upto >= startLine.number) {
              let prev = blocks[blocks.length - 1];
              prev.to = endLine.to;
              prev.ranges.push(range);
          }
          else {
              blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
          }
          upto = endLine.number + 1;
      }
      return blocks;
  }
  function moveLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [], ranges = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward ? block.to == state.doc.length : block.from == 0)
              continue;
          let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
          let size = nextLine.length + 1;
          if (forward) {
              changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
          else {
              changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
          }
      }
      if (!changes.length)
          return false;
      dispatch(state.update({
          changes,
          scrollIntoView: true,
          selection: EditorSelection.create(ranges, state.selection.mainIndex),
          userEvent: "move.line"
      }));
      return true;
  }
  /**
  Move the selected lines up one line.
  */
  const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
  /**
  Move the selected lines down one line.
  */
  const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward)
              changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
          else
              changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
      }
      dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
      return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
  /**
  Delete selected lines.
  */
  const deleteLine = view => {
      if (view.state.readOnly)
          return false;
      let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
          if (from > 0)
              from--;
          else if (to < state.doc.length)
              to++;
          return { from, to };
      }));
      let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
      view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
      return true;
  };
  function isBetweenBrackets(state, pos) {
      if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
          return { from: pos, to: pos };
      let context = syntaxTree(state).resolveInner(pos);
      let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
      if (before && after && before.to <= pos && after.from >= pos &&
          (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
          state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
          return { from: before.to, to: after.from };
      return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let changes = state.changeByRange(range => {
              let { from, to } = range, line = state.doc.lineAt(from);
              let explode = !atEof && from == to && isBetweenBrackets(state, from);
              if (atEof)
                  from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
              let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
              let indent = getIndentation(cx, from);
              if (indent == null)
                  indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
              while (to < line.to && /\s/.test(line.text[to - line.from]))
                  to++;
              if (explode)
                  ({ from, to } = explode);
              else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                  from = line.from;
              let insert = ["", indentString(state, indent)];
              if (explode)
                  insert.push(indentString(state, cx.lineIndent(line.from, -1)));
              return { changes: { from, to, insert: Text$1.of(insert) },
                  range: EditorSelection.cursor(from + 1 + insert[1].length) };
          });
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
          return true;
      };
  }
  function changeBySelectedLine(state, f) {
      let atLine = -1;
      return state.changeByRange(range => {
          let changes = [];
          for (let pos = range.from; pos <= range.to;) {
              let line = state.doc.lineAt(pos);
              if (line.number > atLine && (range.empty || range.to > line.from)) {
                  f(line, changes, range);
                  atLine = line.number;
              }
              pos = line.to + 1;
          }
          let changeSet = state.changes(changes);
          return { changes,
              range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
      });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  const indentSelection = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let updated = Object.create(null);
      let context = new IndentContext(state, { overrideIndentation: start => {
              let found = updated[start];
              return found == null ? -1 : found;
          } });
      let changes = changeBySelectedLine(state, (line, changes, range) => {
          let indent = getIndentation(context, line.from);
          if (indent == null)
              return;
          if (!/\S/.test(line.text))
              indent = 0;
          let cur = /^\s*/.exec(line.text)[0];
          let norm = indentString(state, indent);
          if (cur != norm || range.from < line.from + cur.length) {
              updated[line.from] = indent;
              changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
      });
      if (!changes.changes.empty)
          dispatch(state.update(changes, { userEvent: "indent" }));
      return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  const indentMore = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          changes.push({ from: line.from, insert: state.facet(indentUnit) });
      }), { userEvent: "input.indent" }));
      return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  const indentLess = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          let space = /^\s*/.exec(line.text)[0];
          if (!space)
              return;
          let col = countColumn(space, state.tabSize), keep = 0;
          let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
          while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
              keep++;
          changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
      }), { userEvent: "delete.dedent" }));
      return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.

   - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  const emacsStyleKeymap = [
      { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
      { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
      { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
      { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
      { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
      { key: "Ctrl-d", run: deleteCharForward },
      { key: "Ctrl-h", run: deleteCharBackward },
      { key: "Ctrl-k", run: deleteToLineEnd },
      { key: "Ctrl-Alt-h", run: deleteGroupBackward },
      { key: "Ctrl-o", run: splitLine },
      { key: "Ctrl-t", run: transposeChars },
      { key: "Ctrl-v", run: cursorPageDown },
  ];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)

   - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
   - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
  */
  const standardKeymap = /*@__PURE__*/[
      { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
      { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
      { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
      { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
      { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
      { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
      { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
      { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
      { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
      { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
      { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
      { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
      { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
      { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
      { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
      { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
      { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
      { key: "Enter", run: insertNewlineAndIndent },
      { key: "Mod-a", run: selectAll },
      { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
      { key: "Delete", run: deleteCharForward },
      { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
      { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
      { mac: "Mod-Backspace", run: deleteToLineStart },
      { mac: "Mod-Delete", run: deleteToLineEnd }
  ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  */
  const defaultKeymap = /*@__PURE__*/[
      { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
      { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
      { key: "Alt-ArrowUp", run: moveLineUp },
      { key: "Shift-Alt-ArrowUp", run: copyLineUp },
      { key: "Alt-ArrowDown", run: moveLineDown },
      { key: "Shift-Alt-ArrowDown", run: copyLineDown },
      { key: "Escape", run: simplifySelection },
      { key: "Mod-Enter", run: insertBlankLine },
      { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
      { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
      { key: "Mod-[", run: indentLess },
      { key: "Mod-]", run: indentMore },
      { key: "Mod-Alt-\\", run: indentSelection },
      { key: "Shift-Mod-k", run: deleteLine },
      { key: "Shift-Mod-\\", run: cursorMatchingBracket },
      { key: "Mod-/", run: toggleComment },
      { key: "Alt-A", run: toggleBlockComment }
  ].concat(standardKeymap);
  /**
  A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
  Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
  Please see the [Tab example](../../examples/tab/) before using
  this.
  */
  const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);
        else if (value != null) elt[name] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add(elt, arguments[i]);
    return elt
  }

  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) ; else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child)
    }
  }

  class SelectedDiagnostic {
      constructor(from, to, diagnostic) {
          this.from = from;
          this.to = to;
          this.diagnostic = diagnostic;
      }
  }
  class LintState {
      constructor(diagnostics, panel, selected) {
          this.diagnostics = diagnostics;
          this.panel = panel;
          this.selected = selected;
      }
      static init(diagnostics, panel, state) {
          // Filter the list of diagnostics for which to create markers
          let markedDiagnostics = diagnostics;
          let diagnosticFilter = state.facet(lintConfig).markerFilter;
          if (diagnosticFilter)
              markedDiagnostics = diagnosticFilter(markedDiagnostics);
          let ranges = Decoration.set(markedDiagnostics.map((d) => {
              // For zero-length ranges or ranges covering only a line break, create a widget
              return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
                  ? Decoration.widget({
                      widget: new DiagnosticWidget(d),
                      diagnostic: d
                  }).range(d.from)
                  : Decoration.mark({
                      attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
                      diagnostic: d
                  }).range(d.from, d.to);
          }), true);
          return new LintState(ranges, panel, findDiagnostic(ranges));
      }
  }
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
      let found = null;
      diagnostics.between(after, 1e9, (from, to, { spec }) => {
          if (diagnostic && spec.diagnostic != diagnostic)
              return;
          found = new SelectedDiagnostic(from, to, spec.diagnostic);
          return false;
      });
      return found;
  }
  function hideTooltip(tr, tooltip) {
      return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
  }
  function maybeEnableLint(state, effects) {
      return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([
          lintState,
          EditorView.decorations.compute([lintState], state => {
              let { selected, panel } = state.field(lintState);
              return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                  activeMark.range(selected.from, selected.to)
              ]);
          }),
          hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
          baseTheme$3
      ]));
  }
  /**
  Returns a transaction spec which updates the current set of
  diagnostics, and enables the lint extension if if wasn't already
  active.
  */
  function setDiagnostics(state, diagnostics) {
      return {
          effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
      };
  }
  /**
  The state effect that updates the set of active diagnostics. Can
  be useful when writing an extension that needs to track these.
  */
  const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
  const togglePanel$1 = /*@__PURE__*/StateEffect.define();
  const movePanelSelection = /*@__PURE__*/StateEffect.define();
  const lintState = /*@__PURE__*/StateField.define({
      create() {
          return new LintState(Decoration.none, null, null);
      },
      update(value, tr) {
          if (tr.docChanged) {
              let mapped = value.diagnostics.map(tr.changes), selected = null;
              if (value.selected) {
                  let selPos = tr.changes.mapPos(value.selected.from, 1);
                  selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
              }
              value = new LintState(mapped, value.panel, selected);
          }
          for (let effect of tr.effects) {
              if (effect.is(setDiagnosticsEffect)) {
                  value = LintState.init(effect.value, value.panel, tr.state);
              }
              else if (effect.is(togglePanel$1)) {
                  value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
              }
              else if (effect.is(movePanelSelection)) {
                  value = new LintState(value.diagnostics, value.panel, effect.value);
              }
          }
          return value;
      },
      provide: f => [showPanel.from(f, val => val.panel),
          EditorView.decorations.from(f, s => s.diagnostics)]
  });
  const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
  function lintTooltip(view, pos, side) {
      let { diagnostics } = view.state.field(lintState);
      let found = [], stackStart = 2e8, stackEnd = 0;
      diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
          if (pos >= from && pos <= to &&
              (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
              found.push(spec.diagnostic);
              stackStart = Math.min(from, stackStart);
              stackEnd = Math.max(to, stackEnd);
          }
      });
      let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
      if (diagnosticFilter)
          found = diagnosticFilter(found);
      if (!found.length)
          return null;
      return {
          pos: stackStart,
          end: stackEnd,
          above: view.state.doc.lineAt(stackStart).to < stackEnd,
          create() {
              return { dom: diagnosticsTooltip(view, found) };
          }
      };
  }
  function diagnosticsTooltip(view, diagnostics) {
      return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
  }
  /**
  Command to open and focus the lint panel.
  */
  const openLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
          view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel$1.of(true)]) });
      let panel = getPanel(view, LintPanel.open);
      if (panel)
          panel.dom.querySelector(".cm-panel-lint ul").focus();
      return true;
  };
  /**
  Command to close the lint panel, when open.
  */
  const closeLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
          return false;
      view.dispatch({ effects: togglePanel$1.of(false) });
      return true;
  };
  /**
  Move the selection to the next diagnostic.
  */
  const nextDiagnostic = (view) => {
      let field = view.state.field(lintState, false);
      if (!field)
          return false;
      let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
      if (!next.value) {
          next = field.diagnostics.iter(0);
          if (!next.value || next.from == sel.from && next.to == sel.to)
              return false;
      }
      view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
      return true;
  };
  /**
  A set of default key bindings for the lint functionality.

  - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
  - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
  */
  const lintKeymap = [
      { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
      { key: "F8", run: nextDiagnostic }
  ];
  const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.timeout = -1;
          this.set = true;
          let { delay } = view.state.facet(lintConfig);
          this.lintTime = Date.now() + delay;
          this.run = this.run.bind(this);
          this.timeout = setTimeout(this.run, delay);
      }
      run() {
          let now = Date.now();
          if (now < this.lintTime - 10) {
              setTimeout(this.run, this.lintTime - now);
          }
          else {
              this.set = false;
              let { state } = this.view, { sources } = state.facet(lintConfig);
              Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
                  let all = annotations.reduce((a, b) => a.concat(b));
                  if (this.view.state.doc == state.doc)
                      this.view.dispatch(setDiagnostics(this.view.state, all));
              }, error => { logException(this.view.state, error); });
          }
      }
      update(update) {
          let config = update.state.facet(lintConfig);
          if (update.docChanged || config != update.startState.facet(lintConfig)) {
              this.lintTime = Date.now() + config.delay;
              if (!this.set) {
                  this.set = true;
                  this.timeout = setTimeout(this.run, config.delay);
              }
          }
      }
      force() {
          if (this.set) {
              this.lintTime = Date.now();
              this.run();
          }
      }
      destroy() {
          clearTimeout(this.timeout);
      }
  });
  const lintConfig = /*@__PURE__*/Facet.define({
      combine(input) {
          return Object.assign({ sources: input.map(i => i.source) }, combineConfig(input.map(i => i.config), {
              delay: 750,
              markerFilter: null,
              tooltipFilter: null
          }));
      },
      enables: lintPlugin
  });
  /**
  Given a diagnostic source, this function returns an extension that
  enables linting with that source. It will be called whenever the
  editor is idle (after its content changed).
  */
  function linter$1(source, config = {}) {
      return lintConfig.of({ source, config });
  }
  function assignKeys(actions) {
      let assigned = [];
      if (actions)
          actions: for (let { name } of actions) {
              for (let i = 0; i < name.length; i++) {
                  let ch = name[i];
                  if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                      assigned.push(ch);
                      continue actions;
                  }
              }
              assigned.push("");
          }
      return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
      var _a;
      let keys = inPanel ? assignKeys(diagnostic.actions) : [];
      return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
          let click = (e) => {
              e.preventDefault();
              let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
              if (found)
                  action.apply(view, found.from, found.to);
          };
          let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
          let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
              crelt("u", name.slice(keyIndex, keyIndex + 1)),
              name.slice(keyIndex + 1)];
          return crelt("button", {
              type: "button",
              class: "cm-diagnosticAction",
              onclick: click,
              onmousedown: click,
              "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
          }, nameElt);
      }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  class DiagnosticWidget extends WidgetType {
      constructor(diagnostic) {
          super();
          this.diagnostic = diagnostic;
      }
      eq(other) { return other.diagnostic == this.diagnostic; }
      toDOM() {
          return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
      }
  }
  class PanelItem {
      constructor(view, diagnostic) {
          this.diagnostic = diagnostic;
          this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
          this.dom = renderDiagnostic(view, diagnostic, true);
          this.dom.id = this.id;
          this.dom.setAttribute("role", "option");
      }
  }
  class LintPanel {
      constructor(view) {
          this.view = view;
          this.items = [];
          let onkeydown = (event) => {
              if (event.keyCode == 27) { // Escape
                  closeLintPanel(this.view);
                  this.view.focus();
              }
              else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                  this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
              }
              else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                  this.moveSelection((this.selectedIndex + 1) % this.items.length);
              }
              else if (event.keyCode == 36) { // Home
                  this.moveSelection(0);
              }
              else if (event.keyCode == 35) { // End
                  this.moveSelection(this.items.length - 1);
              }
              else if (event.keyCode == 13) { // Enter
                  this.view.focus();
              }
              else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                  let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                  for (let i = 0; i < keys.length; i++)
                      if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                          if (found)
                              diagnostic.actions[i].apply(view, found.from, found.to);
                      }
              }
              else {
                  return;
              }
              event.preventDefault();
          };
          let onclick = (event) => {
              for (let i = 0; i < this.items.length; i++) {
                  if (this.items[i].dom.contains(event.target))
                      this.moveSelection(i);
              }
          };
          this.list = crelt("ul", {
              tabIndex: 0,
              role: "listbox",
              "aria-label": this.view.state.phrase("Diagnostics"),
              onkeydown,
              onclick
          });
          this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
              type: "button",
              name: "close",
              "aria-label": this.view.state.phrase("close"),
              onclick: () => closeLintPanel(this.view)
          }, "×"));
          this.update();
      }
      get selectedIndex() {
          let selected = this.view.state.field(lintState).selected;
          if (!selected)
              return -1;
          for (let i = 0; i < this.items.length; i++)
              if (this.items[i].diagnostic == selected.diagnostic)
                  return i;
          return -1;
      }
      update() {
          let { diagnostics, selected } = this.view.state.field(lintState);
          let i = 0, needsSync = false, newSelectedItem = null;
          diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
              let found = -1, item;
              for (let j = i; j < this.items.length; j++)
                  if (this.items[j].diagnostic == spec.diagnostic) {
                      found = j;
                      break;
                  }
              if (found < 0) {
                  item = new PanelItem(this.view, spec.diagnostic);
                  this.items.splice(i, 0, item);
                  needsSync = true;
              }
              else {
                  item = this.items[found];
                  if (found > i) {
                      this.items.splice(i, found - i);
                      needsSync = true;
                  }
              }
              if (selected && item.diagnostic == selected.diagnostic) {
                  if (!item.dom.hasAttribute("aria-selected")) {
                      item.dom.setAttribute("aria-selected", "true");
                      newSelectedItem = item;
                  }
              }
              else if (item.dom.hasAttribute("aria-selected")) {
                  item.dom.removeAttribute("aria-selected");
              }
              i++;
          });
          while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
              needsSync = true;
              this.items.pop();
          }
          if (this.items.length == 0) {
              this.items.push(new PanelItem(this.view, {
                  from: -1, to: -1,
                  severity: "info",
                  message: this.view.state.phrase("No diagnostics")
              }));
              needsSync = true;
          }
          if (newSelectedItem) {
              this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
              this.view.requestMeasure({
                  key: this,
                  read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                  write: ({ sel, panel }) => {
                      if (sel.top < panel.top)
                          this.list.scrollTop -= panel.top - sel.top;
                      else if (sel.bottom > panel.bottom)
                          this.list.scrollTop += sel.bottom - panel.bottom;
                  }
              });
          }
          else if (this.selectedIndex < 0) {
              this.list.removeAttribute("aria-activedescendant");
          }
          if (needsSync)
              this.sync();
      }
      sync() {
          let domPos = this.list.firstChild;
          function rm() {
              let prev = domPos;
              domPos = prev.nextSibling;
              prev.remove();
          }
          for (let item of this.items) {
              if (item.dom.parentNode == this.list) {
                  while (domPos != item.dom)
                      rm();
                  domPos = item.dom.nextSibling;
              }
              else {
                  this.list.insertBefore(item.dom, domPos);
              }
          }
          while (domPos)
              rm();
      }
      moveSelection(selectedIndex) {
          if (this.selectedIndex < 0)
              return;
          let field = this.view.state.field(lintState);
          let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
          if (!selection)
              return;
          this.view.dispatch({
              selection: { anchor: selection.from, head: selection.to },
              scrollIntoView: true,
              effects: movePanelSelection.of(selection)
          });
      }
      static open(view) { return new LintPanel(view); }
  }
  function svg(content, attrs = `viewBox="0 0 40 40"`) {
      return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
  }
  function underline(color) {
      return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-diagnostic": {
          padding: "3px 6px 3px 8px",
          marginLeft: "-1px",
          display: "block",
          whiteSpace: "pre-wrap"
      },
      ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
      ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
      ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
      ".cm-diagnosticAction": {
          font: "inherit",
          border: "none",
          padding: "2px 4px",
          backgroundColor: "#444",
          color: "white",
          borderRadius: "3px",
          marginLeft: "8px"
      },
      ".cm-diagnosticSource": {
          fontSize: "70%",
          opacity: .7
      },
      ".cm-lintRange": {
          backgroundPosition: "left bottom",
          backgroundRepeat: "repeat-x",
          paddingBottom: "0.7px",
      },
      ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
      ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
      ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
      ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
      ".cm-tooltip-lint": {
          padding: 0,
          margin: 0
      },
      ".cm-lintPoint": {
          position: "relative",
          "&:after": {
              content: '""',
              position: "absolute",
              bottom: 0,
              left: "-2px",
              borderLeft: "3px solid transparent",
              borderRight: "3px solid transparent",
              borderBottom: "4px solid #d11"
          }
      },
      ".cm-lintPoint-warning": {
          "&:after": { borderBottomColor: "orange" }
      },
      ".cm-lintPoint-info": {
          "&:after": { borderBottomColor: "#999" }
      },
      ".cm-panel.cm-panel-lint": {
          position: "relative",
          "& ul": {
              maxHeight: "100px",
              overflowY: "auto",
              "& [aria-selected]": {
                  backgroundColor: "#ddd",
                  "& u": { textDecoration: "underline" }
              },
              "&:focus [aria-selected]": {
                  background_fallback: "#bdf",
                  backgroundColor: "Highlight",
                  color_fallback: "white",
                  color: "HighlightText"
              },
              "& u": { textDecoration: "none" },
              padding: 0,
              margin: 0
          },
          "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "2px",
              background: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0
          }
      }
  });
  class LintGutterMarker extends GutterMarker {
      constructor(diagnostics) {
          super();
          this.diagnostics = diagnostics;
          this.severity = diagnostics.reduce((max, d) => {
              let s = d.severity;
              return s == "error" || s == "warning" && max == "info" ? s : max;
          }, "info");
      }
      toDOM(view) {
          let elt = document.createElement("div");
          elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
          let diagnostics = this.diagnostics;
          let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
          if (diagnosticsFilter)
              diagnostics = diagnosticsFilter(diagnostics);
          if (diagnostics.length)
              elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);
          return elt;
      }
  }
  function trackHoverOn(view, marker) {
      let mousemove = (event) => {
          let rect = marker.getBoundingClientRect();
          if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&
              event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)
              return;
          for (let target = event.target; target; target = target.parentNode) {
              if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
                  return;
          }
          window.removeEventListener("mousemove", mousemove);
          if (view.state.field(lintGutterTooltip))
              view.dispatch({ effects: setLintGutterTooltip.of(null) });
      };
      window.addEventListener("mousemove", mousemove);
  }
  function gutterMarkerMouseOver(view, marker, diagnostics) {
      function hovered() {
          let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
          const linePos = view.coordsAtPos(line.from);
          if (linePos) {
              view.dispatch({ effects: setLintGutterTooltip.of({
                      pos: line.from,
                      above: false,
                      create() {
                          return {
                              dom: diagnosticsTooltip(view, diagnostics),
                              getCoords: () => marker.getBoundingClientRect()
                          };
                      }
                  }) });
          }
          marker.onmouseout = marker.onmousemove = null;
          trackHoverOn(view, marker);
      }
      let { hoverTime } = view.state.facet(lintGutterConfig);
      let hoverTimeout = setTimeout(hovered, hoverTime);
      marker.onmouseout = () => {
          clearTimeout(hoverTimeout);
          marker.onmouseout = marker.onmousemove = null;
      };
      marker.onmousemove = () => {
          clearTimeout(hoverTimeout);
          hoverTimeout = setTimeout(hovered, hoverTime);
      };
  }
  function markersForDiagnostics(doc, diagnostics) {
      let byLine = Object.create(null);
      for (let diagnostic of diagnostics) {
          let line = doc.lineAt(diagnostic.from);
          (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
      }
      let markers = [];
      for (let line in byLine) {
          markers.push(new LintGutterMarker(byLine[line]).range(+line));
      }
      return RangeSet.of(markers, true);
  }
  const lintGutterExtension = /*@__PURE__*/gutter({
      class: "cm-gutter-lint",
      markers: view => view.state.field(lintGutterMarkers),
  });
  const lintGutterMarkers = /*@__PURE__*/StateField.define({
      create() {
          return RangeSet.empty;
      },
      update(markers, tr) {
          markers = markers.map(tr.changes);
          let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
          for (let effect of tr.effects) {
              if (effect.is(setDiagnosticsEffect)) {
                  let diagnostics = effect.value;
                  if (diagnosticFilter)
                      diagnostics = diagnosticFilter(diagnostics || []);
                  markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
              }
          }
          return markers;
      }
  });
  const setLintGutterTooltip = /*@__PURE__*/StateEffect.define();
  const lintGutterTooltip = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(tooltip, tr) {
          if (tooltip && tr.docChanged)
              tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });
          return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);
      },
      provide: field => showTooltip.from(field)
  });
  const lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({
      ".cm-gutter-lint": {
          width: "1.4em",
          "& .cm-gutterElement": {
              padding: ".2em"
          }
      },
      ".cm-lint-marker": {
          width: "1em",
          height: "1em"
      },
      ".cm-lint-marker-info": {
          content: /*@__PURE__*/svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
      },
      ".cm-lint-marker-warning": {
          content: /*@__PURE__*/svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`),
      },
      ".cm-lint-marker-error": {
          content: /*@__PURE__*/svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
      },
  });
  const lintGutterConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              hoverTime: 300 /* Hover.Time */,
              markerFilter: null,
              tooltipFilter: null
          });
      }
  });
  /**
  Returns an extension that installs a gutter showing markers for
  each line that has diagnostics, which can be hovered over to see
  the diagnostics.
  */
  function lintGutter(config = {}) {
      return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const propertyIdentifier = 119,
    identifier = 120,
    nameIdentifier = 121,
    insertSemi = 122,
    expression0 = 126,
    ForExpression = 4,
    forExpressionStart = 129,
    ForInExpression = 7,
    Name = 8,
    Identifier = 9,
    AdditionalIdentifier = 10,
    forExpressionBodyStart = 137,
    IfExpression = 18,
    ifExpressionStart = 138,
    QuantifiedExpression = 22,
    quantifiedExpressionStart = 139,
    QuantifiedInExpression = 26,
    PositiveUnaryTest = 36,
    ArithmeticExpression = 40,
    arithmeticPlusStart = 143,
    arithmeticTimesStart = 144,
    arithmeticExpStart = 145,
    arithmeticUnaryStart = 146,
    VariableName = 47,
    PathExpression = 67,
    pathExpressionStart = 151,
    FilterExpression = 69,
    filterExpressionStart = 152,
    FunctionInvocation = 71,
    functionInvocationStart = 153,
    ParameterName = 75,
    nil = 158,
    NumericLiteral = 78,
    StringLiteral = 79,
    BooleanLiteral = 80,
    FunctionDefinition = 89,
    functionDefinitionStart = 165,
    Context = 96,
    contextStart = 167,
    ContextEntry = 97,
    PropertyName = 99,
    PropertyIdentifier = 100;

  /* global console,process */

  const LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
  const LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);
  const LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);

  const spaceChars = [
    9, 11, 12, 32, 133, 160,
    5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198,
    8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
  ];

  const newlineChars = chars('\n\r');

  const additionalNameChars = chars("'./-+*");

  /**
   * @param { string } str
   * @return { number[] }
   */
  function chars(str) {
    return Array.from(str).map(s => s.charCodeAt(0));
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isStartChar(ch) {
    return (
      ch === 63 // ?
    ) || (
      ch === 95 // _
    ) || (
      ch >= 65 && ch <= 90 // A-Z
    ) || (
      ch >= 97 && ch <= 122 // a-z
    ) || (
      ch >= 161 && !isPartChar(ch) && !isSpace(ch)
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isAdditional(ch) {
    return additionalNameChars.includes(ch);
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isPartChar(ch) {
    return (
      ch >= 48 && ch <= 57 // 0-9
    ) || (
      ch === 0xB7
    ) || (
      ch >= 0x0300 && ch <= 0x036F
    ) || (
      ch >= 0x203F && ch <= 0x2040
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isSpace(ch) {
    return spaceChars.includes(ch);
  }

  // eslint-disable-next-line
  function indent(str, spaces) {
    return spaces.concat(
      str.split(/\n/g).join('\n' + spaces)
    );
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } [offset]
   * @param { boolean } [includeOperators]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseAdditionalSymbol(input, offset = 0) {

    const next = input.peek(offset);

    if (isAdditional(next)) {
      return {
        offset: 1,
        token: String.fromCharCode(next)
      };
    }

    return null;
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param { number } [offset]
   * @param { boolean } [namePart]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseIdentifier(input, offset = 0, namePart = false) {
    for (let inside = false, chars = [], i = 0;; i++) {
      const next = input.peek(offset + i);

      if (isStartChar(next) || ((inside || namePart) && isPartChar(next))) {
        if (!inside) {
          inside = true;
        }

        chars.push(next);
      } else {

        if (chars.length) {
          return {
            token: String.fromCharCode(...chars),
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } offset
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseSpaces(input, offset) {

    for (let inside = false, i = 0;; i++) {
      let next = input.peek(offset + i);

      if (isSpace(next)) {
        if (!inside) {
          inside = true;
        }
      } else {
        if (inside) {
          return {
            token: ' ',
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * Parse a name from the input and return the first match, if any.
   *
   * @param { import('@lezer/lr').InputStream } input
   * @param { Variables } variables
   *
   * @return { { token: string, offset: number, term: number } | null }
   */
  function parseName(input, variables) {
    const contextKeys = variables.contextKeys();

    const start = variables.tokens;

    for (let i = 0, tokens = [], nextMatch = null;;) {

      const namePart = (start.length + tokens.length) > 0;
      const maybeSpace = tokens.length > 0;

      const match = (
        parseIdentifier(input, i, namePart) ||
        namePart && parseAdditionalSymbol(input, i) ||
        maybeSpace && parseSpaces(input, i)
      );

      // match is required
      if (!match) {
        return nextMatch;
      }

      const {
        token,
        offset
      } = match;

      i += offset;

      if (token === ' ') {
        continue;
      }

      tokens = [ ...tokens, token ];

      const name = [ ...start, ...tokens ].join(' ');

      if (contextKeys.some(el => el === name)) {
        const token = tokens[0];

        nextMatch = {
          token,
          offset: token.length,
          term: nameIdentifier
        };
      }

      if (dateTimeIdentifiers.some(el => el === name)) {
        const token = tokens[0];

        // parse date time identifiers as normal
        // identifiers to allow specialization to kick in
        //
        // cf. https://github.com/nikku/lezer-feel/issues/8
        nextMatch = {
          token,
          offset: token.length,
          term: identifier
        };
      }

      if (
        !contextKeys.some(el => el.startsWith(name)) &&
        !dateTimeIdentifiers.some(el => el.startsWith(name))
      ) {
        return nextMatch;
      }
    }

  }

  const identifiersMap = {
    [ identifier ]: 'identifier',
    [ nameIdentifier ]: 'nameIdentifier'
  };

  const identifiers = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);

    const nameMatch = parseName(input, stack.context);

    const start = stack.context.tokens;

    const match = nameMatch || parseIdentifier(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(nameMatch ? nameMatch.term : identifier);

      LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
    }
  }, { contextual: true });


  const propertyIdentifiers = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);

    const start = stack.context.tokens;

    const match = parseIdentifier(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(propertyIdentifier);

      LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
    }
  });


  const insertSemicolon = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);

    let offset;
    let insert = false;

    for (offset = 0;; offset++) {
      const char = input.peek(offset);

      if (spaceChars.includes(char)) {
        continue;
      }

      if (newlineChars.includes(char)) {
        insert = true;
      }

      break;
    }

    if (insert) {

      const identifier = parseIdentifier(input, offset + 1);
      const spaces = parseSpaces(input, offset + 1);

      if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
        return;
      }

      LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
      input.acceptToken(insertSemi);
    }
  });

  const prefixedContextStarts = {
    [ functionInvocationStart ]: 'FunctionInvocation',
    [ filterExpressionStart ]: 'FilterExpression',
    [ pathExpressionStart ]: 'PathExpression'
  };

  const contextStarts = {
    [ contextStart ]: 'Context',
    [ functionDefinitionStart ]: 'FunctionDefinition',
    [ forExpressionStart ]: 'ForExpression',
    [ ifExpressionStart ]: 'IfExpression',
    [ quantifiedExpressionStart ]: 'QuantifiedExpression'
  };

  const contextEnds = {
    [ Context ]: 'Context',
    [ FunctionDefinition ]: 'FunctionDefinition',
    [ ForExpression ]: 'ForExpression',
    [ IfExpression ]: 'IfExpression',
    [ QuantifiedExpression ]: 'QuantifiedExpression',
    [ PathExpression ]: 'PathExpression',
    [ FunctionInvocation ]: 'FunctionInvocation',
    [ FilterExpression ]: 'FilterExpression',
    [ ArithmeticExpression ]: 'ArithmeticExpression'
  };

  class ValueProducer {

    /**
     * @param { Function } fn
     */
    constructor(fn) {
      this.fn = fn;
    }

    get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function }
     *
     * @return { ValueProducer }
     */
    static of(fn) {
      return new ValueProducer(fn);
    }

  }

  const dateTimeLiterals = {
    'date and time': 1,
    'date': 1,
    'time': 1,
    'duration': 1
  };

  const dateTimeIdentifiers = Object.keys(dateTimeLiterals);

  class Variables {

    constructor({
      name = 'Expressions',
      tokens = [],
      children = [],
      parent = null,
      context = { },
      value,
      raw
    } = {}) {
      this.name = name;
      this.tokens = tokens;
      this.children = children;
      this.parent = parent;
      this.context = context;
      this.value = value;
      this.raw = raw;
    }

    enterScope(name) {

      const childScope = this.of({
        name,
        parent: this
      });

      LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);

      return childScope;
    }

    exitScope(str) {

      if (!this.parent) {
        LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));

        return this;
      }

      LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));

      return this.parent.pushChild(this);
    }

    token(part) {

      LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);

      return this.assign({
        tokens: [ ...this.tokens, part ]
      });
    }

    literal(value) {

      LOG_VARS && console.log('[%s] literal %o', this.path, value);

      return this.pushChild(this.of({
        name: 'Literal',
        value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
    computedValue() {
      for (let scope = this;;scope = scope.children.slice(-1)[0]) {

        if (!scope) {
          return null;
        }

        if (scope.value) {
          return scope.value;
        }
      }
    }

    contextKeys() {
      return Object.keys(this.context).map(normalizeContextKey);
    }

    get path() {
      return this.parent?.path?.concat(' > ', this.name) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
    get(variable) {

      const names = [ variable, variable && normalizeContextKey(variable) ];

      const contextKey = Object.keys(this.context).find(
        key => names.includes(normalizeContextKey(key))
      );

      if (typeof contextKey === 'undefined') {
        return undefined;
      }

      const val = this.context[contextKey];

      if (val instanceof ValueProducer) {
        return val.get(this);
      } else {
        return val;
      }
    }

    resolveName() {

      const variable = this.tokens.join(' ');
      const tokens = [];

      const parentScope = this.assign({
        tokens
      });

      const variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });

      LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));

      return parentScope.pushChild(variableScope);
    }

    pushChild(child) {

      if (!child) {
        return this;
      }

      const parent = this.assign({
        children: [ ...this.children, child ]
      });

      child.parent = parent;

      return parent;
    }

    pushChildren(children) {

      let parent = this;

      for (const child of children) {
        parent = parent.pushChild(child);
      }

      return parent;
    }

    declareName() {

      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }

      const variableName = this.tokens.join(' ');

      LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);

      return this.assign({
        tokens: []
      }).pushChild(
        this.of({
          name: 'Name',
          value: variableName
        })
      );
    }

    define(name, value) {

      if (typeof name !== 'string') {
        LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);

        return this;
      }

      LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);

      const context = {
        ...this.context,
        [name]: value
      };

      return this.assign({
        context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    assign(options = {}) {

      return Variables.of({
        ...this,
        ...options
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    of(options = {}) {

      const defaultOptions = {
        context: this.context,
        parent: this.parent
      };

      return Variables.of({
        ...defaultOptions,
        ...options
      });
    }

    static of(options) {
      const {
        name,
        tokens = [],
        children = [],
        parent = null,
        context = {},
        value,
        raw
      } = options;

      return new Variables({
        name,
        tokens: [ ...tokens ],
        children: [ ...children ],
        context: {
          ...context
        },
        parent,
        value,
        raw
      });
    }

  }

  /**
   * @param { string } name
   *
   * @return { string } normalizedName
   */
  function normalizeContextKey(name) {
    return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
  }

  /**
   * Wrap children of variables under the given named child.
   *
   * @param { Variables } variables
   * @param { string } name
   * @param { string } code
   * @return { Variables }
   */
  function wrap(variables, scopeName, code) {

    const parts = variables.children.filter(c => c.name !== scopeName);
    const children = variables.children.filter(c => c.name === scopeName);

    const namePart = parts[0];
    const valuePart = parts[Math.max(1, parts.length - 1)];

    const name = namePart.computedValue();
    const value = valuePart?.computedValue() || null;

    return variables
      .assign({
        children
      })
      .enterScope(scopeName)
      .pushChildren(parts)
      .exitScope(code)
      .define(name, value);
  }

  /**
   * @param { any } context
   *
   * @return { ContextTracker<Variables> }
   */
  function trackVariables(context = {}) {

    const start = Variables.of({
      context
    });

    return new ContextTracker({
      start,
      reduce(variables, term, stack, input) {

        if (term === Context) {
          variables = variables.assign({
            value: variables.context
          });
        }

        if (term === IfExpression) {
          const [ thenPart, elsePart ] = variables.children.slice(-2);

          variables = variables.assign({
            value: {
              ...thenPart?.computedValue(),
              ...elsePart?.computedValue()
            }
          });
        }

        if (term === FilterExpression) {
          const [ sourcePart, _ ] = variables.children.slice(-2);

          variables = variables.assign({
            value: sourcePart?.computedValue()
          });
        }

        if (term === FunctionInvocation) {

          const [
            name,
            ...args
          ] = variables.children;

          // preserve type information through `get value(context, key)` utility
          if (name?.raw === 'get value') {
            variables = getContextValue(variables, args);
          }
        }

        const start = contextStarts[term];

        if (start) {
          return variables.enterScope(start);
        }

        const prefixedStart = prefixedContextStarts[term];

        // pull <expression> into new <prefixedStart> context
        if (prefixedStart) {

          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];

          return variables.assign({
            children
          }).enterScope(prefixedStart).pushChild(lastChild).assign({
            context: {
              ...variables.context,
              ...lastChild?.computedValue()
            }
          });
        }

        const code = input.read(input.pos, stack.pos);

        const end = contextEnds[term];

        if (end) {
          return variables.exitScope(code);
        }

        if (term === ContextEntry) {
          return wrap(variables, 'ContextEntry', code);
        }

        if (
          term === ForInExpression ||
          term === QuantifiedInExpression
        ) {
          return wrap(variables, 'InExpression', code);
        }

        // define <partial> within ForExpression body
        if (term === forExpressionBodyStart) {

          return variables.define(
            'partial',
            ValueProducer.of(variables => {
              return variables.children[variables.children.length - 1]?.computedValue();
            })
          );
        }

        if (
          term === ParameterName
        ) {
          const [ left ] = variables.children.slice(-1);

          const name = left.computedValue();

          // TODO: attach type information
          return variables.define(name, 1);
        }

        // pull <expression> into ArithmeticExpression child
        if (
          term === arithmeticPlusStart ||
          term === arithmeticTimesStart ||
          term === arithmeticExpStart
        ) {
          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];

          return variables.assign({
            children
          }).enterScope('ArithmeticExpression').pushChild(lastChild);
        }

        if (term === arithmeticUnaryStart) {
          return variables.enterScope('ArithmeticExpression');
        }

        if (
          term === Identifier ||
          term === AdditionalIdentifier ||
          term === PropertyIdentifier
        ) {
          return variables.token(code);
        }

        if (
          term === StringLiteral
        ) {
          return variables.literal(code.replace(/^"|"$/g, ''));
        }

        if (term === BooleanLiteral) {
          return variables.literal(code === 'true' ? true : false);
        }

        if (term === NumericLiteral) {
          return variables.literal(parseFloat(code));
        }

        if (term === nil) {
          return variables.literal(null);
        }

        if (
          term === VariableName
        ) {
          return variables.resolveName();
        }

        if (
          term === Name ||
          term === PropertyName
        ) {
          return variables.declareName();
        }

        if (
          term === expression0 ||
          term === PositiveUnaryTest
        ) {
          if (variables.tokens.length > 0) {
            throw new Error('uncleared name');
          }
        }

        if (term === expression0) {

          let parent = variables;

          while (parent.parent) {
            parent = parent.exitScope(code);
          }

          return parent;
        }

        return variables;
      }
    });
  }

  const variableTracker = trackVariables({});


  // helpers //////////////

  function getContextValue(variables, args) {

    if (!args.length) {
      return variables.assign({
        value: null
      });
    }

    if (args[0].name === 'Name') {
      args = extractNamedArgs(args, [ 'm', 'key' ]);
    }

    if (args.length !== 2) {
      return variables.assign({
        value: null
      });
    }

    const [
      context,
      key
    ] = args;

    const keyValue = key?.computedValue();
    const contextValue = context?.computedValue();

    if (
      (!contextValue || typeof contextValue !== 'object') || typeof keyValue !== 'string'
    ) {
      return variables.assign({
        value: null
      });
    }

    return variables.assign({
      value: [ normalizeContextKey(keyValue), keyValue ].reduce((value, keyValue) => {
        if (keyValue in contextValue) {
          return contextValue[keyValue];
        }

        return value;
      }, null)
    });
  }

  function extractNamedArgs(args, argNames) {

    const context = {};

    for (let i = 0; i < args.length; i += 2) {
      const [ name, value ] = args.slice(i, i + 2);

      context[name.value] = value;
    }

    return argNames.map(name => context[name]);
  }

  const feelHighlighting = styleTags({
    StringLiteral: tags$1.string,
    NumericLiteral: tags$1.number,
    BooleanLiteral: tags$1.bool,
    'AtLiteral!': tags$1.special(tags$1.string),
    CompareOp: tags$1.compareOperator,
    ArithOp: tags$1.arithmeticOperator,
    'for if then else some every satisfies between return': tags$1.controlKeyword,
    'in instance of and or': tags$1.operatorKeyword,
    function: tags$1.definitionKeyword,
    as: tags$1.keyword,
    'Type/...': tags$1.typeName,
    Wildcard: tags$1.special,
    null: tags$1.null,
    LineComment: tags$1.lineComment,
    BlockComment: tags$1.blockComment,
    'VariableName! "?"': tags$1.variableName,
    'DateTimeConstructor! SpecialFunctionName!': tags$1.function(tags$1.special(tags$1.variableName)),
    'List Interval': tags$1.list,
    Context: tags$1.definition(tags$1.literal),
    'Name!': tags$1.definition(tags$1.variableName),
    'Key/Name! ContextEntryType/Name!': tags$1.definition(tags$1.propertyName),
    'PathExpression/VariableName!': tags$1.function(tags$1.propertyName),
    'FormalParameter/ParameterName!': tags$1.function(tags$1.definition(tags$1.variableName)),
    '( )': tags$1.paren,
    '[ ]': tags$1.squareBracket,
    '{ }': tags$1.brace,
    '.': tags$1.derefOperator,
    ', ;': tags$1.separator,
    '..': tags$1.punctuation
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier = {__proto__:null,for:10, in:30, return:34, if:38, then:40, else:42, some:46, every:48, satisfies:55, or:58, and:62, between:70, instance:86, of:89, days:99, time:101, duration:103, years:105, months:107, date:109, list:115, context:121, function:128, null:154, true:324, false:324, "?":168, external:184, not:207};
  const parser$1 = LRParser.deserialize({
    version: 14,
    states: "!%SO`QYOOO$gQYOOOOQU'#Ce'#CeO$qQYO'#C`O%zQ^O'#FOOOQQ'#Fd'#FdO'dQYO'#FdO`QYO'#DUOOQU'#Em'#EmO)QQ^O'#D]OOQO'#Fk'#FkO,PQWO'#DuOOQU'#D|'#D|OOQU'#D}'#D}OOQU'#EO'#EOO,UOWO'#ERO,PQWO'#EPOOQU'#EP'#EPOOQU'#Fq'#FqOOQU'#Fo'#FoOOQU'#ET'#ETO,ZQYO'#EVOOQU'#FQ'#FQO-oQ^O'#FQO/RQYO'#EWO/]QWO'#EXOOQP'#Fy'#FyO/bQXO'#E`OOQU'#Fv'#FvOOQU'#FP'#FPOOQQ'#Eh'#EhQ`QYOOOOQQ'#FR'#FROOQQ'#F['#F[O,ZQYO'#CnOOQQ'#F]'#F]O$qQYO'#CrO/mQYO'#DvOOQU'#Fp'#FpO/rQYO'#EQOOQO'#EQ'#EQO,ZQYO'#EUO`QYO'#ETOOQO'#Fw'#FwO1UQYO'#DQO1lQWO'#F`OOQO'#DS'#DSO1wQYO'#FdQOQWOOO2OQWOOO2rQYO'#CdO3PQYO'#FTOOQQ'#Cc'#CcO3UQYO'#FSOOQQ'#Cb'#CbO3^QYO,58zO`QYO,59hOOQQ'#Fa'#FaOOQQ'#Fb'#FbOOQQ'#Fc'#FcO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#Fi'#FiO$qQYO,5:]OOQQ'#Fj'#FjO,ZQYO,5:_OOQQ,5;j,5;jO`QYO,59dO`QYO,59fO,ZQYO,59hO4|QYO,59hO5TQYO,59rOOQU,5:h,5:hO5YQ^O,59pOOQU-E8k-E8kO8XQYO'#FlOOQU,5:a,5:aOOQU,5:m,5:mOOQU,5:k,5:kO8cQYO,5:qOOQU,5;l,5;lO:nQYO,5:pO:xQWO,5:rO:}QYO,5:sOOQP'#Ed'#EdO;qQXO'#EcOOQO'#Eb'#EbO;xQWO'#EaO;}QWO'#FzO<VQWO,5:zOOQQ-E8f-E8fO=]QYO,59YO3PQYO'#F_OOQQ'#Cv'#CvO=dQYO'#F^OOQQ'#Cu'#CuO=lQYO,59^O=qQYO,5:bO=vQYO,5:lO9jQYO,5:pO={Q^O,5:oO,ZQYO'#ElO?eQWO,5;zO,ZQYOOOOQR'#Cf'#CfOOQQ'#Ei'#EiO@[QYO,59OO,ZQYO,5;oOOQQ'#FW'#FWO$qQYO'#EjO@lQYO,5;nO`QYO1G.fOOQQ'#FZ'#FZO@tQ^O1G/SOCZQ^O1G/[OEpQ^O1G/[OJlQ^O1G/[OOQU1G/w1G/wOKYQYO1G/yOMgQ^O1G/OO!!TQ^O1G/QO!#cQYO1G/SO,ZQYO1G/SOOQU1G/S1G/SO!#jQYO1G/^O!$UQ^O'#CdO!%hQYO'#FnOOQO'#Dy'#DyO!%rQWO'#DxO!%wQWO'#FmOOQO'#Dw'#DwOOQO'#Dz'#DzO!&PQWO,5<WOOQU1G0]1G0]O,ZQYO1G0[O,ZQYO'#ErO!&UQWO,5<YOOQU1G0^1G0^O!&aQWO'#EZO!&lQWO'#FxOOQO'#EY'#EYO!&tQWO1G0_OOQP'#Et'#EtO!&yQXO,5:}O,ZQYO,5:{O!'QQXO'#EuO!'YQWO,5<fOOQU1G0f1G0fO!'bQYO1G.tO,ZQYO,5;yO$qQYO'#EkO!)OQYO,5;xO`QYO1G.xO!)WQYO1G/|OOQO1G0W1G0WOOQO,5;W,5;WOOQO-E8j-E8jO!)]QWOOOOQQ-E8g-E8gO!)bQYO'#ClOOQQ1G1Z1G1ZOOQQ,5;U,5;UOOQQ-E8h-E8hO!)oQ^O7+$QOOQU7+%e7+%eO`QYO7+$nO!+XQYO,5:qO!+`QWO7+$nO!+eQ^O'#D[OOQU'#DZ'#DZO!.dQYO'#D^O!.iQYO'#D^O!.nQYO'#D^O!.sQ`O'#DfO!.xQ`O'#DiO!.}Q`O'#DmOOQU7+$x7+$xO,ZQYO,5:dO$qQYO'#EqO!/SQWO,5<XOOQU1G1r1G1rO!0YQYO7+%vO!0gQYO,5;^OOQO-E8p-E8pO!#jQYO,5:uO$qQYO'#EsO!0tQWO,5<dO!0|QYO7+%yOOQP-E8r-E8rO!1TQYO1G0gOOQO,5;a,5;aOOQO-E8s-E8sO!3tQ^O7+$`O!3{QYO1G1eOOQQ,5;V,5;VOOQQ-E8i-E8iO!4VQ^O7+$dOOQO7+%h7+%hO,ZQYO,59WO!5oQ^O<<HYOOQU<<HY<<HYO$qQYO'#EnO!8UQ^O,59vO!;TQYO,59xO!;YQYO,59xO!;_QYO,59xO!;dQYO,5:QO$qQYO,5:TO!<OQbO,5:XO!<VQYO1G0OOOQO,5;],5;]OOQO-E8o-E8oO!<aQ^O<<IbOOQU<<Ib<<IbOOQO1G0a1G0aOOQO,5;_,5;_OOQO-E8q-E8qO!?`Q^O'#E]OOQU<<Ie<<IeO`QYO<<IeO`QYO<<GzO!@xQYO1G.rOOQU,5;Y,5;YOOQU-E8l-E8lO!ASQYO1G/dOOQU1G/d1G/dO!AXQbO'#D]O!AjQ`O'#D[O!AuQ`O1G/lO!AzQWO'#DlO!BPQ`O'#FeOOQO'#Dk'#DkO!BXQ`O1G/oOOQO'#Dp'#DpO!B^Q`O'#FgOOQO'#Do'#DoO!BfQ`O1G/sOOQUAN?PAN?PO!BkQ^OAN=fOOQU7+%O7+%OO!DTQ`O,59vOOQU7+%W7+%WO!;dQYO,5:WO$qQYO'#EoO!D`Q`O,5<POOQU7+%Z7+%ZO!;dQYO'#EpO!DhQ`O,5<RO!DpQ`O7+%_OOQO1G/r1G/rOOQO,5;Z,5;ZOOQO-E8m-E8mOOQO,5;[,5;[OOQO-E8n-E8nO!#jQYO<<HyOOQUAN>eAN>eO!DuQ^O'#FQO,ZQYO'#ETO,ZQYO,59hO,ZQYO,59pO,ZQYO,59pO,ZQYO,59pO,ZQYO,59dO,ZQYO,59fO!FyQYO,59hO!GQQYO,5:oO,ZQYO1G.fO!GqQYO1G/SO!I_QYO1G/[O!J{QYO1G/[O!MvQYO1G/OO# kQYO1G/QO# {QYO1G.tO,ZQYO1G.xO##iQYO7+$QO,ZQYO7+$nO#$YQYO7+%yO#&QQYO7+$`O#&XQYO7+$`O#&`Q^O7+$`O#&gQYO7+$dO#'WQYO<<HYO$qQYO'#EnO#(tQYO'#E]O,ZQYO<<IeO,ZQYO<<GzO#)eQYOAN=fO!;dQYO<<HyO,ZQYO'#DUO#*UQ^O'#DQO3^QYO,58zO#+nQYO,59YO#+uQYO,59^O#+zQYO1G/SO#,RQWO1G0_O!'bQYO1G.tO#,WQ`O7+%_O# {QYO1G.tO$qQYO'#C`O,ZQYO'#CnO$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#,]QYO,59YO#,dQ`O1G/sO#,iQYO,59YO#,pQWO'#EXO,ZQYO'#CnO!'bQYO'#ETO!'bQYO,59hO!'bQYO,59pO!'bQYO,59pO!'bQYO,59pO!'bQYO,59dO!'bQYO,59fO#.`QYO,59hO#/hQ^O,5:oO!'bQYO1G.fO#1TQ^O1G/SO#1[Q^O1G/[O#1cQ^O1G/[O#1jQ^O1G/OO#2QQ^O1G/QO!'bQYO1G.xO#2eQ^O7+$QO!'bQYO7+$nO#4QQYO7+%yO#4XQ^O7+$dO#5tQ^O<<HYO!<OQbO,5:XO#5{Q^O'#E]O!'bQYO<<IeP!'bQYO<<GzP#7hQ^OAN=fO#8kQ^O'#DQO,ZQYO'#CnO!'bQYO'#DUO3^QYO,58zO#:WQYO,59^O#:]QYO1G/SO#:dQWO1G0_O#:iQ`O'#DmO# {QYO'#ETO# {QYO,59hO# {QYO,59pO# {QYO,59pO# {QYO,59pO# {QYO,59dO# {QYO,59fO#<XQYO,59hO#=aQYO,5:oO# {QYO1G.fO#>TQYO1G/SO#>[QYO1G/[O#>cQYO1G/[O#>jQYO1G/OO#?QQYO1G/QO# {QYO1G.xO#?eQYO7+$QO# {QYO7+$nO#@XQYO7+%yO#@`QYO7+$dO#ASQYO<<HYO#AZQYO'#E]O# {QYO<<IeP# {QYO<<GzP#A}QYOAN=fO# {QYO'#DUO3^QYO,58zO#CQQYO,59^O#CVQYO1G/SO#C^QWO1G0_O$qQYO'#C`O$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#CcQWO'#EXO$qQYO'#C`O$qQYO'#CrO#ChQYO'#DQO,ZQYO,59hO:}QYO,5:sO#DRQWO'#EX",
    stateData: "#DW~O#pOS#qOSPOSQOS~OTpOZUO[TOcqOgsOhsOrzOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OTpO[TOcqOgsOhsOr&lOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OZ!PO#Z!RO~P!|O#lQO#mQO~OZ!ZO[!ZO]![O^![O_!iOm!fOo!gOq!YOr!YOs!hOy!]O{!jO!h!cO#x!aOu$_X~O#n!eO$o!eOT#rXc#rXg#rXh#rX!S#rX!T#rX!U#rX!W#rX!b#rX!f#rX!o#rX!v#rX#R#rX#j#rX#l#rX#m#rX$f#rX$g#rX$h#rX$i#rX~P$yO$f!kOT$WXZ$WX[$WXc$WXg$WXh$WXr$WXu$WX!S$WX!T$WX!U$WX!W$WX!b$WX!f$WX!h$WX!o$WX!v$WX#R$WX#l$WX#m$WX$g$WX$h$WX$i$WX~O#lQO#mQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!b!PX!f!PX!h!PX!o!PX!v!PX#R!PX#j!PX#n!PX#x!PX$f!PX$g!PX$h!PX$i!PX$o!PX#|!PXw!PX#{!PXd!PXa!PX#Q!PXe!PXk!PX~Ou!nO~O$g]O~OZUO~P!|O#n!sOZ#tX[#tX]#tX^#tX_#tXm#tXo#tXq#tXr#tXs#tXu#tXy#tX{#tX!f#tX!h#tX#j#tX#x#tXe#tX~OT#tXc#tXg#tXh#tX!S#tX!T#tX!U#tX!W#tX!b#tX!o#tX!v#tX#R#tX#l#tX#m#tX#n#tX$f#tX$g#tX$h#tX$i#tX$o#tX~P,bOZUO!f$bP~P!|Ou!vO~O#k!wO$g]O#Q$nP~Oo#UO~Oo#VOu!tX~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOu$_X#jtX#|tXwtX#{tX!ftXdtXatX#QtXktX~O_&sOm&qOo&rOq&mOr&mOs'jO~P/zO#|#YO#j$SXw$SX~O#j#YX~P'dOu#[O~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O$YWX~O_WXwWX#|WX~P2TO_#aO~O#|#bOa#vX~Oa#eO~OTpOZUO[TOcqOgsOhsOrzO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P3cO|#qO~O{!jO!h!cO#x!aOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau$_Xyxa!Sxa!Txa!Uxa!Wxa!bxa!fxa!oxa!vxa#Rxa#jxa#lxa#mxa#nxa$fxa$gxa$hxa$ixa$oxa#|xawxa#{xadxaaxa#Qxaexakxa~OZUOw$bP~P!|OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOw#zOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~O#|#|O!f$bX~P9jO!f$OO~O#lQO#mQOw$lP~OZ#]O[#]O]#]O^#]O#k!wO#x#]O#y#]O~O$Y#VX~P;YO$Y$VO~O#|$WO#Q$nX~O#Q$YO~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Od$ZO~P<[O#|$]Ok$QX~Ok$_O~O!V$`O~O!S$aO~OT!wac!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P$yO#|#YO#j$Saw$Sa~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O~O_Wa$YWawWa#|Wa~P?pO#|#bOa#va~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpi_picpigpihpimpiopiqpirpispiu$_X!Spi!Tpi!Upi!Wpi!bpi!fpi!opi!vpi#Rpi#jpi#lpi#mpi#npi$fpi$gpi$hpi$ipi$opi~O]![O^![Oy!]O{!jO!h!cO#x!aOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~Oy!]O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxiexi~Oyxi#|xiwxi#{xidxiaxi#Qxikxi~PHVO!f$kO~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTlicliglihlimliu$_X!Sli!Tli!Uli!Wli!bli!fli!oli!vli#Rli#jli#lli#mli#nli$fli$gli$hli$ili$oli~O_!iOo!gOq!YOr!YOs!hO~PKaOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTnicnignihnimnioniu$_X!Sni!Tni!Uni!Wni!bni!fni!oni!vni#Rni#jni#lni#mni#nni$fni$gni$hni$ini$oni~O_!iOq!YOr!YOs!hO~PMzOZ!ZO[!ZO]![O^![O_&sOm&qOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Oo$lO~P!!eO!R$qO!U$rO!W$sO!Z$tO!^$uO!b$vO#lQO#mQO~OZ#aX[#aX]#aX^#aX_#aXm#aXo#aXq#aXr#aXs#aXu#aXw#aXy#aX{#aX!h#aX#l#aX#m#aX#n#aX#x#aX#|#aX~P2TO#|#|Ow$bX~P<[O$Y$xO~O#|$yOw$aX~Ow${O~O#|#|O!f$baw$ba~O$Y%POw!}X#|!}X~O#|%QOw$lX~Ow%SO~O$Y#Va~P;YO#k!wO$g]O~O#|$WO#Q$na~OTpOZUO[TOcqOgsOhsOr'qOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#|$]Ok$Qa~O!T%^O~Ow!QO~O#{%_Oa`X#|`X~P<[OTSqcSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P$yO#|tX~P8cOw%aO~O#x%bOT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!b!OX!f!OX!h!OX!o!OX!v!OX#R!OX#j!OX#l!OX#m!OX#n!OX$f!OX$g!OX$h!OX$i!OX$o!OX#|!OXw!OX#{!OXd!OXa!OX#Q!OXe!OXk!OX~Oo%dO~Oo%eO~Oo%fO~O![%gO~O![%hO~O![%iO~O#|$yOw$aa~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO#x!aOu$_X~Ow%nO!f%nO!h%mO~P!/[O!f#fa#|#faw#fa~P<[O#|%QOw$la~O#O%tO~P`O#Q#Ti#|#Ti~P<[OZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOTbqcbqgbqhbqu$_X!Sbq!Tbq!Ubq!Wbq!bbq!fbq!obq!vbq#Rbq#jbq#lbq#mbq#nbq$fbq$gbq$hbq$ibq$obq~Oe%uO~P!1_Ok$Ri#|$Ri~P<[OTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P$yOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpy_pycpygpyhpympyopyqpyrpyspyu$_X!Spy!Tpy!Upy!Wpy!bpy!fpy!opy!vpy#Rpy#jpy#lpy#mpy#npy$fpy$gpy$hpy$ipy$opy~O#x%bOT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!b!Oa!f!Oa!h!Oa!o!Oa!v!Oa#R!Oa#j!Oa#l!Oa#m!Oa#n!Oa$f!Oa$g!Oa$h!Oa$i!Oa$o!Oa#|!Oaw!Oa#{!Oad!Oaa!Oa#Q!Oae!Oak!Oa~O!S%yO~O!V%yO~O!S%zO~O!R$qO!U$rO!W$sO!Z$tO!^$uO!b(dO#lQO#mQO~O!X$ZP~P!;dOw!li#|!li~P<[OT$^XZ$^X[$^X]!xy^!xy_!xyc$^Xg$^Xh$^Xm!xyo!xyq!xyr$^Xs!xyu$^Xy!xy{!xy!S$^X!T$^X!U$^X!W$^X!b$^X!f$^X!h$^X!o$^X!v$^X#R$^X#j!xy#l$^X#m$^X#n!xy#x!xy$f$^X$g$^X$h$^X$i$^X$o!xy#|!xyw!xy#{!xyd!xya!xy#Q!xye!xyk!xy~OT#PXc#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P$yOa`i#|`i~P<[O!T&YO~O#lQO#mQO!X!PX#x!PX#|!PX~O#x'VO!X!OX#|!OX~O!X&[O~O$Y&]O~O#|&^O!X$XX~O!X&`O~O#|&aO!X$ZX~O!X&cO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!bb!R!fb!R!ob!R!vb!R#Rb!R#jb!R#lb!R#mb!R#nb!R$fb!R$gb!R$hb!R$ib!R$ob!R~P$yO#x'VO!X!Oa#|!Oa~O#|&^O!X$Xa~O#|&aO!X$Za~O$[&iO~O#|#tXw#tX#{#tXd#tXa#tX#Q#tXk#tX~P,bOTpOZUO[TOcqOgsOhsOr&lO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P!E`O#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pimpiopiqpirpispiu$_X#jpi#|piwpi#{pi!fpidpiapi#Qpikpi~O]![O^![Oy!]O{!jO!h!cO#x!aOZxi[xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~Oy!]O{!jO!h!cO#x!aOZxi[xi]xi^xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmliu$_X#jli#|liwli#{li!flidliali#Qlikli~O_&sOo&rOq&mOr&mOs'jO~P!LiOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmnioniu$_X#jni#|niwni#{ni!fnidniani#Qnikni~O_&sOq&mOr&mOs'jO~P!NZOTpOZUO[TOcqOgsOhsOr(eOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P<[OZUO#O'XO~P!|OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X#jbq#|bqwbq#{bq!fbqdbqabq#Qbqkbq~Oe'YO~P#$dOebq~P#$dOebq~P!1_O#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pympyopyqpyrpyspyu$_X#jpy#|pywpy#{py!fpydpyapy#Qpykpy~O#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P<[O#jb!R#|b!Rwb!R#{b!R!fb!Rdb!Rab!R#Qb!Rkb!R~P<[OTtXctXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P$yOd&{O~P<[Ok&|O~Oo'OO~P!!eOw'PO~O$['[O~Od'dO~P<[O!X'eO~Od'fO~P<[Ou'kO~OTpOZUO[TOcqOgsOhsOr'qO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#,uOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~OT!wac!wae!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P#.gOepi~P@tOexi~PCZOexi~PEpO_'xOo'wOq'rOr'rOs)]Oeli~PKaO_'xOq'rOr'rOs)]Oeni~PMzOTSqcSqeSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P#.gO#O(YO~P!'bOTfqcfqefqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P#.gOepy~P!5oOT#PXc#PXe#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P#.gOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~Qb!RTtXctXetXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P#.gOk(QO~Oo(SO~P!!eOw(TO~O![(WO~OTpOZUO[TOcqOgsOhsOr(eO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#:nOZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Oe!wa#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P#<`Oepi~P!GqOexi~P!I_Oexi~P!J{O_(lOo(kOq(fOr(fOs)VOeli~P!LiO_(lOq(fOr(fOs)VOeni~P!NZOeSq#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P#<`O#O({O~P# {Oefq#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P#<`Oepy~P#'WOe#PX#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P#<`OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Qb!Rk(tO~Oo(vO~P!!eOw(wO~Ou)WO~O_(lOm(jOo(kOq(fOr(fOs)VOetX~P/zOu)^O~O",
    goto: "!7p$oPPPP$pP&p&|'V'r*mPPPPP*vP$pPPP$pPP*y+VP$pP$pP$pPPP+`P+nP$pP$pPP+w,^,i,^PPPPPPP,^PP,^P/P/S,^P/Y/`$pP$pP$p/g1g1j1p1gP1{3{1{1{6S8SP$p:S$p<S<S>S>`P>iPP<S>u>{6O?PP?XP?[?b?i?o?u?{B_BiBoBuB{CSCYC`PPPPPPPPCfCjHvJvL|MSPPMZPPMaMm! s!#y!$P!$W!$]!%y!'k!)a!+gP!+jP!+n!-`!/Q!1Q!1W!1Z$p!1a!1aPPPPHv!3a!5g!5m!7m${fOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!XRQ'_'gQ(`)YR)P)TW!VR'g)T)YR$h#bY!TR#b'g)T)YY#Pt$]'i)U)Z^#t!n!v$y%Q'k)W)^T&O%h&^%fWOPVXehoryz!Y!^!_!`!b!d!f!g!h!i#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%g%i%t%u%{&]&a&i&l&m&n&o&p&q&r&s&u&{&|'O'P'V'X'Y'[']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(W(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]t!SRt!v#b$]$y%Q%h&^'g'i'k)T)U)W)Y)Z)^U#^!S#_#rR#r!nU#^!S#_#rT$T!x$UR$g#`Q#TtQ'a'iQ(a)ZR)Q)UW#Rt'i)U)ZR%Z$]U}P#[#oW#p!i&s'x(lR$b#YQ!QPQ$d#[R$n#oQ$w#qQ%o%PQ%}%gU&S%i&a(WQ&d&]T&j&i'[c$p#q%P%g%i&]&a&i'[(W!fgOVoz!Y!^!_!`!f!g!i#d$Z$_$l%S%t%u'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_Q#j!bU$o#q%P&iS%w%b'V[%|%g%i&]&a'[(W#e&kPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'f'h'j'p(^(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R&R%hQ&P%hR&e&^Q&V%iR'm(WS&T%i(WR&g&a${YOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R#y!nQ#v!nR%k$yS#u!n$yZ$P!v%Q'k)W)^${bOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]$zbOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!p_T!yk$W${`OPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${aOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${dOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${lOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q$S!vQ'c'kQ(c)^R)S)WW$Q!v'k)W)^R%p%QW%s%S'P(T(wX&W%t'X(Y({Q!{kR%V$WT!zk$WS!xk$WT$T!x$UR!QPQoOR!}oS#_!S#rR$e#_Q#c!VR$i#cQ$^#RR%[$^Q#Z}R$c#Z%UXOPVehoryz!Y!^!_!`!b!d!f!g!h!i!n#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%t%u&i&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]S!mX%{_%{%g%i&]&a'V'[(WQ%c$oS%x%c&ZR&Z%|Q&_&PR&f&_Q&b&TR&h&bQ$z#vR%l$zS#}!t#sR%O#}Q%R$QR%q%RQ$U!xR%T$UQ$X!{R%W$XTnOoSSOoW|P#Y#[&sW!lV'](_)OQ!reQ!thQ#OrQ#WyQ#XzQ#f!YQ#g!^Q#h!_W#i!`&p'u(iQ#k!dQ#l!fQ#m!gQ#n!hQ#s!nQ$f#`Q$j#dQ$m#oQ$|#{Q$}#|Q%U$VQ%X$ZQ%Y$[Q%]$_Q%`$lQ%j$xS%r%S%tQ%v%_Q&X%uQ&t&lQ&v&mQ&w&nQ&x&oQ&y&qQ&z&rQ&}&uQ'Q&{Q'R'fQ'S'dQ'T&|Q'U'OS'W'P'XQ'Z'YQ'^!iQ'`'hQ'b'jQ'l'pQ'n(^Q'y'qQ'{'rQ'|'sQ'}'tQ(O'vQ(P'wQ(R'zQ(U(QQ(V(SS(X(T(YQ([(ZQ(]'xQ(b)]Q(m(eQ(o(fQ(p(gQ(q(hQ(r(jQ(s(kQ(u(nQ(x(tQ(y(vS(z(w({Q(}(|Q)R)VR)[(l${mOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]rROVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'gPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)T&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Y$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X!WR'g)T)YZ!UR#b'g)T)YQ#`!TR$[#PQ#d!XQ&u'_Q'z(`R(n)PrrOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'hPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r'p$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s(^&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OrtOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'iPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)U&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Z$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X#St'i)U)ZZ#Qt$]'i)U)ZV!OP#[#of!^S#X#f#l#m$j%]%`%r&X'^!`&n|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&y&z&}'T'U'W'Z'`'b'l'n(b)Rh's%X'S'y'{(O(P(R(U(V(X([(]i(g'Q'R(m(o(r(s(u(x(y(z(})[h!_S#X#f#g#l#m$j%]%`%r&X'^!b&o|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&y&z&}'T'U'W'Z'`'b'l'n(b)Rj't%X'S'y'{'|(O(P(R(U(V(X([(]k(h'Q'R(m(o(p(r(s(u(x(y(z(})[j!`S#X#f#g#h#l#m$j%]%`%r&X'^!d&p|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&x&y&z&}'T'U'W'Z'`'b'l'n(b)Rl'u%X'S'y'{'|'}(O(P(R(U(V(X([(]m(i'Q'R(m(o(p(q(r(s(u(x(y(z(})[rVOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p']Pehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r(_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s)O&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OR&Q%hT&U%i(W$_!bS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[$_!dS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[${ZOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!oZR!q`R#w!nQ!uhR#x!n${cOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]riOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'oPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)X&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X$R!v'k)W)^${kOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R!|k",
    nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
    maxTerm: 169,
    context: variableTracker,
    nodeProps: [
      ["group", -17,4,18,22,28,30,32,40,42,67,69,71,84,85,87,88,89,96,"Expression",47,"Expression Expression",-5,77,78,79,80,81,"Expression Literal"],
      ["closedBy", 37,")",70,"]",95,"}"],
      ["openedBy", 39,"(",68,"[",94,"{"]
    ],
    propSources: [feelHighlighting],
    skippedNodes: [0,1,2],
    repeatNodeCount: 14,
    tokenData: "+l~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx&cxy&hyz&mz{&r{|'P|}'U}!O'Z!O!P'h!P!Q(Q!Q![){![!]*^!]!^*c!^!_*h!_!`$f!`!a*w!b!c+R!}#O+W#P#Q+]#Q#R&z#o#p+b#q#r+g$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY#p~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O#q~~$cP!_!`$f~$kOq~~$pW$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&]<%lO$k~%_O$g~~%bRO;'S$k;'S;=`%k;=`O$k~%pX$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&];=`<%l$k<%lO$k~&`P;=`<%l$k~&hO#y~~&mOu~~&rOw~~&wP^~z{&z~'POy~~'UO[~~'ZO#|~R'`PZP!`!a'cQ'hO$[Q~'mQ#x~!O!P's!Q!['x~'xO#{~~'}P$f~!Q!['x~(VQ]~z{(]!P!Q)d~(`TOz(]z{(o{;'S(];'S;=`)^<%lO(]~(rVOz(]z{(o{!P(]!P!Q)X!Q;'S(];'S;=`)^<%lO(]~)^OQ~~)aP;=`<%l(]~)iSP~OY)dZ;'S)d;'S;=`)u<%lO)d~)xP;=`<%l)d~*QQ$f~!O!P*W!Q![){~*ZP!Q!['x~*cO$Y~~*hO$o~R*oP![QrP!_!`*rP*wOrPR+OP!XQrP!_!`*r~+WO$i~~+]O!h~~+bO!f~~+gO#R~~+lO#Q~",
    tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
    topRules: {"Expressions":[0,3],"UnaryTests":[1,101]},
    dynamicPrecedences: {"30":-1,"71":-1,"73":-1,"126":-1},
    specialized: [{term: 120, get: value => spec_identifier[value] || -1}],
    tokenPrec: 0
  });

  // / A collection of FEEL-related
  // / [snippets](#autocomplete.snippet).
  const snippets = [
      /*@__PURE__*/snippetCompletion('function(${params}) ${body}', {
          label: 'function',
          detail: 'definition',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('for ${var} in ${collection} return ${value}', {
          label: 'for',
          detail: 'expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('every ${var} in ${collection} satisfies ${condition}', {
          label: 'every',
          detail: 'quantified expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('some ${var} in ${collection} satisfies ${condition}', {
          label: 'some',
          detail: 'quantified expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('if ${condition} then ${value}', {
          label: 'if',
          detail: 'block',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('if ${condition} then ${value} else ${other value}', {
          label: 'if',
          detail: '/ else block',
          type: 'keyword'
      })
  ];

  // / A language provider based on the [Lezer FEEL
  // / parser](https://github.com/nikku/lezer-feel), extended with
  // / highlighting and indentation information.
  const feelLanguage = /*@__PURE__*/LRLanguage.define({
      parser: /*@__PURE__*/parser$1.configure({
          props: [
              /*@__PURE__*/indentNodeProp.add({
                  'Context': /*@__PURE__*/delimitedIndent({
                      closing: '}'
                  }),
                  'List FilterExpression': /*@__PURE__*/delimitedIndent({
                      closing: ']'
                  }),
                  'ParenthesizedExpression FunctionInvocation': /*@__PURE__*/delimitedIndent({
                      closing: ')'
                  }),
                  'ForExpression QuantifiedExpression IfExpression': /*@__PURE__*/continuedIndent({
                      except: /^\s*(then|else|return|satisfies)\b/
                  }),
                  'FunctionDefinition': /*@__PURE__*/continuedIndent({
                      except: /^\s*(\(|\))/
                  })
              }),
              /*@__PURE__*/foldNodeProp.add({
                  Context: foldInside,
                  List: foldInside,
                  FunctionDefinition(node) {
                      const last = node.getChild(')');
                      if (!last)
                          return null;
                      return {
                          from: last.to,
                          to: node.to
                      };
                  }
              })
          ]
      }),
      languageData: {
          indentOnInput: /^\s*(\)|\}|\]|then|else|return|satisfies)$/,
          commentTokens: {
              line: '//',
              block: {
                  open: '/*',
                  close: '*/'
              }
          }
      }
  });

  var componentEvent = {};

  var bind$1, unbind$1, prefix;

  function detect () {
    bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent';
    unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent';
    prefix = bind$1 !== 'addEventListener' ? 'on' : '';
  }

  /**
   * Bind `el` event `type` to `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  componentEvent.bind = function(el, type, fn, capture){
    if (!bind$1) detect();
    el[bind$1](prefix + type, fn, capture || false);
    return fn;
  };

  /**
   * Unbind `el` event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  componentEvent.unbind = function(el, type, fn, capture){
    if (!unbind$1) detect();
    el[unbind$1](prefix + type, fn, capture || false);
    return fn;
  };

  /**
   * Expose `parse`.
   */

  var domify = parse$1;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug = false;
  var bugTestDiv;
  if (typeof document !== 'undefined') {
    bugTestDiv = document.createElement('div');
    // Setup
    bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
    bugTestDiv = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
  };

  map.td =
  map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map.option =
  map.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map.thead =
  map.tbody =
  map.colgroup =
  map.caption =
  map.tfoot = [1, '<table>', '</table>'];

  map.polyline =
  map.ellipse =
  map.polygon =
  map.circle =
  map.text =
  map.line =
  map.path =
  map.rect =
  map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse$1(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);

    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }

    return fragment;
  }

  var domify$1 = domify;

  /**
   * Create an array of syntax errors in the given tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of syntax errors
   */
  function lintSyntax(syntaxTree) {

    const lintMessages = [];

    syntaxTree.iterate({
      enter: node => {
        if (node.type.isError) {

          const error = node.toString();

          /* The error has the pattern [⚠ || ⚠(NodeType)]. The regex extracts the node type from inside the brackets */
          const match = /\((.*?)\)/.exec(error);
          const nodeType = match && match[1];

          let message;

          if (nodeType) {
            message = 'unexpected ' + nodeType;
          } else {
            message = 'expression expected';
          }

          lintMessages.push(
            {
              from: node.from,
              to: node.to,
              severity: 'error',
              message: message,
              type: 'syntaxError'
            }
          );
        }
      }
    });

    return lintMessages;
  }

  /**
   * Generates lint messages for the given syntax tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of all lint messages
   */
  function lintAll(syntaxTree) {

    const lintMessages = [
      ... lintSyntax(syntaxTree)
    ];

    return lintMessages;
  }

  /**
   * CodeMirror extension that provides linting for FEEL expressions.
   *
   * @param {EditorView} editorView
   * @returns {Source} CodeMirror linting source
   */
  const cmFeelLinter = () => editorView => {

    // don't lint if the Editor is empty
    if (editorView.state.doc.length === 0) {
      return [];
    }

    const tree = syntaxTree(editorView.state);

    const messages = lintAll(tree);

    return messages.map(message => ({
      ...message,
      source: 'syntaxError'
    }));
  };

  // helpers ///////////////////////////////

  function isNodeEmpty(node) {
    return node.from === node.to;
  }

  function isPathExpression(node) {
    if (!node) {
      return false;
    }

    if (node.name === 'PathExpression') {
      return true;
    }

    return isPathExpression(node.parent);
  }

  var tags = [
  	{
  		name: "not()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>negand</code>: boolean</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">not(true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "is defined()",
  		description: "<p>Checks if a given value is defined. A value is defined if it exists, and it is an instance of one of the FEEL data types including <code>null</code>.</p>\n<p>The function can be used to check if a variable or a context entry (e.g. a property of a variable) exists. It allows differentiating between a <code>null</code> variable and a value that doesn&#39;t exist.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">is defined(1)\n// true\n\nis defined(null)\n// true\n\nis defined(x)\n// false - if no variable &quot;x&quot; exists\n\nis defined(x.y)\n// false - if no variable &quot;x&quot; exists or it doesn&#39;t have a property &quot;y&quot;\n</code></pre>\n"
  	},
  	{
  		name: "get value()",
  		description: "<p>Returns the value of the context entry with the given key.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n</ul>\n</li>\n<li>result: any</li>\n</ul>\n<pre><code class=\"language-feel\">get value({foo: 123}, &quot;foo&quot;)\n// 123\n</code></pre>\n"
  	},
  	{
  		name: "get entries()",
  		description: "<p>Returns the entries of the context as a list of key-value-pairs.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n</ul>\n</li>\n<li>result: list of context which contains two entries for &quot;key&quot; and &quot;value&quot;</li>\n</ul>\n<pre><code class=\"language-feel\">get entries({foo: 123})\n// [{key: &quot;foo&quot;, value: 123}]\n</code></pre>\n"
  	},
  	{
  		name: "put()",
  		description: "<p>Add the given key and value to a context. Returns a new context that includes the entry. It might override an existing entry of the context.</p>\n<p>Returns <code>null</code> if the value is not defined.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put({x:1}, &quot;y&quot;, 2)\n// {x:1, y:2}\n</code></pre>\n"
  	},
  	{
  		name: "put all()",
  		description: "<p>Union the given contexts (two or more). Returns a new context that includes all entries of the given contexts. It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts are passed in the method.</p>\n<p>Returns <code>null</code> if one of the values is not a context.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>contexts</code>: contexts as varargs</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put all({x:1}, {y:2})\n// {x:1, y:2}\n</code></pre>\n"
  	},
  	{
  		name: "date()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>year</code>, <code>month</code>, <code>day</code>: number</li>\n</ul>\n</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">date(birthday)\n// date(&quot;2018-04-29&quot;)\n\ndate(date and time(&quot;2012-12-25T11:00:00&quot;))\n// date(&quot;2012-12-25&quot;)\n\ndate(2012, 12, 25)\n// date(&quot;2012-12-25&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "time()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>hour</code>, <code>minute</code>, <code>second</code>: number<ul>\n<li>(optional) <code>offset</code>: day-time-duration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>result: time</li>\n</ul>\n<pre><code class=\"language-feel\">time(lunchTime)\n// time(&quot;12:00:00&quot;)\n\ntime(date and time(&quot;2012-12-25T11:00:00&quot;))\n// time(&quot;11:00:00&quot;)\n\ntime(23, 59, 0)\n// time(&quot;23:59:00&quot;)\n\ntime(14, 30, 0, duration(&quot;PT1H&quot;))\n// time(&quot;15:30:00&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "date and time()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date / date-time</li>\n<li><code>time</code>: time</li>\n<li>or <code>from</code>: string</li>\n</ul>\n</li>\n<li>result: date-time</li>\n</ul>\n<pre><code class=\"language-feel\">date and time(date(&quot;2012-12-24&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-24T23:59:00&quot;)\n\ndate and time(date and time(&quot;2012-12-25T11:00:00&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-25T23:59:00&quot;)\n\ndate and time(birthday)\n// date and time(&quot;2018-04-29T009:30:00&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "duration()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: day-time-duration or year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">duration(weekDays)\n// duration(&quot;P5D&quot;)\n\nduration(age)\n// duration(&quot;P32Y&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "years and months duration()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: date</li>\n<li><code>to</code>: date</li>\n</ul>\n</li>\n<li>result: year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">years and months duration(date(&quot;2011-12-22&quot;), date(&quot;2013-08-24&quot;))\n// duration(&quot;P1Y8M&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "number()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">number(&quot;1500.5&quot;)\n// 1500.5\n</code></pre>\n"
  	},
  	{
  		name: "string()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: any</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">string(1.1)\n// &quot;1.1&quot;\n\nstring(date(&quot;2012-12-25&quot;))\n// &quot;2012-12-25&quot;\n</code></pre>\n"
  	},
  	{
  		name: "context()",
  		description: "<p>Constructs a context of the given list of key-value pairs. It is the reverse function to <a href=\"feel-built-in-functions-context.md#get-entries\">get entries()</a>.</p>\n<p>Each key-value pair must be a context with two entries: <code>key</code> and <code>value</code>. The entry with name <code>key</code> must have a value of the type <code>string</code>.</p>\n<p>It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts in the given list.</p>\n<p>Returns <code>null</code> if one of the entries is not a context or if a context doesn&#39;t contain the required entries.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>entries</code>: list of contexts</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">context([{&quot;key&quot;:&quot;a&quot;, &quot;value&quot;:1}, {&quot;key&quot;:&quot;b&quot;, &quot;value&quot;:2}])\n// {a:1, b:2}\n</code></pre>\n"
  	},
  	{
  		name: "list contains()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>element</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">list contains([1,2,3], 2)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "count()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">count([1,2,3])\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "min()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">min([1,2,3])\n// 1\n\nmin(1,2,3)\n// 1\n</code></pre>\n"
  	},
  	{
  		name: "max()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">max([1,2,3])\n// 3\n\nmax(1,2,3)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "sum()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sum([1,2,3])\n// 6\n\nsum(1,2,3)\n// 6\n</code></pre>\n"
  	},
  	{
  		name: "product()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">product([2, 3, 4])\n// 24\n\nproduct(2, 3, 4)\n// 24\n</code></pre>\n"
  	},
  	{
  		name: "mean()",
  		description: "<p>Returns the arithmetic mean (i.e. average).</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">mean([1,2,3])\n// 2\n\nmean(1,2,3)\n// 2\n</code></pre>\n"
  	},
  	{
  		name: "median()",
  		description: "<p>Returns the median element of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">median(8, 2, 5, 3, 4)\n// 4\n\nmedian([6, 1, 2, 3])\n// 2.5\n</code></pre>\n"
  	},
  	{
  		name: "stddev()",
  		description: "<p>Returns the standard deviation.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">stddev(2, 4, 7, 5)\n// 2.0816659994661326\n\nstddev([2, 4, 7, 5])\n// 2.0816659994661326\n</code></pre>\n"
  	},
  	{
  		name: "mode()",
  		description: "<p>Returns the mode of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">mode(6, 3, 9, 6, 6)\n// [6]\n\nmode([6, 1, 9, 6, 1])\n// [1, 6]\n</code></pre>\n"
  	},
  	{
  		name: "and()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "all()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "or()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "any()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "sublist()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sublist([1,2,3], 2)\n// [2,3]\n\nsublist([1,2,3], 1, 2)\n// [1,2]\n</code></pre>\n"
  	},
  	{
  		name: "append()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>items</code>: elements as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">append([1], 2, 3)\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "concatenate()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">concatenate([1,2],[3])\n// [1,2,3]\n\nconcatenate([1],[2],[3])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "insert before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n<li><code>newItem</code>: any</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">insert before([1,3],1,2)\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "remove()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">remove([1,2,3], 2)\n// [1,3]\n</code></pre>\n"
  	},
  	{
  		name: "reverse()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">reverse([1,2,3])\n// [3,2,1]\n</code></pre>\n"
  	},
  	{
  		name: "index of()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>match</code>: any</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">index of([1,2,3,2],2)\n// [2,4]\n</code></pre>\n"
  	},
  	{
  		name: "union()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">union([1,2],[2,3])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "distinct values()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">distinct values([1,2,3,2,1])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "flatten()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">flatten([[1,2],[[3]], 4])\n// [1,2,3,4]\n</code></pre>\n"
  	},
  	{
  		name: "sort()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>precedes</code>: function with two arguments and boolean result</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sort(list: [3,1,4,5,2], precedes: function(x,y) x &lt; y)\n// [1,2,3,4,5]\n</code></pre>\n"
  	},
  	{
  		name: "string join()",
  		description: "<p>This joins a list of strings into a single string. This is similar to\nJava&#39;s <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)\">joining</a>\nfunction.</p>\n<p>If an item of the list is <code>null</code>, the item is ignored for the result string. If an item is\nneither a string nor <code>null</code>, the function returns <code>null</code> instead of a string.</p>\n<ul>\n<li>Parameters:<ul>\n<li><code>list</code>: The list of strings to join</li>\n<li><code>delimiter</code>: (Optional) The string used between each element (default: empty string)</li>\n<li><code>prefix</code>: (Optional) The string used at the beginning of the joined result (default:\nempty string)</li>\n<li><code>suffix</code>: (Optional) The string used at the end of the joined result (default: empty\nstring)</li>\n</ul>\n</li>\n<li>Result: The joined list as a string</li>\n</ul>\n<pre><code class=\"language-feel\">string join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])\n// &quot;abc&quot;\nstring join([&quot;a&quot;], &quot;X&quot;)\n// &quot;a&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;)\n// &quot;a, b, c&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;, &quot;[&quot;, &quot;]&quot;)\n// &quot;[a, b, c]&quot;\nstring join([&quot;a&quot;,null,&quot;c&quot;])\n// &quot;ac&quot;\nstring join([])\n// &quot;&quot;\n</code></pre>\n"
  	},
  	{
  		name: "decimal()",
  		description: "<p>Round the given number at the given scale using the given rounding mode. If no rounding mode is passed in, it uses <code>HALF_EVEN</code> as default.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n<li><code>scale</code>: number</li>\n<li>(optional) <code>mode</code>: string - one of <code>UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY</code> (default: <code>HALF_EVEN</code>)</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">decimal(1/3, 2)\n// .33\n\ndecimal(1.5, 0)\n// 2\n\ndecimal(2.5, 0, &quot;half_up&quot;)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "floor()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">floor(1.5)\n// 1\n\nfloor(-1.5)\n// -2\n</code></pre>\n"
  	},
  	{
  		name: "ceiling()",
  		description: "<p>Round the given number at the given scale using the ceiling rounding mode.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">ceiling(1.5)\n// 2\n\nceiling(-1.5)\n// -1\n</code></pre>\n"
  	},
  	{
  		name: "abs()",
  		description: "<p>Returns the absolute value of the given numeric value.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">abs(10)\n// 10\n\nabs(-10)\n// 10\n</code></pre>\n"
  	},
  	{
  		name: "modulo()",
  		description: "<p>Returns the remainder of the division of dividend by divisor.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>dividend</code>: number</li>\n<li><code>divisor</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">modulo(12, 5)\n// 2\n</code></pre>\n"
  	},
  	{
  		name: "sqrt()",
  		description: "<p>Returns the square root.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sqrt(16)\n// 4\n</code></pre>\n"
  	},
  	{
  		name: "log()",
  		description: "<p>Returns the natural logarithm (base e) of the number.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">log(10)\n// 2.302585092994046\n</code></pre>\n"
  	},
  	{
  		name: "exp()",
  		description: "<p>Returns the Euler’s number e raised to the power of number .</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">exp(5)\n// 148.4131591025766\n</code></pre>\n"
  	},
  	{
  		name: "odd()",
  		description: "<p>Returns <code>true</code> if the given numeric value is odd. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">odd(5)\n// true\n\nodd(2)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "even()",
  		description: "<p>Returns <code>true</code> if the given numeric value is even. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">even(5)\n// false\n\neven(2)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">before(1, 10)\n// true\n\nbefore(10, 1)\n// false\n\nbefore(1, [2..5])\n// true\n\nbefore([1..5], 10)\n// true\n\nbefore([1..5], [6..10])\n// true\n\nbefore([1..5),[5..10])\n// true\n</code></pre>\n"
  	},
  	{
  		name: "after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">after(10, 1)\n// true\n\nafter(1, 10)\n// false\n\nafter(12, [2..5])\n// true\n\n([1..5], 10)\n// false\n\nbefore([6..10], [1..5])\n// true\n\nbefore([5..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "meets()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">meets([1..5], [5..10])\n// true\n\nmeets([1..3], [4..6])\n// false\n\nmeets([1..3], [3..5])\n// true\n\nmeets([1..5], (5..8])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "met by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">met by([5..10], [1..5])\n// true\n\nmet by([3..4], [1..2])\n// false\n\nmet by([3..5], [1..3])\n// true\n\nmet by((5..8], [1..5))\n// false\n\nmet by([5..10], [1..5))\n// false\n</code></pre>\n"
  	},
  	{
  		name: "overlaps()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps([5..10], [1..6])\n// true\n\noverlaps((3..7], [1..4])\n// true\n\noverlaps([1..3], (3..6])\n// false\n\noverlaps((5..8], [1..5))\n// false\n\noverlaps([4..10], [1..5))\n// treu\n</code></pre>\n"
  	},
  	{
  		name: "overlaps before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps before([1..5], [4..10])\n// true\n\noverlaps before([3..4], [1..2])\n// false\n\noverlaps before([1..3], (3..5])\n// false\n\noverlaps before([1..5), (3..8])\n// true\n\noverlaps before([1..5), [5..10])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "overlaps after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps after([4..10], [1..5])\n// true\n\noverlaps after([3..4], [1..2])\n// false\n\noverlaps after([3..5], [1..3))\n// false\n\noverlaps after((5..8], [1..5))\n// false\n\noverlaps after([4..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "finishes()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes(5, [1..5])\n// true\n\nfinishes(10, [1..7])\n// false\n\nfinishes([3..5], [1..5])\n// true\n\nfinishes((1..5], [1..5))\n// false\n\nfinishes([5..10], [1..10))\n// false\n</code></pre>\n"
  	},
  	{
  		name: "finished by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes by([5..10], 10)\n// true\n\nfinishes by([3..4], 2)\n// false\n\nfinishes by([3..5], [1..5])\n// true\n\nfinishes by((5..8], [1..5))\n// false\n\nfinishes by([5..10], (1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "includes()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">includes([5..10], 6)\n// true\n\nincludes([3..4], 5)\n// false\n\nincludes([1..10], [4..6])\n// true\n\nincludes((5..8], [1..5))\n// false\n\nincludes([1..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "during()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">during(5, [1..10])\n// true\n\nduring(12, [1..10])\n// false\n\nduring(1, (1..10])\n// false\n\nduring([4..6], [1..10))\n// true\n\nduring((1..5], (1..10])\n// true\n</code></pre>\n"
  	},
  	{
  		name: "starts()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts(1, [1..5])\n// true\n\nstarts(1, (1..8])\n// false\n\nstarts((1..5], [1..5])\n// false\n\nstarts([1..10], [1..10])\n// true\n\nstarts((1..10), (1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "started by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">started by([1..10], 1)\n// true\n\nstarted by((1..10], 1)\n// false\n\nstarted by([1..10], [1..5])\n// true\n\nstarted by((1..10], [1..5))\n// false\n\nstarted by([1..10], [1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "coincides()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">coincides(5, 5)\n// true\n\ncoincides(3, 4)\n// false\n\ncoincides([1..5], [1..5])\n// true\n\ncoincides((1..5], [1..5))\n// false\n\ncoincides([1..5], [2..6])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "substring()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring(&quot;foobar&quot;,3)\n// &quot;obar&quot;\n\nsubstring(&quot;foobar&quot;,3,3)\n// &quot;oba&quot;\n</code></pre>\n"
  	},
  	{
  		name: "string length()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">string length(&quot;foo&quot;)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "upper case()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">upper case(&quot;aBc4&quot;)\n// &quot;ABC4&quot;\n</code></pre>\n"
  	},
  	{
  		name: "lower case()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">lower case(&quot;aBc4&quot;)\n// &quot;abc4&quot;\n</code></pre>\n"
  	},
  	{
  		name: "substring before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring before(&quot;foobar&quot;, &quot;bar&quot;)\n// &quot;foo&quot;\n</code></pre>\n"
  	},
  	{
  		name: "substring after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring after(&quot;foobar&quot;, &quot;ob&quot;)\n// &quot;ar&quot;\n</code></pre>\n"
  	},
  	{
  		name: "contains()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">contains(&quot;foobar&quot;, &quot;of&quot;)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "starts with()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts with(&quot;foobar&quot;, &quot;fo&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "ends with()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">ends with(&quot;foobar&quot;, &quot;r&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "matches()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">matches(&quot;foobar&quot;, &quot;^fo*bar&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "replace()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n<li><code>replacement</code>: string (e.g. <code>$1</code> returns the first match group)</li>\n<li>(optional) <code>flags</code>: string (&quot;s&quot;, &quot;m&quot;, &quot;i&quot;, &quot;x&quot;)</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">replace(&quot;abcd&quot;, &quot;(ab)|(a)&quot;, &quot;[1=$1][2=$2]&quot;)\n// &quot;[1=ab][2=]cd&quot;\n\nreplace(&quot;0123456789&quot;, &quot;(\\d{3})(\\d{3})(\\d{4})&quot;, &quot;($1) $2-$3&quot;)\n// &quot;(012) 345-6789&quot;\n</code></pre>\n"
  	},
  	{
  		name: "split()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>delimiter</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">split(&quot;John Doe&quot;, &quot;\\s&quot; )\n// [&quot;John&quot;, &quot;Doe&quot;]\n\nsplit(&quot;a;b;c;;&quot;, &quot;;&quot;)\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;&quot;]\n</code></pre>\n"
  	},
  	{
  		name: "extract()",
  		description: "<p>Returns all matches of the pattern in the given string. Returns an empty list if the pattern doesn&#39;t\nmatch.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">extract(&quot;references are 1234, 1256, 1378&quot;, &quot;12[0-9]*&quot;)\n// [&quot;1234&quot;,&quot;1256&quot;]\n</code></pre>\n"
  	},
  	{
  		name: "now()",
  		description: "<p>Returns the current date and time including the timezone.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date-time with timezone</li>\n</ul>\n<pre><code class=\"language-feel\">now()\n// date and time(&quot;2020-07-31T14:27:30@Europe/Berlin&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "today()",
  		description: "<p>Returns the current date.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">today()\n// date(&quot;2020-07-31&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "day of week()",
  		description: "<p>Returns the day of the week according to the Gregorian calendar. Note that it always returns the English name of the day.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">day of week(date(&quot;2019-09-17&quot;))\n// &quot;Tuesday&quot;\n</code></pre>\n"
  	},
  	{
  		name: "day of year()",
  		description: "<p>Returns the Gregorian number of the day within the year.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">day of year(date(&quot;2019-09-17&quot;))\n// 260\n</code></pre>\n"
  	},
  	{
  		name: "week of year()",
  		description: "<p>Returns the Gregorian number of the week within the year, according to ISO 8601.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">week of year(date(&quot;2019-09-17&quot;))\n// 38\n</code></pre>\n"
  	},
  	{
  		name: "month of year()",
  		description: "<p>Returns the month of the week according to the Gregorian calendar. Note that it always returns the English name of the month.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">month of year(date(&quot;2019-09-17&quot;))\n// &quot;September&quot;\n</code></pre>\n"
  	},
  	{
  		name: "abs()",
  		description: "<p>Returns the absolute value of a given duration.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: days-time-duration/years-months-duration</li>\n</ul>\n</li>\n<li>result: duration</li>\n</ul>\n<pre><code class=\"language-feel\">abs(duration(&quot;-PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;-P2M&quot;))\n// duration(&quot;P2M&quot;)\n</code></pre>\n"
  	}
  ];

  const options = tags.map(tag => snippetCompletion(
    tag.name.replace('()', '(#{1})'),
    {
      label: tag.name,
      type: 'function',
      info: () => {
        const html = domify$1(`<div class="description">${tag.description}<div>`);
        return html;
      },
      boost: -1
    }
  ));

  var builtins = context => {

    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode =
          isNodeEmpty(nodeBefore) ||
          nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);

    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options
      } : null;
    }

    // Don't auto-complete on path expressions/context keys/...
    if ((nodeBefore.parent && nodeBefore.parent.name !== 'VariableName') || isPathExpression(nodeBefore)) {
      return null;
    }

    return {
      from: nodeBefore.from,
      options: options
    };
  };

  /**
   * @type {Facet<import('..').Variable[]>} Variable
   */
  const variablesFacet$1 = Facet.define();

  var pathExpression = context => {
    const variables = context.state.facet(variablesFacet$1)[0];
    const nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    if (!isPathExpression(nodeBefore)) {
      return;
    }

    const expression = findPathExpression(nodeBefore);

    // if the cursor is directly after the `.`, variable starts at the cursor position
    const from = nodeBefore === expression ? context.pos : nodeBefore.from;

    const path = getPath(expression, context);

    let options = variables;
    for (var i = 0; i < path.length - 1; i++) {
      var childVar = options.find(val => val.name === path[i].name);

      if (!childVar) {
        return null;
      }

      // only suggest if variable type matches
      if (
        childVar.isList !== 'optional' &&
        !!childVar.isList !== path[i].isList
      ) {
        return;
      }

      options = childVar.entries;
    }

    if (!options) return;

    options = options.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));

    const result = {
      from: from,
      options: options
    };

    return result;
  };


  function findPathExpression(node) {
    while (node) {
      if (node.name === 'PathExpression') {
        return node;
      }
      node = node.parent;
    }
  }

  // parses the path expression into a list of variable names with type information
  // e.g. foo[0].bar => [ { name: 'foo', isList: true }, { name: 'bar', isList: false } ]
  function getPath(node, context) {
    let path = [];

    for (let child = node.firstChild; child; child = child.nextSibling) {
      if (child.name === 'PathExpression') {
        path.push(...getPath(child, context));
      } else if (child.name === 'FilterExpression') {
        path.push(...getFilter(child, context));
      }
      else {
        path.push({
          name: getNodeContent(child, context),
          isList: false
        });
      }
    }
    return path;
  }

  function getFilter(node, context) {
    const list = node.firstChild;

    if (list.name === 'PathExpression') {
      const path = getPath(list, context);
      const last = path[path.length - 1];
      last.isList = true;

      return path;
    }

    return [ {
      name: getNodeContent(list, context),
      isList: true
    } ];
  }

  function getNodeContent(node, context) {
    return context.state.sliceDoc(node.from, node.to);
  }

  /**
   * @type {import('@codemirror/autocomplete').CompletionSource}
   */
  var variables = context => {

    const variables = context.state.facet(variablesFacet$1)[0];

    const options = variables.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));

    // In most cases, use what is typed before the cursor
    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode =
          isNodeEmpty(nodeBefore) ||
          nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);

    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options
      } : null;
    }

    const result = {
      from: nodeBefore.from,
      options: options
    };

    // Only auto-complete variables
    if ((nodeBefore.parent && nodeBefore.parent.name !== 'VariableName') || isPathExpression(nodeBefore)) {
      return null;
    }

    return result;
  };

  function autocompletion$1() {
    return [
      autocompletion$2({
        override: [
          variables,
          builtins,
          completeFromList(snippets.map(s => ({ ...s, boost: -1 }))),
          pathExpression
        ]
      })
    ];
  }

  function language() {
    return new LanguageSupport(feelLanguage, [ ]);
  }

  var linter = [ linter$1(cmFeelLinter()) ];

  const baseTheme$2 = EditorView.theme({
    '& .cm-content': {
      padding: '0px',
    },
    '& .cm-line': {
      padding: '0px',
    },
    '&.cm-editor.cm-focused': {
      outline: 'none',
    },
    '& .cm-completionInfo ul': {
      margin: 0,
      paddingLeft: '15px'
    },
    '& .cm-completionInfo pre': {
      marginBottom: 0,
      whiteSpace: 'pre-wrap'
    },
    '& .cm-completionInfo p': {
      marginTop: 0,
    },
    '& .cm-completionInfo p:not(:last-of-type)': {
      marginBottom: 0,
    }
  });

  const highlightTheme = EditorView.baseTheme({
    '& .variableName': {
      color: '#10f'
    },
    '& .number': {
      color: '#164'
    },
    '& .string': {
      color: '#a11'
    },
    '& .bool': {
      color: '#219'
    },
    '& .function': {
      color: '#aa3731',
      fontWeight: 'bold'
    },
    '& .control': {
      color: '#708'
    }
  });

  const syntaxClasses = syntaxHighlighting(
    HighlightStyle.define([
      { tag: tags$1.variableName, class: 'variableName' },
      { tag: tags$1.name, class: 'variableName' },
      { tag: tags$1.number, class: 'number' },
      { tag: tags$1.string, class: 'string' },
      { tag: tags$1.bool, class: 'bool' },
      { tag: tags$1.function(tags$1.variableName), class: 'function' },
      { tag: tags$1.function(tags$1.special(tags$1.variableName)), class: 'function' },
      { tag: tags$1.controlKeyword, class: 'control' },
      { tag: tags$1.operatorKeyword, class: 'control' }
    ])
  );

  var theme = [ baseTheme$2, highlightTheme, syntaxClasses ];

  /**
   * @typedef {object} Variable
   * @property {string} name name or key of the variable
   * @property {string} [info] short information about the variable, e.g. type
   * @property {string} [detail] longer description of the variable content
   * @property {boolean} [isList] whether the variable is a list
   * @property {array<Variable>} [schema] array of child variables if the variable is a context or list
   */

  const autocompletionConf = new Compartment();

  /**
   * Creates a FEEL editor in the supplied container
   *
   * @param {Object} config
   * @param {DOMNode} config.container
   * @param {DOMNode|String} [config.tooltipContainer]
   * @param {Function} [config.onChange]
   * @param {Function} [config.onKeyDown]
   * @param {Function} [config.onLint]
   * @param {Boolean} [config.readOnly]
   * @param {String} [config.value]
   * @param {Variable[]} [config.variables]
   *
   * @returns {Object} editor
   */
  function FeelEditor({
    container,
    tooltipContainer,
    onChange = () => {},
    onKeyDown = () => {},
    onLint = () => {},
    readOnly = false,
    value = '',
    variables = []
  }) {

    const changeHandler = EditorView.updateListener.of((update) => {
      if (update.docChanged) {
        onChange(update.state.doc.toString());
      }
    });

    const lintHandler = EditorView.updateListener.of((update) => {
      const diagnosticEffects = update.transactions
        .flatMap(t => t.effects)
        .filter(effect => effect.is(setDiagnosticsEffect));

      if (!diagnosticEffects.length) {
        return;
      }

      const messages = diagnosticEffects.flatMap(effect => effect.value);

      onLint(messages);
    });

    const keyHandler = EditorView.domEventHandlers(
      {
        keydown: onKeyDown
      }
    );

    if (typeof tooltipContainer === 'string') {
      tooltipContainer = document.querySelector(tooltipContainer);
    }

    const tooltipLayout = tooltipContainer ? tooltips({
      tooltipSpace: function() {
        return tooltipContainer.getBoundingClientRect();
      }
    }) : [];

    const extensions = [
      autocompletionConf.of(variablesFacet$1.of(variables)),
      autocompletion$1(),
      bracketMatching(),
      changeHandler,
      closeBrackets(),
      indentOnInput(),
      keyHandler,
      keymap.of([
        ...defaultKeymap,
      ]),
      language(),
      linter,
      lintHandler,
      tooltipLayout,
      theme
    ];

    if (readOnly) {
      extensions.push(EditorView.editable.of(false));
    }

    this._cmEditor = new EditorView({
      state: EditorState.create({
        doc: value,
        extensions: extensions
      }),
      parent: container
    });

    return this;
  }

  /**
   * Replaces the content of the Editor
   *
   * @param {String} value
   */
  FeelEditor.prototype.setValue = function(value) {
    this._cmEditor.dispatch({
      changes: {
        from: 0,
        to: this._cmEditor.state.doc.length,
        insert: value,
      }
    });
  };

  /**
   * Sets the focus in the editor.
   */
  FeelEditor.prototype.focus = function(position) {
    const cmEditor = this._cmEditor;

    // the Codemirror `focus` method always calls `focus` with `preventScroll`,
    // so we have to focus + scroll manually
    cmEditor.contentDOM.focus();
    cmEditor.focus();

    if (typeof position === 'number') {
      const end = cmEditor.state.doc.length;
      cmEditor.dispatch({ selection: { anchor: position <= end ? position : end } });
    }
  };

  /**
   * Returns the current selection ranges. If no text is selected, a single
   * range with the start and end index at the cursor position will be returned.
   *
   * @returns {Object} selection
   * @returns {Array} selection.ranges
   */
  FeelEditor.prototype.getSelection = function() {
    return this._cmEditor.state.selection;
  };

  /**
   * Set variables to be used for autocompletion.
   * @param {Variable[]} variables
   * @returns {void}
   */
  FeelEditor.prototype.setVariables = function(variables) {
    this._cmEditor.dispatch({
      effects: autocompletionConf.reconfigure(variablesFacet$1.of(variables))
    });
  };

  /*
   *  big.js v6.2.1
   *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
   *  Copyright (c) 2022 Michael Mclaughlin
   *  https://github.com/MikeMcl/big.js/LICENCE.md
   */


  /************************************** EDITABLE DEFAULTS *****************************************/


    // The default values below must be integers within the stated ranges.

    /*
     * The maximum number of decimal places (DP) of the results of operations involving division:
     * div and sqrt, and pow with negative exponents.
     */
  var DP = 20,          // 0 to MAX_DP

    /*
     * The rounding mode (RM) used when rounding to the above decimal places.
     *
     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
     *  3  Away from zero.                                  (ROUND_UP)
     */
    RM = 1,             // 0, 1, 2 or 3

    // The maximum value of DP and Big.DP.
    MAX_DP = 1E6,       // 0 to 1000000

    // The maximum magnitude of the exponent argument to the pow method.
    MAX_POWER = 1E6,    // 1 to 1000000

    /*
     * The negative exponent (NE) at and beneath which toString returns exponential notation.
     * (JavaScript numbers: -7)
     * -1000000 is the minimum recommended exponent value of a Big.
     */
    NE = -7,            // 0 to -1000000

    /*
     * The positive exponent (PE) at and above which toString returns exponential notation.
     * (JavaScript numbers: 21)
     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
     */
    PE = 21,            // 0 to 1000000

    /*
     * When true, an error will be thrown if a primitive number is passed to the Big constructor,
     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
     * primitive number without a loss of precision.
     */
    STRICT = false,     // true or false


  /**************************************************************************************************/


    // Error messages.
    NAME = '[big.js] ',
    INVALID = NAME + 'Invalid ',
    INVALID_DP = INVALID + 'decimal places',
    INVALID_RM = INVALID + 'rounding mode',
    DIV_BY_ZERO = NAME + 'Division by zero',

    // The shared prototype object.
    P = {},
    UNDEFINED = void 0,
    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


  /*
   * Create and return a Big constructor.
   */
  function _Big_() {

    /*
     * The Big constructor and exported function.
     * Create and return a new instance of a Big number object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big(n) {
      var x = this;

      // Enable constructor usage without new.
      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

      // Duplicate.
      if (n instanceof Big) {
        x.s = n.s;
        x.e = n.e;
        x.c = n.c.slice();
      } else {
        if (typeof n !== 'string') {
          if (Big.strict === true && typeof n !== 'bigint') {
            throw TypeError(INVALID + 'value');
          }

          // Minus zero?
          n = n === 0 && 1 / n < 0 ? '-0' : String(n);
        }

        parse(x, n);
      }

      // Retain a reference to this Big constructor.
      // Shadow Big.prototype.constructor which points to Object.
      x.constructor = Big;
    }

    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.strict = STRICT;
    Big.roundDown = 0;
    Big.roundHalfUp = 1;
    Big.roundHalfEven = 2;
    Big.roundUp = 3;

    return Big;
  }


  /*
   * Parse the number or string value passed to a Big constructor.
   *
   * x {Big} A Big number instance.
   * n {number|string} A numeric value.
   */
  function parse(x, n) {
    var e, i, nl;

    if (!NUMERIC.test(n)) {
      throw Error(INVALID + 'number');
    }

    // Determine sign.
    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

    // Decimal point?
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

    // Exponential form?
    if ((i = n.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +n.slice(i + 1);
      n = n.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = n.length;
    }

    nl = n.length;

    // Determine leading zeros.
    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

    if (i == nl) {

      // Zero.
      x.c = [x.e = 0];
    } else {

      // Determine trailing zeros.
      for (; nl > 0 && n.charAt(--nl) == '0';);
      x.e = e - i - 1;
      x.c = [];

      // Convert string to array of digits without leading/trailing zeros.
      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
    }

    return x;
  }


  /*
   * Round Big x to a maximum of sd significant digits using rounding mode rm.
   *
   * x {Big} The Big to round.
   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   * [more] {boolean} Whether the result of division was truncated.
   */
  function round(x, sd, rm, more) {
    var xc = x.c;

    if (rm === UNDEFINED) rm = x.constructor.RM;
    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
      throw Error(INVALID_RM);
    }

    if (sd < 1) {
      more =
        rm === 3 && (more || !!xc[0]) || sd === 0 && (
        rm === 1 && xc[0] >= 5 ||
        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))
      );

      xc.length = 1;

      if (more) {

        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        x.e = x.e - sd + 1;
        xc[0] = 1;
      } else {

        // Zero.
        xc[0] = x.e = 0;
      }
    } else if (sd < xc.length) {

      // xc[sd] is the digit after the digit that may be rounded up.
      more =
        rm === 1 && xc[sd] >= 5 ||
        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||
        rm === 3 && (more || !!xc[0]);

      // Remove any digits after the required precision.
      xc.length = sd;

      // Round up?
      if (more) {

        // Rounding up may mean the previous digit has to be rounded up.
        for (; ++xc[--sd] > 9;) {
          xc[sd] = 0;
          if (sd === 0) {
            ++x.e;
            xc.unshift(1);
            break;
          }
        }
      }

      // Remove trailing zeros.
      for (sd = xc.length; !xc[--sd];) xc.pop();
    }

    return x;
  }


  /*
   * Return a string representing the value of Big x in normal or exponential notation.
   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
   */
  function stringify(x, doExponential, isNonzero) {
    var e = x.e,
      s = x.c.join(''),
      n = s.length;

    // Exponential notation?
    if (doExponential) {
      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

    // Normal notation.
    } else if (e < 0) {
      for (; ++e;) s = '0' + s;
      s = '0.' + s;
    } else if (e > 0) {
      if (++e > n) {
        for (e -= n; e--;) s += '0';
      } else if (e < n) {
        s = s.slice(0, e) + '.' + s.slice(e);
      }
    } else if (n > 1) {
      s = s.charAt(0) + '.' + s.slice(1);
    }

    return x.s < 0 && isNonzero ? '-' + s : s;
  }


  // Prototype/instance methods


  /*
   * Return a new Big whose value is the absolute value of this Big.
   */
  P.abs = function () {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
  };


  /*
   * Return 1 if the value of this Big is greater than the value of Big y,
   *       -1 if the value of this Big is less than the value of Big y, or
   *        0 if they have the same value.
   */
  P.cmp = function (y) {
    var isneg,
      x = this,
      xc = x.c,
      yc = (y = new x.constructor(y)).c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    isneg = i < 0;

    // Compare exponents.
    if (k != l) return k > l ^ isneg ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = -1; ++i < j;) {
      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }

    // Compare lengths.
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
  };


  /*
   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.div = function (y) {
    var x = this,
      Big = x.constructor,
      a = x.c,                  // dividend
      b = (y = new Big(y)).c,   // divisor
      k = x.s == y.s ? 1 : -1,
      dp = Big.DP;

    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }

    // Divisor is zero?
    if (!b[0]) {
      throw Error(DIV_BY_ZERO);
    }

    // Dividend is 0? Return +-0.
    if (!a[0]) {
      y.s = k;
      y.c = [y.e = 0];
      return y;
    }

    var bl, bt, n, cmp, ri,
      bz = b.slice(),
      ai = bl = b.length,
      al = a.length,
      r = a.slice(0, bl),   // remainder
      rl = r.length,
      q = y,                // quotient
      qc = q.c = [],
      qi = 0,
      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

    q.s = k;
    k = p < 0 ? 0 : p;

    // Create version of divisor with leading zero.
    bz.unshift(0);

    // Add zeros to make remainder as long as divisor.
    for (; rl++ < bl;) r.push(0);

    do {

      // n is how many times the divisor goes into current remainder.
      for (n = 0; n < 10; n++) {

        // Compare divisor and remainder.
        if (bl != (rl = r.length)) {
          cmp = bl > rl ? 1 : -1;
        } else {
          for (ri = -1, cmp = 0; ++ri < bl;) {
            if (b[ri] != r[ri]) {
              cmp = b[ri] > r[ri] ? 1 : -1;
              break;
            }
          }
        }

        // If divisor < remainder, subtract divisor from remainder.
        if (cmp < 0) {

          // Remainder can't be more than 1 digit longer than divisor.
          // Equalise lengths using divisor with extra leading zero?
          for (bt = rl == bl ? b : bz; rl;) {
            if (r[--rl] < bt[rl]) {
              ri = rl;
              for (; ri && !r[--ri];) r[ri] = 9;
              --r[ri];
              r[rl] += 10;
            }
            r[rl] -= bt[rl];
          }

          for (; !r[0];) r.shift();
        } else {
          break;
        }
      }

      // Add the digit n to the result array.
      qc[qi++] = cmp ? n : ++n;

      // Update the remainder.
      if (r[0] && cmp) r[rl] = a[ai] || 0;
      else r = [a[ai]];

    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

    // Leading zero? Do not remove if result is simply zero (qi == 1).
    if (!qc[0] && qi != 1) {

      // There can't be more than one zero.
      qc.shift();
      q.e--;
      p--;
    }

    // Round?
    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);

    return q;
  };


  /*
   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
   */
  P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return true if the value of this Big is greater than the value of Big y, otherwise return
   * false.
   */
  P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
   * return false.
   */
  P.gte = function (y) {
    return this.cmp(y) > -1;
  };


  /*
   * Return true if the value of this Big is less than the value of Big y, otherwise return false.
   */
  P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
   * return false.
   */
  P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return a new Big whose value is the value of this Big minus the value of Big y.
   */
  P.minus = P.sub = function (y) {
    var i, j, t, xlty,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xc = x.c.slice(),
      xe = x.e,
      yc = y.c,
      ye = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (yc[0]) {
        y.s = -b;
      } else if (xc[0]) {
        y = new Big(x);
      } else {
        y.s = 1;
      }
      return y;
    }

    // Determine which is the bigger number. Prepend zeros to equalise exponents.
    if (a = xe - ye) {

      if (xlty = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();
      for (b = a; b--;) t.push(0);
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = ((xlty = xc.length < yc.length) ? xc : yc).length;

      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xlty = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xlty) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }

    /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
     * needs to start at yc.length.
     */
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

    // Subtract yc from xc.
    for (b = i; j > a;) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i];) xc[i] = 9;
        --xc[i];
        xc[j] += 10;
      }

      xc[j] -= yc[j];
    }

    // Remove trailing zeros.
    for (; xc[--b] === 0;) xc.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] === 0;) {
      xc.shift();
      --ye;
    }

    if (!xc[0]) {

      // n - n = +0
      y.s = 1;

      // Result must be zero.
      xc = [ye = 0];
    }

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a new Big whose value is the value of this Big modulo the value of Big y.
   */
  P.mod = function (y) {
    var ygtx,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    if (!y.c[0]) {
      throw Error(DIV_BY_ZERO);
    }

    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;

    if (ygtx) return new Big(x);

    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;

    return this.minus(x.times(y));
  };


  /*
   * Return a new Big whose value is the value of this Big negated.
   */
  P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return x;
  };


  /*
   * Return a new Big whose value is the value of this Big plus the value of Big y.
   */
  P.plus = P.add = function (y) {
    var e, k, t,
      x = this,
      Big = x.constructor;

    y = new Big(y);

    // Signs differ?
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    var xe = x.e,
      xc = x.c,
      ye = y.e,
      yc = y.c;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (!yc[0]) {
        if (xc[0]) {
          y = new Big(x);
        } else {
          y.s = x.s;
        }
      }
      return y;
    }

    xc = xc.slice();

    // Prepend zeros to equalise exponents.
    // Note: reverse faster than unshifts.
    if (e = xe - ye) {
      if (e > 0) {
        ye = xe;
        t = yc;
      } else {
        e = -e;
        t = xc;
      }

      t.reverse();
      for (; e--;) t.push(0);
      t.reverse();
    }

    // Point xc to the longer array.
    if (xc.length - yc.length < 0) {
      t = yc;
      yc = xc;
      xc = t;
    }

    e = yc.length;

    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0

    if (k) {
      xc.unshift(k);
      ++ye;
    }

    // Remove trailing zeros.
    for (e = xc.length; xc[--e] === 0;) xc.pop();

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a Big whose value is the value of this Big raised to the power n.
   * If n is negative, round to a maximum of Big.DP decimal places using rounding
   * mode Big.RM.
   *
   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
   */
  P.pow = function (n) {
    var x = this,
      one = new x.constructor('1'),
      y = one,
      isneg = n < 0;

    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
      throw Error(INVALID + 'exponent');
    }

    if (isneg) n = -n;

    for (;;) {
      if (n & 1) y = y.times(x);
      n >>= 1;
      if (!n) break;
      x = x.times(x);
    }

    return isneg ? one.div(y) : y;
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
   * significant digits using rounding mode rm, or Big.RM if rm is not specified.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.prec = function (sd, rm) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + 'precision');
    }
    return round(new this.constructor(this), sd, rm);
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
   * using rounding mode rm, or Big.RM if rm is not specified.
   * If dp is negative, round to an integer which is a multiple of 10**-dp.
   * If dp is not specified, round to 0 decimal places.
   *
   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.round = function (dp, rm) {
    if (dp === UNDEFINED) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    return round(new this.constructor(this), dp + this.e + 1, rm);
  };


  /*
   * Return a new Big whose value is the square root of the value of this Big, rounded, if
   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.sqrt = function () {
    var r, c, t,
      x = this,
      Big = x.constructor,
      s = x.s,
      e = x.e,
      half = new Big('0.5');

    // Zero?
    if (!x.c[0]) return new Big(x);

    // Negative?
    if (s < 0) {
      throw Error(NAME + 'No square root');
    }

    // Estimate.
    s = Math.sqrt(x + '');

    // Math.sqrt underflow/overflow?
    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
    if (s === 0 || s === 1 / 0) {
      c = x.c.join('');
      if (!(c.length + e & 1)) c += '0';
      s = Math.sqrt(c);
      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else {
      r = new Big(s + '');
    }

    e = r.e + (Big.DP += 4);

    // Newton-Raphson iteration.
    do {
      t = r;
      r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
  };


  /*
   * Return a new Big whose value is the value of this Big times the value of Big y.
   */
  P.times = P.mul = function (y) {
    var c,
      x = this,
      Big = x.constructor,
      xc = x.c,
      yc = (y = new Big(y)).c,
      a = xc.length,
      b = yc.length,
      i = x.e,
      j = y.e;

    // Determine sign of result.
    y.s = x.s == y.s ? 1 : -1;

    // Return signed 0 if either 0.
    if (!xc[0] || !yc[0]) {
      y.c = [y.e = 0];
      return y;
    }

    // Initialise exponent of result as x.e + y.e.
    y.e = i + j;

    // If array xc has fewer digits than yc, swap xc and yc, and lengths.
    if (a < b) {
      c = xc;
      xc = yc;
      yc = c;
      j = a;
      a = b;
      b = j;
    }

    // Initialise coefficient array of result with zeros.
    for (c = new Array(j = a + b); j--;) c[j] = 0;

    // Multiply.

    // i is initially xc.length.
    for (i = b; i--;) {
      b = 0;

      // a is yc.length.
      for (j = a + i; j > i;) {

        // Current sum of products at this digit position, plus carry.
        b = c[j] + yc[i] * xc[j - i - 1] + b;
        c[j--] = b % 10;

        // carry
        b = b / 10 | 0;
      }

      c[j] = b;
    }

    // Increment result exponent if there is a final carry, otherwise remove leading zero.
    if (b) ++y.e;
    else c.shift();

    // Remove trailing zeros.
    for (i = c.length; !c[--i];) c.pop();
    y.c = c;

    return y;
  };


  /*
   * Return a string representing the value of this Big in exponential notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.toExponential = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      x = round(new x.constructor(x), ++dp, rm);
      for (; x.c.length < dp;) x.c.push(0);
    }

    return stringify(x, true, !!n);
  };


  /*
   * Return a string representing the value of this Big in normal notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   */
  P.toFixed = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      x = round(new x.constructor(x), dp + x.e + 1, rm);

      // x.e may have changed if the value is rounded up.
      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
    }

    return stringify(x, false, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Omit the sign for negative zero.
   */
  P[Symbol.for('nodejs.util.inspect.custom')] = P.toJSON = P.toString = function () {
    var x = this,
      Big = x.constructor;
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
  };


  /*
   * Return the value of this Big as a primitve number.
   */
  P.toNumber = function () {
    var n = Number(stringify(this, true, true));
    if (this.constructor.strict === true && !this.eq(n.toString())) {
      throw Error(NAME + 'Imprecise conversion');
    }
    return n;
  };


  /*
   * Return a string representing the value of this Big rounded to sd significant digits using
   * rounding mode rm, or Big.RM if rm is not specified.
   * Use exponential notation if sd is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.toPrecision = function (sd, rm) {
    var x = this,
      Big = x.constructor,
      n = x.c[0];

    if (sd !== UNDEFINED) {
      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
        throw Error(INVALID + 'precision');
      }
      x = round(new Big(x), sd, rm);
      for (; x.c.length < sd;) x.c.push(0);
    }

    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Include the sign for negative zero.
   */
  P.valueOf = function () {
    var x = this,
      Big = x.constructor;
    if (Big.strict === true) {
      throw Error(NAME + 'valueOf disallowed');
    }
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
  };


  // Export


  var Big = _Big_();

  var FN_REF = '__fn';
  var DEFAULT_PRIORITY$2 = 1000;
  var slice = Array.prototype.slice;

  /**
   * A general purpose event bus.
   *
   * This component is used to communicate across a diagram instance.
   * Other parts of a diagram can use it to listen to and broadcast events.
   *
   *
   * ## Registering for Events
   *
   * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
   * methods to register for events. {@link EventBus#off} can be used to
   * remove event registrations. Listeners receive an instance of {@link Event}
   * as the first argument. It allows them to hook into the event execution.
   *
   * ```javascript
   *
   * // listen for event
   * eventBus.on('foo', function(event) {
   *
   *   // access event type
   *   event.type; // 'foo'
   *
   *   // stop propagation to other listeners
   *   event.stopPropagation();
   *
   *   // prevent event default
   *   event.preventDefault();
   * });
   *
   * // listen for event with custom payload
   * eventBus.on('bar', function(event, payload) {
   *   console.log(payload);
   * });
   *
   * // listen for event returning value
   * eventBus.on('foobar', function(event) {
   *
   *   // stop event propagation + prevent default
   *   return false;
   *
   *   // stop event propagation + return custom result
   *   return {
   *     complex: 'listening result'
   *   };
   * });
   *
   *
   * // listen with custom priority (default=1000, higher is better)
   * eventBus.on('priorityfoo', 1500, function(event) {
   *   console.log('invoked first!');
   * });
   *
   *
   * // listen for event and pass the context (`this`)
   * eventBus.on('foobar', function(event) {
   *   this.foo();
   * }, this);
   * ```
   *
   *
   * ## Emitting Events
   *
   * Events can be emitted via the event bus using {@link EventBus#fire}.
   *
   * ```javascript
   *
   * // false indicates that the default action
   * // was prevented by listeners
   * if (eventBus.fire('foo') === false) {
   *   console.log('default has been prevented!');
   * };
   *
   *
   * // custom args + return value listener
   * eventBus.on('sum', function(event, a, b) {
   *   return a + b;
   * });
   *
   * // you can pass custom arguments + retrieve result values.
   * var sum = eventBus.fire('sum', 1, 2);
   * console.log(sum); // 3
   * ```
   */
  function EventBus() {
    this._listeners = {};

    // cleanup on destroy on lowest priority to allow
    // message passing until the bitter end
    this.on('diagram.destroy', 1, this._destroy, this);
  }

  /**
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @param {string|Array<string>} events
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus.prototype.on = function (events, priority, callback, that) {
    events = isArray(events) ? events : [events];
    if (isFunction(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$2;
    }
    if (!isNumber(priority)) {
      throw new Error('priority must be a number');
    }
    var actualCallback = callback;
    if (that) {
      actualCallback = bind(callback, that);

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      actualCallback[FN_REF] = callback[FN_REF] || callback;
    }
    var self = this;
    events.forEach(function (e) {
      self._addListener(e, {
        priority: priority,
        callback: actualCallback,
        next: null
      });
    });
  };

  /**
   * Register an event listener that is executed only once.
   *
   * @param {string} event the event name to register for
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback the callback to execute
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus.prototype.once = function (event, priority, callback, that) {
    var self = this;
    if (isFunction(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$2;
    }
    if (!isNumber(priority)) {
      throw new Error('priority must be a number');
    }
    function wrappedCallback() {
      wrappedCallback.__isTomb = true;
      var result = callback.apply(that, arguments);
      self.off(event, wrappedCallback);
      return result;
    }

    // make sure we remember and are able to remove
    // bound callbacks via {@link #off} using the original
    // callback
    wrappedCallback[FN_REF] = callback;
    this.on(event, priority, wrappedCallback);
  };

  /**
   * Removes event listeners by event and callback.
   *
   * If no callback is given, all listeners for a given event name are being removed.
   *
   * @param {string|Array<string>} events
   * @param {Function} [callback]
   */
  EventBus.prototype.off = function (events, callback) {
    events = isArray(events) ? events : [events];
    var self = this;
    events.forEach(function (event) {
      self._removeListener(event, callback);
    });
  };

  /**
   * Create an EventBus event.
   *
   * @param {Object} data
   *
   * @return {Object} event, recognized by the eventBus
   */
  EventBus.prototype.createEvent = function (data) {
    var event = new InternalEvent();
    event.init(data);
    return event;
  };

  /**
   * Fires a named event.
   *
   * @example
   *
   * // fire event by name
   * events.fire('foo');
   *
   * // fire event object with nested type
   * var event = { type: 'foo' };
   * events.fire(event);
   *
   * // fire event with explicit type
   * var event = { x: 10, y: 20 };
   * events.fire('element.moved', event);
   *
   * // pass additional arguments to the event
   * events.on('foo', function(event, bar) {
   *   alert(bar);
   * });
   *
   * events.fire({ type: 'foo' }, 'I am bar!');
   *
   * @param {string} [name] the optional event name
   * @param {Object} [event] the event object
   * @param {...Object} additional arguments to be passed to the callback functions
   *
   * @return {boolean} the events return value, if specified or false if the
   *                   default action was prevented by listeners
   */
  EventBus.prototype.fire = function (type, data) {
    var event, firstListener, returnValue, args;
    args = slice.call(arguments);
    if (typeof type === 'object') {
      data = type;
      type = data.type;
    }
    if (!type) {
      throw new Error('no event type specified');
    }
    firstListener = this._listeners[type];
    if (!firstListener) {
      return;
    }

    // we make sure we fire instances of our home made
    // events here. We wrap them only once, though
    if (data instanceof InternalEvent) {
      // we are fine, we alread have an event
      event = data;
    } else {
      event = this.createEvent(data);
    }

    // ensure we pass the event as the first parameter
    args[0] = event;

    // original event type (in case we delegate)
    var originalType = event.type;

    // update event type before delegation
    if (type !== originalType) {
      event.type = type;
    }
    try {
      returnValue = this._invokeListeners(event, args, firstListener);
    } finally {
      // reset event type after delegation
      if (type !== originalType) {
        event.type = originalType;
      }
    }

    // set the return value to false if the event default
    // got prevented and no other return value exists
    if (returnValue === undefined && event.defaultPrevented) {
      returnValue = false;
    }
    return returnValue;
  };
  EventBus.prototype.handleError = function (error) {
    return this.fire('error', {
      error: error
    }) === false;
  };
  EventBus.prototype._destroy = function () {
    this._listeners = {};
  };
  EventBus.prototype._invokeListeners = function (event, args, listener) {
    var returnValue;
    while (listener) {
      // handle stopped propagation
      if (event.cancelBubble) {
        break;
      }
      returnValue = this._invokeListener(event, args, listener);
      listener = listener.next;
    }
    return returnValue;
  };
  EventBus.prototype._invokeListener = function (event, args, listener) {
    var returnValue;
    if (listener.callback.__isTomb) {
      return returnValue;
    }
    try {
      // returning false prevents the default action
      returnValue = invokeFunction(listener.callback, args);

      // stop propagation on return value
      if (returnValue !== undefined) {
        event.returnValue = returnValue;
        event.stopPropagation();
      }

      // prevent default on return false
      if (returnValue === false) {
        event.preventDefault();
      }
    } catch (error) {
      if (!this.handleError(error)) {
        console.error('unhandled error in event listener', error);
        throw error;
      }
    }
    return returnValue;
  };

  /*
   * Add new listener with a certain priority to the list
   * of listeners (for the given event).
   *
   * The semantics of listener registration / listener execution are
   * first register, first serve: New listeners will always be inserted
   * after existing listeners with the same priority.
   *
   * Example: Inserting two listeners with priority 1000 and 1300
   *
   *    * before: [ 1500, 1500, 1000, 1000 ]
   *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
   *
   * @param {string} event
   * @param {Object} listener { priority, callback }
   */
  EventBus.prototype._addListener = function (event, newListener) {
    var listener = this._getListeners(event),
      previousListener;

    // no prior listeners
    if (!listener) {
      this._setListeners(event, newListener);
      return;
    }

    // ensure we order listeners by priority from
    // 0 (high) to n > 0 (low)
    while (listener) {
      if (listener.priority < newListener.priority) {
        newListener.next = listener;
        if (previousListener) {
          previousListener.next = newListener;
        } else {
          this._setListeners(event, newListener);
        }
        return;
      }
      previousListener = listener;
      listener = listener.next;
    }

    // add new listener to back
    previousListener.next = newListener;
  };
  EventBus.prototype._getListeners = function (name) {
    return this._listeners[name];
  };
  EventBus.prototype._setListeners = function (name, listener) {
    this._listeners[name] = listener;
  };
  EventBus.prototype._removeListener = function (event, callback) {
    var listener = this._getListeners(event),
      nextListener,
      previousListener,
      listenerCallback;
    if (!callback) {
      // clear listeners
      this._setListeners(event, null);
      return;
    }
    while (listener) {
      nextListener = listener.next;
      listenerCallback = listener.callback;
      if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
        if (previousListener) {
          previousListener.next = nextListener;
        } else {
          // new first listener
          this._setListeners(event, nextListener);
        }
      }
      previousListener = listener;
      listener = nextListener;
    }
  };

  /**
   * A event that is emitted via the event bus.
   */
  function InternalEvent() {}
  InternalEvent.prototype.stopPropagation = function () {
    this.cancelBubble = true;
  };
  InternalEvent.prototype.preventDefault = function () {
    this.defaultPrevented = true;
  };
  InternalEvent.prototype.init = function (data) {
    assign(this, data || {});
  };

  /**
   * Invoke function. Be fast...
   *
   * @param {Function} fn
   * @param {Array<Object>} args
   *
   * @return {Any}
   */
  function invokeFunction(fn, args) {
    return fn.apply(null, args);
  }

  /**
   * A factory to create a configurable debouncer.
   *
   * @param {number|boolean} [config=true]
   */
  function DebounceFactory(config = true) {
    const timeout = typeof config === 'number' ? config : config ? 300 : 0;
    if (timeout) {
      return fn => debounce$2(fn, timeout);
    } else {
      return fn => fn;
    }
  }
  DebounceFactory.$inject = ['config.debounce'];

  class FieldFactory {
    /**
     * @constructor
     *
     * @param { import('./FormFieldRegistry').default } formFieldRegistry
     * @param { import('@bpmn-io/form-js-viewer').FormFields } formFields
     */
    constructor(formFieldRegistry, formFields) {
      this._formFieldRegistry = formFieldRegistry;
      this._formFields = formFields;
    }
    create(attrs, applyDefaults = true) {
      const {
        id,
        key,
        type
      } = attrs;
      const fieldDefinition = this._formFields.get(type);
      if (!fieldDefinition) {
        throw new Error(`form field of type <${type}> not supported`);
      }
      if (id && this._formFieldRegistry._ids.assigned(id)) {
        throw new Error(`ID <${id}> already assigned`);
      }
      if (key && this._formFieldRegistry._keys.assigned(key)) {
        throw new Error(`key <${key}> already assigned`);
      }
      const labelAttrs = applyDefaults && fieldDefinition.label ? {
        label: fieldDefinition.label
      } : {};
      const field = fieldDefinition.create({
        ...labelAttrs,
        ...attrs
      });
      this._ensureId(field);
      if (fieldDefinition.keyed) {
        this._ensureKey(field, applyDefaults);
      }
      return field;
    }
    _ensureId(field) {
      if (field.id) {
        this._formFieldRegistry._ids.claim(field.id, field);
        return;
      }
      let prefix = 'Field';
      if (field.type === 'default') {
        prefix = 'Form';
      }
      field.id = this._formFieldRegistry._ids.nextPrefixed(`${prefix}_`, field);
    }
    _ensureKey(field, applyDefaults) {
      if (field.key) {
        this._formFieldRegistry._keys.claim(field.key, field);
        return;
      }
      if (applyDefaults) {
        let prefix = 'field';
        field.key = this._formFieldRegistry._keys.nextPrefixed(`${prefix}_`, field);
      }
    }
  }
  FieldFactory.$inject = ['formFieldRegistry', 'formFields'];

  class FormFieldRegistry extends FormFieldRegistry$1 {
    /**
     * Updates a form fields id.
     *
     * @param {Object} formField
     * @param {string} newId
     */
    updateId(formField, newId) {
      this._validateId(newId);
      this._eventBus.fire('formField.updateId', {
        formField,
        newId: newId
      });
      this.remove(formField);
      formField.id = newId;
      this.add(formField);

      // TODO(nikku): make this a proper object graph so we
      // do not have to deal with IDs this way...
      if ('components' in formField) {
        for (const component of formField.components) {
          component._parent = newId;
        }
      }
    }

    /**
     * Validate the suitability of the given id and signals a problem
     * with an exception.
     *
     * @param {string} id
     *
     * @throws {Error} if id is empty or already assigned
     */
    _validateId(id) {
      if (!id) {
        throw new Error('formField must have an id');
      }
      if (this.get(id)) {
        throw new Error('formField with id ' + id + ' already added');
      }
    }
  }

  class Importer {
    /**
     * @constructor
     * @param { import('../core/FormFieldRegistry').default } formFieldRegistry
     * @param { import('../core/FieldFactory').default } fieldFactory
     */
    constructor(formFieldRegistry, fieldFactory) {
      this._formFieldRegistry = formFieldRegistry;
      this._fieldFactory = fieldFactory;
    }

    /**
     * Import schema creating fields, attaching additional
     * information to each field and adding fields to the
     * field registry.
     *
     * Additional information attached:
     *
     *   * `id` (unless present)
     *   * `_parent`
     *   * `_path`
     *
     * @param {any} schema
     *
     * @typedef {{ warnings: Error[], schema: any }} ImportResult
     * @returns {ImportResult}
     */
    importSchema(schema) {
      // TODO: Add warnings
      const warnings = [];
      try {
        const importedSchema = this.importFormField(clone(schema));
        return {
          schema: importedSchema,
          warnings
        };
      } catch (err) {
        err.warnings = warnings;
        throw err;
      }
    }

    /**
     * @param {{[x: string]: any}} fieldAttrs
     * @param {String} [parentId]
     * @param {number} [index]
     *
     * @return {any} field
     */
    importFormField(fieldAttrs, parentId, index) {
      const {
        components,
        id,
        key
      } = fieldAttrs;
      let parent, path;
      if (parentId) {
        parent = this._formFieldRegistry.get(parentId);
      }

      // validate <id> uniqueness
      if (id && this._formFieldRegistry._ids.assigned(id)) {
        throw new Error(`form field with id <${id}> already exists`);
      }

      // validate <key> uniqueness
      if (key && this._formFieldRegistry._keys.assigned(key)) {
        throw new Error(`form field with key <${key}> already exists`);
      }

      // set form field path
      path = parent ? [...parent._path, 'components', index] : [];
      const field = this._fieldFactory.create({
        ...fieldAttrs,
        _path: path,
        _parent: parent && parent.id
      }, false);
      this._formFieldRegistry.add(field);
      if (components) {
        field.components = this.importFormFields(components, field.id);
      }
      return field;
    }

    /**
     * @param {Array<any>} components
     * @param {string} parentId
     *
     * @return {Array<any>} imported components
     */
    importFormFields(components, parentId) {
      return components.map((component, index) => {
        return this.importFormField(component, parentId, index);
      });
    }
  }
  Importer.$inject = ['formFieldRegistry', 'fieldFactory'];

  var importModule = {
    importer: ['type', Importer]
  };

  function editorFormFieldClasses(type, {
    disabled = false
  } = {}) {
    if (!type) {
      throw new Error('type required');
    }
    return classNames('fjs-form-field', `fjs-form-field-${type}`, {
      'fjs-disabled': disabled
    });
  }

  function _extends$2() { _extends$2 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
  var CloseIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$2({
    width: "16",
    height: "16",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8 12 4.7z"
  })));

  function _extends$1() { _extends$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }
  var SearchIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$1({
    width: "15",
    height: "15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M14.5 13.793l-3.776-3.776a5.508 5.508 0 10-.707.707l3.776 3.776.707-.707zM2 6.5a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0z",
    fill: "currentColor"
  })));

  function EditorText(props) {
    const {
      type,
      text = ''
    } = props.field;
    const Icon = iconsByType('text');
    if (!text) {
      return e$1("div", {
        class: editorFormFieldClasses(type),
        children: e$1("div", {
          class: "fjs-form-field-placeholder",
          children: [e$1(Icon, {
            viewBox: "0 0 54 54"
          }), "Text view is empty"]
        })
      });
    }
    if (isExpression$1(text)) {
      return e$1("div", {
        class: editorFormFieldClasses(type),
        children: e$1("div", {
          class: "fjs-form-field-placeholder",
          children: [e$1(Icon, {
            viewBox: "0 0 54 54"
          }), "Text view is populated by an expression"]
        })
      });
    }
    return e$1(Text$2, {
      ...props,
      disableLinks: true
    });
  }
  EditorText.create = Text$2.create;
  EditorText.type = Text$2.type;
  EditorText.keyed = Text$2.keyed;

  const editorFormFields = [EditorText];

  class EditorFormFields extends FormFields {
    constructor() {
      super();
      editorFormFields.forEach(formField => {
        this.register(formField.type, formField);
      });
    }
  }

  const DragAndDropContext = D$1({
    drake: null
  });
  var DragAndDropContext$1 = DragAndDropContext;

  /**
   * @param {string} type
   * @param {boolean} [strict]
   *
   * @returns {any}
   */
  function getService$1(type, strict) {}
  const FormEditorContext = D$1({
    getService: getService$1
  });
  var FormEditorContext$1 = FormEditorContext;

  function useService$1 (type, strict) {
    const {
      getService
    } = F$1(FormEditorContext$1);
    return getService(type, strict);
  }

  function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
  var ListDeleteIcon = (({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: "11",
    height: "14"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M10 4v8c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2V4h9zM8 6H3v4.8c0 .66.5 1.2 1.111 1.2H6.89C7.5 12 8 11.46 8 10.8V6zm3-5H8.5l-1-1h-4l-1 1H0v1.5h11V1z"
  })));

  const PALETTE_ENTRIES = formFields.filter(f => f.type !== 'default').map(f => {
    return {
      label: f.label,
      type: f.type,
      group: f.group
    };
  });
  const PALETTE_GROUPS = [{
    label: 'Basic input',
    id: 'basic-input'
  }, {
    label: 'Selection',
    id: 'selection'
  }, {
    label: 'Presentation',
    id: 'presentation'
  }, {
    label: 'Action',
    id: 'action'
  }];
  function Palette(props) {
    const [entries, setEntries] = l$2(PALETTE_ENTRIES);
    const [searchTerm, setSearchTerm] = l$2('');
    const inputRef = s$1();
    const groups = groupEntries(entries);

    // filter entries on search change
    y(() => {
      const filter = entry => {
        if (!searchTerm) {
          return true;
        }
        const search = entry.label.toLowerCase();
        return searchTerm.toLowerCase().split(/\s/g).every(term => search.includes(term));
      };
      const entries = PALETTE_ENTRIES.filter(filter);
      setEntries(entries);
    }, [searchTerm]);
    const handleInput = A$1(event => {
      setSearchTerm(() => event.target.value);
    }, [setSearchTerm]);
    const handleClear = A$1(event => {
      setSearchTerm('');
      inputRef.current.focus();
    }, [inputRef, setSearchTerm]);
    return e$1("div", {
      class: "fjs-palette",
      children: [e$1("div", {
        class: "fjs-palette-header",
        title: "Components",
        children: "Components"
      }), e$1("div", {
        class: "fjs-palette-search-container",
        children: [e$1("span", {
          class: "fjs-palette-search-icon",
          children: e$1(SearchIcon, {})
        }), e$1("input", {
          class: "fjs-palette-search",
          ref: inputRef,
          type: "text",
          placeholder: "Search components",
          value: searchTerm,
          onInput: handleInput
        }), searchTerm && e$1("button", {
          title: "Clear content",
          class: "fjs-palette-search-clear",
          onClick: handleClear,
          children: e$1(CloseIcon, {})
        })]
      }), e$1("div", {
        class: "fjs-palette-entries",
        children: [groups.map(({
          label,
          entries,
          id
        }) => e$1("div", {
          class: "fjs-palette-group",
          "data-group-id": id,
          children: [e$1("span", {
            class: "fjs-palette-group-title",
            children: label
          }), e$1("div", {
            class: "fjs-palette-fields fjs-drag-container fjs-no-drop",
            children: entries.map(({
              label,
              type
            }) => {
              const Icon = iconsByType(type);
              return e$1("div", {
                class: "fjs-palette-field fjs-drag-copy fjs-no-drop",
                "data-field-type": type,
                title: `Create ${getIndefiniteArticle(type)} ${label} element`,
                children: [Icon ? e$1(Icon, {
                  class: "fjs-palette-field-icon",
                  width: "36",
                  height: "36",
                  viewBox: "0 0 54 54"
                }) : null, e$1("span", {
                  class: "fjs-palette-field-text",
                  children: label
                })]
              });
            })
          })]
        })), groups.length == 0 && e$1("div", {
          class: "fjs-palette-no-entries",
          children: "No components found."
        })]
      })]
    });
  }

  // helpers ///////

  function groupEntries(entries) {
    const groups = PALETTE_GROUPS.map(group => {
      return {
        ...group,
        entries: []
      };
    });
    const getGroup = id => groups.find(group => id === group.id);
    entries.forEach(entry => {
      const {
        group
      } = entry;
      getGroup(group).entries.push(entry);
    });
    return groups.filter(g => g.entries.length);
  }
  function getIndefiniteArticle(type) {
    if (['image'].includes(type)) {
      return 'an';
    }
    return 'a';
  }

  const CURSOR_CLS_PATTERN = /^fjs-cursor-.*$/;
  function set(mode) {
    const classes$1 = classes(document.body);
    classes$1.removeMatching(CURSOR_CLS_PATTERN);
    if (mode) {
      classes$1.add('fjs-cursor-' + mode);
    }
  }
  function unset() {
    set(null);
  }

  function ContextPad(props) {
    if (!props.children) {
      return null;
    }
    return e$1("div", {
      class: "fjs-context-pad",
      children: props.children
    });
  }
  function Empty(props) {
    return null;
  }
  function Element$1(props) {
    const eventBus = useService$1('eventBus'),
      formEditor = useService$1('formEditor'),
      formFieldRegistry = useService$1('formFieldRegistry'),
      modeling = useService$1('modeling'),
      selection = useService$1('selection');
    const {
      field
    } = props;
    const {
      id,
      type
    } = field;
    const ref = s$1();
    function scrollIntoView({
      selection
    }) {
      if (!selection || selection.id !== id || !ref.current) {
        return;
      }
      const elementBounds = ref.current.getBoundingClientRect(),
        containerBounds = formEditor._container.getBoundingClientRect();
      if (elementBounds.top < 0 || elementBounds.top > containerBounds.bottom) {
        ref.current.scrollIntoView();
      }
    }
    y(() => {
      eventBus.on('selection.changed', scrollIntoView);
      return () => eventBus.off('selection.changed', scrollIntoView);
    }, [id]);
    function onClick(event) {
      event.stopPropagation();
      selection.toggle(field);
    }
    const classes = ['fjs-element'];
    if (props.class) {
      classes.push(...props.class.split(' '));
    }
    if (selection.isSelected(field)) {
      classes.push('fjs-editor-selected');
    }
    const onRemove = event => {
      event.stopPropagation();
      const parentField = formFieldRegistry.get(field._parent);
      const index = getFormFieldIndex(parentField, field);
      modeling.removeFormField(field, parentField, index);
    };
    return e$1("div", {
      class: classes.join(' '),
      "data-id": id,
      "data-field-type": type,
      onClick: onClick,
      ref: ref,
      children: [e$1(ContextPad, {
        children: selection.isSelected(field) && field.type !== 'default' ? e$1("button", {
          class: "fjs-context-pad-item",
          onClick: onRemove,
          children: e$1(ListDeleteIcon, {})
        }) : null
      }), props.children]
    });
  }
  function Children(props) {
    const {
      field
    } = props;
    const {
      id
    } = field;
    const classes = ['fjs-children', 'fjs-drag-container'];
    if (props.class) {
      classes.push(...props.class.split(' '));
    }
    return e$1("div", {
      class: classes.join(' '),
      "data-id": id,
      children: props.children
    });
  }
  function FormEditor$1(props) {
    const eventBus = useService$1('eventBus'),
      formEditor = useService$1('formEditor'),
      formFieldRegistry = useService$1('formFieldRegistry'),
      injector = useService$1('injector'),
      modeling = useService$1('modeling'),
      selection = useService$1('selection'),
      palette = useService$1('palette'),
      paletteConfig = useService$1('config.palette'),
      propertiesPanel = useService$1('propertiesPanel'),
      propertiesPanelConfig = useService$1('config.propertiesPanel');
    const {
      schema
    } = formEditor._getState();
    const paletteRef = s$1(null);
    const propertiesPanelRef = s$1(null);
    const [, setSelection] = l$2(schema);
    y(() => {
      function handleSelectionChanged(event) {
        setSelection(event.selection || schema);
      }
      eventBus.on('selection.changed', handleSelectionChanged);
      setSelection(selection.get() || schema);
      return () => {
        eventBus.off('selection.changed', handleSelectionChanged);
      };
    }, [schema, selection]);
    const [drake, setDrake] = l$2(null);
    const dragAndDropContext = {
      drake
    };
    y(() => {
      const handleDragEvent = (type, context) => {
        return eventBus.fire(type, context);
      };
      const createDragulaInstance = () => {
        const dragulaInstance = dragula_1({
          isContainer(el) {
            return el.classList.contains('fjs-drag-container');
          },
          copy(el) {
            return el.classList.contains('fjs-drag-copy');
          },
          accepts(el, target) {
            return !target.classList.contains('fjs-no-drop');
          },
          slideFactorX: 10,
          slideFactorY: 5
        });

        // bind life cycle events
        dragulaInstance.on('drag', (element, source) => {
          handleDragEvent('drag.start', {
            element,
            source
          });
        });
        dragulaInstance.on('dragend', element => {
          handleDragEvent('drag.end', {
            element
          });
        });
        dragulaInstance.on('drop', (element, target, source, sibling) => {
          handleDragEvent('drag.drop', {
            element,
            target,
            source,
            sibling
          });
        });
        dragulaInstance.on('over', (element, container, source) => {
          handleDragEvent('drag.hover', {
            element,
            container,
            source
          });
        });
        dragulaInstance.on('out', (element, container, source) => {
          handleDragEvent('drag.out', {
            element,
            container,
            source
          });
        });
        dragulaInstance.on('cancel', (element, container, source) => {
          handleDragEvent('drag.cancel', {
            element,
            container,
            source
          });
        });

        // set custom styling
        dragulaInstance.on('drag', () => {
          set('grabbing');
        });
        dragulaInstance.on('dragend', () => {
          unset();
        });
        dragulaInstance.on('drop', (el, target, source, sibling) => {
          dragulaInstance.remove();
          if (!target) {
            return;
          }
          const targetFormField = formFieldRegistry.get(target.dataset.id);
          const siblingFormField = sibling && formFieldRegistry.get(sibling.dataset.id),
            targetIndex = siblingFormField ? getFormFieldIndex(targetFormField, siblingFormField) : targetFormField.components.length;
          if (source.classList.contains('fjs-palette-fields')) {
            const type = el.dataset.fieldType;
            modeling.addFormField({
              type
            }, targetFormField, targetIndex);
          } else {
            const formField = formFieldRegistry.get(el.dataset.id),
              sourceFormField = formFieldRegistry.get(source.dataset.id),
              sourceIndex = getFormFieldIndex(sourceFormField, formField);
            modeling.moveFormField(formField, sourceFormField, targetFormField, sourceIndex, targetIndex);
          }
        });
        eventBus.fire('dragula.created');
        setDrake(dragulaInstance);
        return dragulaInstance;
      };
      let dragulaInstance = createDragulaInstance();
      const onDetach = () => {
        if (dragulaInstance) {
          dragulaInstance.destroy();
          eventBus.fire('dragula.destroyed');
        }
      };
      const onAttach = () => {
        onDetach();
        dragulaInstance = createDragulaInstance();
      };
      eventBus.on('attach', onAttach);
      eventBus.on('detach', onDetach);
      return () => {
        onDetach();
        eventBus.off('attach', onAttach);
        eventBus.off('detach', onDetach);
      };
    }, []);

    // fire event after render to notify interested parties
    y(() => {
      eventBus.fire('formEditor.rendered');
    }, []);
    const formRenderContext = {
      Children,
      Element: Element$1,
      Empty
    };
    const formContext = {
      getService(type, strict = true) {
        // TODO(philippfromme): clean up
        if (type === 'form') {
          return {
            _getState() {
              return {
                data: {},
                errors: {},
                properties: {
                  readOnly: true
                },
                schema
              };
            }
          };
        }
        return injector.get(type, strict);
      },
      formId: formEditor._id
    };
    const onSubmit = A$1(() => {}, []);
    const onReset = A$1(() => {}, []);

    // attach default palette
    const hasDefaultPalette = defaultPalette(paletteConfig);
    y(() => {
      if (hasDefaultPalette) {
        palette.attachTo(paletteRef.current);
      }
    }, [palette, paletteRef, hasDefaultPalette]);

    // attach default properties panel
    const hasDefaultPropertiesPanel = defaultPropertiesPanel(propertiesPanelConfig);
    y(() => {
      if (hasDefaultPropertiesPanel) {
        propertiesPanel.attachTo(propertiesPanelRef.current);
      }
    }, [propertiesPanelRef, propertiesPanel, hasDefaultPropertiesPanel]);
    return e$1("div", {
      class: "fjs-form-editor",
      children: [e$1(DragAndDropContext$1.Provider, {
        value: dragAndDropContext,
        children: [hasDefaultPalette && e$1("div", {
          class: "fjs-editor-palette-container",
          ref: paletteRef
        }), e$1("div", {
          class: "fjs-form-container",
          children: e$1(FormContext$1.Provider, {
            value: formContext,
            children: e$1(FormRenderContext$1.Provider, {
              value: formRenderContext,
              children: e$1(FormComponent, {
                onSubmit: onSubmit,
                onReset: onReset
              })
            })
          })
        }), e$1(CreatePreview, {})]
      }), hasDefaultPropertiesPanel && e$1("div", {
        class: "fjs-editor-properties-container",
        ref: propertiesPanelRef
      })]
    });
  }
  function getFormFieldIndex(parent, formField) {
    let fieldFormIndex = parent.components.length;
    parent.components.forEach(({
      id
    }, index) => {
      if (id === formField.id) {
        fieldFormIndex = index;
      }
    });
    return fieldFormIndex;
  }
  function CreatePreview(props) {
    const {
      drake
    } = F$1(DragAndDropContext$1);
    function handleCloned(clone, original, type) {
      const fieldType = clone.dataset.fieldType;
      const Icon = iconsByType(fieldType);
      const {
        label
      } = findPaletteEntry(fieldType);
      if (fieldType) {
        clone.innerHTML = '';
        clone.class = 'gu-mirror';
        if (original.classList.contains('fjs-palette-field')) {
          S$1(e$1("div", {
            class: "fjs-palette-field",
            children: [e$1(Icon, {
              class: "fjs-palette-field-icon",
              width: "36",
              height: "36",
              viewBox: "0 0 54 54"
            }), e$1("span", {
              class: "fjs-palette-field-text",
              children: label
            })]
          }), clone);
        } else {
          S$1(e$1(Icon, {}), clone);
        }
      }
    }
    y(() => {
      if (!drake) {
        return;
      }
      drake.on('cloned', handleCloned);
      return () => drake.off('cloned', handleCloned);
    }, [drake]);
    return null;
  }

  // helper //////

  function defaultPalette(paletteConfig) {
    return !(paletteConfig && paletteConfig.parent);
  }
  function defaultPropertiesPanel(propertiesPanelConfig) {
    return !(propertiesPanelConfig && propertiesPanelConfig.parent);
  }
  function findPaletteEntry(type) {
    return PALETTE_ENTRIES.find(entry => entry.type === type);
  }

  class Renderer {
    constructor(renderConfig, eventBus, formEditor, injector) {
      const {
        container,
        compact = false
      } = renderConfig;
      const App = () => {
        const [state, setState] = l$2(formEditor._getState());
        const formEditorContext = {
          getService(type, strict = true) {
            return injector.get(type, strict);
          }
        };
        formEditor.on('changed', newState => {
          setState(newState);
        });
        const {
          schema
        } = state;
        if (!schema) {
          return null;
        }
        return e$1("div", {
          class: `fjs-container fjs-editor-container ${compact ? 'fjs-editor-compact' : ''}`,
          children: e$1(FormEditorContext$1.Provider, {
            value: formEditorContext,
            children: e$1(FormEditor$1, {})
          })
        });
      };
      eventBus.on('form.init', () => {
        S$1(e$1(App, {}), container);
      });
      eventBus.on('form.destroy', () => {
        S$1(null, container);
      });
    }
  }
  Renderer.$inject = ['config.renderer', 'eventBus', 'formEditor', 'injector'];

  var renderModule = {
    __init__: ['formFields', 'renderer'],
    formFields: ['type', EditorFormFields],
    renderer: ['type', Renderer]
  };

  var core = {
    __depends__: [importModule, renderModule],
    eventBus: ['type', EventBus],
    formFieldRegistry: ['type', FormFieldRegistry],
    fieldFactory: ['type', FieldFactory],
    debounce: ['factory', DebounceFactory]
  };

  var NOT_REGISTERED_ERROR = 'is not a registered action',
    IS_REGISTERED_ERROR = 'is already registered';

  /**
   * An interface that provides access to modeling actions by decoupling
   * the one who requests the action to be triggered and the trigger itself.
   *
   * It's possible to add new actions by registering them with ´registerAction´
   * and likewise unregister existing ones with ´unregisterAction´.
   *
   *
   * ## Life-Cycle and configuration
   *
   * The editor actions will wait for diagram initialization before
   * registering default actions _and_ firing an `editorActions.init` event.
   *
   * Interested parties may listen to the `editorActions.init` event with
   * low priority to check, which actions got registered. Other components
   * may use the event to register their own actions via `registerAction`.
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function EditorActions(eventBus, injector) {
    // initialize actions
    this._actions = {};
    var self = this;
    eventBus.on('diagram.init', function () {
      // all diagram modules got loaded; check which ones
      // are available and register the respective default actions
      self._registerDefaultActions(injector);

      // ask interested parties to register available editor
      // actions on diagram initialization
      eventBus.fire('editorActions.init', {
        editorActions: self
      });
    });
  }
  EditorActions.$inject = ['eventBus', 'injector'];

  /**
   * Register default actions.
   *
   * @param {Injector} injector
   */
  EditorActions.prototype._registerDefaultActions = function (injector) {
    // (1) retrieve optional components to integrate with

    var commandStack = injector.get('commandStack', false);
    var modeling = injector.get('modeling', false);
    var selection = injector.get('selection', false);
    var zoomScroll = injector.get('zoomScroll', false);
    var copyPaste = injector.get('copyPaste', false);
    var canvas = injector.get('canvas', false);
    var rules = injector.get('rules', false);
    var keyboardMove = injector.get('keyboardMove', false);
    var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);

    // (2) check components and register actions

    if (commandStack) {
      this.register('undo', function () {
        commandStack.undo();
      });
      this.register('redo', function () {
        commandStack.redo();
      });
    }
    if (copyPaste && selection) {
      this.register('copy', function () {
        var selectedElements = selection.get();
        if (selectedElements.length) {
          return copyPaste.copy(selectedElements);
        }
      });
    }
    if (copyPaste) {
      this.register('paste', function () {
        copyPaste.paste();
      });
    }
    if (zoomScroll) {
      this.register('stepZoom', function (opts) {
        zoomScroll.stepZoom(opts.value);
      });
    }
    if (canvas) {
      this.register('zoom', function (opts) {
        canvas.zoom(opts.value);
      });
    }
    if (modeling && selection && rules) {
      this.register('removeSelection', function () {
        var selectedElements = selection.get();
        if (!selectedElements.length) {
          return;
        }
        var allowed = rules.allowed('elements.delete', {
            elements: selectedElements
          }),
          removableElements;
        if (allowed === false) {
          return;
        } else if (isArray(allowed)) {
          removableElements = allowed;
        } else {
          removableElements = selectedElements;
        }
        if (removableElements.length) {
          modeling.removeElements(removableElements.slice());
        }
      });
    }
    if (keyboardMove) {
      this.register('moveCanvas', function (opts) {
        keyboardMove.moveCanvas(opts);
      });
    }
    if (keyboardMoveSelection) {
      this.register('moveSelection', function (opts) {
        keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);
      });
    }
  };

  /**
   * Triggers a registered action
   *
   * @param  {string} action
   * @param  {Object} opts
   *
   * @return {Unknown} Returns what the registered listener returns
   */
  EditorActions.prototype.trigger = function (action, opts) {
    if (!this._actions[action]) {
      throw error(action, NOT_REGISTERED_ERROR);
    }
    return this._actions[action](opts);
  };

  /**
   * Registers a collections of actions.
   * The key of the object will be the name of the action.
   *
   * @example
   * ´´´
   * var actions = {
   *   spaceTool: function() {
   *     spaceTool.activateSelection();
   *   },
   *   lassoTool: function() {
   *     lassoTool.activateSelection();
   *   }
   * ];
   *
   * editorActions.register(actions);
   *
   * editorActions.isRegistered('spaceTool'); // true
   * ´´´
   *
   * @param  {Object} actions
   */
  EditorActions.prototype.register = function (actions, listener) {
    var self = this;
    if (typeof actions === 'string') {
      return this._registerAction(actions, listener);
    }
    forEach(actions, function (listener, action) {
      self._registerAction(action, listener);
    });
  };

  /**
   * Registers a listener to an action key
   *
   * @param  {string} action
   * @param  {Function} listener
   */
  EditorActions.prototype._registerAction = function (action, listener) {
    if (this.isRegistered(action)) {
      throw error(action, IS_REGISTERED_ERROR);
    }
    this._actions[action] = listener;
  };

  /**
   * Unregister an existing action
   *
   * @param {string} action
   */
  EditorActions.prototype.unregister = function (action) {
    if (!this.isRegistered(action)) {
      throw error(action, NOT_REGISTERED_ERROR);
    }
    this._actions[action] = undefined;
  };

  /**
   * Returns the number of actions that are currently registered
   *
   * @return {number}
   */
  EditorActions.prototype.getActions = function () {
    return Object.keys(this._actions);
  };

  /**
   * Checks wether the given action is registered
   *
   * @param {string} action
   *
   * @return {boolean}
   */
  EditorActions.prototype.isRegistered = function (action) {
    return !!this._actions[action];
  };
  function error(action, message) {
    return new Error(action + ' ' + message);
  }

  var EditorActionsModule$1 = {
    __init__: ['editorActions'],
    editorActions: ['type', EditorActions]
  };

  class FormEditorActions extends EditorActions {
    constructor(eventBus, injector) {
      super(eventBus, injector);
      eventBus.on('form.init', () => {
        this._registerDefaultActions(injector);
        eventBus.fire('editorActions.init', {
          editorActions: this
        });
      });
    }
    _registerDefaultActions(injector) {
      const commandStack = injector.get('commandStack', false),
        formFieldRegistry = injector.get('formFieldRegistry', false),
        selection = injector.get('selection', false);
      if (commandStack) {
        // @ts-ignore
        this.register('undo', () => {
          commandStack.undo();
        });

        // @ts-ignore
        this.register('redo', () => {
          commandStack.redo();
        });
      }
      if (formFieldRegistry && selection) {
        // @ts-ignore
        this.register('selectFormField', (options = {}) => {
          const {
            id
          } = options;
          if (!id) {
            return;
          }
          const formField = formFieldRegistry.get(id);
          if (formField) {
            selection.set(formField);
          }
        });
      }
    }
  }
  FormEditorActions.$inject = ['eventBus', 'injector'];

  var EditorActionsModule = {
    __depends__: [EditorActionsModule$1],
    editorActions: ['type', FormEditorActions]
  };

  var KEYS_COPY = ['c', 'C', 'KeyC'];
  var KEYS_PASTE = ['v', 'V', 'KeyV'];
  var KEYS_REDO$1 = ['y', 'Y', 'KeyY'];
  var KEYS_UNDO$1 = ['z', 'Z', 'KeyZ'];

  /**
   * Returns true if event was triggered with any modifier
   * @param {KeyboardEvent} event
   */
  function hasModifier(event) {
    return event.ctrlKey || event.metaKey || event.shiftKey || event.altKey;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isCmd(event) {
    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (event.altKey) {
      return false;
    }
    return event.ctrlKey || event.metaKey;
  }

  /**
   * Checks if key pressed is one of provided keys.
   *
   * @param {string|Array<string>} keys
   * @param {KeyboardEvent} event
   */
  function isKey(keys, event) {
    keys = isArray(keys) ? keys : [keys];
    return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isShift(event) {
    return event.shiftKey;
  }
  function isCopy(event) {
    return isCmd(event) && isKey(KEYS_COPY, event);
  }
  function isPaste(event) {
    return isCmd(event) && isKey(KEYS_PASTE, event);
  }
  function isUndo(event) {
    return isCmd(event) && !isShift(event) && isKey(KEYS_UNDO$1, event);
  }
  function isRedo(event) {
    return isCmd(event) && (isKey(KEYS_REDO$1, event) || isKey(KEYS_UNDO$1, event) && isShift(event));
  }

  var KEYDOWN_EVENT = 'keyboard.keydown',
    KEYUP_EVENT = 'keyboard.keyup';
  var HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';
  var DEFAULT_PRIORITY$1 = 1000;

  /**
   * A keyboard abstraction that may be activated and
   * deactivated by users at will, consuming global key events
   * and triggering diagram actions.
   *
   * For keys pressed down, keyboard fires `keyboard.keydown` event.
   * The event context contains one field which is `KeyboardEvent` event.
   *
   * The implementation fires the following key events that allow
   * other components to hook into key handling:
   *
   *  - keyboard.bind
   *  - keyboard.unbind
   *  - keyboard.init
   *  - keyboard.destroy
   *
   * All events contain one field which is node.
   *
   * A default binding for the keyboard may be specified via the
   * `keyboard.bindTo` configuration option.
   *
   * @param {Config} config
   * @param {EventBus} eventBus
   */
  function Keyboard(config, eventBus) {
    var self = this;
    this._config = config || {};
    this._eventBus = eventBus;
    this._keydownHandler = this._keydownHandler.bind(this);
    this._keyupHandler = this._keyupHandler.bind(this);

    // properly clean dom registrations
    eventBus.on('diagram.destroy', function () {
      self._fire('destroy');
      self.unbind();
    });
    eventBus.on('diagram.init', function () {
      self._fire('init');
    });
    eventBus.on('attach', function () {
      if (config && config.bindTo) {
        self.bind(config.bindTo);
      }
    });
    eventBus.on('detach', function () {
      self.unbind();
    });
  }
  Keyboard.$inject = ['config.keyboard', 'eventBus'];
  Keyboard.prototype._keydownHandler = function (event) {
    this._keyHandler(event, KEYDOWN_EVENT);
  };
  Keyboard.prototype._keyupHandler = function (event) {
    this._keyHandler(event, KEYUP_EVENT);
  };
  Keyboard.prototype._keyHandler = function (event, type) {
    var eventBusResult;
    if (this._isEventIgnored(event)) {
      return;
    }
    var context = {
      keyEvent: event
    };
    eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);
    if (eventBusResult) {
      event.preventDefault();
    }
  };
  Keyboard.prototype._isEventIgnored = function (event) {
    if (event.defaultPrevented) {
      return true;
    }
    return isInput(event.target) && this._isModifiedKeyIgnored(event);
  };
  Keyboard.prototype._isModifiedKeyIgnored = function (event) {
    if (!isCmd(event)) {
      return true;
    }
    var allowedModifiers = this._getAllowedModifiers(event.target);
    return allowedModifiers.indexOf(event.key) === -1;
  };
  Keyboard.prototype._getAllowedModifiers = function (element) {
    var modifierContainer = closest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);
    if (!modifierContainer || this._node && !this._node.contains(modifierContainer)) {
      return [];
    }
    return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');
  };
  Keyboard.prototype.bind = function (node) {
    // make sure that the keyboard is only bound once to the DOM
    this.unbind();
    this._node = node;

    // bind key events
    event.bind(node, 'keydown', this._keydownHandler);
    event.bind(node, 'keyup', this._keyupHandler);
    this._fire('bind');
  };
  Keyboard.prototype.getBinding = function () {
    return this._node;
  };
  Keyboard.prototype.unbind = function () {
    var node = this._node;
    if (node) {
      this._fire('unbind');

      // unbind key events
      event.unbind(node, 'keydown', this._keydownHandler);
      event.unbind(node, 'keyup', this._keyupHandler);
    }
    this._node = null;
  };
  Keyboard.prototype._fire = function (event) {
    this._eventBus.fire('keyboard.' + event, {
      node: this._node
    });
  };

  /**
   * Add a listener function that is notified with `KeyboardEvent` whenever
   * the keyboard is bound and the user presses a key. If no priority is
   * provided, the default value of 1000 is used.
   *
   * @param {number} [priority]
   * @param {Function} listener
   * @param {string} type
   */
  Keyboard.prototype.addListener = function (priority, listener, type) {
    if (isFunction(priority)) {
      type = listener;
      listener = priority;
      priority = DEFAULT_PRIORITY$1;
    }
    this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);
  };
  Keyboard.prototype.removeListener = function (listener, type) {
    this._eventBus.off(type || KEYDOWN_EVENT, listener);
  };
  Keyboard.prototype.hasModifier = hasModifier;
  Keyboard.prototype.isCmd = isCmd;
  Keyboard.prototype.isShift = isShift;
  Keyboard.prototype.isKey = isKey;

  // helpers ///////

  function isInput(target) {
    return target && (matches(target, 'input, textarea') || target.contentEditable === 'true');
  }

  var LOW_PRIORITY$1 = 500;
  var KEYS_REDO = ['y', 'Y', 'KeyY'];
  var KEYS_UNDO = ['z', 'Z', 'KeyZ'];

  /**
   * Adds default keyboard bindings.
   *
   * This does not pull in any features will bind only actions that
   * have previously been registered against the editorActions component.
   *
   * @param {EventBus} eventBus
   * @param {Keyboard} keyboard
   */
  function KeyboardBindings(eventBus, keyboard) {
    var self = this;
    eventBus.on('editorActions.init', LOW_PRIORITY$1, function (event) {
      var editorActions = event.editorActions;
      self.registerBindings(keyboard, editorActions);
    });
  }
  KeyboardBindings.$inject = ['eventBus', 'keyboard'];

  /**
   * Register available keyboard bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  KeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {
    /**
     * Add keyboard binding if respective editor action
     * is registered.
     *
     * @param {string} action name
     * @param {Function} fn that implements the key binding
     */
    function addListener(action, fn) {
      if (editorActions.isRegistered(action)) {
        keyboard.addListener(fn);
      }
    }

    // undo
    // (CTRL|CMD) + Z
    addListener('undo', function (context) {
      var event = context.keyEvent;
      if (isUndo(event)) {
        editorActions.trigger('undo');
        return true;
      }
    });

    // redo
    // CTRL + Y
    // CMD + SHIFT + Z
    addListener('redo', function (context) {
      var event = context.keyEvent;
      if (isRedo(event)) {
        editorActions.trigger('redo');
        return true;
      }
    });

    // copy
    // CTRL/CMD + C
    addListener('copy', function (context) {
      var event = context.keyEvent;
      if (isCopy(event)) {
        editorActions.trigger('copy');
        return true;
      }
    });

    // paste
    // CTRL/CMD + V
    addListener('paste', function (context) {
      var event = context.keyEvent;
      if (isPaste(event)) {
        editorActions.trigger('paste');
        return true;
      }
    });

    // zoom in one step
    // CTRL/CMD + +
    addListener('stepZoom', function (context) {
      var event = context.keyEvent;

      // quirk: it has to be triggered by `=` as well to work on international keyboard layout
      // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754
      if (isKey(['+', 'Add', '='], event) && isCmd(event)) {
        editorActions.trigger('stepZoom', {
          value: 1
        });
        return true;
      }
    });

    // zoom out one step
    // CTRL + -
    addListener('stepZoom', function (context) {
      var event = context.keyEvent;
      if (isKey(['-', 'Subtract'], event) && isCmd(event)) {
        editorActions.trigger('stepZoom', {
          value: -1
        });
        return true;
      }
    });

    // zoom to the default level
    // CTRL + 0
    addListener('zoom', function (context) {
      var event = context.keyEvent;
      if (isKey('0', event) && isCmd(event)) {
        editorActions.trigger('zoom', {
          value: 1
        });
        return true;
      }
    });

    // delete selected element
    // DEL
    addListener('removeSelection', function (context) {
      var event = context.keyEvent;
      if (isKey(['Backspace', 'Delete', 'Del'], event)) {
        editorActions.trigger('removeSelection');
        return true;
      }
    });
  };

  var KeyboardModule$1 = {
    __init__: ['keyboard', 'keyboardBindings'],
    keyboard: ['type', Keyboard],
    keyboardBindings: ['type', KeyboardBindings]
  };

  const LOW_PRIORITY = 500;
  class FormEditorKeyboardBindings {
    constructor(eventBus, keyboard) {
      eventBus.on('editorActions.init', LOW_PRIORITY, event => {
        const {
          editorActions
        } = event;
        this.registerBindings(keyboard, editorActions);
      });
    }
    registerBindings(keyboard, editorActions) {
      function addListener(action, fn) {
        if (editorActions.isRegistered(action)) {
          keyboard.addListener(fn);
        }
      }

      // undo
      // (CTRL|CMD) + Z
      addListener('undo', context => {
        const {
          keyEvent
        } = context;
        if (isCmd(keyEvent) && !isShift(keyEvent) && isKey(KEYS_UNDO, keyEvent)) {
          editorActions.trigger('undo');
          return true;
        }
      });

      // redo
      // CTRL + Y
      // CMD + SHIFT + Z
      addListener('redo', context => {
        const {
          keyEvent
        } = context;
        if (isCmd(keyEvent) && (isKey(KEYS_REDO, keyEvent) || isKey(KEYS_UNDO, keyEvent) && isShift(keyEvent))) {
          editorActions.trigger('redo');
          return true;
        }
      });
    }
  }
  FormEditorKeyboardBindings.$inject = ['eventBus', 'keyboard'];

  var KeyboardModule = {
    __depends__: [KeyboardModule$1],
    __init__: ['keyboardBindings'],
    keyboardBindings: ['type', FormEditorKeyboardBindings]
  };

  function arrayAdd$1(array, index, item) {
    array.splice(index, 0, item);
    return array;
  }
  function arrayRemove(array, index) {
    array.splice(index, 1);
    return array;
  }
  function updatePath(formFieldRegistry, formField, index) {
    const parent = formFieldRegistry.get(formField._parent);
    formField._path = [...parent._path, 'components', index];
    return formField;
  }

  class AddFormFieldHandler {
    /**
     * @constructor
     * @param { import('../../../FormEditor').default } formEditor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formEditor, formFieldRegistry) {
      this._formEditor = formEditor;
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      const {
        formField,
        targetFormField,
        targetIndex
      } = context;
      const {
        schema
      } = this._formEditor._getState();
      const targetPath = [...targetFormField._path, 'components'];
      formField._parent = targetFormField.id;

      // (1) Add new form field
      arrayAdd$1(get(schema, targetPath), targetIndex, formField);

      // (2) Update paths of new form field and its siblings
      get(schema, targetPath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));

      // (3) Add new form field to form field registry
      this._formFieldRegistry.add(formField);

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
    }
    revert(context) {
      const {
        formField,
        targetFormField,
        targetIndex
      } = context;
      const {
        schema
      } = this._formEditor._getState();
      const targetPath = [...targetFormField._path, 'components'];

      // (1) Remove new form field
      arrayRemove(get(schema, targetPath), targetIndex);

      // (2) Update paths of new form field and its siblings
      get(schema, targetPath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));

      // (3) Remove new form field from form field registry
      this._formFieldRegistry.remove(formField);

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
    }
  }
  AddFormFieldHandler.$inject = ['formEditor', 'formFieldRegistry'];

  class EditFormFieldHandler {
    /**
     * @constructor
     * @param { import('../../../FormEditor').default } formEditor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formEditor, formFieldRegistry) {
      this._formEditor = formEditor;
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      const {
        formField,
        properties
      } = context;
      let {
        schema
      } = this._formEditor._getState();
      const oldProperties = {};
      for (let key in properties) {
        oldProperties[key] = formField[key];
        const property = properties[key];
        if (key === 'id') {
          if (property !== formField.id) {
            this._formFieldRegistry.updateId(formField, property);
          }
        } else {
          formField[key] = property;
        }
      }
      context.oldProperties = oldProperties;

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
      return formField;
    }
    revert(context) {
      const {
        formField,
        oldProperties
      } = context;
      let {
        schema
      } = this._formEditor._getState();
      for (let key in oldProperties) {
        const property = oldProperties[key];
        if (key === 'id') {
          if (property !== formField.id) {
            this._formFieldRegistry.updateId(formField, property);
          }
        } else {
          formField[key] = property;
        }
      }

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
      return formField;
    }
  }
  EditFormFieldHandler.$inject = ['formEditor', 'formFieldRegistry'];

  class MoveFormFieldHandler {
    /**
     * @constructor
     * @param { import('../../../FormEditor').default } formEditor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formEditor, formFieldRegistry) {
      this._formEditor = formEditor;
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      this.moveFormField(context);
    }
    revert(context) {
      let {
        sourceFormField,
        targetFormField,
        sourceIndex,
        targetIndex
      } = context;
      this.moveFormField({
        sourceFormField: targetFormField,
        targetFormField: sourceFormField,
        sourceIndex: targetIndex,
        targetIndex: sourceIndex
      }, true);
    }
    moveFormField(context, revert) {
      let {
        sourceFormField,
        targetFormField,
        sourceIndex,
        targetIndex
      } = context;
      let {
        schema
      } = this._formEditor._getState();
      const sourcePath = [...sourceFormField._path, 'components'];
      if (sourceFormField.id === targetFormField.id) {
        if (revert) {
          if (sourceIndex > targetIndex) {
            sourceIndex--;
          }
        } else {
          if (sourceIndex < targetIndex) {
            targetIndex--;
          }
        }

        // (1) Move form field
        mutate(get(schema, sourcePath), sourceIndex, targetIndex);

        // (2) Update paths of new form field and its siblings
        get(schema, sourcePath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));
      } else {
        const formField = get(schema, [...sourcePath, sourceIndex]);
        formField._parent = targetFormField.id;

        // (1) Remove form field
        arrayRemove(get(schema, sourcePath), sourceIndex);

        // (2) Update paths of siblings
        get(schema, sourcePath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));
        const targetPath = [...targetFormField._path, 'components'];

        // (3) Add form field
        arrayAdd$1(get(schema, targetPath), targetIndex, formField);

        // (4) Update paths of siblings
        get(schema, targetPath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));
      }

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
    }
  }
  MoveFormFieldHandler.$inject = ['formEditor', 'formFieldRegistry'];

  class RemoveFormFieldHandler {
    /**
     * @constructor
     * @param { import('../../../FormEditor').default } formEditor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formEditor, formFieldRegistry) {
      this._formEditor = formEditor;
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      const {
        sourceFormField,
        sourceIndex
      } = context;
      let {
        schema
      } = this._formEditor._getState();
      const sourcePath = [...sourceFormField._path, 'components'];
      const formField = context.formField = get(schema, [...sourcePath, sourceIndex]);

      // (1) Remove form field
      arrayRemove(get(schema, sourcePath), sourceIndex);

      // (2) Update paths of its siblings
      get(schema, sourcePath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));

      // (3) Remove form field from form field registry
      this._formFieldRegistry.remove(formField);

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
    }
    revert(context) {
      const {
        formField,
        sourceFormField,
        sourceIndex
      } = context;
      let {
        schema
      } = this._formEditor._getState();
      const sourcePath = [...sourceFormField._path, 'components'];

      // (1) Add form field
      arrayAdd$1(get(schema, sourcePath), sourceIndex, formField);

      // (2) Update paths of its siblings
      get(schema, sourcePath).forEach((formField, index) => updatePath(this._formFieldRegistry, formField, index));

      // (3) Add form field to form field registry
      this._formFieldRegistry.add(formField);

      // TODO: Create updater/change support that automatically updates paths and schema on command execution
      this._formEditor._setState({
        schema
      });
    }
  }
  RemoveFormFieldHandler.$inject = ['formEditor', 'formFieldRegistry'];

  class UpdateIdClaimHandler {
    /**
     * @constructor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formFieldRegistry) {
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      const {
        claiming,
        formField,
        id
      } = context;
      if (claiming) {
        this._formFieldRegistry._ids.claim(id, formField);
      } else {
        this._formFieldRegistry._ids.unclaim(id);
      }
    }
    revert(context) {
      const {
        claiming,
        formField,
        id
      } = context;
      if (claiming) {
        this._formFieldRegistry._ids.unclaim(id);
      } else {
        this._formFieldRegistry._ids.claim(id, formField);
      }
    }
  }
  UpdateIdClaimHandler.$inject = ['formFieldRegistry'];

  class UpdateKeyClaimHandler {
    /**
     * @constructor
     * @param { import('../../../core/FormFieldRegistry').default } formFieldRegistry
     */
    constructor(formFieldRegistry) {
      this._formFieldRegistry = formFieldRegistry;
    }
    execute(context) {
      const {
        claiming,
        formField,
        key
      } = context;
      if (claiming) {
        this._formFieldRegistry._keys.claim(key, formField);
      } else {
        this._formFieldRegistry._keys.unclaim(key);
      }
    }
    revert(context) {
      const {
        claiming,
        formField,
        key
      } = context;
      if (claiming) {
        this._formFieldRegistry._keys.unclaim(key);
      } else {
        this._formFieldRegistry._keys.claim(key, formField);
      }
    }
  }
  UpdateKeyClaimHandler.$inject = ['formFieldRegistry'];

  class Modeling {
    constructor(commandStack, eventBus, formEditor, formFieldRegistry, fieldFactory) {
      this._commandStack = commandStack;
      this._formEditor = formEditor;
      this._formFieldRegistry = formFieldRegistry;
      this._fieldFactory = fieldFactory;
      eventBus.on('form.init', () => {
        this.registerHandlers();
      });
    }
    registerHandlers() {
      Object.entries(this.getHandlers()).forEach(([id, handler]) => {
        this._commandStack.registerHandler(id, handler);
      });
    }
    getHandlers() {
      return {
        'formField.add': AddFormFieldHandler,
        'formField.edit': EditFormFieldHandler,
        'formField.move': MoveFormFieldHandler,
        'formField.remove': RemoveFormFieldHandler,
        'id.updateClaim': UpdateIdClaimHandler,
        'key.updateClaim': UpdateKeyClaimHandler
      };
    }
    addFormField(attrs, targetFormField, targetIndex) {
      const formField = this._fieldFactory.create(attrs);
      const context = {
        formField,
        targetFormField,
        targetIndex
      };
      this._commandStack.execute('formField.add', context);
      return formField;
    }
    editFormField(formField, properties, value) {
      if (!isObject(properties)) {
        properties = {
          [properties]: value
        };
      }
      const context = {
        formField,
        properties
      };
      this._commandStack.execute('formField.edit', context);
    }
    moveFormField(formField, sourceFormField, targetFormField, sourceIndex, targetIndex) {
      const context = {
        formField,
        sourceFormField,
        targetFormField,
        sourceIndex,
        targetIndex
      };
      this._commandStack.execute('formField.move', context);
    }
    removeFormField(formField, sourceFormField, sourceIndex) {
      const context = {
        formField,
        sourceFormField,
        sourceIndex
      };
      this._commandStack.execute('formField.remove', context);
    }
    claimId(formField, id) {
      const context = {
        formField,
        id,
        claiming: true
      };
      this._commandStack.execute('id.updateClaim', context);
    }
    unclaimId(formField, id) {
      const context = {
        formField,
        id,
        claiming: false
      };
      this._commandStack.execute('id.updateClaim', context);
    }
    claimKey(formField, key) {
      const context = {
        formField,
        key,
        claiming: true
      };
      this._commandStack.execute('key.updateClaim', context);
    }
    unclaimKey(formField, key) {
      const context = {
        formField,
        key,
        claiming: false
      };
      this._commandStack.execute('key.updateClaim', context);
    }
  }
  Modeling.$inject = ['commandStack', 'eventBus', 'formEditor', 'formFieldRegistry', 'fieldFactory'];

  var DEFAULT_PRIORITY = 1000;

  /**
   * A utility that can be used to plug-in into the command execution for
   * extension and/or validation.
   *
   * @param {EventBus} eventBus
   *
   * @example
   *
   * import inherits from 'inherits-browser';
   *
   * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
   *
   * function CommandLogger(eventBus) {
   *   CommandInterceptor.call(this, eventBus);
   *
   *   this.preExecute(function(event) {
   *     console.log('command pre-execute', event);
   *   });
   * }
   *
   * inherits(CommandLogger, CommandInterceptor);
   *
   */
  function CommandInterceptor(eventBus) {
    this._eventBus = eventBus;
  }
  CommandInterceptor.$inject = ['eventBus'];
  function unwrapEvent(fn, that) {
    return function (event) {
      return fn.call(that || null, event.context, event.command, event);
    };
  }

  /**
   * Register an interceptor for a command execution
   *
   * @param {string|Array<string>} [events] list of commands to register on
   * @param {string} [hook] command hook, i.e. preExecute, executed to listen on
   * @param {number} [priority] the priority on which to hook into the execution
   * @param {Function} handlerFn interceptor to be invoked with (event)
   * @param {boolean} unwrap if true, unwrap the event and pass (context, command, event) to the
   *                          listener instead
   * @param {Object} [that] Pass context (`this`) to the handler function
   */
  CommandInterceptor.prototype.on = function (events, hook, priority, handlerFn, unwrap, that) {
    if (isFunction(hook) || isNumber(hook)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = hook;
      hook = null;
    }
    if (isFunction(priority)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = DEFAULT_PRIORITY;
    }
    if (isObject(unwrap)) {
      that = unwrap;
      unwrap = false;
    }
    if (!isFunction(handlerFn)) {
      throw new Error('handlerFn must be a function');
    }
    if (!isArray(events)) {
      events = [events];
    }
    var eventBus = this._eventBus;
    forEach(events, function (event) {
      // concat commandStack(.event)?(.hook)?
      var fullEvent = ['commandStack', event, hook].filter(function (e) {
        return e;
      }).join('.');
      eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
    });
  };
  var hooks = ['canExecute', 'preExecute', 'preExecuted', 'execute', 'executed', 'postExecute', 'postExecuted', 'revert', 'reverted'];

  /*
   * Install hook shortcuts
   *
   * This will generate the CommandInterceptor#(preExecute|...|reverted) methods
   * which will in term forward to CommandInterceptor#on.
   */
  forEach(hooks, function (hook) {
    /**
     * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}
     *
     * A named hook for plugging into the command execution
     *
     * @param {string|Array<string>} [events] list of commands to register on
     * @param {number} [priority] the priority on which to hook into the execution
     * @param {Function} handlerFn interceptor to be invoked with (event)
     * @param {boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the
     *                          listener instead
     * @param {Object} [that] Pass context (`this`) to the handler function
     */
    CommandInterceptor.prototype[hook] = function (events, priority, handlerFn, unwrap, that) {
      if (isFunction(events) || isNumber(events)) {
        that = unwrap;
        unwrap = handlerFn;
        handlerFn = priority;
        priority = events;
        events = null;
      }
      this.on(events, hook, priority, handlerFn, unwrap, that);
    };
  });

  class IdBehavior extends CommandInterceptor {
    constructor(eventBus, modeling) {
      super(eventBus);

      // @ts-ignore-next-line
      this.preExecute('formField.remove', function (context) {
        const {
          formField
        } = context;
        const {
          id
        } = formField;
        modeling.unclaimId(formField, id);
      }, true);

      // @ts-ignore-next-line
      this.preExecute('formField.edit', function (context) {
        const {
          formField,
          properties
        } = context;
        if ('id' in properties) {
          modeling.unclaimId(formField, formField.id);
          modeling.claimId(formField, properties.id);
        }
      }, true);
    }
  }
  IdBehavior.$inject = ['eventBus', 'modeling'];

  class KeyBehavior extends CommandInterceptor {
    constructor(eventBus, modeling) {
      super(eventBus);

      // @ts-ignore-next-line
      this.preExecute('formField.remove', function (context) {
        const {
          formField
        } = context;
        const {
          key
        } = formField;
        if (key) {
          modeling.unclaimKey(formField, key);
        }
      }, true);

      // @ts-ignore-next-line
      this.preExecute('formField.edit', function (context) {
        const {
          formField,
          properties
        } = context;
        if ('key' in properties) {
          modeling.unclaimKey(formField, formField.key);
          modeling.claimKey(formField, properties.key);
        }
      }, true);
    }
  }
  KeyBehavior.$inject = ['eventBus', 'modeling'];

  class ValidateBehavior extends CommandInterceptor {
    constructor(eventBus) {
      super(eventBus);

      /**
       * Remove custom validation if <validationType> is about to be added.
       */
      // @ts-ignore-next-line
      this.preExecute('formField.edit', function (context) {
        const {
          properties
        } = context;
        const {
          validate = {}
        } = properties;
        if (validate.validationType) {
          const newValidate = {
            ...validate
          };
          delete newValidate.minLength;
          delete newValidate.maxLength;
          delete newValidate.pattern;
          properties['validate'] = newValidate;
        }
      }, true);
    }
  }
  ValidateBehavior.$inject = ['eventBus'];

  var behaviorModule = {
    __init__: ['idBehavior', 'keyBehavior', 'validateBehavior'],
    idBehavior: ['type', IdBehavior],
    keyBehavior: ['type', KeyBehavior],
    validateBehavior: ['type', ValidateBehavior]
  };

  /**
   * A service that offers un- and redoable execution of commands.
   *
   * The command stack is responsible for executing modeling actions
   * in a un- and redoable manner. To do this it delegates the actual
   * command execution to {@link CommandHandler}s.
   *
   * Command handlers provide {@link CommandHandler#execute(ctx)} and
   * {@link CommandHandler#revert(ctx)} methods to un- and redo a command
   * identified by a command context.
   *
   *
   * ## Life-Cycle events
   *
   * In the process the command stack fires a number of life-cycle events
   * that other components to participate in the command execution.
   *
   *    * preExecute
   *    * preExecuted
   *    * execute
   *    * executed
   *    * postExecute
   *    * postExecuted
   *    * revert
   *    * reverted
   *
   * A special event is used for validating, whether a command can be
   * performed prior to its execution.
   *
   *    * canExecute
   *
   * Each of the events is fired as `commandStack.{eventName}` and
   * `commandStack.{commandName}.{eventName}`, respectively. This gives
   * components fine grained control on where to hook into.
   *
   * The event object fired transports `command`, the name of the
   * command and `context`, the command context.
   *
   *
   * ## Creating Command Handlers
   *
   * Command handlers should provide the {@link CommandHandler#execute(ctx)}
   * and {@link CommandHandler#revert(ctx)} methods to implement
   * redoing and undoing of a command.
   *
   * A command handler _must_ ensure undo is performed properly in order
   * not to break the undo chain. It must also return the shapes that
   * got changed during the `execute` and `revert` operations.
   *
   * Command handlers may execute other modeling operations (and thus
   * commands) in their `preExecute` and `postExecute` phases. The command
   * stack will properly group all commands together into a logical unit
   * that may be re- and undone atomically.
   *
   * Command handlers must not execute other commands from within their
   * core implementation (`execute`, `revert`).
   *
   *
   * ## Change Tracking
   *
   * During the execution of the CommandStack it will keep track of all
   * elements that have been touched during the command's execution.
   *
   * At the end of the CommandStack execution it will notify interested
   * components via an 'elements.changed' event with all the dirty
   * elements.
   *
   * The event can be picked up by components that are interested in the fact
   * that elements have been changed. One use case for this is updating
   * their graphical representation after moving / resizing or deletion.
   *
   * @see CommandHandler
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function CommandStack(eventBus, injector) {
    /**
     * A map of all registered command handlers.
     *
     * @type {Object}
     */
    this._handlerMap = {};

    /**
     * A stack containing all re/undoable actions on the diagram
     *
     * @type {Array<Object>}
     */
    this._stack = [];

    /**
     * The current index on the stack
     *
     * @type {number}
     */
    this._stackIdx = -1;

    /**
     * Current active commandStack execution
     *
     * @type {Object}
     * @property {Object[]} actions
     * @property {Object[]} dirty
     * @property { 'undo' | 'redo' | 'clear' | 'execute' | null } trigger the cause of the current excecution
     */
    this._currentExecution = {
      actions: [],
      dirty: [],
      trigger: null
    };
    this._injector = injector;
    this._eventBus = eventBus;
    this._uid = 1;
    eventBus.on(['diagram.destroy', 'diagram.clear'], function () {
      this.clear(false);
    }, this);
  }
  CommandStack.$inject = ['eventBus', 'injector'];

  /**
   * Execute a command
   *
   * @param {string} command the command to execute
   * @param {Object} context the environment to execute the command in
   */
  CommandStack.prototype.execute = function (command, context) {
    if (!command) {
      throw new Error('command required');
    }
    this._currentExecution.trigger = 'execute';
    const action = {
      command: command,
      context: context
    };
    this._pushAction(action);
    this._internalExecute(action);
    this._popAction(action);
  };

  /**
   * Ask whether a given command can be executed.
   *
   * Implementors may hook into the mechanism on two ways:
   *
   *   * in event listeners:
   *
   *     Users may prevent the execution via an event listener.
   *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.
   *
   *   * in command handlers:
   *
   *     If the method {@link CommandHandler#canExecute} is implemented in a handler
   *     it will be called to figure out whether the execution is allowed.
   *
   * @param  {string} command the command to execute
   * @param  {Object} context the environment to execute the command in
   *
   * @return {boolean} true if the command can be executed
   */
  CommandStack.prototype.canExecute = function (command, context) {
    const action = {
      command: command,
      context: context
    };
    const handler = this._getHandler(command);
    let result = this._fire(command, 'canExecute', action);

    // handler#canExecute will only be called if no listener
    // decided on a result already
    if (result === undefined) {
      if (!handler) {
        return false;
      }
      if (handler.canExecute) {
        result = handler.canExecute(context);
      }
    }
    return result;
  };

  /**
   * Clear the command stack, erasing all undo / redo history
   */
  CommandStack.prototype.clear = function (emit) {
    this._stack.length = 0;
    this._stackIdx = -1;
    if (emit !== false) {
      this._fire('changed', {
        trigger: 'clear'
      });
    }
  };

  /**
   * Undo last command(s)
   */
  CommandStack.prototype.undo = function () {
    let action = this._getUndoAction(),
      next;
    if (action) {
      this._currentExecution.trigger = 'undo';
      this._pushAction(action);
      while (action) {
        this._internalUndo(action);
        next = this._getUndoAction();
        if (!next || next.id !== action.id) {
          break;
        }
        action = next;
      }
      this._popAction();
    }
  };

  /**
   * Redo last command(s)
   */
  CommandStack.prototype.redo = function () {
    let action = this._getRedoAction(),
      next;
    if (action) {
      this._currentExecution.trigger = 'redo';
      this._pushAction(action);
      while (action) {
        this._internalExecute(action, true);
        next = this._getRedoAction();
        if (!next || next.id !== action.id) {
          break;
        }
        action = next;
      }
      this._popAction();
    }
  };

  /**
   * Register a handler instance with the command stack
   *
   * @param {string} command
   * @param {CommandHandler} handler
   */
  CommandStack.prototype.register = function (command, handler) {
    this._setHandler(command, handler);
  };

  /**
   * Register a handler type with the command stack
   * by instantiating it and injecting its dependencies.
   *
   * @param {string} command
   * @param {Function} a constructor for a {@link CommandHandler}
   */
  CommandStack.prototype.registerHandler = function (command, handlerCls) {
    if (!command || !handlerCls) {
      throw new Error('command and handlerCls must be defined');
    }
    const handler = this._injector.instantiate(handlerCls);
    this.register(command, handler);
  };
  CommandStack.prototype.canUndo = function () {
    return !!this._getUndoAction();
  };
  CommandStack.prototype.canRedo = function () {
    return !!this._getRedoAction();
  };

  // stack access  //////////////////////

  CommandStack.prototype._getRedoAction = function () {
    return this._stack[this._stackIdx + 1];
  };
  CommandStack.prototype._getUndoAction = function () {
    return this._stack[this._stackIdx];
  };

  // internal functionality //////////////////////

  CommandStack.prototype._internalUndo = function (action) {
    const command = action.command,
      context = action.context;
    const handler = this._getHandler(command);

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {
      this._fire(command, 'revert', action);
      if (handler.revert) {
        this._markDirty(handler.revert(context));
      }
      this._revertedAction(action);
      this._fire(command, 'reverted', action);
    });
  };
  CommandStack.prototype._fire = function (command, qualifier, event) {
    if (arguments.length < 3) {
      event = qualifier;
      qualifier = null;
    }
    const names = qualifier ? [command + '.' + qualifier, qualifier] : [command];
    let result;
    event = this._eventBus.createEvent(event);
    for (const name of names) {
      result = this._eventBus.fire('commandStack.' + name, event);
      if (event.cancelBubble) {
        break;
      }
    }
    return result;
  };
  CommandStack.prototype._createId = function () {
    return this._uid++;
  };
  CommandStack.prototype._atomicDo = function (fn) {
    const execution = this._currentExecution;
    execution.atomic = true;
    try {
      fn();
    } finally {
      execution.atomic = false;
    }
  };
  CommandStack.prototype._internalExecute = function (action, redo) {
    const command = action.command,
      context = action.context;
    const handler = this._getHandler(command);
    if (!handler) {
      throw new Error('no command handler registered for <' + command + '>');
    }
    this._pushAction(action);
    if (!redo) {
      this._fire(command, 'preExecute', action);
      if (handler.preExecute) {
        handler.preExecute(context);
      }
      this._fire(command, 'preExecuted', action);
    }

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {
      this._fire(command, 'execute', action);
      if (handler.execute) {
        // actual execute + mark return results as dirty
        this._markDirty(handler.execute(context));
      }

      // log to stack
      this._executedAction(action, redo);
      this._fire(command, 'executed', action);
    });
    if (!redo) {
      this._fire(command, 'postExecute', action);
      if (handler.postExecute) {
        handler.postExecute(context);
      }
      this._fire(command, 'postExecuted', action);
    }
    this._popAction(action);
  };
  CommandStack.prototype._pushAction = function (action) {
    const execution = this._currentExecution,
      actions = execution.actions;
    const baseAction = actions[0];
    if (execution.atomic) {
      throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');
    }
    if (!action.id) {
      action.id = baseAction && baseAction.id || this._createId();
    }
    actions.push(action);
  };
  CommandStack.prototype._popAction = function () {
    const execution = this._currentExecution,
      trigger = execution.trigger,
      actions = execution.actions,
      dirty = execution.dirty;
    actions.pop();
    if (!actions.length) {
      this._eventBus.fire('elements.changed', {
        elements: uniqueBy('id', dirty.reverse())
      });
      dirty.length = 0;
      this._fire('changed', {
        trigger: trigger
      });
      execution.trigger = null;
    }
  };
  CommandStack.prototype._markDirty = function (elements) {
    const execution = this._currentExecution;
    if (!elements) {
      return;
    }
    elements = isArray(elements) ? elements : [elements];
    execution.dirty = execution.dirty.concat(elements);
  };
  CommandStack.prototype._executedAction = function (action, redo) {
    const stackIdx = ++this._stackIdx;
    if (!redo) {
      this._stack.splice(stackIdx, this._stack.length, action);
    }
  };
  CommandStack.prototype._revertedAction = function (action) {
    this._stackIdx--;
  };
  CommandStack.prototype._getHandler = function (command) {
    return this._handlerMap[command];
  };
  CommandStack.prototype._setHandler = function (command, handler) {
    if (!command || !handler) {
      throw new Error('command and handler required');
    }
    if (this._handlerMap[command]) {
      throw new Error('overriding handler for command <' + command + '>');
    }
    this._handlerMap[command] = handler;
  };

  var commandModule = {
    commandStack: ['type', CommandStack]
  };

  var ModelingModule = {
    __depends__: [behaviorModule, commandModule],
    __init__: ['modeling'],
    modeling: ['type', Modeling]
  };

  class Selection {
    constructor(eventBus) {
      this._eventBus = eventBus;
      this._selection = null;
    }
    get() {
      return this._selection;
    }
    set(selection) {
      if (this._selection === selection) {
        return;
      }
      this._selection = selection;
      this._eventBus.fire('selection.changed', {
        selection: this._selection
      });
    }
    toggle(selection) {
      const newSelection = this._selection === selection ? null : selection;
      this.set(newSelection);
    }
    clear() {
      this.set(null);
    }
    isSelected(formField) {
      return this._selection === formField;
    }
  }
  Selection.$inject = ['eventBus'];

  class SelectionBehavior {
    constructor(eventBus, selection) {
      eventBus.on(['commandStack.formField.add.postExecuted', 'commandStack.formField.move.postExecuted'], ({
        context
      }) => {
        const {
          formField
        } = context;
        selection.set(formField);
      });
      eventBus.on('commandStack.formField.remove.postExecuted', ({
        context
      }) => {
        const {
          sourceFormField,
          sourceIndex
        } = context;
        const formField = sourceFormField.components[sourceIndex] || sourceFormField.components[sourceIndex - 1];
        if (formField) {
          selection.set(formField);
        } else {
          selection.clear();
        }
      });
      eventBus.on('formField.remove', ({
        formField
      }) => {
        if (selection.isSelected(formField)) {
          selection.clear();
        }
      });
    }
  }
  SelectionBehavior.$inject = ['eventBus', 'selection'];

  var SelectionModule = {
    __init__: ['selection', 'selectionBehavior'],
    selection: ['type', Selection],
    selectionBehavior: ['type', SelectionBehavior]
  };

  class PaletteRenderer {
    constructor(paletteConfig, eventBus) {
      const {
        parent
      } = paletteConfig || {};
      this._eventBus = eventBus;
      this._container = domify$1$1('<div class="fjs-palette-container"></div>');
      if (parent) {
        this.attachTo(parent);
      }
      this._eventBus.once('formEditor.rendered', 500, () => {
        this._render();
      });
    }

    /**
     * Attach the palette to a parent node.
     *
     * @param {HTMLElement} container
     */
    attachTo(container) {
      if (!container) {
        throw new Error('container required');
      }
      if (typeof container === 'string') {
        container = query(container);
      }

      // (1) detach from old parent
      this.detach();

      // (2) append to parent container
      container.appendChild(this._container);

      // (3) notify interested parties
      this._eventBus.fire('palette.attach');
    }

    /**
     * Detach the palette from its parent node.
     */
    detach() {
      const parentNode = this._container.parentNode;
      if (parentNode) {
        parentNode.removeChild(this._container);
        this._eventBus.fire('palette.detach');
      }
    }
    _render() {
      S$1(e$1(Palette, {}), this._container);
      this._eventBus.fire('palette.rendered');
    }
    _destroy() {
      if (this._container) {
        S$1(null, this._container);
        this._eventBus.fire('palette.destroyed');
      }
    }
  }
  PaletteRenderer.$inject = ['config.palette', 'eventBus'];

  var PaletteModule = {
    palette: ['type', PaletteRenderer]
  };

  var ArrowIcon = function ArrowIcon(props) {
    return e$1("svg", {
      ...props,
      children: e$1("path", {
        fillRule: "evenodd",
        d: "m11.657 8-4.95 4.95a1 1 0 0 1-1.414-1.414L8.828 8 5.293 4.464A1 1 0 1 1 6.707 3.05L11.657 8Z"
      })
    });
  };
  ArrowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var CreateIcon = function CreateIcon(props) {
    return e$1("svg", {
      ...props,
      children: e$1("path", {
        fillRule: "evenodd",
        d: "M9 13V9h4a1 1 0 0 0 0-2H9V3a1 1 0 1 0-2 0v4H3a1 1 0 1 0 0 2h4v4a1 1 0 0 0 2 0Z"
      })
    });
  };
  CreateIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var DeleteIcon = function DeleteIcon(props) {
    return e$1("svg", {
      ...props,
      children: e$1("path", {
        fillRule: "evenodd",
        d: "M12 6v7c0 1.1-.4 1.55-1.5 1.55h-5C4.4 14.55 4 14.1 4 13V6h8Zm-1.5 1.5h-5v4.3c0 .66.5 1.2 1.111 1.2H9.39c.611 0 1.111-.54 1.111-1.2V7.5ZM13 3h-2l-1-1H6L5 3H3v1.5h10V3Z"
      })
    });
  };
  DeleteIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var ExternalLinkIcon = function ExternalLinkIcon(props) {
    return e$1("svg", {
      ...props,
      children: e$1("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12.637 12.637v-4.72h1.362v4.721c0 .36-.137.676-.411.95-.275.275-.591.412-.95.412H3.362c-.38 0-.703-.132-.967-.396A1.315 1.315 0 0 1 2 12.638V3.362c0-.38.132-.703.396-.967S2.982 2 3.363 2h4.553v1.363H3.363v9.274h9.274ZM14 2H9.28l-.001 1.362h2.408L5.065 9.984l.95.95 6.622-6.622v2.409H14V2Z",
        fill: "#818798"
      })
    });
  };
  ExternalLinkIcon.defaultProps = {
    width: "16",
    height: "16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  var FeelRequiredIcon = function FeelRequiredIcon(props) {
    return e$1("svg", {
      ...props,
      children: [e$1("path", {
        d: "M5.8 7.06V5.95h4.307v1.11H5.8Zm0 3.071v-1.11h4.307v1.11H5.8Z",
        fill: "currentColor"
      }), e$1("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M8 3.268A4.732 4.732 0 1 0 12.732 8H14a6 6 0 1 1-6-6v1.268Z",
        fill: "currentColor"
      }), e$1("path", {
        d: "m11.28 6.072-.832-.56 1.016-1.224L10 3.848l.312-.912 1.392.584L11.632 2h1.032l-.072 1.52 1.392-.584.312.912-1.464.44 1.008 1.224-.832.552-.864-1.296-.864 1.304Z",
        fill: "currentColor"
      })]
    });
  };
  FeelRequiredIcon.defaultProps = {
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  var FeelOptionalIcon = function FeelOptionalIcon(props) {
    return e$1("svg", {
      ...props,
      children: [e$1("path", {
        d: "M5.845 7.04V5.93h4.307v1.11H5.845Zm0 3.07V9h4.307v1.11H5.845Z",
        fill: "currentColor"
      }), e$1("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M3.286 8a4.714 4.714 0 1 0 9.428 0 4.714 4.714 0 0 0-9.428 0ZM8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z",
        fill: "currentColor"
      })]
    });
  };
  FeelOptionalIcon.defaultProps = {
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  function Header(props) {
    const {
      element,
      headerProvider
    } = props;
    const {
      getElementIcon,
      getDocumentationRef,
      getElementLabel,
      getTypeLabel
    } = headerProvider;
    const label = getElementLabel(element);
    const type = getTypeLabel(element);
    const documentationRef = getDocumentationRef && getDocumentationRef(element);
    const ElementIcon = getElementIcon(element);
    return e$1("div", {
      class: "bio-properties-panel-header",
      children: [e$1("div", {
        class: "bio-properties-panel-header-icon",
        children: ElementIcon && e$1(ElementIcon, {
          width: "32",
          height: "32",
          viewBox: "0 0 32 32"
        })
      }), e$1("div", {
        class: "bio-properties-panel-header-labels",
        children: [e$1("div", {
          title: type,
          class: "bio-properties-panel-header-type",
          children: type
        }), label ? e$1("div", {
          title: label,
          class: "bio-properties-panel-header-label",
          children: label
        }) : null]
      }), e$1("div", {
        class: "bio-properties-panel-header-actions",
        children: documentationRef ? e$1("a", {
          rel: "noopener",
          class: "bio-properties-panel-header-link",
          href: documentationRef,
          title: "Open documentation",
          target: "_blank",
          children: e$1(ExternalLinkIcon, {})
        }) : null
      })]
    });
  }
  const DescriptionContext = D$1({
    description: {},
    getDescriptionForId: () => {}
  });
  const ErrorsContext = D$1({
    errors: {}
  });

  /**
   * @typedef {Function} <propertiesPanel.showEntry> callback
   *
   * @example
   *
   * useEvent('propertiesPanel.showEntry', ({ focus = false, ...rest }) => {
   *   // ...
   * });
   *
   * @param {Object} context
   * @param {boolean} [context.focus]
   *
   * @returns void
   */
  const EventContext = D$1({
    eventBus: null
  });
  const LayoutContext = D$1({
    layout: {},
    setLayout: () => {},
    getLayoutForKey: () => {},
    setLayoutForKey: () => {}
  });

  /**
   * Accesses the global DescriptionContext and returns a description for a given id and element.
   *
   * @example
   * ```jsx
   * function TextField(props) {
   *   const description = useDescriptionContext('input1', element);
   * }
   * ```
   *
   * @param {string} id
   * @param {object} element
   *
   * @returns {string}
   */
  function useDescriptionContext(id, element) {
    const {
      getDescriptionForId
    } = F$1(DescriptionContext);
    return getDescriptionForId(id, element);
  }
  function useError(id) {
    const {
      errors
    } = F$1(ErrorsContext);
    return errors[id];
  }

  /**
   * Subscribe to an event immediately. Update subscription after inputs changed.
   *
   * @param {string} event
   * @param {Function} callback
   */
  function useEvent(event, callback, eventBus) {
    const eventContext = F$1(EventContext);
    if (!eventBus) {
      ({
        eventBus
      } = eventContext);
    }
    const didMount = s$1(false);

    // (1) subscribe immediately
    if (eventBus && !didMount.current) {
      eventBus.on(event, callback);
    }

    // (2) update subscription after inputs changed
    y(() => {
      if (eventBus && didMount.current) {
        eventBus.on(event, callback);
      }
      didMount.current = true;
      return () => {
        if (eventBus) {
          eventBus.off(event, callback);
        }
      };
    }, [callback, event, eventBus]);
  }

  /**
   * Creates a state that persists in the global LayoutContext.
   *
   * @example
   * ```jsx
   * function Group(props) {
   *   const [ open, setOpen ] = useLayoutState([ 'groups', 'foo', 'open' ], false);
   * }
   * ```
   *
   * @param {(string|number)[]} path
   * @param {any} [defaultValue]
   *
   * @returns {[ any, Function ]}
   */
  function useLayoutState(path, defaultValue) {
    const {
      getLayoutForKey,
      setLayoutForKey
    } = F$1(LayoutContext);
    const layoutForKey = getLayoutForKey(path, defaultValue);
    const [value, set] = l$2(layoutForKey);
    const setState = newValue => {
      // (1) set component state
      set(newValue);

      // (2) set context
      setLayoutForKey(path, newValue);
    };
    return [value, setState];
  }

  /**
   * @pinussilvestrus: we need to introduce our own hook to persist the previous
   * state on updates.
   *
   * cf. https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
   */

  function usePrevious(value) {
    const ref = s$1();
    y(() => {
      ref.current = value;
    });
    return ref.current;
  }

  /**
   * Subscribe to `propertiesPanel.showEntry`.
   *
   * @param {string} id
   *
   * @returns {import('preact').Ref}
   */
  function useShowEntryEvent(id) {
    const {
      onShow
    } = F$1(LayoutContext);
    const ref = s$1();
    const focus = s$1(false);
    const onShowEntry = A$1(event => {
      if (event.id === id) {
        onShow();
        if (!focus.current) {
          focus.current = true;
        }
      }
    }, [id]);
    y(() => {
      if (focus.current && ref.current) {
        if (isFunction(ref.current.focus)) {
          ref.current.focus();
        }
        if (isFunction(ref.current.select)) {
          ref.current.select();
        }
        focus.current = false;
      }
    });
    useEvent('propertiesPanel.showEntry', onShowEntry);
    return ref;
  }

  /**
   * @callback setSticky
   * @param {boolean} value
   */

  /**
   * Use IntersectionObserver to identify when DOM element is in sticky mode.
   * If sticky is observered setSticky(true) will be called.
   * If sticky mode is left, setSticky(false) will be called.
   *
   *
   * @param {Object} ref
   * @param {string} scrollContainerSelector
   * @param {setSticky} setSticky
   */
  function useStickyIntersectionObserver(ref, scrollContainerSelector, setSticky) {
    y(() => {
      const Observer = IntersectionObserver;

      // return early if IntersectionObserver is not available
      if (!Observer) {
        return;
      }
      let observer;
      if (ref.current) {
        const scrollContainer = query(scrollContainerSelector);
        observer = new Observer(entries => {
          entries.forEach(entry => {
            if (entry.intersectionRatio < 1) {
              setSticky(true);
            } else if (entry.intersectionRatio === 1) {
              setSticky(false);
            }
          });
        }, {
          root: scrollContainer,
          rootMargin: '0px 0px 999999% 0px',
          // Use bottom margin to avoid stickyness when scrolling out to bottom
          threshold: [1]
        });
        observer.observe(ref.current);
      }

      // Unobserve if unmounted
      return () => {
        if (ref.current && observer) {
          observer.unobserve(ref.current);
        }
      };
    }, [ref, scrollContainerSelector, setSticky]);
  }

  /**
   * Creates a static function reference with changing body.
   * This is necessary when external libraries require a callback function
   * that has references to state variables.
   *
   * Usage:
   * const callback = useStaticCallback((val) => {val === currentState});
   *
   * The `callback` reference is static and can be safely used in external
   * libraries or as a prop that does not cause rerendering of children.
   *
   * @param {Function} callback function with changing reference
   * @returns {Function} static function reference
   */
  function useStaticCallback(callback) {
    const callbackRef = s$1(callback);
    callbackRef.current = callback;
    return A$1((...args) => callbackRef.current(...args), []);
  }
  function Group(props) {
    const {
      element,
      entries = [],
      id,
      label,
      shouldOpen = false
    } = props;
    const groupRef = s$1(null);
    const [open, setOpen] = useLayoutState(['groups', id, 'open'], shouldOpen);
    const onShow = A$1(() => setOpen(true), [setOpen]);
    const toggleOpen = () => setOpen(!open);
    const [edited, setEdited] = l$2(false);
    const [sticky, setSticky] = l$2(false);

    // set edited state depending on all entries
    y(() => {
      const hasOneEditedEntry = entries.find(entry => {
        const {
          id,
          isEdited
        } = entry;
        const entryNode = query(`[data-entry-id="${id}"]`);
        if (!isFunction(isEdited) || !entryNode) {
          return false;
        }
        const inputNode = query('.bio-properties-panel-input', entryNode);
        return isEdited(inputNode);
      });
      setEdited(hasOneEditedEntry);
    }, [entries]);

    // set css class when group is sticky to top
    useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
    const propertiesPanelContext = {
      ...F$1(LayoutContext),
      onShow
    };
    return e$1("div", {
      class: "bio-properties-panel-group",
      "data-group-id": 'group-' + id,
      ref: groupRef,
      children: [e$1("div", {
        class: classNames('bio-properties-panel-group-header', edited ? '' : 'empty', open ? 'open' : '', sticky && open ? 'sticky' : ''),
        onClick: toggleOpen,
        children: [e$1("div", {
          title: label,
          class: "bio-properties-panel-group-header-title",
          children: label
        }), e$1("div", {
          class: "bio-properties-panel-group-header-buttons",
          children: [edited && e$1(DataMarker, {}), e$1("button", {
            title: "Toggle section",
            class: "bio-properties-panel-group-header-button bio-properties-panel-arrow",
            children: e$1(ArrowIcon, {
              class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
            })
          })]
        })]
      }), e$1("div", {
        class: classNames('bio-properties-panel-group-entries', open ? 'open' : ''),
        children: e$1(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: entries.map(entry => {
            const {
              component: Component,
              id
            } = entry;
            return v$1(Component, {
              ...entry,
              element: element,
              key: id
            });
          })
        })
      })]
    });
  }
  function DataMarker() {
    return e$1("div", {
      title: "Section contains data",
      class: "bio-properties-panel-dot"
    });
  }

  /**
   * @typedef { {
   *  text: (element: object) => string,
   *  icon?: (element: Object) => import('preact').Component
   * } } PlaceholderDefinition
   *
   * @param { PlaceholderDefinition } props
   */
  function Placeholder(props) {
    const {
      text,
      icon: Icon
    } = props;
    return e$1("div", {
      class: "bio-properties-panel open",
      children: e$1("section", {
        class: "bio-properties-panel-placeholder",
        children: [Icon && e$1(Icon, {
          class: "bio-properties-panel-placeholder-icon"
        }), e$1("p", {
          class: "bio-properties-panel-placeholder-text",
          children: text
        })]
      })
    });
  }
  const DEFAULT_LAYOUT = {
    open: true
  };
  const DEFAULT_DESCRIPTION = {};

  /**
   * @typedef { {
   *    component: import('preact').Component,
   *    id: String,
   *    isEdited?: Function
   * } } EntryDefinition
   *
   * @typedef { {
   *    autoFocusEntry: String,
   *    autoOpen?: Boolean,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    remove: (event: MouseEvent) => void
   * } } ListItemDefinition
   *
   * @typedef { {
   *    add: (event: MouseEvent) => void,
   *    component: import('preact').Component,
   *    element: Object,
   *    id: String,
   *    items: Array<ListItemDefinition>,
   *    label: String,
   *    shouldSort?: Boolean,
   *    shouldOpen?: Boolean
   * } } ListGroupDefinition
   *
   * @typedef { {
   *    component?: import('preact').Component,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    shouldOpen?: Boolean
   * } } GroupDefinition
   *
   *  @typedef { {
   *    [id: String]: GetDescriptionFunction
   * } } DescriptionConfig
   *
   * @callback { {
   * @param {string} id
   * @param {Object} element
   * @returns {string}
   * } } GetDescriptionFunction
   *
   * @typedef { {
   *  getEmpty: (element: object) => import('./components/Placeholder').PlaceholderDefinition,
   *  getMultiple: (element: Object) => import('./components/Placeholder').PlaceholderDefinition
   * } } PlaceholderProvider
   *
   */

  /**
   * A basic properties panel component. Describes *how* content will be rendered, accepts
   * data from implementor to describe *what* will be rendered.
   *
   * @param {Object} props
   * @param {Object|Array} props.element
   * @param {import('./components/Header').HeaderProvider} props.headerProvider
   * @param {PlaceholderProvider} [props.placeholderProvider]
   * @param {Array<GroupDefinition|ListGroupDefinition>} props.groups
   * @param {Object} [props.layoutConfig]
   * @param {Function} [props.layoutChanged]
   * @param {DescriptionConfig} [props.descriptionConfig]
   * @param {Function} [props.descriptionLoaded]
   * @param {Object} [props.eventBus]
   */
  function PropertiesPanel(props) {
    const {
      element,
      headerProvider,
      placeholderProvider,
      groups,
      layoutConfig = {},
      layoutChanged,
      descriptionConfig = {},
      descriptionLoaded,
      eventBus
    } = props;

    // set-up layout context
    const [layout, setLayout] = l$2(createLayout(layoutConfig));
    y(() => {
      if (typeof layoutChanged === 'function') {
        layoutChanged(layout);
      }
    }, [layout, layoutChanged]);
    const getLayoutForKey = (key, defaultValue) => {
      return get(layout, key, defaultValue);
    };
    const setLayoutForKey = (key, config) => {
      const newLayout = assign({}, layout);
      set$1(newLayout, key, config);
      setLayout(newLayout);
    };
    const layoutContext = {
      layout,
      setLayout,
      getLayoutForKey,
      setLayoutForKey
    };

    // set-up description context
    const description = createDescriptionContext(descriptionConfig);
    if (typeof descriptionLoaded === 'function') {
      descriptionLoaded(description);
    }
    const getDescriptionForId = (id, element) => {
      return description[id] && description[id](element);
    };
    const descriptionContext = {
      description,
      getDescriptionForId
    };
    const [errors, setErrors] = l$2({});
    const onSetErrors = ({
      errors
    }) => setErrors(errors);
    useEvent('propertiesPanel.setErrors', onSetErrors, eventBus);
    const errorsContext = {
      errors
    };
    const eventContext = {
      eventBus
    };
    const propertiesPanelContext = {
      element
    };

    // empty state
    if (placeholderProvider && !element) {
      return e$1(Placeholder, {
        ...placeholderProvider.getEmpty()
      });
    }

    // multiple state
    if (placeholderProvider && isArray(element)) {
      return e$1(Placeholder, {
        ...placeholderProvider.getMultiple()
      });
    }
    return e$1(LayoutContext.Provider, {
      value: propertiesPanelContext,
      children: e$1(ErrorsContext.Provider, {
        value: errorsContext,
        children: e$1(DescriptionContext.Provider, {
          value: descriptionContext,
          children: e$1(LayoutContext.Provider, {
            value: layoutContext,
            children: e$1(EventContext.Provider, {
              value: eventContext,
              children: e$1("div", {
                class: classNames('bio-properties-panel', layout.open ? 'open' : ''),
                children: [e$1(Header, {
                  element: element,
                  headerProvider: headerProvider
                }), e$1("div", {
                  class: "bio-properties-panel-scroll-container",
                  children: groups.map(group => {
                    const {
                      component: Component = Group,
                      id
                    } = group;
                    return v$1(Component, {
                      ...group,
                      key: id,
                      element: element
                    });
                  })
                })]
              })
            })
          })
        })
      })
    });
  }

  // helpers //////////////////

  function createLayout(overrides) {
    return {
      ...DEFAULT_LAYOUT,
      ...overrides
    };
  }
  function createDescriptionContext(overrides) {
    return {
      ...DEFAULT_DESCRIPTION,
      ...overrides
    };
  }
  function CollapsibleEntry(props) {
    const {
      element,
      entries = [],
      id,
      label,
      open: shouldOpen,
      remove
    } = props;
    const [open, setOpen] = l$2(shouldOpen);
    const toggleOpen = () => setOpen(!open);
    const {
      onShow
    } = F$1(LayoutContext);
    const propertiesPanelContext = {
      ...F$1(LayoutContext),
      onShow: A$1(() => {
        setOpen(true);
        if (isFunction(onShow)) {
          onShow();
        }
      }, [onShow, setOpen])
    };

    // todo(pinussilvestrus): translate once we have a translate mechanism for the core
    const placeholderLabel = '<empty>';
    return e$1("div", {
      "data-entry-id": id,
      class: classNames('bio-properties-panel-collapsible-entry', open ? 'open' : ''),
      children: [e$1("div", {
        class: "bio-properties-panel-collapsible-entry-header",
        onClick: toggleOpen,
        children: [e$1("div", {
          title: label || placeholderLabel,
          class: classNames('bio-properties-panel-collapsible-entry-header-title', !label && 'empty'),
          children: label || placeholderLabel
        }), e$1("button", {
          title: "Toggle list item",
          class: "bio-properties-panel-arrow  bio-properties-panel-collapsible-entry-arrow",
          children: e$1(ArrowIcon, {
            class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
          })
        }), remove ? e$1("button", {
          title: "Delete item",
          class: "bio-properties-panel-remove-entry",
          onClick: remove,
          children: e$1(DeleteIcon, {})
        }) : null]
      }), e$1("div", {
        class: classNames('bio-properties-panel-collapsible-entry-entries', open ? 'open' : ''),
        children: e$1(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: entries.map(entry => {
            const {
              component: Component,
              id
            } = entry;
            return v$1(Component, {
              ...entry,
              element: element,
              key: id
            });
          })
        })
      })]
    });
  }
  function ListItem(props) {
    const {
      autoFocusEntry,
      autoOpen
    } = props;

    // focus specified entry on auto open
    y(() => {
      if (autoOpen && autoFocusEntry) {
        const entry = query(`[data-entry-id="${autoFocusEntry}"]`);
        const focusableInput = query('.bio-properties-panel-input', entry);
        if (focusableInput) {
          if (isFunction(focusableInput.select)) {
            focusableInput.select();
          } else if (isFunction(focusableInput.focus)) {
            focusableInput.focus();
          }
        }
      }
    }, [autoOpen, autoFocusEntry]);
    return e$1("div", {
      class: "bio-properties-panel-list-item",
      children: e$1(CollapsibleEntry, {
        ...props,
        open: autoOpen
      })
    });
  }
  const noop$2 = () => {};

  /**
   * @param {import('../PropertiesPanel').ListGroupDefinition} props
   */
  function ListGroup(props) {
    const {
      add,
      element,
      id,
      items,
      label,
      shouldOpen = true,
      shouldSort = true
    } = props;
    const groupRef = s$1(null);
    const [open, setOpen] = useLayoutState(['groups', id, 'open'], false);
    const [sticky, setSticky] = l$2(false);
    const onShow = A$1(() => setOpen(true), [setOpen]);
    const [ordering, setOrdering] = l$2([]);
    const [newItemAdded, setNewItemAdded] = l$2(false);
    const prevItems = usePrevious(items);
    const prevElement = usePrevious(element);
    const elementChanged = element !== prevElement;
    const shouldHandleEffects = !elementChanged && (shouldSort || shouldOpen);

    // reset initial ordering when element changes (before first render)
    if (elementChanged) {
      setOrdering(createOrdering(shouldSort ? sortItems(items) : items));
    }

    // keep ordering in sync to items - and open changes

    // (0) set initial ordering from given items
    y(() => {
      if (!prevItems || !shouldSort) {
        setOrdering(createOrdering(items));
      }
    }, [items, element]);

    // (1) items were added
    y(() => {
      if (shouldHandleEffects && prevItems && items.length > prevItems.length) {
        let add = [];
        items.forEach(item => {
          if (!ordering.includes(item.id)) {
            add.push(item.id);
          }
        });
        let newOrdering = ordering;

        // open if not open and configured
        if (!open && shouldOpen) {
          toggleOpen();

          // if I opened and I should sort, then sort items
          if (shouldSort) {
            newOrdering = createOrdering(sortItems(items));
          }
        }

        // add new items on top or bottom depending on sorting behavior
        newOrdering = newOrdering.filter(item => !add.includes(item));
        if (shouldSort) {
          newOrdering.unshift(...add);
        } else {
          newOrdering.push(...add);
        }
        setOrdering(newOrdering);
        setNewItemAdded(true);
      } else {
        setNewItemAdded(false);
      }
    }, [items, open, shouldHandleEffects]);

    // (2) sort items on open if shouldSort is set
    y(() => {
      if (shouldSort && open && !newItemAdded) {
        setOrdering(createOrdering(sortItems(items)));
      }
    }, [open, shouldSort]);

    // (3) items were deleted
    y(() => {
      if (shouldHandleEffects && prevItems && items.length < prevItems.length) {
        let keep = [];
        ordering.forEach(o => {
          if (getItem(items, o)) {
            keep.push(o);
          }
        });
        setOrdering(keep);
      }
    }, [items, shouldHandleEffects]);

    // set css class when group is sticky to top
    useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
    const toggleOpen = () => setOpen(!open);
    const hasItems = !!items.length;
    const propertiesPanelContext = {
      ...F$1(LayoutContext),
      onShow
    };
    return e$1("div", {
      class: "bio-properties-panel-group",
      "data-group-id": 'group-' + id,
      ref: groupRef,
      children: [e$1("div", {
        class: classNames('bio-properties-panel-group-header', hasItems ? '' : 'empty', hasItems && open ? 'open' : '', sticky && open ? 'sticky' : ''),
        onClick: hasItems ? toggleOpen : noop$2,
        children: [e$1("div", {
          title: label,
          class: "bio-properties-panel-group-header-title",
          children: label
        }), e$1("div", {
          class: "bio-properties-panel-group-header-buttons",
          children: [add ? e$1("button", {
            title: "Create new list item",
            class: "bio-properties-panel-group-header-button bio-properties-panel-add-entry",
            onClick: add,
            children: [e$1(CreateIcon, {}), !hasItems ? e$1("span", {
              class: "bio-properties-panel-add-entry-label",
              children: "Create"
            }) : null]
          }) : null, hasItems ? e$1("div", {
            title: `List contains ${items.length} item${items.length != 1 ? 's' : ''}`,
            class: "bio-properties-panel-list-badge",
            children: items.length
          }) : null, hasItems ? e$1("button", {
            title: "Toggle section",
            class: "bio-properties-panel-group-header-button bio-properties-panel-arrow",
            children: e$1(ArrowIcon, {
              class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
            })
          }) : null]
        })]
      }), e$1("div", {
        class: classNames('bio-properties-panel-list', open && hasItems ? 'open' : ''),
        children: e$1(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: ordering.map((o, index) => {
            const item = getItem(items, o);
            if (!item) {
              return;
            }
            const {
              id
            } = item;

            // if item was added, open first or last item based on ordering
            const autoOpen = newItemAdded && (shouldSort ? index === 0 : index === ordering.length - 1);
            return v$1(ListItem, {
              ...item,
              autoOpen: autoOpen,
              element: element,
              index: index,
              key: id
            });
          })
        })
      })]
    });
  }

  // helpers ////////////////////

  /**
   * Sorts given items alphanumeric by label
   */
  function sortItems(items) {
    return sortBy(items, i => i.label.toLowerCase());
  }
  function getItem(items, id) {
    return find$2(items, i => i.id === id);
  }
  function createOrdering(items) {
    return items.map(i => i.id);
  }
  function Description$1(props) {
    const {
      element,
      forId,
      value
    } = props;
    const contextDescription = useDescriptionContext(forId, element);
    const description = value || contextDescription;
    if (description) {
      return e$1("div", {
        class: "bio-properties-panel-description",
        children: description
      });
    }
  }
  function Checkbox(props) {
    const {
      id,
      label,
      onChange,
      disabled,
      value = false,
      onFocus,
      onBlur
    } = props;
    const [localValue, setLocalValue] = l$2(value);
    const handleChangeCallback = ({
      target
    }) => {
      onChange(target.checked);
    };
    const handleChange = e => {
      handleChangeCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    const ref = useShowEntryEvent(id);
    return e$1("div", {
      class: "bio-properties-panel-checkbox",
      children: [e$1("input", {
        ref: ref,
        id: prefixId$7(id),
        name: id,
        onFocus: onFocus,
        onBlur: onBlur,
        type: "checkbox",
        class: "bio-properties-panel-input",
        onChange: handleChange,
        checked: localValue,
        disabled: disabled
      }), e$1("label", {
        for: prefixId$7(id),
        class: "bio-properties-panel-label",
        children: label
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {boolean} [props.disabled]
   */
  function CheckboxEntry(props) {
    const {
      element,
      id,
      description,
      label,
      getValue,
      setValue,
      disabled,
      onFocus,
      onBlur
    } = props;
    const value = getValue(element);
    const error = useError(id);
    return e$1("div", {
      class: "bio-properties-panel-entry bio-properties-panel-checkbox-entry",
      "data-entry-id": id,
      children: [e$1(Checkbox, {
        disabled: disabled,
        id: id,
        label: label,
        onChange: setValue,
        onFocus: onFocus,
        onBlur: onBlur,
        value: value
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$7(node) {
    return node && !!node.checked;
  }

  // helpers /////////////////

  function prefixId$7(id) {
    return `bio-properties-panel-${id}`;
  }
  const useBufferedFocus = function (editor, ref) {
    const [buffer, setBuffer] = l$2(undefined);
    ref.current = d(() => ({
      focus: offset => {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    }), [editor]);
    y(() => {
      if (typeof buffer !== 'undefined' && editor) {
        editor.focus(buffer);
        setBuffer(false);
      }
    }, [editor, buffer]);
  };
  const CodeEditor = x((props, ref) => {
    const {
      value,
      onInput,
      onFeelToggle,
      onLint = () => {},
      disabled,
      tooltipContainer,
      variables
    } = props;
    const inputRef = s$1();
    const [editor, setEditor] = l$2();
    const [localValue, setLocalValue] = l$2(value || '');
    useBufferedFocus(editor, ref);
    const handleInput = useStaticCallback(newValue => {
      onInput(newValue);
      setLocalValue(newValue);
    });
    y(() => {
      let editor;

      /* Trigger FEEL toggle when
       *
       * - `backspace` is pressed
       * - AND the cursor is at the beginning of the input
       */
      const onKeyDown = e => {
        if (e.key !== 'Backspace' || !editor) {
          return;
        }
        const selection = editor.getSelection();
        const range = selection.ranges[selection.mainIndex];
        if (range.from === 0 && range.to === 0) {
          onFeelToggle();
        }
      };
      editor = new FeelEditor({
        container: inputRef.current,
        onChange: handleInput,
        onKeyDown: onKeyDown,
        onLint: onLint,
        tooltipContainer: tooltipContainer,
        value: localValue,
        variables: variables
      });
      setEditor(editor);
      return () => {
        onLint([]);
        inputRef.current.innerHTML = '';
        setEditor(null);
      };
    }, []);
    y(() => {
      if (!editor) {
        return;
      }
      if (value === localValue) {
        return;
      }
      editor.setValue(value);
      setLocalValue(value);
    }, [value]);
    y(() => {
      if (!editor) {
        return;
      }
      editor.setVariables(variables);
    }, [variables]);
    const handleClick = () => {
      ref.current.focus();
    };
    return e$1("div", {
      class: classNames('bio-properties-panel-feel-editor-container', disabled ? 'disabled' : null),
      children: e$1("div", {
        name: props.name,
        class: classNames('bio-properties-panel-input', localValue ? 'edited' : null),
        ref: inputRef,
        onClick: handleClick
      })
    });
  });
  function FeelIndicator(props) {
    const {
      active
    } = props;
    if (!active) {
      return null;
    }
    return e$1("span", {
      class: "bio-properties-panel-feel-indicator",
      children: "="
    });
  }
  const noop$1 = () => {};

  /**
   * @param {Object} props
   * @param {Object} props.label
   * @param {String} props.feel
   */
  function FeelIcon(props) {
    const {
      label,
      feel = false,
      active,
      disabled = false,
      onClick = noop$1
    } = props;
    const feelRequiredLabel = ' must be a FEEL expression';
    const feelOptionalLabel = ' can optionally be a FEEL expression';
    const handleClick = e => {
      onClick(e);

      // when pointer event was created from keyboard, keep focus on button
      if (!e.pointerType) {
        e.stopPropagation();
      }
    };
    return e$1("button", {
      class: classNames('bio-properties-panel-feel-icon', active ? 'active' : null, feel === 'required' ? 'required' : 'optional'),
      onClick: handleClick,
      disabled: feel === 'required' || disabled,
      title: label + (feel === 'required' ? feelRequiredLabel : feelOptionalLabel),
      children: feel === 'required' ? e$1(FeelRequiredIcon, {}) : e$1(FeelOptionalIcon, {})
    });
  }
  const noop = () => {};
  function FeelTextfield(props) {
    const {
      debounce,
      id,
      label,
      onInput,
      onError,
      feel,
      value = '',
      disabled = false,
      variables,
      tooltipContainer,
      OptionalComponent = OptionalFeelInput
    } = props;
    const [localValue, _setLocalValue] = l$2(value);
    const editorRef = useShowEntryEvent(id);
    const containerRef = s$1();
    const feelActive = localValue.startsWith('=') || feel === 'required';
    const feelOnlyValue = localValue.startsWith('=') ? localValue.substring(1) : localValue;
    const [focus, _setFocus] = l$2(undefined);
    const setFocus = (offset = 0) => {
      const hasFocus = containerRef.current.contains(document.activeElement);

      // Keep caret position if it is already focused, otherwise focus at the end
      const position = hasFocus ? document.activeElement.selectionStart : Infinity;
      _setFocus(position + offset);
    };
    const handleInputCallback = d(() => {
      return debounce(newValue => {
        onInput(newValue);
      });
    }, [onInput, debounce]);
    const setLocalValue = newValue => {
      _setLocalValue(newValue);
      if (!newValue || newValue === '=') {
        handleInputCallback(undefined);
      } else {
        handleInputCallback(newValue);
      }
    };
    const handleFeelToggle = useStaticCallback(() => {
      if (feel === 'required') {
        return;
      }
      if (!feelActive) {
        setLocalValue('=' + localValue);
      } else {
        setLocalValue(feelOnlyValue);
      }
    });
    const handleLocalInput = newValue => {
      if (feelActive) {
        newValue = '=' + newValue;
      }
      if (newValue === localValue) {
        return;
      }
      setLocalValue(newValue);
      if (!feelActive && newValue.startsWith('=')) {
        // focus is behind `=` sign that will be removed
        setFocus(-1);
      }
    };
    const handleLint = useStaticCallback(lint => {
      if (!(lint && lint.length)) {
        onError(undefined);
        return;
      }
      const error = lint[0];
      const message = `${error.source}: ${error.message}`;
      onError(message);
    });
    y(() => {
      if (typeof focus !== 'undefined') {
        editorRef.current.focus(focus);
        _setFocus(undefined);
      }
    }, [focus]);
    y(() => {
      if (value === localValue) {
        return;
      }

      // External value change removed content => keep FEEL configuration
      if (!value) {
        setLocalValue(feelActive ? '=' : '');
        return;
      }
      setLocalValue(value);
    }, [value]);

    // copy-paste integration
    y(() => {
      const copyHandler = event => {
        if (!feelActive) {
          return;
        }
        event.clipboardData.setData('application/FEEL', event.clipboardData.getData('text'));
      };
      const pasteHandler = event => {
        if (feelActive) {
          return;
        }
        const data = event.clipboardData.getData('application/FEEL');
        if (data) {
          setTimeout(() => {
            handleFeelToggle();
            setFocus();
          });
        }
      };
      containerRef.current.addEventListener('copy', copyHandler);
      containerRef.current.addEventListener('cut', copyHandler);
      containerRef.current.addEventListener('paste', pasteHandler);
      return () => {
        containerRef.current.removeEventListener('copy', copyHandler);
        containerRef.current.removeEventListener('cut', copyHandler);
        containerRef.current.removeEventListener('paste', pasteHandler);
      };
    }, [containerRef, feelActive, handleFeelToggle, setFocus]);
    return e$1("div", {
      class: "bio-properties-panel-feel-entry",
      children: [e$1("label", {
        for: prefixId$6(id),
        class: "bio-properties-panel-label",
        onClick: () => setFocus(),
        children: [label, e$1(FeelIcon, {
          label: label,
          feel: feel,
          onClick: handleFeelToggle,
          active: feelActive
        })]
      }), e$1("div", {
        class: "bio-properties-panel-feel-container",
        ref: containerRef,
        children: [e$1(FeelIndicator, {
          active: feelActive,
          disabled: feel !== 'optional' || disabled,
          onClick: handleFeelToggle
        }), feelActive ? e$1(CodeEditor, {
          id: prefixId$6(id),
          name: id,
          onInput: handleLocalInput,
          disabled: disabled,
          onFeelToggle: () => {
            handleFeelToggle();
            setFocus(true);
          },
          onLint: handleLint,
          value: feelOnlyValue,
          variables: variables,
          ref: editorRef,
          tooltipContainer: tooltipContainer
        }) : e$1(OptionalComponent, {
          ...props,
          onInput: handleLocalInput,
          value: localValue,
          ref: editorRef
        })]
      })]
    });
  }
  const OptionalFeelInput = x((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = s$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: position => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        if (typeof position === 'number') {
          if (position > value.length) {
            position = value.length;
          }
          input.setSelectionRange(position, position);
        }
      }
    };
    return e$1("input", {
      id: prefixId$6(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || ''
    });
  });
  const OptionalFeelTextArea = x((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = s$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: () => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        input.setSelectionRange(0, 0);
      }
    };
    return e$1("textarea", {
      id: prefixId$6(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || '',
      "data-gramm": "false"
    });
  });

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {Boolean} props.debounce
   * @param {Boolean} props.disabled
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.validate
   */
  function FeelEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      disabled,
      feel,
      label,
      getValue,
      setValue,
      tooltipContainer,
      validate,
      show = noop,
      example,
      variables,
      onFocus,
      onBlur
    } = props;
    const [cachedInvalidValue, setCachedInvalidValue] = l$2(null);
    const [validationError, setValidationError] = l$2(null);
    const [localError, setLocalError] = l$2(null);
    let value = getValue(element);
    const previousValue = usePrevious(value);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setValidationError(newValidationError);
      }
    }, [value]);
    const onInput = useStaticCallback(newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      if (newValidationError) {
        setCachedInvalidValue(newValue);
      } else {
        // don't create multiple commandStack entries for the same value
        if (newValue !== value) {
          setValue(newValue);
        }
      }
      setValidationError(newValidationError);
    });
    const onError = A$1(err => {
      setLocalError(err);
    }, []);
    if (previousValue === value && validationError) {
      value = cachedInvalidValue;
    }
    const temporaryError = useError(id);
    const error = localError || temporaryError || validationError;
    return e$1("div", {
      class: classNames(props.class, 'bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [e$1(FeelTextfield, {
        debounce: debounce,
        disabled: disabled,
        feel: feel,
        id: id,
        label: label,
        onInput: onInput,
        onError: onError,
        onFocus: onFocus,
        onBlur: onBlur,
        example: example,
        show: show,
        value: value,
        variables: variables,
        tooltipContainer: tooltipContainer,
        OptionalComponent: props.OptionalComponent
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {Boolean} props.debounce
   * @param {Boolean} props.disabled
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {Function} props.validate
   */
  function FeelTextArea(props) {
    return e$1(FeelEntry, {
      class: "bio-properties-panel-feel-textarea",
      OptionalComponent: OptionalFeelTextArea,
      ...props
    });
  }
  function isEdited$6(node) {
    return node && (!!node.value || node.classList.contains('edited'));
  }

  // helpers /////////////////

  function prefixId$6(id) {
    return `bio-properties-panel-${id}`;
  }
  function NumberField(props) {
    const {
      debounce,
      disabled,
      id,
      label,
      max,
      min,
      onInput,
      step,
      value = '',
      onFocus,
      onBlur
    } = props;
    const [localValue, setLocalValue] = l$2(value);
    const handleInputCallback = d(() => {
      return debounce(event => {
        const {
          validity,
          value
        } = event.target;
        if (validity.valid) {
          onInput(value ? parseFloat(value) : undefined);
        }
      });
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return e$1("div", {
      class: "bio-properties-panel-numberfield",
      children: [e$1("label", {
        for: prefixId$5(id),
        class: "bio-properties-panel-label",
        children: label
      }), e$1("input", {
        id: prefixId$5(id),
        type: "number",
        name: id,
        spellCheck: "false",
        autoComplete: "off",
        disabled: disabled,
        class: "bio-properties-panel-input",
        max: max,
        min: min,
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        step: step,
        value: localValue
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Boolean} props.debounce
   * @param {String} props.description
   * @param {Boolean} props.disabled
   * @param {Object} props.element
   * @param {Function} props.getValue
   * @param {String} props.id
   * @param {String} props.label
   * @param {String} props.max
   * @param {String} props.min
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {String} props.step
   * @param {Function} props.validate
   */
  function NumberFieldEntry(props) {
    const {
      debounce,
      description,
      disabled,
      element,
      getValue,
      id,
      label,
      max,
      min,
      setValue,
      step,
      onFocus,
      onBlur,
      validate
    } = props;
    const [cachedInvalidValue, setCachedInvalidValue] = l$2(null);
    const globalError = useError(id);
    const [localError, setLocalError] = l$2(null);
    let value = getValue(element);
    const previousValue = usePrevious(value);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onInput = newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      if (newValidationError) {
        setCachedInvalidValue(newValue);
      } else {
        setValue(newValue);
      }
      setLocalError(newValidationError);
    };
    if (previousValue === value && localError) {
      value = cachedInvalidValue;
    }
    const error = globalError || localError;
    return e$1("div", {
      class: classNames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [e$1(NumberField, {
        debounce: debounce,
        disabled: disabled,
        id: id,
        label: label,
        onFocus: onFocus,
        onBlur: onBlur,
        onInput: onInput,
        max: max,
        min: min,
        step: step,
        value: value
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$5(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$5(id) {
    return `bio-properties-panel-${id}`;
  }
  function Select(props) {
    const {
      id,
      label,
      onChange,
      options = [],
      value = '',
      disabled,
      onFocus,
      onBlur
    } = props;
    const ref = useShowEntryEvent(id);
    const [localValue, setLocalValue] = l$2(value);
    const handleChangeCallback = ({
      target
    }) => {
      onChange(target.value);
    };
    const handleChange = e => {
      handleChangeCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return e$1("div", {
      class: "bio-properties-panel-select",
      children: [e$1("label", {
        for: prefixId$4(id),
        class: "bio-properties-panel-label",
        children: label
      }), e$1("select", {
        ref: ref,
        id: prefixId$4(id),
        name: id,
        class: "bio-properties-panel-input",
        onInput: handleChange,
        onFocus: onFocus,
        onBlur: onBlur,
        value: localValue,
        disabled: disabled,
        children: options.map((option, idx) => {
          return e$1("option", {
            value: option.value,
            disabled: option.disabled,
            children: option.label
          }, idx);
        })
      })]
    });
  }

  /**
   * @param {object} props
   * @param {object} props.element
   * @param {string} props.id
   * @param {string} [props.description]
   * @param {string} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {Function} props.getOptions
   * @param {boolean} [props.disabled]
   */
  function SelectEntry(props) {
    const {
      element,
      id,
      description,
      label,
      getValue,
      setValue,
      getOptions,
      disabled,
      onFocus,
      onBlur
    } = props;
    const value = getValue(element);
    const options = getOptions(element);
    const error = useError(id);
    return e$1("div", {
      class: classNames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [e$1(Select, {
        id: id,
        label: label,
        value: value,
        onChange: setValue,
        onFocus: onFocus,
        onBlur: onBlur,
        options: options,
        disabled: disabled
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$4(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$4(id) {
    return `bio-properties-panel-${id}`;
  }
  function TextArea(props) {
    const {
      id,
      label,
      rows = 2,
      debounce,
      onInput,
      value = '',
      disabled,
      monospace,
      onFocus,
      onBlur
    } = props;
    const [localValue, setLocalValue] = l$2(value);
    const ref = useShowEntryEvent(id);
    const handleInputCallback = d(() => {
      return debounce(({
        target
      }) => onInput(target.value.length ? target.value : undefined));
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return e$1("div", {
      class: "bio-properties-panel-textarea",
      children: [e$1("label", {
        for: prefixId$2(id),
        class: "bio-properties-panel-label",
        children: label
      }), e$1("textarea", {
        ref: ref,
        id: prefixId$2(id),
        name: id,
        spellCheck: "false",
        class: classNames('bio-properties-panel-input', monospace ? 'bio-properties-panel-input-monospace' : ''),
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        rows: rows,
        value: localValue,
        disabled: disabled,
        "data-gramm": "false"
      })]
    });
  }

  /**
   * @param {object} props
   * @param {object} props.element
   * @param {string} props.id
   * @param {string} props.description
   * @param {boolean} props.debounce
   * @param {string} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {number} props.rows
   * @param {boolean} props.monospace
   * @param {boolean} [props.disabled]
   */
  function TextAreaEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      label,
      getValue,
      setValue,
      rows,
      monospace,
      disabled,
      onFocus,
      onBlur
    } = props;
    const value = getValue(element);
    const error = useError(id);
    return e$1("div", {
      class: classNames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [e$1(TextArea, {
        id: id,
        label: label,
        value: value,
        onInput: setValue,
        onFocus: onFocus,
        onBlur: onBlur,
        rows: rows,
        debounce: debounce,
        monospace: monospace,
        disabled: disabled
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$2(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$2(id) {
    return `bio-properties-panel-${id}`;
  }
  function Textfield(props) {
    const {
      debounce,
      disabled = false,
      id,
      label,
      onInput,
      onFocus,
      onBlur,
      value = ''
    } = props;
    const [localValue, setLocalValue] = l$2(value || '');
    const ref = useShowEntryEvent(id);
    const handleInputCallback = d(() => {
      return debounce(({
        target
      }) => onInput(target.value.length ? target.value : undefined));
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return e$1("div", {
      class: "bio-properties-panel-textfield",
      children: [e$1("label", {
        for: prefixId$1(id),
        class: "bio-properties-panel-label",
        children: label
      }), e$1("input", {
        ref: ref,
        id: prefixId$1(id),
        type: "text",
        name: id,
        spellCheck: "false",
        autoComplete: "off",
        disabled: disabled,
        class: "bio-properties-panel-input",
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: localValue
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {Boolean} props.debounce
   * @param {Boolean} props.disabled
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {Function} props.validate
   */
  function TextfieldEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      disabled,
      label,
      getValue,
      setValue,
      validate,
      onFocus,
      onBlur
    } = props;
    const [cachedInvalidValue, setCachedInvalidValue] = l$2(null);
    const globalError = useError(id);
    const [localError, setLocalError] = l$2(null);
    let value = getValue(element);
    const previousValue = usePrevious(value);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onInput = newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      if (newValidationError) {
        setCachedInvalidValue(newValue);
      } else {
        setValue(newValue);
      }
      setLocalError(newValidationError);
    };
    if (previousValue === value && localError) {
      value = cachedInvalidValue;
    }
    const error = globalError || localError;
    return e$1("div", {
      class: classNames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [e$1(Textfield, {
        debounce: debounce,
        disabled: disabled,
        id: id,
        label: label,
        onInput: onInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: value
      }, element), error && e$1("div", {
        class: "bio-properties-panel-error",
        children: error
      }), e$1(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$1(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$1(id) {
    return `bio-properties-panel-${id}`;
  }

  /**
   * @param {string} type
   * @param {boolean} [strict]
   *
   * @returns {any}
   */
  function getService(type, strict) {}
  const PropertiesPanelContext = D$1({
    getService
  });
  var FormPropertiesPanelContext = PropertiesPanelContext;

  function arrayAdd(array, index, item) {
    const copy = [...array];
    copy.splice(index, 0, item);
    return copy;
  }
  function countDecimals(number) {
    const num = Big(number);
    if (num.toString() === num.toFixed(0)) return 0;
    return num.toFixed().split('.')[1].length || 0;
  }
  function isValidNumber(value) {
    return (typeof value === 'number' || typeof value === 'string') && value !== '' && !isNaN(Number(value));
  }
  function textToLabel(text) {
    if (typeof text != 'string') return null;
    for (const line of text.split('\n')) {
      const displayLine = line.trim();

      // we use the first non-whitespace line in the text as label
      if (displayLine !== '') {
        return displayLine;
      }
    }
    return null;
  }
  const INPUTS = ['checkbox', 'checklist', 'datetime', 'number', 'radio', 'select', 'taglist', 'textfield', 'textarea'];
  const VALUES_INPUTS = ['checklist', 'radio', 'select', 'taglist'];

  const labelsByType = {
    button: 'BUTTON',
    checkbox: 'CHECKBOX',
    checklist: 'CHECKLIST',
    columns: 'COLUMNS',
    default: 'FORM',
    datetime: 'DATETIME',
    image: 'IMAGE VIEW',
    number: 'NUMBER',
    radio: 'RADIO',
    select: 'SELECT',
    taglist: 'TAGLIST',
    text: 'TEXT VIEW',
    textfield: 'TEXT FIELD',
    textarea: 'TEXT AREA'
  };
  const PropertiesPanelHeaderProvider = {
    getElementLabel: field => {
      const {
        type
      } = field;
      if (type === 'text') {
        return textToLabel(field.text);
      }
      if (type === 'image') {
        return field.alt;
      }
      if (type === 'default') {
        return field.id;
      }
      return field.label;
    },
    getElementIcon: field => {
      const {
        type
      } = field;
      const Icon = iconsByType(type);
      if (Icon) {
        return () => e$1(Icon, {
          width: "36",
          height: "36",
          viewBox: "0 0 54 54"
        });
      }
    },
    getTypeLabel: field => {
      const {
        type
      } = field;
      return labelsByType[type];
    }
  };

  /**
   * Provide placeholders for empty and multiple state.
   */
  const PropertiesPanelPlaceholderProvider = {
    getEmpty: () => {
      return {
        text: 'Select a form field to edit its properties.'
      };
    },
    getMultiple: () => {
      return {
        text: 'Multiple form fields are selected. Select a single form field to edit its properties.'
      };
    }
  };

  function ActionEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (type === 'button') {
      entries.push({
        id: 'action',
        component: Action,
        editField: editField,
        field: field,
        isEdited: isEdited$4
      });
    }
    return entries;
  }
  function Action(props) {
    const {
      editField,
      field,
      id
    } = props;
    const path = ['action'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    const getOptions = () => [{
      label: 'Submit',
      value: 'submit'
    }, {
      label: 'Reset',
      value: 'reset'
    }];
    return SelectEntry({
      element: field,
      getOptions,
      getValue,
      id,
      label: 'Action',
      setValue
    });
  }

  function useService (type, strict) {
    const {
      getService
    } = F$1(FormPropertiesPanelContext);
    return getService(type, strict);
  }

  /**
   * Retrieve list of variables from the form schema.
   *
   * @returns { string[] } list of variables used in form schema
   */
  function useVariables() {
    const form = useService('formEditor');
    const schema = form.getSchema();
    return getSchemaVariables(schema);
  }

  function AltTextEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (type === 'image') {
      entries.push({
        id: 'alt',
        component: AltText,
        editField: editField,
        field: field,
        isEdited: isEdited$6
      });
    }
    return entries;
  }
  function AltText(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const variables = useVariables().map(name => ({
      name
    }));
    const path = ['alt'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return FeelEntry({
      debounce,
      element: field,
      feel: 'optional',
      getValue,
      id,
      label: 'Alternative text',
      setValue,
      variables
    });
  }

  function ColumnsEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (type === 'columns') {
      entries.push({
        id: 'columns',
        component: Columns,
        editField: editField,
        field: field,
        isEdited: isEdited$5
      });
    }
    return entries;
  }
  function Columns(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const getValue = () => {
      return field.components.length;
    };
    const setValue = value => {
      let components = field.components.slice();
      if (value > components.length) {
        while (value > components.length) {
          components.push(Default.create({
            _parent: field.id
          }));
        }
      } else {
        components = components.slice(0, value);
      }
      editField(field, 'components', components);
    };
    return NumberFieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Columns',
      setValue
    });
  }

  function DescriptionEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (INPUTS.includes(type)) {
      entries.push({
        id: 'description',
        component: Description,
        editField: editField,
        field: field,
        isEdited: isEdited$1
      });
    }
    return entries;
  }
  function Description(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const path = ['description'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Field description',
      setValue
    });
  }

  const EMPTY_OPTION = null;
  function DefaultOptionEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];

    // Only make default values available when they are statically defined
    if (!INPUTS.includes(type) || VALUES_INPUTS.includes(type) && !field.values) {
      return entries;
    }
    const defaultOptions = {
      editField,
      field,
      id: 'defaultValue',
      label: 'Default value'
    };
    if (type === 'checkbox') {
      entries.push({
        ...defaultOptions,
        component: DefaultValueCheckbox,
        isEdited: isEdited$4
      });
    }
    if (type === 'number') {
      entries.push({
        ...defaultOptions,
        component: DefaultValueNumber,
        isEdited: isEdited$1
      });
    }
    if (type === 'radio' || type === 'select') {
      entries.push({
        ...defaultOptions,
        component: DefaultValueSingleSelect,
        isEdited: isEdited$4
      });
    }

    // todo(Skaiir): implement a multiselect equivalent (cf. https://github.com/bpmn-io/form-js/issues/265)

    if (type === 'textfield') {
      entries.push({
        ...defaultOptions,
        component: DefaultValueTextfield,
        isEdited: isEdited$1
      });
    }
    if (type === 'textarea') {
      entries.push({
        ...defaultOptions,
        component: DefaultValueTextarea,
        isEdited: isEdited$2
      });
    }
    return entries;
  }
  function DefaultValueCheckbox(props) {
    const {
      editField,
      field,
      id,
      label
    } = props;
    const {
      defaultValue
    } = field;
    const path = ['defaultValue'];
    const getOptions = () => {
      return [{
        label: 'Checked',
        value: 'true'
      }, {
        label: 'Not checked',
        value: 'false'
      }];
    };
    const setValue = value => {
      return editField(field, path, parseStringToBoolean(value));
    };
    const getValue = () => {
      return parseBooleanToString(defaultValue);
    };
    return SelectEntry({
      element: field,
      getOptions,
      getValue,
      id,
      label,
      setValue
    });
  }
  function DefaultValueNumber(props) {
    const {
      editField,
      field,
      id,
      label
    } = props;
    const {
      decimalDigits,
      serializeToString = false
    } = field;
    const debounce = useService('debounce');
    const path = ['defaultValue'];
    const getValue = e => {
      let value = get(field, path);
      if (!isValidNumber(value)) return;

      // Enforces decimal notation so that we do not submit defaults in exponent form
      return serializeToString ? Big(value).toFixed() : value;
    };
    const setValue = value => {
      let newValue;
      if (isValidNumber(value)) {
        newValue = serializeToString ? value : Number(value);
      }
      return editField(field, path, newValue);
    };
    const decimalDigitsSet = decimalDigits || decimalDigits === 0;
    return TextfieldEntry({
      debounce,
      label,
      element: field,
      getValue,
      id,
      setValue,
      validate: value => {
        if (value === undefined || value === null) return;
        if (!isValidNumber(value)) return 'Should be a valid number';
        if (decimalDigitsSet && countDecimals(value) > decimalDigits) return `Should not contain more than ${decimalDigits} decimal digits`;
      }
    });
  }
  function DefaultValueSingleSelect(props) {
    const {
      editField,
      field,
      id,
      label
    } = props;
    const {
      defaultValue = EMPTY_OPTION,
      values = []
    } = field;
    const path = ['defaultValue'];
    const getOptions = () => {
      return [{
        label: '<none>',
        value: EMPTY_OPTION
      }, ...values];
    };
    const setValue = value => {
      return editField(field, path, value.length ? value : undefined);
    };
    const getValue = () => {
      return defaultValue;
    };
    return SelectEntry({
      element: field,
      getOptions,
      getValue,
      id,
      label,
      setValue
    });
  }
  function DefaultValueTextfield(props) {
    const {
      editField,
      field,
      id,
      label
    } = props;
    const debounce = useService('debounce');
    const path = ['defaultValue'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label,
      setValue
    });
  }
  function DefaultValueTextarea(props) {
    const {
      editField,
      field,
      id,
      label
    } = props;
    const debounce = useService('debounce');
    const path = ['defaultValue'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return TextAreaEntry({
      debounce,
      element: field,
      getValue,
      id,
      label,
      setValue
    });
  }

  // helpers /////////////////

  function parseStringToBoolean(value) {
    if (value === 'true') {
      return true;
    }
    return false;
  }
  function parseBooleanToString(value) {
    if (value === true) {
      return 'true';
    }
    return 'false';
  }

  function DisabledEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (INPUTS.includes(type)) {
      entries.push({
        id: 'disabled',
        component: Disabled,
        editField: editField,
        field: field,
        isEdited: isEdited$7
      });
    }
    return entries;
  }
  function Disabled(props) {
    const {
      editField,
      field,
      id
    } = props;
    const path = ['disabled'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return CheckboxEntry({
      element: field,
      getValue,
      id,
      label: 'Disabled',
      setValue
    });
  }

  function IdEntry(props) {
    const {
      editField,
      field
    } = props;
    const entries = [];
    if (field.type === 'default') {
      entries.push({
        id: 'id',
        component: Id,
        editField: editField,
        field: field,
        isEdited: isEdited$1
      });
    }
    return entries;
  }
  function Id(props) {
    const {
      editField,
      field,
      id
    } = props;
    const formFieldRegistry = useService('formFieldRegistry');
    const debounce = useService('debounce');
    const path = ['id'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    const validate = value => {
      if (isUndefined(value) || !value.length) {
        return 'Must not be empty.';
      }
      const assigned = formFieldRegistry._ids.assigned(value);
      if (assigned && assigned !== field) {
        return 'Must be unique.';
      }
      return validateId(value) || null;
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'ID',
      setValue,
      validate
    });
  }

  // id structural validation /////////////

  const SPACE_REGEX = /\s/;

  // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
  const QNAME_REGEX = /^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;

  // for ID validation as per BPMN Schema (QName - Namespace)
  const ID_REGEX = /^[a-z_][\w-.]*$/i;
  function validateId(idValue) {
    if (containsSpace(idValue)) {
      return 'Must not contain spaces.';
    }
    if (!ID_REGEX.test(idValue)) {
      if (QNAME_REGEX.test(idValue)) {
        return 'Must not contain prefix.';
      }
      return 'Must be a valid QName.';
    }
  }
  function containsSpace(value) {
    return SPACE_REGEX.test(value);
  }

  function KeyEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (INPUTS.includes(type)) {
      entries.push({
        id: 'key',
        component: Key$1,
        editField: editField,
        field: field,
        isEdited: isEdited$1
      });
    }
    return entries;
  }
  function Key$1(props) {
    const {
      editField,
      field,
      id
    } = props;
    const formFieldRegistry = useService('formFieldRegistry');
    const debounce = useService('debounce');
    const path = ['key'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    const validate = value => {
      if (isUndefined(value) || !value.length) {
        return 'Must not be empty.';
      }
      if (/\s/.test(value)) {
        return 'Must not contain spaces.';
      }
      const assigned = formFieldRegistry._keys.assigned(value);
      if (assigned && assigned !== field) {
        return 'Must be unique.';
      }
      return null;
    };
    return TextfieldEntry({
      debounce,
      description: 'Binds to a form variable',
      element: field,
      getValue,
      id,
      label: 'Key',
      setValue,
      validate
    });
  }

  function simpleStringEntryFactory(options) {
    const {
      id,
      label,
      path,
      props
    } = options;
    const {
      editField,
      field
    } = props;
    return {
      id,
      label,
      path,
      field,
      editField,
      component: SimpleStringComponent,
      isEdited: isEdited$1
    };
  }
  const SimpleStringComponent = props => {
    const {
      id,
      label,
      path,
      field,
      editField
    } = props;
    const debounce = useService('debounce');
    const getValue = () => get(field, path, '');
    const setValue = value => editField(field, path, value);
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label,
      setValue
    });
  };

  function simpleBoolEntryFactory(options) {
    const {
      id,
      label,
      path,
      props
    } = options;
    const {
      editField,
      field
    } = props;
    return {
      id,
      label,
      path,
      field,
      editField,
      component: SimpleBoolComponent,
      isEdited: isEdited$7
    };
  }
  const SimpleBoolComponent = props => {
    const {
      id,
      label,
      path,
      field,
      editField
    } = props;
    const getValue = () => get(field, path, '');
    const setValue = value => editField(field, path, value);
    return CheckboxEntry({
      element: field,
      getValue,
      id,
      label,
      setValue
    });
  };

  function LabelEntry(props) {
    const {
      field
    } = props;
    const {
      type,
      subtype
    } = field;
    const entries = [];
    if (type === 'datetime') {
      if (subtype === DATETIME_SUBTYPES.DATE || subtype === DATETIME_SUBTYPES.DATETIME) {
        entries.push(simpleStringEntryFactory({
          id: 'date-label',
          path: DATE_LABEL_PATH,
          label: 'Date label',
          props
        }));
      }
      if (subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME) {
        entries.push(simpleStringEntryFactory({
          id: 'time-label',
          path: TIME_LABEL_PATH,
          label: 'Time label',
          props
        }));
      }
    } else if (INPUTS.includes(type) || type === 'button') {
      entries.push(simpleStringEntryFactory({
        id: 'label',
        path: ['label'],
        label: 'Field label',
        props
      }));
    }
    return entries;
  }

  function SourceEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    if (type === 'image') {
      entries.push({
        id: 'source',
        component: Source,
        editField: editField,
        field: field,
        isEdited: isEdited$6
      });
    }
    return entries;
  }
  function Source(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const variables = useVariables().map(name => ({
      name
    }));
    const path = ['source'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return FeelEntry({
      debounce,
      description: 'Expression or static value (link/data URI)',
      element: field,
      feel: 'optional',
      getValue,
      id,
      label: 'Image source',
      setValue,
      variables
    });
  }

  function TextEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    if (type !== 'text') {
      return [];
    }
    return [{
      id: 'text',
      component: Text,
      editField: editField,
      field: field,
      isEdited: isEdited$6
    }];
  }
  function Text(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const variables = useVariables().map(name => ({
      name
    }));
    const path = ['text'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return FeelTextArea({
      debounce,
      description: 'Use an Expression, Markdown or basic HTML to format.',
      element: field,
      feel: 'optional',
      getValue,
      id,
      label: 'Text',
      rows: 10,
      setValue,
      variables
    });
  }

  function NumberEntries(props) {
    const {
      editField,
      field,
      id
    } = props;
    const {
      type
    } = field;
    if (type !== 'number') {
      return [];
    }
    const entries = [];
    entries.push({
      id: id + '-decimalDigits',
      component: NumberDecimalDigits,
      isEdited: isEdited$5,
      editField,
      field
    });
    entries.push({
      id: id + '-step',
      component: NumberArrowStep,
      isEdited: isEdited$1,
      editField,
      field
    });
    return entries;
  }
  function NumberDecimalDigits(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const getValue = e => get(field, ['decimalDigits']);
    const setValue = value => editField(field, ['decimalDigits'], value);
    return NumberFieldEntry({
      debounce,
      label: 'Decimal digits',
      element: field,
      step: 'any',
      getValue,
      id,
      setValue,
      validate: value => {
        if (value === undefined || value === null) return;
        if (value < 0) return 'Should be greater than or equal to zero.';
        if (!Number.isInteger(value)) return 'Should be an integer.';
      }
    });
  }
  function NumberArrowStep(props) {
    const {
      editField,
      field,
      id
    } = props;
    const {
      decimalDigits
    } = field;
    const debounce = useService('debounce');
    const getValue = e => {
      let value = get(field, ['increment']);
      if (!isValidNumber(value)) return null;
      return value;
    };
    const clearLeadingZeroes = value => {
      if (!value) return value;
      const trimmed = value.replace(/^0+/g, '');
      return (trimmed.startsWith('.') ? '0' : '') + trimmed;
    };
    const setValue = value => editField(field, ['increment'], clearLeadingZeroes(value));
    const decimalDigitsSet = decimalDigits || decimalDigits === 0;
    return TextfieldEntry({
      debounce,
      label: 'Increment',
      element: field,
      getValue,
      id,
      setValue,
      validate: value => {
        if (value === undefined || value === null) return;
        if (!isValidNumber(value)) return 'Should be a valid number.';
        if (Big(value).cmp(0) <= 0) return 'Should be greater than zero.';
        if (decimalDigitsSet) {
          const minimumValue = Big(`1e-${decimalDigits}`);
          if (Big(value).cmp(minimumValue) < 0) return `Should be at least ${minimumValue.toString()}.`;
          if (countDecimals(value) > decimalDigits) return `Should not contain more than ${decimalDigits} decimal digits.`;
        }
      }
    });
  }

  function NumberSerializationEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    if (type !== 'number') {
      return [];
    }
    const entries = [];
    entries.push({
      id: 'serialize-to-string',
      component: SerializeToString,
      isEdited: isEdited$7,
      editField,
      field
    });
    return entries;
  }
  function SerializeToString(props) {
    const {
      editField,
      field,
      id
    } = props;
    const {
      defaultValue
    } = field;
    const path = ['serializeToString'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      // Whenever changing the formatting, make sure to change the default value type along with it
      if (defaultValue || defaultValue === 0) {
        editField(field, ['defaultValue'], value ? Big(defaultValue).toFixed() : Number(defaultValue));
      }
      return editField(field, path, value);
    };
    return CheckboxEntry({
      element: field,
      getValue,
      id,
      label: 'Output as string',
      description: 'Allows arbitrary precision values',
      setValue
    });
  }

  function DateTimeEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type,
      subtype
    } = field;
    if (type !== 'datetime') {
      return [];
    }
    const entries = [{
      id: 'subtype',
      component: DateTimeSubtypeSelect,
      isEdited: isEdited$4,
      editField,
      field
    }];
    if (subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME) {
      entries.push({
        id: 'use24h',
        component: Use24h,
        isEdited: isEdited$7,
        editField,
        field
      });
    }
    return entries;
  }
  function DateTimeSubtypeSelect(props) {
    const {
      editField,
      field,
      id
    } = props;
    const getValue = e => get(field, DATETIME_SUBTYPE_PATH);
    const clearTimeConfig = () => {
      const timeConfigPaths = [TIME_LABEL_PATH, TIME_USE24H_PATH, TIME_INTERVAL_PATH, TIME_SERIALISING_FORMAT_PATH];
      for (const path of timeConfigPaths) {
        editField(field, path, undefined);
      }
    };
    const initTimeConfig = () => {
      editField(field, TIME_LABEL_PATH, 'Time');
      editField(field, TIME_SERIALISING_FORMAT_PATH, TIME_SERIALISING_FORMATS.UTC_OFFSET);
      editField(field, TIME_INTERVAL_PATH, 15);
    };
    const clearDateConfig = () => {
      const dateConfigPaths = [DATE_LABEL_PATH, DATE_DISALLOW_PAST_PATH];
      for (const path of dateConfigPaths) {
        editField(field, path, undefined);
      }
    };
    const initDateConfig = () => {
      editField(field, DATE_LABEL_PATH, 'Date');
    };
    const setValue = value => {
      const oldValue = getValue();
      if (oldValue === value) return;
      if (value === DATETIME_SUBTYPES.DATE) {
        clearTimeConfig();
        oldValue === DATETIME_SUBTYPES.TIME && initDateConfig();
      } else if (value === DATETIME_SUBTYPES.TIME) {
        clearDateConfig();
        oldValue === DATETIME_SUBTYPES.DATE && initTimeConfig();
      } else if (value === DATETIME_SUBTYPES.DATETIME) {
        oldValue === DATETIME_SUBTYPES.DATE && initTimeConfig();
        oldValue === DATETIME_SUBTYPES.TIME && initDateConfig();
      }
      return editField(field, DATETIME_SUBTYPE_PATH, value);
    };
    const getDatetimeSubtypes = () => {
      return Object.values(DATETIME_SUBTYPES).map(subtype => ({
        label: DATETIME_SUBTYPES_LABELS[subtype],
        value: subtype
      }));
    };
    return SelectEntry({
      label: 'Subtype',
      element: field,
      getOptions: getDatetimeSubtypes,
      getValue,
      id,
      setValue
    });
  }
  function Use24h(props) {
    const {
      editField,
      field,
      id
    } = props;
    const path = TIME_USE24H_PATH;
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return CheckboxEntry({
      element: field,
      getValue,
      id,
      label: 'Use 24h',
      setValue
    });
  }

  function DateTimeConstraintsEntry(props) {
    const {
      editField,
      field,
      id
    } = props;
    const {
      type,
      subtype
    } = field;
    if (type !== 'datetime') {
      return [];
    }
    const entries = [];
    if (subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME) {
      entries.push({
        id: id + '-timeInterval',
        component: TimeIntervalSelect,
        isEdited: isEdited$4,
        editField,
        field
      });
    }
    if (subtype === DATETIME_SUBTYPES.DATE || subtype === DATETIME_SUBTYPES.DATETIME) {
      entries.push({
        id: id + '-disallowPassedDates',
        component: DisallowPassedDates,
        isEdited: isEdited$7,
        editField,
        field
      });
    }
    return entries;
  }
  function DisallowPassedDates(props) {
    const {
      editField,
      field,
      id
    } = props;
    const path = DATE_DISALLOW_PAST_PATH;
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      return editField(field, path, value);
    };
    return CheckboxEntry({
      element: field,
      getValue,
      id,
      label: 'Disallow past dates',
      setValue
    });
  }
  function TimeIntervalSelect(props) {
    const {
      editField,
      field,
      id
    } = props;
    const timeIntervals = [1, 5, 10, 15, 30, 60];
    const getValue = e => get(field, TIME_INTERVAL_PATH);
    const setValue = value => editField(field, TIME_INTERVAL_PATH, parseInt(value));
    const getTimeIntervals = () => {
      return timeIntervals.map(timeInterval => ({
        label: timeInterval === 60 ? '1h' : timeInterval + 'm',
        value: timeInterval
      }));
    };
    return SelectEntry({
      label: 'Time interval',
      element: field,
      getOptions: getTimeIntervals,
      getValue,
      id,
      setValue
    });
  }

  function DateTimeFormatEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type,
      subtype
    } = field;
    if (type !== 'datetime') {
      return [];
    }
    const entries = [];
    if (subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME) {
      entries.push({
        id: 'time-format',
        component: TimeFormatSelect,
        isEdited: isEdited$4,
        editField,
        field
      });
    }
    return entries;
  }
  function TimeFormatSelect(props) {
    const {
      editField,
      field,
      id
    } = props;
    const getValue = e => get(field, TIME_SERIALISING_FORMAT_PATH);
    const setValue = value => editField(field, TIME_SERIALISING_FORMAT_PATH, value);
    const getTimeSerialisingFormats = () => {
      return Object.values(TIME_SERIALISING_FORMATS).map(format => ({
        label: TIME_SERIALISINGFORMAT_LABELS[format],
        value: format
      }));
    };
    return SelectEntry({
      label: 'Time format',
      element: field,
      getOptions: getTimeSerialisingFormats,
      getValue,
      id,
      setValue
    });
  }

  function SelectEntries(props) {
    const {
      field
    } = props;
    const {
      type
    } = field;
    if (type !== 'select') {
      return [];
    }
    const entries = [simpleBoolEntryFactory({
      id: 'searchable',
      path: ['searchable'],
      label: 'Searchable',
      props
    })];
    return entries;
  }

  function ValueEntry(props) {
    const {
      editField,
      field,
      idPrefix,
      index,
      validateFactory
    } = props;
    const entries = [{
      component: Label,
      editField,
      field,
      id: idPrefix + '-label',
      idPrefix,
      index,
      validateFactory
    }, {
      component: Value$1,
      editField,
      field,
      id: idPrefix + '-value',
      idPrefix,
      index,
      validateFactory
    }];
    return entries;
  }
  function Label(props) {
    const {
      editField,
      field,
      id,
      index,
      validateFactory
    } = props;
    const debounce = useService('debounce');
    const setValue = value => {
      const values = get(field, ['values']);
      return editField(field, 'values', set$1(values, [index, 'label'], value));
    };
    const getValue = () => {
      return get(field, ['values', index, 'label']);
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Label',
      setValue,
      validate: validateFactory(getValue())
    });
  }
  function Value$1(props) {
    const {
      editField,
      field,
      id,
      index,
      validateFactory
    } = props;
    const debounce = useService('debounce');
    const setValue = value => {
      const values = get(field, ['values']);
      return editField(field, 'values', set$1(values, [index, 'value'], value));
    };
    const getValue = () => {
      return get(field, ['values', index, 'value']);
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Value',
      setValue,
      validate: validateFactory(getValue())
    });
  }

  function CustomValueEntry(props) {
    const {
      editField,
      field,
      idPrefix,
      index,
      validateFactory
    } = props;
    const entries = [{
      component: Key,
      editField,
      field,
      id: idPrefix + '-key',
      idPrefix,
      index,
      validateFactory
    }, {
      component: Value,
      editField,
      field,
      id: idPrefix + '-value',
      idPrefix,
      index,
      validateFactory
    }];
    return entries;
  }
  function Key(props) {
    const {
      editField,
      field,
      id,
      index,
      validateFactory
    } = props;
    const debounce = useService('debounce');
    const setValue = value => {
      const properties = get(field, ['properties']);
      const key = Object.keys(properties)[index];
      return editField(field, 'properties', updateKey(properties, key, value));
    };
    const getValue = () => {
      return Object.keys(get(field, ['properties']))[index];
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Key',
      setValue,
      validate: validateFactory(getValue())
    });
  }
  function Value(props) {
    const {
      editField,
      field,
      id,
      index,
      validateFactory
    } = props;
    const debounce = useService('debounce');
    const setValue = value => {
      const properties = get(field, ['properties']);
      const key = Object.keys(properties)[index];
      editField(field, 'properties', updateValue(properties, key, value));
    };
    const getValue = () => {
      const properties = get(field, ['properties']);
      const key = Object.keys(properties)[index];
      return get(field, ['properties', key]);
    };
    return TextfieldEntry({
      debounce,
      element: field,
      getValue,
      id,
      label: 'Value',
      setValue,
      validate: validateFactory(getValue())
    });
  }

  // helpers //////////

  /**
   * Returns copy of object with updated value.
   *
   * @param {Object} properties
   * @param {string} key
   * @param {string} value
   *
   * @returns {Object}
   */
  function updateValue(properties, key, value) {
    return {
      ...properties,
      [key]: value
    };
  }

  /**
   * Returns copy of object with updated key.
   *
   * @param {Object} properties
   * @param {string} oldKey
   * @param {string} newKey
   *
   * @returns {Object}
   */
  function updateKey(properties, oldKey, newKey) {
    return Object.entries(properties).reduce((newProperties, entry) => {
      const [key, value] = entry;
      return {
        ...newProperties,
        [key === oldKey ? newKey : key]: value
      };
    }, {});
  }

  function ValuesSourceSelectEntry(props) {
    const {
      editField,
      field,
      id
    } = props;
    return [{
      id: id + '-select',
      component: ValuesSourceSelect,
      isEdited: isEdited$4,
      editField,
      field
    }];
  }
  function ValuesSourceSelect(props) {
    const {
      editField,
      field,
      id
    } = props;
    const getValue = getValuesSource;
    const setValue = value => {
      let newField = field;
      const newProperties = {};
      Object.values(VALUES_SOURCES).forEach(source => {
        // Clear all values source definitions and default the newly selected one
        const newValue = value === source ? VALUES_SOURCES_DEFAULTS[source] : undefined;
        newProperties[VALUES_SOURCES_PATHS[source]] = newValue;
      });
      newField = editField(field, newProperties);
      return newField;
    };
    const getValuesSourceOptions = () => {
      return Object.values(VALUES_SOURCES).map(valueSource => ({
        label: VALUES_SOURCES_LABELS[valueSource],
        value: valueSource
      }));
    };
    return SelectEntry({
      label: 'Type',
      element: field,
      getOptions: getValuesSourceOptions,
      getValue,
      id,
      setValue
    });
  }

  function InputKeyValuesSourceEntry(props) {
    const {
      editField,
      field,
      id
    } = props;
    return [{
      id: id + '-key',
      component: InputValuesKey,
      label: 'Input values key',
      description: 'Define which input property to populate the values from',
      isEdited: isEdited$1,
      editField,
      field
    }];
  }
  function InputValuesKey(props) {
    const {
      editField,
      field,
      id,
      label,
      description
    } = props;
    const debounce = useService('debounce');
    const path = VALUES_SOURCES_PATHS[VALUES_SOURCES.INPUT];
    const getValue = () => get(field, path, '');
    const setValue = value => editField(field, path, value || '');
    const validate = value => {
      if (isUndefined(value) || !value.length) {
        return 'Must not be empty.';
      }
      if (/\s/.test(value)) {
        return 'Must not contain spaces.';
      }
      return null;
    };
    return TextfieldEntry({
      debounce,
      description,
      element: field,
      getValue,
      id,
      label,
      setValue,
      validate
    });
  }

  function StaticValuesSourceEntry(props) {
    const {
      editField,
      field,
      id: idPrefix
    } = props;
    const {
      values
    } = field;
    const addEntry = e => {
      e.stopPropagation();
      const index = values.length + 1;
      const entry = getIndexedEntry(index);
      editField(field, VALUES_SOURCES_PATHS[VALUES_SOURCES.STATIC], arrayAdd(values, values.length, entry));
    };
    const removeEntry = entry => {
      editField(field, VALUES_SOURCES_PATHS[VALUES_SOURCES.STATIC], without(values, entry));
    };
    const validateFactory = key => {
      return value => {
        if (value === key) {
          return;
        }
        if (isUndefined(value) || !value.length) {
          return 'Must not be empty.';
        }
        const isValueAssigned = values.find(entry => entry.value === value);
        if (isValueAssigned) {
          return 'Must be unique.';
        }
      };
    };
    const items = values.map((entry, index) => {
      const id = idPrefix + '-' + index;
      return {
        id,
        label: entry.label,
        entries: ValueEntry({
          editField,
          field,
          idPrefix: id,
          index,
          validateFactory
        }),
        autoFocusEntry: id + '-label',
        remove: () => removeEntry(entry)
      };
    });
    return {
      items,
      add: addEntry,
      shouldSort: false
    };
  }

  // helper

  function getIndexedEntry(index) {
    const entry = {
      label: 'Value',
      value: 'value'
    };
    if (index > 1) {
      entry.label += ` ${index}`;
      entry.value += `${index}`;
    }
    return entry;
  }

  function AdornerEntry(props) {
    const {
      editField,
      field
    } = props;
    const {
      type
    } = field;
    const entries = [];
    const onChange = key => {
      return value => {
        const appearance = get(field, ['appearance'], {});
        editField(field, ['appearance'], set$1(appearance, [key], value));
      };
    };
    const getValue = key => {
      return () => {
        return get(field, ['appearance', key]);
      };
    };
    if (['number', 'textfield'].includes(type)) {
      entries.push({
        id: 'prefix-adorner',
        component: PrefixAdorner,
        isEdited: isEdited$1,
        editField,
        field,
        onChange,
        getValue
      });
      entries.push({
        id: 'suffix-adorner',
        component: SuffixAdorner,
        isEdited: isEdited$1,
        editField,
        field,
        onChange,
        getValue
      });
    }
    return entries;
  }
  function PrefixAdorner(props) {
    const {
      field,
      id,
      onChange,
      getValue
    } = props;
    const debounce = useService('debounce');
    return TextfieldEntry({
      debounce,
      element: field,
      getValue: getValue('prefixAdorner'),
      id,
      label: 'Prefix',
      setValue: onChange('prefixAdorner')
    });
  }
  function SuffixAdorner(props) {
    const {
      field,
      id,
      onChange,
      getValue
    } = props;
    const debounce = useService('debounce');
    return TextfieldEntry({
      debounce,
      element: field,
      getValue: getValue('suffixAdorner'),
      id,
      label: 'Suffix',
      setValue: onChange('suffixAdorner')
    });
  }

  function ConditionEntry(props) {
    const {
      editField,
      field
    } = props;
    return [{
      id: 'conditional-hide',
      component: Condition,
      editField: editField,
      field: field,
      isEdited: isEdited$6
    }];
  }
  function Condition(props) {
    const {
      editField,
      field,
      id
    } = props;
    const debounce = useService('debounce');
    const variables = useVariables().map(name => ({
      name
    }));
    const path = ['conditional', 'hide'];
    const getValue = () => {
      return get(field, path, '');
    };
    const setValue = value => {
      if (!value) {
        return editField(field, 'conditional', undefined);
      }
      return editField(field, 'conditional', {
        hide: value
      });
    };
    return FeelEntry({
      debounce,
      description: 'Condition under which the field is hidden',
      element: field,
      feel: 'required',
      getValue,
      id,
      label: 'Hide if',
      setValue,
      variables
    });
  }

  function GeneralGroup(field, editField) {
    const entries = [...IdEntry({
      field,
      editField
    }), ...LabelEntry({
      field,
      editField
    }), ...DescriptionEntry({
      field,
      editField
    }), ...KeyEntry({
      field,
      editField
    }), ...DefaultOptionEntry({
      field,
      editField
    }), ...ActionEntry({
      field,
      editField
    }), ...ColumnsEntry({
      field,
      editField
    }), ...DateTimeEntry({
      field,
      editField
    }), ...TextEntry({
      field,
      editField
    }), ...NumberEntries({
      field,
      editField
    }), ...SourceEntry({
      field,
      editField
    }), ...AltTextEntry({
      field,
      editField
    }), ...SelectEntries({
      field,
      editField
    }), ...DisabledEntry({
      field,
      editField
    })];
    return {
      id: 'general',
      label: 'General',
      entries
    };
  }

  function SerializationGroup(field, editField) {
    const entries = [...NumberSerializationEntry({
      field,
      editField
    }), ...DateTimeFormatEntry({
      field,
      editField
    })];
    if (!entries.length) {
      return null;
    }
    return {
      id: 'serialization',
      label: 'Serialization',
      entries
    };
  }

  function ConstraintsGroup(field, editField) {
    const entries = [...DateTimeConstraintsEntry({
      field,
      editField
    })];
    if (!entries.length) {
      return null;
    }
    return {
      id: 'constraints',
      label: 'Constraints',
      entries
    };
  }

  const VALIDATION_TYPE_OPTIONS = {
    custom: {
      value: '',
      label: 'Custom'
    },
    email: {
      value: 'email',
      label: 'Email'
    },
    phone: {
      value: 'phone',
      label: 'Phone'
    }
  };
  function ValidationGroup(field, editField) {
    const {
      type
    } = field;
    const validate = get(field, ['validate'], {});
    const isCustomValidation = [undefined, VALIDATION_TYPE_OPTIONS.custom.value].includes(validate.validationType);
    if (!(INPUTS.includes(type) && type !== 'checkbox' && type !== 'checklist' && type !== 'taglist')) {
      return null;
    }
    const onChange = key => {
      return value => {
        const validate = get(field, ['validate'], {});
        editField(field, ['validate'], set$1(validate, [key], value));
      };
    };
    const getValue = key => {
      return () => {
        return get(field, ['validate', key]);
      };
    };
    let entries = [{
      id: 'required',
      component: Required,
      getValue,
      field,
      isEdited: isEdited$7,
      onChange
    }];
    if (type === 'textfield') {
      entries.push({
        id: 'validationType',
        component: ValidationType,
        getValue,
        field,
        editField,
        isEdited: isEdited$1,
        onChange
      });
    }
    if (type === 'textarea' || type === 'textfield' && isCustomValidation) {
      entries.push({
        id: 'minLength',
        component: MinLength,
        getValue,
        field,
        isEdited: isEdited$5,
        onChange
      }, {
        id: 'maxLength',
        component: MaxLength,
        getValue,
        field,
        isEdited: isEdited$5,
        onChange
      });
    }
    if (type === 'textfield' && isCustomValidation) {
      entries.push({
        id: 'pattern',
        component: Pattern,
        getValue,
        field,
        isEdited: isEdited$1,
        onChange
      });
    }
    if (type === 'number') {
      entries.push({
        id: 'min',
        component: Min,
        getValue,
        field,
        isEdited: isEdited$5,
        onChange
      }, {
        id: 'max',
        component: Max,
        getValue,
        field,
        isEdited: isEdited$5,
        onChange
      });
    }
    return {
      id: 'validation',
      label: 'Validation',
      entries
    };
  }
  function Required(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    return CheckboxEntry({
      element: field,
      getValue: getValue('required'),
      id,
      label: 'Required',
      setValue: onChange('required')
    });
  }
  function MinLength(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    return NumberFieldEntry({
      debounce,
      element: field,
      getValue: getValue('minLength'),
      id,
      label: 'Minimum length',
      min: 0,
      setValue: onChange('minLength')
    });
  }
  function MaxLength(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    return NumberFieldEntry({
      debounce,
      element: field,
      getValue: getValue('maxLength'),
      id,
      label: 'Maximum length',
      min: 0,
      setValue: onChange('maxLength')
    });
  }
  function Pattern(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    return TextfieldEntry({
      debounce,
      element: field,
      getValue: getValue('pattern'),
      id,
      label: 'Custom regular expression',
      setValue: onChange('pattern')
    });
  }
  function Min(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    return NumberFieldEntry({
      debounce,
      element: field,
      id,
      label: 'Minimum',
      step: 'any',
      getValue: getValue('min'),
      setValue: onChange('min')
    });
  }
  function Max(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    return NumberFieldEntry({
      debounce,
      element: field,
      id,
      label: 'Maximum',
      step: 'any',
      getValue: getValue('max'),
      setValue: onChange('max')
    });
  }
  function ValidationType(props) {
    const {
      field,
      getValue,
      id,
      onChange
    } = props;
    const debounce = useService('debounce');
    const setValue = validationType => {
      onChange('validationType')(validationType || undefined);
    };
    return SelectEntry({
      debounce,
      element: field,
      getValue: getValue('validationType'),
      id,
      label: 'Validation pattern',
      setValue,
      getOptions: () => Object.values(VALIDATION_TYPE_OPTIONS)
    });
  }

  function ValuesGroups(field, editField) {
    const {
      type,
      id: fieldId
    } = field;
    if (!VALUES_INPUTS.includes(type)) {
      return [];
    }
    const context = {
      editField,
      field
    };
    const valuesSourceId = `${fieldId}-valuesSource`;

    /**
     * @type {Array<Group|ListGroup>}
     */
    const groups = [{
      id: valuesSourceId,
      label: 'Options source',
      component: Group,
      entries: ValuesSourceSelectEntry({
        ...context,
        id: valuesSourceId
      })
    }];
    const valuesSource = getValuesSource(field);
    if (valuesSource === VALUES_SOURCES.INPUT) {
      const dynamicValuesId = `${fieldId}-dynamicValues`;
      groups.push({
        id: dynamicValuesId,
        label: 'Dynamic options',
        component: Group,
        entries: InputKeyValuesSourceEntry({
          ...context,
          id: dynamicValuesId
        })
      });
    } else if (valuesSource === VALUES_SOURCES.STATIC) {
      const staticValuesId = `${fieldId}-staticValues`;
      groups.push({
        id: staticValuesId,
        label: 'Static options',
        component: ListGroup,
        ...StaticValuesSourceEntry({
          ...context,
          id: staticValuesId
        })
      });
    }
    return groups;
  }

  function CustomValuesGroup(field, editField) {
    const {
      properties = {},
      type
    } = field;
    if (type === 'default') {
      return null;
    }
    const addEntry = event => {
      event.stopPropagation();
      const index = Object.keys(properties).length + 1;
      const key = `key${index}`,
        value = 'value';
      editField(field, ['properties'], {
        ...properties,
        [key]: value
      });
    };
    const validateFactory = key => {
      return value => {
        if (value === key) {
          return;
        }
        if (isUndefined(value) || !value.length) {
          return 'Must not be empty.';
        }
        if (has(properties, value)) {
          return 'Must be unique.';
        }
      };
    };
    const items = Object.keys(properties).map((key, index) => {
      const removeEntry = event => {
        event.stopPropagation();
        return editField(field, ['properties'], removeKey(properties, key));
      };
      const id = `${field.id}-property-${index}`;
      return {
        autoFocusEntry: id + '-key',
        entries: CustomValueEntry({
          editField,
          field,
          idPrefix: id,
          index,
          validateFactory
        }),
        id,
        label: key || '',
        remove: removeEntry
      };
    });
    return {
      add: addEntry,
      component: ListGroup,
      id: 'custom-values',
      items,
      label: 'Custom properties',
      shouldSort: false
    };
  }

  // helpers //////////

  /**
   * Returns copy of object without key.
   *
   * @param {Object} properties
   * @param {string} oldKey
   *
   * @returns {Object}
   */
  function removeKey(properties, oldKey) {
    return Object.entries(properties).reduce((newProperties, entry) => {
      const [key, value] = entry;
      if (key === oldKey) {
        return newProperties;
      }
      return {
        ...newProperties,
        [key]: value
      };
    }, {});
  }

  function AppearanceGroup(field, editField) {
    const entries = [...AdornerEntry({
      field,
      editField
    })];
    if (!entries.length) {
      return null;
    }
    return {
      id: 'appearance',
      label: 'Appearance',
      entries
    };
  }

  function ConditionGroup(field, editField) {
    const {
      type
    } = field;
    if (type === 'default') {
      return null;
    }
    const entries = [...ConditionEntry({
      field,
      editField
    })];
    return {
      id: 'condition',
      label: 'Condition',
      entries
    };
  }

  function getGroups(field, editField) {
    if (!field) {
      return [];
    }
    const groups = [GeneralGroup(field, editField), ConditionGroup(field, editField), AppearanceGroup(field, editField), SerializationGroup(field, editField), ...ValuesGroups(field, editField), ConstraintsGroup(field, editField), ValidationGroup(field, editField), CustomValuesGroup(field, editField)];

    // contract: if a group returns null, it should not be displayed at all
    return groups.filter(group => group !== null);
  }
  function FormPropertiesPanel(props) {
    const {
      eventBus,
      injector
    } = props;
    const formEditor = injector.get('formEditor');
    const modeling = injector.get('modeling');
    const selection = injector.get('selection');
    const {
      schema
    } = formEditor._getState();
    const [state, setState] = l$2({
      selectedFormField: selection.get() || schema
    });
    const _update = field => {
      setState({
        ...state,
        selectedFormField: field
      });

      // notify interested parties on property panel updates
      eventBus.fire('propertiesPanel.updated', {
        formField: field
      });
    };
    h(() => {
      function onSelectionChange(event) {
        _update(event.selection || schema);
      }
      eventBus.on('selection.changed', onSelectionChange);
      return () => {
        eventBus.off('selection.changed', onSelectionChange);
      };
    }, []);
    h(() => {
      const onFieldChanged = () => {
        /**
         * TODO(pinussilvestrus): update with actual updated element,
         * once we have a proper updater/change support
         */
        _update(selection.get() || schema);
      };
      eventBus.on('changed', onFieldChanged);
      return () => {
        eventBus.off('changed', onFieldChanged);
      };
    }, []);
    const selectedFormField = state.selectedFormField;
    const propertiesPanelContext = {
      getService(type, strict = true) {
        return injector.get(type, strict);
      }
    };
    const onFocus = () => eventBus.fire('propertiesPanel.focusin');
    const onBlur = () => eventBus.fire('propertiesPanel.focusout');
    const editField = A$1((formField, key, value) => modeling.editFormField(formField, key, value), [modeling]);
    return e$1("div", {
      class: "fjs-properties-panel",
      "data-field": selectedFormField && selectedFormField.id,
      onFocusCapture: onFocus,
      onBlurCapture: onBlur,
      children: e$1(FormPropertiesPanelContext.Provider, {
        value: propertiesPanelContext,
        children: e$1(PropertiesPanel, {
          element: selectedFormField,
          eventBus: eventBus,
          groups: getGroups(selectedFormField, editField),
          headerProvider: PropertiesPanelHeaderProvider,
          placeholderProvider: PropertiesPanelPlaceholderProvider
        })
      })
    });
  }

  class PropertiesPanelRenderer {
    constructor(propertiesPanelConfig, injector, eventBus) {
      const {
        parent
      } = propertiesPanelConfig || {};
      this._eventBus = eventBus;
      this._injector = injector;
      this._container = domify$1$1('<div class="fjs-properties-container" input-handle-modified-keys="y,z"></div>');
      if (parent) {
        this.attachTo(parent);
      }
      this._eventBus.once('formEditor.rendered', 500, () => {
        this._render();
      });
    }

    /**
     * Attach the properties panel to a parent node.
     *
     * @param {HTMLElement} container
     */
    attachTo(container) {
      if (!container) {
        throw new Error('container required');
      }
      if (typeof container === 'string') {
        container = query(container);
      }

      // (1) detach from old parent
      this.detach();

      // (2) append to parent container
      container.appendChild(this._container);

      // (3) notify interested parties
      this._eventBus.fire('propertiesPanel.attach');
    }

    /**
     * Detach the properties panel from its parent node.
     */
    detach() {
      const parentNode = this._container.parentNode;
      if (parentNode) {
        parentNode.removeChild(this._container);
        this._eventBus.fire('propertiesPanel.detach');
      }
    }
    _render() {
      S$1(e$1(FormPropertiesPanel, {
        eventBus: this._eventBus,
        injector: this._injector
      }), this._container);
      this._eventBus.fire('propertiesPanel.rendered');
    }
    _destroy() {
      if (this._container) {
        S$1(null, this._container);
        this._eventBus.fire('propertiesPanel.destroyed');
      }
    }
  }
  PropertiesPanelRenderer.$inject = ['config.propertiesPanel', 'injector', 'eventBus'];

  var PropertiesPanelModule = {
    __init__: ['propertiesPanel'],
    propertiesPanel: ['type', PropertiesPanelRenderer]
  };

  const ids = new Ids([32, 36, 1]);

  /**
   * @typedef { import('./types').Injector } Injector
   * @typedef { import('./types').Module } Module
   * @typedef { import('./types').Schema } Schema
   *
   * @typedef { import('./types').FormEditorOptions } FormEditorOptions
   * @typedef { import('./types').FormEditorProperties } FormEditorProperties
   *
   * @typedef { {
   *   properties: FormEditorProperties,
   *   schema: Schema
   * } } State
   *
   * @typedef { (type:string, priority:number, handler:Function) => void } OnEventWithPriority
   * @typedef { (type:string, handler:Function) => void } OnEventWithOutPriority
   * @typedef { OnEventWithPriority & OnEventWithOutPriority } OnEventType
   */

  /**
   * The form editor.
   */
  class FormEditor {
    /**
     * @constructor
     * @param {FormEditorOptions} options
     */
    constructor(options = {}) {
      /**
       * @public
       * @type {OnEventType}
       */
      this.on = this._onEvent;

      /**
       * @public
       * @type {String}
       */
      this._id = ids.next();

      /**
       * @private
       * @type {Element}
       */
      this._container = createFormContainer();
      this._container.setAttribute('input-handle-modified-keys', 'z,y');
      const {
        container,
        exporter,
        injector = this._createInjector(options, this._container),
        properties = {}
      } = options;

      /**
       * @private
       * @type {any}
       */
      this.exporter = exporter;

      /**
       * @private
       * @type {State}
       */
      this._state = {
        properties,
        schema: null
      };
      this.get = injector.get;
      this.invoke = injector.invoke;
      this.get('eventBus').fire('form.init');
      if (container) {
        this.attachTo(container);
      }
    }
    clear() {
      // clear form services
      this._emit('diagram.clear');

      // clear diagram services (e.g. EventBus)
      this._emit('form.clear');
    }
    destroy() {
      // destroy form services
      this.get('eventBus').fire('form.destroy');

      // destroy diagram services (e.g. EventBus)
      this.get('eventBus').fire('diagram.destroy');
      this._detach(false);
    }

    /**
     * @param {Schema} schema
     *
     * @return {Promise<{ warnings: Array<any> }>}
     */
    importSchema(schema) {
      return new Promise((resolve, reject) => {
        try {
          this.clear();
          const {
            schema: importedSchema,
            warnings
          } = this.get('importer').importSchema(schema);
          this._setState({
            schema: importedSchema
          });
          this._emit('import.done', {
            warnings
          });
          return resolve({
            warnings
          });
        } catch (error) {
          this._emit('import.done', {
            error: error,
            warnings: error.warnings || []
          });
          return reject(error);
        }
      });
    }

    /**
     * @returns {Schema}
     */
    saveSchema() {
      return this.getSchema();
    }

    /**
     * @returns {Schema}
     */
    getSchema() {
      const {
        schema
      } = this._getState();
      return exportSchema(schema, this.exporter, schemaVersion);
    }

    /**
     * @param {Element|string} parentNode
     */
    attachTo(parentNode) {
      if (!parentNode) {
        throw new Error('parentNode required');
      }
      this.detach();
      if (isString(parentNode)) {
        parentNode = document.querySelector(parentNode);
      }
      const container = this._container;
      parentNode.appendChild(container);
      this._emit('attach');
    }
    detach() {
      this._detach();
    }

    /**
     * @internal
     *
     * @param {boolean} [emit]
     */
    _detach(emit = true) {
      const container = this._container,
        parentNode = container.parentNode;
      if (!parentNode) {
        return;
      }
      if (emit) {
        this._emit('detach');
      }
      parentNode.removeChild(container);
    }

    /**
     * @param {any} property
     * @param {any} value
     */
    setProperty(property, value) {
      const properties = set$1(this._getState().properties, [property], value);
      this._setState({
        properties
      });
    }

    /**
     * @param {string} type
     * @param {Function} handler
     */
    off(type, handler) {
      this.get('eventBus').off(type, handler);
    }

    /**
     * @internal
     *
     * @param {FormEditorOptions} options
     * @param {Element} container
     *
     * @returns {Injector}
     */
    _createInjector(options, container) {
      const {
        additionalModules = [],
        modules = this._getModules(),
        renderer = {}
      } = options;
      const config = {
        ...options,
        renderer: {
          ...renderer,
          container
        }
      };
      return createInjector([{
        config: ['value', config]
      }, {
        formEditor: ['value', this]
      }, core, ...modules, ...additionalModules]);
    }

    /**
     * @internal
     */
    _emit(type, data) {
      this.get('eventBus').fire(type, data);
    }

    /**
     * @internal
     */
    _getState() {
      return this._state;
    }

    /**
     * @internal
     */
    _setState(state) {
      this._state = {
        ...this._state,
        ...state
      };
      this._emit('changed', this._getState());
    }

    /**
     * @internal
     */
    _getModules() {
      return [ModelingModule, EditorActionsModule, KeyboardModule, SelectionModule, PaletteModule, PropertiesPanelModule];
    }

    /**
     * @internal
     */
    _onEvent(type, priority, handler) {
      this.get('eventBus').on(type, priority, handler);
    }
  }

  // helpers //////////

  function exportSchema(schema, exporter, schemaVersion) {
    const exportDetails = exporter ? {
      exporter
    } : {};
    const cleanedSchema = clone(schema, (name, value) => {
      if (['_parent', '_path'].includes(name)) {
        return undefined;
      }
      return value;
    });
    return {
      ...cleanedSchema,
      ...exportDetails,
      schemaVersion
    };
  }

  const basicNormalize = typeof String.prototype.normalize == "function"
      ? x => x.normalize("NFKD") : x => x;
  /**
  A search cursor provides an iterator over text matches in a
  document.
  */
  class SearchCursor {
      /**
      Create a text cursor. The query is the search string, `from` to
      `to` provides the region to search.
      
      When `normalize` is given, it will be called, on both the query
      string and the content it is matched against, before comparing.
      You can, for example, create a case-insensitive search by
      passing `s => s.toLowerCase()`.
      
      Text is always normalized with
      [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
      (when supported).
      */
      constructor(text, query, from = 0, to = text.length, normalize, test) {
          this.test = test;
          /**
          The current match (only holds a meaningful value after
          [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
          `done` is false).
          */
          this.value = { from: 0, to: 0 };
          /**
          Whether the end of the iterated region has been reached.
          */
          this.done = false;
          this.matches = [];
          this.buffer = "";
          this.bufferPos = 0;
          this.iter = text.iterRange(from, to);
          this.bufferStart = from;
          this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
          this.query = this.normalize(query);
      }
      peek() {
          if (this.bufferPos == this.buffer.length) {
              this.bufferStart += this.buffer.length;
              this.iter.next();
              if (this.iter.done)
                  return -1;
              this.bufferPos = 0;
              this.buffer = this.iter.value;
          }
          return codePointAt(this.buffer, this.bufferPos);
      }
      /**
      Look for the next match. Updates the iterator's
      [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
      [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
      at least once before using the cursor.
      */
      next() {
          while (this.matches.length)
              this.matches.pop();
          return this.nextOverlapping();
      }
      /**
      The `next` method will ignore matches that partially overlap a
      previous match. This method behaves like `next`, but includes
      such matches.
      */
      nextOverlapping() {
          for (;;) {
              let next = this.peek();
              if (next < 0) {
                  this.done = true;
                  return this;
              }
              let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
              this.bufferPos += codePointSize(next);
              let norm = this.normalize(str);
              for (let i = 0, pos = start;; i++) {
                  let code = norm.charCodeAt(i);
                  let match = this.match(code, pos);
                  if (match) {
                      this.value = match;
                      return this;
                  }
                  if (i == norm.length - 1)
                      break;
                  if (pos == start && i < str.length && str.charCodeAt(i) == code)
                      pos++;
              }
          }
      }
      match(code, pos) {
          let match = null;
          for (let i = 0; i < this.matches.length; i += 2) {
              let index = this.matches[i], keep = false;
              if (this.query.charCodeAt(index) == code) {
                  if (index == this.query.length - 1) {
                      match = { from: this.matches[i + 1], to: pos + 1 };
                  }
                  else {
                      this.matches[i]++;
                      keep = true;
                  }
              }
              if (!keep) {
                  this.matches.splice(i, 2);
                  i -= 2;
              }
          }
          if (this.query.charCodeAt(0) == code) {
              if (this.query.length == 1)
                  match = { from: pos, to: pos + 1 };
              else
                  this.matches.push(1, pos);
          }
          if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))
              match = null;
          return match;
      }
  }
  if (typeof Symbol != "undefined")
      SearchCursor.prototype[Symbol.iterator] = function () { return this; };

  const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
  const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  /**
  This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
  but searches for a regular expression pattern instead of a plain
  string.
  */
  class RegExpCursor {
      /**
      Create a cursor that will search the given range in the given
      document. `query` should be the raw pattern (as you'd pass it to
      `new RegExp`).
      */
      constructor(text, query, options, from = 0, to = text.length) {
          this.text = text;
          this.to = to;
          this.curLine = "";
          /**
          Set to `true` when the cursor has reached the end of the search
          range.
          */
          this.done = false;
          /**
          Will contain an object with the extent of the match and the
          match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
          sucessfully finds a match.
          */
          this.value = empty;
          if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
              return new MultilineRegExpCursor(text, query, options, from, to);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.test = options === null || options === void 0 ? void 0 : options.test;
          this.iter = text.iter();
          let startLine = text.lineAt(from);
          this.curLineStart = startLine.from;
          this.matchPos = toCharEnd(text, from);
          this.getLine(this.curLineStart);
      }
      getLine(skip) {
          this.iter.next(skip);
          if (this.iter.lineBreak) {
              this.curLine = "";
          }
          else {
              this.curLine = this.iter.value;
              if (this.curLineStart + this.curLine.length > this.to)
                  this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
              this.iter.next();
          }
      }
      nextLine() {
          this.curLineStart = this.curLineStart + this.curLine.length + 1;
          if (this.curLineStart > this.to)
              this.curLine = "";
          else
              this.getLine(0);
      }
      /**
      Move to the next match, if there is one.
      */
      next() {
          for (let off = this.matchPos - this.curLineStart;;) {
              this.re.lastIndex = off;
              let match = this.matchPos <= this.to && this.re.exec(this.curLine);
              if (match) {
                  let from = this.curLineStart + match.index, to = from + match[0].length;
                  this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                  if (from == this.curLine.length)
                      this.nextLine();
                  if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
                      this.value = { from, to, match };
                      return this;
                  }
                  off = this.matchPos - this.curLineStart;
              }
              else if (this.curLineStart + this.curLine.length < this.to) {
                  this.nextLine();
                  off = 0;
              }
              else {
                  this.done = true;
                  return this;
              }
          }
      }
  }
  const flattened = /*@__PURE__*/new WeakMap();
  // Reusable (partially) flattened document strings
  class FlattenedDoc {
      constructor(from, text) {
          this.from = from;
          this.text = text;
      }
      get to() { return this.from + this.text.length; }
      static get(doc, from, to) {
          let cached = flattened.get(doc);
          if (!cached || cached.from >= to || cached.to <= from) {
              let flat = new FlattenedDoc(from, doc.sliceString(from, to));
              flattened.set(doc, flat);
              return flat;
          }
          if (cached.from == from && cached.to == to)
              return cached;
          let { text, from: cachedFrom } = cached;
          if (cachedFrom > from) {
              text = doc.sliceString(from, cachedFrom) + text;
              cachedFrom = from;
          }
          if (cached.to < to)
              text += doc.sliceString(cached.to, to);
          flattened.set(doc, new FlattenedDoc(cachedFrom, text));
          return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
      }
  }
  class MultilineRegExpCursor {
      constructor(text, query, options, from, to) {
          this.text = text;
          this.to = to;
          this.done = false;
          this.value = empty;
          this.matchPos = toCharEnd(text, from);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.test = options === null || options === void 0 ? void 0 : options.test;
          this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
      }
      chunkEnd(pos) {
          return pos >= this.to ? this.to : this.text.lineAt(pos).to;
      }
      next() {
          for (;;) {
              let off = this.re.lastIndex = this.matchPos - this.flat.from;
              let match = this.re.exec(this.flat.text);
              // Skip empty matches directly after the last match
              if (match && !match[0] && match.index == off) {
                  this.re.lastIndex = off + 1;
                  match = this.re.exec(this.flat.text);
              }
              if (match) {
                  let from = this.flat.from + match.index, to = from + match[0].length;
                  // If a match goes almost to the end of a noncomplete chunk, try
                  // again, since it'll likely be able to match more
                  if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
                      (!this.test || this.test(from, to, match))) {
                      this.value = { from, to, match };
                      this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                      return this;
                  }
              }
              if (this.flat.to == this.to) {
                  this.done = true;
                  return this;
              }
              // Grow the flattened doc
              this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
          }
      }
  }
  if (typeof Symbol != "undefined") {
      RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
          function () { return this; };
  }
  function validRegExp(source) {
      try {
          new RegExp(source, baseFlags);
          return true;
      }
      catch (_a) {
          return false;
      }
  }
  function toCharEnd(text, pos) {
      if (pos >= text.length)
          return pos;
      let line = text.lineAt(pos), next;
      while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
          pos++;
      return pos;
  }

  function createLineDialog(view) {
      let input = crelt("input", { class: "cm-textfield", name: "line" });
      let dom = crelt("form", {
          class: "cm-gotoLine",
          onkeydown: (event) => {
              if (event.keyCode == 27) { // Escape
                  event.preventDefault();
                  view.dispatch({ effects: dialogEffect.of(false) });
                  view.focus();
              }
              else if (event.keyCode == 13) { // Enter
                  event.preventDefault();
                  go();
              }
          },
          onsubmit: (event) => {
              event.preventDefault();
              go();
          }
      }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
      function go() {
          let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
          if (!match)
              return;
          let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
          let [, sign, ln, cl, percent] = match;
          let col = cl ? +cl.slice(1) : 0;
          let line = ln ? +ln : startLine.number;
          if (ln && percent) {
              let pc = line / 100;
              if (sign)
                  pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
              line = Math.round(state.doc.lines * pc);
          }
          else if (ln && sign) {
              line = line * (sign == "-" ? -1 : 1) + startLine.number;
          }
          let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
          view.dispatch({
              effects: dialogEffect.of(false),
              selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
              scrollIntoView: true
          });
          view.focus();
      }
      return { dom };
  }
  const dialogEffect = /*@__PURE__*/StateEffect.define();
  const dialogField = /*@__PURE__*/StateField.define({
      create() { return true; },
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(dialogEffect))
                  value = e.value;
          return value;
      },
      provide: f => showPanel.from(f, val => val ? createLineDialog : null)
  });
  /**
  Command that shows a dialog asking the user for a line number, and
  when a valid position is provided, moves the cursor to that line.

  Supports line numbers, relative line offsets prefixed with `+` or
  `-`, document percentages suffixed with `%`, and an optional
  column position by adding `:` and a second number after the line
  number.

  The dialog can be styled with the `panel.gotoLine` theme
  selector.
  */
  const gotoLine = view => {
      let panel = getPanel(view, createLineDialog);
      if (!panel) {
          let effects = [dialogEffect.of(true)];
          if (view.state.field(dialogField, false) == null)
              effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
          view.dispatch({ effects });
          panel = getPanel(view, createLineDialog);
      }
      if (panel)
          panel.dom.querySelector("input").focus();
      return true;
  };
  const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-panel.cm-gotoLine": {
          padding: "2px 6px 4px",
          "& label": { fontSize: "80%" }
      }
  });

  const defaultHighlightOptions = {
      highlightWordAroundCursor: false,
      minSelectionLength: 1,
      maxMatches: 100,
      wholeWords: false
  };
  const highlightConfig = /*@__PURE__*/Facet.define({
      combine(options) {
          return combineConfig(options, defaultHighlightOptions, {
              highlightWordAroundCursor: (a, b) => a || b,
              minSelectionLength: Math.min,
              maxMatches: Math.min
          });
      }
  });
  /**
  This extension highlights text that matches the selection. It uses
  the `"cm-selectionMatch"` class for the highlighting. When
  `highlightWordAroundCursor` is enabled, the word at the cursor
  itself will be highlighted with `"cm-selectionMatch-main"`.
  */
  function highlightSelectionMatches(options) {
      let ext = [defaultTheme, matchHighlighter];
      if (options)
          ext.push(highlightConfig.of(options));
      return ext;
  }
  const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
  const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
  // Whether the characters directly outside the given positions are non-word characters
  function insideWordBoundaries(check, state, from, to) {
      return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
          (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  // Whether the characters directly at the given positions are word characters
  function insideWord(check, state, from, to) {
      return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
          && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.decorations = this.getDeco(view);
      }
      update(update) {
          if (update.selectionSet || update.docChanged || update.viewportChanged)
              this.decorations = this.getDeco(update.view);
      }
      getDeco(view) {
          let conf = view.state.facet(highlightConfig);
          let { state } = view, sel = state.selection;
          if (sel.ranges.length > 1)
              return Decoration.none;
          let range = sel.main, query, check = null;
          if (range.empty) {
              if (!conf.highlightWordAroundCursor)
                  return Decoration.none;
              let word = state.wordAt(range.head);
              if (!word)
                  return Decoration.none;
              check = state.charCategorizer(range.head);
              query = state.sliceDoc(word.from, word.to);
          }
          else {
              let len = range.to - range.from;
              if (len < conf.minSelectionLength || len > 200)
                  return Decoration.none;
              if (conf.wholeWords) {
                  query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                  check = state.charCategorizer(range.head);
                  if (!(insideWordBoundaries(check, state, range.from, range.to)
                      && insideWord(check, state, range.from, range.to)))
                      return Decoration.none;
              }
              else {
                  query = state.sliceDoc(range.from, range.to).trim();
                  if (!query)
                      return Decoration.none;
              }
          }
          let deco = [];
          for (let part of view.visibleRanges) {
              let cursor = new SearchCursor(state.doc, query, part.from, part.to);
              while (!cursor.next().done) {
                  let { from, to } = cursor.value;
                  if (!check || insideWordBoundaries(check, state, from, to)) {
                      if (range.empty && from <= range.from && to >= range.to)
                          deco.push(mainMatchDeco.range(from, to));
                      else if (from >= range.to || to <= range.from)
                          deco.push(matchDeco.range(from, to));
                      if (deco.length > conf.maxMatches)
                          return Decoration.none;
                  }
              }
          }
          return Decoration.set(deco);
      }
  }, {
      decorations: v => v.decorations
  });
  const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
      ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
      ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
  });
  // Select the words around the cursors.
  const selectWord = ({ state, dispatch }) => {
      let { selection } = state;
      let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
      if (newSel.eq(selection))
          return false;
      dispatch(state.update({ selection: newSel }));
      return true;
  };
  // Find next occurrence of query relative to last cursor. Wrap around
  // the document if there are no more matches.
  function findNextOccurrence(state, query) {
      let { main, ranges } = state.selection;
      let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
      for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
          cursor.next();
          if (cursor.done) {
              if (cycled)
                  return null;
              cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
              cycled = true;
          }
          else {
              if (cycled && ranges.some(r => r.from == cursor.value.from))
                  continue;
              if (fullWord) {
                  let word = state.wordAt(cursor.value.from);
                  if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                      continue;
              }
              return cursor.value;
          }
      }
  }
  /**
  Select next occurrence of the current selection. Expand selection
  to the surrounding word when the selection is empty.
  */
  const selectNextOccurrence = ({ state, dispatch }) => {
      let { ranges } = state.selection;
      if (ranges.some(sel => sel.from === sel.to))
          return selectWord({ state, dispatch });
      let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
      if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
          return false;
      let range = findNextOccurrence(state, searchedText);
      if (!range)
          return false;
      dispatch(state.update({
          selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
          effects: EditorView.scrollIntoView(range.to)
      }));
      return true;
  };

  const searchConfigFacet = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              top: false,
              caseSensitive: false,
              literal: false,
              wholeWord: false,
              createPanel: view => new SearchPanel(view)
          });
      }
  });
  /**
  A search query. Part of the editor's search state.
  */
  class SearchQuery {
      /**
      Create a query object.
      */
      constructor(config) {
          this.search = config.search;
          this.caseSensitive = !!config.caseSensitive;
          this.literal = !!config.literal;
          this.regexp = !!config.regexp;
          this.replace = config.replace || "";
          this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
          this.unquoted = this.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
          this.wholeWord = !!config.wholeWord;
      }
      /**
      Compare this query to another query.
      */
      eq(other) {
          return this.search == other.search && this.replace == other.replace &&
              this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
              this.wholeWord == other.wholeWord;
      }
      /**
      @internal
      */
      create() {
          return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
      }
      /**
      Get a search cursor for this query, searching through the given
      range in the given state.
      */
      getCursor(state, from = 0, to) {
          let st = state.doc ? state : EditorState.create({ doc: state });
          if (to == null)
              to = st.doc.length;
          return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
      }
  }
  class QueryType {
      constructor(spec) {
          this.spec = spec;
      }
  }
  function stringCursor(spec, state, from, to) {
      return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
  }
  function stringWordTest(doc, categorizer) {
      return (from, to, buf, bufPos) => {
          if (bufPos > from || bufPos + buf.length < to) {
              bufPos = Math.max(0, from - 2);
              buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
          }
          return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||
              categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&
              (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||
                  categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
      };
  }
  class StringQuery extends QueryType {
      constructor(spec) {
          super(spec);
      }
      nextMatch(state, curFrom, curTo) {
          let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
          if (cursor.done)
              cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
          return cursor.done ? null : cursor.value;
      }
      // Searching in reverse is, rather than implementing inverted search
      // cursor, done by scanning chunk after chunk forward.
      prevMatchInRange(state, from, to) {
          for (let pos = to;;) {
              let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
              let cursor = stringCursor(this.spec, state, start, pos), range = null;
              while (!cursor.nextOverlapping().done)
                  range = cursor.value;
              if (range)
                  return range;
              if (start == from)
                  return null;
              pos -= 10000 /* FindPrev.ChunkSize */;
          }
      }
      prevMatch(state, curFrom, curTo) {
          return this.prevMatchInRange(state, 0, curFrom) ||
              this.prevMatchInRange(state, curTo, state.doc.length);
      }
      getReplacement(_result) { return this.spec.replace; }
      matchAll(state, limit) {
          let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
          while (!cursor.next().done) {
              if (ranges.length >= limit)
                  return null;
              ranges.push(cursor.value);
          }
          return ranges;
      }
      highlight(state, from, to, add) {
          let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
          while (!cursor.next().done)
              add(cursor.value.from, cursor.value.to);
      }
  }
  function regexpCursor(spec, state, from, to) {
      return new RegExpCursor(state.doc, spec.search, {
          ignoreCase: !spec.caseSensitive,
          test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
      }, from, to);
  }
  function charBefore(str, index) {
      return str.slice(findClusterBreak(str, index, false), index);
  }
  function charAfter(str, index) {
      return str.slice(index, findClusterBreak(str, index));
  }
  function regexpWordTest(categorizer) {
      return (_from, _to, match) => !match[0].length ||
          (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||
              categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&
              (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||
                  categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  }
  class RegExpQuery extends QueryType {
      nextMatch(state, curFrom, curTo) {
          let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
          if (cursor.done)
              cursor = regexpCursor(this.spec, state, 0, curFrom).next();
          return cursor.done ? null : cursor.value;
      }
      prevMatchInRange(state, from, to) {
          for (let size = 1;; size++) {
              let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
              let cursor = regexpCursor(this.spec, state, start, to), range = null;
              while (!cursor.next().done)
                  range = cursor.value;
              if (range && (start == from || range.from > start + 10))
                  return range;
              if (start == from)
                  return null;
          }
      }
      prevMatch(state, curFrom, curTo) {
          return this.prevMatchInRange(state, 0, curFrom) ||
              this.prevMatchInRange(state, curTo, state.doc.length);
      }
      getReplacement(result) {
          return this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
              : i == "&" ? result.match[0]
                  : i != "0" && +i < result.match.length ? result.match[i]
                      : m);
      }
      matchAll(state, limit) {
          let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
          while (!cursor.next().done) {
              if (ranges.length >= limit)
                  return null;
              ranges.push(cursor.value);
          }
          return ranges;
      }
      highlight(state, from, to, add) {
          let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
          while (!cursor.next().done)
              add(cursor.value.from, cursor.value.to);
      }
  }
  /**
  A state effect that updates the current search query. Note that
  this only has an effect if the search state has been initialized
  (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
  by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
  once).
  */
  const setSearchQuery = /*@__PURE__*/StateEffect.define();
  const togglePanel = /*@__PURE__*/StateEffect.define();
  const searchState = /*@__PURE__*/StateField.define({
      create(state) {
          return new SearchState(defaultQuery(state).create(), null);
      },
      update(value, tr) {
          for (let effect of tr.effects) {
              if (effect.is(setSearchQuery))
                  value = new SearchState(effect.value.create(), value.panel);
              else if (effect.is(togglePanel))
                  value = new SearchState(value.query, effect.value ? createSearchPanel : null);
          }
          return value;
      },
      provide: f => showPanel.from(f, val => val.panel)
  });
  class SearchState {
      constructor(query, panel) {
          this.query = query;
          this.panel = panel;
      }
  }
  const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
  const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.decorations = this.highlight(view.state.field(searchState));
      }
      update(update) {
          let state = update.state.field(searchState);
          if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
              this.decorations = this.highlight(state);
      }
      highlight({ query, panel }) {
          if (!panel || !query.spec.valid)
              return Decoration.none;
          let { view } = this;
          let builder = new RangeSetBuilder();
          for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
              let { from, to } = ranges[i];
              while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
                  to = ranges[++i].to;
              query.highlight(view.state, from, to, (from, to) => {
                  let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                  builder.add(from, to, selected ? selectedMatchMark : matchMark);
              });
          }
          return builder.finish();
      }
  }, {
      decorations: v => v.decorations
  });
  function searchCommand(f) {
      return view => {
          let state = view.state.field(searchState, false);
          return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
      };
  }
  /**
  Open the search panel if it isn't already open, and move the
  selection to the first match after the current main selection.
  Will wrap around to the start of the document when it reaches the
  end.
  */
  const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
      let { to } = view.state.selection.main;
      let next = query.nextMatch(view.state, to, to);
      if (!next)
          return false;
      view.dispatch({
          selection: { anchor: next.from, head: next.to },
          scrollIntoView: true,
          effects: announceMatch(view, next),
          userEvent: "select.search"
      });
      return true;
  });
  /**
  Move the selection to the previous instance of the search query,
  before the current main selection. Will wrap past the start
  of the document to start searching at the end again.
  */
  const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
      let { state } = view, { from } = state.selection.main;
      let range = query.prevMatch(state, from, from);
      if (!range)
          return false;
      view.dispatch({
          selection: { anchor: range.from, head: range.to },
          scrollIntoView: true,
          effects: announceMatch(view, range),
          userEvent: "select.search"
      });
      return true;
  });
  /**
  Select all instances of the search query.
  */
  const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
      let ranges = query.matchAll(view.state, 1000);
      if (!ranges || !ranges.length)
          return false;
      view.dispatch({
          selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
          userEvent: "select.search.matches"
      });
      return true;
  });
  /**
  Select all instances of the currently selected text.
  */
  const selectSelectionMatches = ({ state, dispatch }) => {
      let sel = state.selection;
      if (sel.ranges.length > 1 || sel.main.empty)
          return false;
      let { from, to } = sel.main;
      let ranges = [], main = 0;
      for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
          if (ranges.length > 1000)
              return false;
          if (cur.value.from == from)
              main = ranges.length;
          ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
      }
      dispatch(state.update({
          selection: EditorSelection.create(ranges, main),
          userEvent: "select.search.matches"
      }));
      return true;
  };
  /**
  Replace the current match of the search query.
  */
  const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
      let { state } = view, { from, to } = state.selection.main;
      if (state.readOnly)
          return false;
      let next = query.nextMatch(state, from, from);
      if (!next)
          return false;
      let changes = [], selection, replacement;
      let announce = [];
      if (next.from == from && next.to == to) {
          replacement = state.toText(query.getReplacement(next));
          changes.push({ from: next.from, to: next.to, insert: replacement });
          next = query.nextMatch(state, next.from, next.to);
          announce.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
      }
      if (next) {
          let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
          selection = { anchor: next.from - off, head: next.to - off };
          announce.push(announceMatch(view, next));
      }
      view.dispatch({
          changes, selection,
          scrollIntoView: !!selection,
          effects: announce,
          userEvent: "input.replace"
      });
      return true;
  });
  /**
  Replace all instances of the search query with the given
  replacement.
  */
  const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
      if (view.state.readOnly)
          return false;
      let changes = query.matchAll(view.state, 1e9).map(match => {
          let { from, to } = match;
          return { from, to, insert: query.getReplacement(match) };
      });
      if (!changes.length)
          return false;
      let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
      view.dispatch({
          changes,
          effects: EditorView.announce.of(announceText),
          userEvent: "input.replace.all"
      });
      return true;
  });
  function createSearchPanel(view) {
      return view.state.facet(searchConfigFacet).createPanel(view);
  }
  function defaultQuery(state, fallback) {
      var _a, _b, _c, _d;
      let sel = state.selection.main;
      let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
      if (fallback && !selText)
          return fallback;
      let config = state.facet(searchConfigFacet);
      return new SearchQuery({
          search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
          caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
          literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
          wholeWord: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _d !== void 0 ? _d : config.wholeWord
      });
  }
  /**
  Make sure the search panel is open and focused.
  */
  const openSearchPanel = view => {
      let state = view.state.field(searchState, false);
      if (state && state.panel) {
          let panel = getPanel(view, createSearchPanel);
          if (!panel)
              return false;
          let searchInput = panel.dom.querySelector("[main-field]");
          if (searchInput && searchInput != view.root.activeElement) {
              let query = defaultQuery(view.state, state.query.spec);
              if (query.valid)
                  view.dispatch({ effects: setSearchQuery.of(query) });
              searchInput.focus();
              searchInput.select();
          }
      }
      else {
          view.dispatch({ effects: [
                  togglePanel.of(true),
                  state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
              ] });
      }
      return true;
  };
  /**
  Close the search panel.
  */
  const closeSearchPanel = view => {
      let state = view.state.field(searchState, false);
      if (!state || !state.panel)
          return false;
      let panel = getPanel(view, createSearchPanel);
      if (panel && panel.dom.contains(view.root.activeElement))
          view.focus();
      view.dispatch({ effects: togglePanel.of(false) });
      return true;
  };
  /**
  Default search-related key bindings.

   - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
   - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
   - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
   - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
   - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
  */
  const searchKeymap = [
      { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
      { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
      { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
      { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
      { key: "Mod-Shift-l", run: selectSelectionMatches },
      { key: "Alt-g", run: gotoLine },
      { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
  ];
  class SearchPanel {
      constructor(view) {
          this.view = view;
          let query = this.query = view.state.field(searchState).query.spec;
          this.commit = this.commit.bind(this);
          this.searchField = crelt("input", {
              value: query.search,
              placeholder: phrase(view, "Find"),
              "aria-label": phrase(view, "Find"),
              class: "cm-textfield",
              name: "search",
              "main-field": "true",
              onchange: this.commit,
              onkeyup: this.commit
          });
          this.replaceField = crelt("input", {
              value: query.replace,
              placeholder: phrase(view, "Replace"),
              "aria-label": phrase(view, "Replace"),
              class: "cm-textfield",
              name: "replace",
              onchange: this.commit,
              onkeyup: this.commit
          });
          this.caseField = crelt("input", {
              type: "checkbox",
              name: "case",
              checked: query.caseSensitive,
              onchange: this.commit
          });
          this.reField = crelt("input", {
              type: "checkbox",
              name: "re",
              checked: query.regexp,
              onchange: this.commit
          });
          this.wordField = crelt("input", {
              type: "checkbox",
              name: "word",
              checked: query.wholeWord,
              onchange: this.commit
          });
          function button(name, onclick, content) {
              return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
          }
          this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
              this.searchField,
              button("next", () => findNext(view), [phrase(view, "next")]),
              button("prev", () => findPrevious(view), [phrase(view, "previous")]),
              button("select", () => selectMatches(view), [phrase(view, "all")]),
              crelt("label", null, [this.caseField, phrase(view, "match case")]),
              crelt("label", null, [this.reField, phrase(view, "regexp")]),
              crelt("label", null, [this.wordField, phrase(view, "by word")]),
              ...view.state.readOnly ? [] : [
                  crelt("br"),
                  this.replaceField,
                  button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                  button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")]),
                  crelt("button", {
                      name: "close",
                      onclick: () => closeSearchPanel(view),
                      "aria-label": phrase(view, "close"),
                      type: "button"
                  }, ["×"])
              ]
          ]);
      }
      commit() {
          let query = new SearchQuery({
              search: this.searchField.value,
              caseSensitive: this.caseField.checked,
              regexp: this.reField.checked,
              wholeWord: this.wordField.checked,
              replace: this.replaceField.value,
          });
          if (!query.eq(this.query)) {
              this.query = query;
              this.view.dispatch({ effects: setSearchQuery.of(query) });
          }
      }
      keydown(e) {
          if (runScopeHandlers(this.view, e, "search-panel")) {
              e.preventDefault();
          }
          else if (e.keyCode == 13 && e.target == this.searchField) {
              e.preventDefault();
              (e.shiftKey ? findPrevious : findNext)(this.view);
          }
          else if (e.keyCode == 13 && e.target == this.replaceField) {
              e.preventDefault();
              replaceNext(this.view);
          }
      }
      update(update) {
          for (let tr of update.transactions)
              for (let effect of tr.effects) {
                  if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                      this.setQuery(effect.value);
              }
      }
      setQuery(query) {
          this.query = query;
          this.searchField.value = query.search;
          this.replaceField.value = query.replace;
          this.caseField.checked = query.caseSensitive;
          this.reField.checked = query.regexp;
          this.wordField.checked = query.wholeWord;
      }
      mount() {
          this.searchField.select();
      }
      get pos() { return 80; }
      get top() { return this.view.state.facet(searchConfigFacet).top; }
  }
  function phrase(view, phrase) { return view.state.phrase(phrase); }
  const AnnounceMargin = 30;
  const Break = /[\s\.,:;?!]/;
  function announceMatch(view, { from, to }) {
      let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
      let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
      let text = view.state.sliceDoc(start, end);
      if (start != line.from) {
          for (let i = 0; i < AnnounceMargin; i++)
              if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                  text = text.slice(i);
                  break;
              }
      }
      if (end != lineEnd) {
          for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
              if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                  text = text.slice(0, i);
                  break;
              }
      }
      return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
  }
  const baseTheme = /*@__PURE__*/EditorView.baseTheme({
      ".cm-panel.cm-search": {
          padding: "2px 6px 4px",
          position: "relative",
          "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "4px",
              backgroundColor: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0
          },
          "& input, & button, & label": {
              margin: ".2em .6em .2em 0"
          },
          "& input[type=checkbox]": {
              marginRight: ".2em"
          },
          "& label": {
              fontSize: "80%",
              whiteSpace: "pre"
          }
      },
      "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
      "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
      "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
      "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
  });
  const searchExtensions = [
      searchState,
      /*@__PURE__*/Prec.lowest(searchHighlighter),
      baseTheme
  ];

  // (The superfluous function calls around the list of extensions work
  // around current limitations in tree-shaking software.)
  /**
  This is an extension value that just pulls together a number of
  extensions that you might want in a basic editor. It is meant as a
  convenient helper to quickly set up CodeMirror without installing
  and importing a lot of separate packages.

  Specifically, it includes...

   - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
   - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
   - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
   - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
   - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
   - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
   - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
   - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
   - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
   - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
   - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
   - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
   - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
   - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
   - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
   - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
   - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
   - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
   - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

  (You'll probably want to add some language package to your setup
  too.)

  This extension does not allow customization. The idea is that,
  once you decide you want to configure your editor more precisely,
  you take this package's source (which is just a bunch of imports
  and an array literal), copy it into your own code, and adjust it
  as desired.
  */
  const basicSetup = /*@__PURE__*/(() => [
      lineNumbers(),
      highlightActiveLineGutter(),
      highlightSpecialChars(),
      history(),
      foldGutter(),
      drawSelection(),
      dropCursor(),
      EditorState.allowMultipleSelections.of(true),
      indentOnInput(),
      syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
      bracketMatching(),
      closeBrackets(),
      autocompletion$2(),
      rectangularSelection(),
      crosshairCursor(),
      highlightActiveLine(),
      highlightSelectionMatches(),
      keymap.of([
          ...closeBracketsKeymap,
          ...defaultKeymap,
          ...searchKeymap,
          ...historyKeymap,
          ...foldKeymap,
          ...completionKeymap,
          ...lintKeymap
      ])
  ])();

  const jsonHighlighting = styleTags({
    String: tags$1.string,
    Number: tags$1.number,
    "True False": tags$1.bool,
    PropertyName: tags$1.propertyName,
    Null: tags$1.null,
    ",": tags$1.separator,
    "[ ]": tags$1.squareBracket,
    "{ }": tags$1.brace
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const parser = LRParser.deserialize({
    version: 14,
    states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
    stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
    goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
    nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
    maxTerm: 25,
    nodeProps: [
      ["openedBy", 7,"{",12,"["],
      ["closedBy", 8,"}",13,"]"]
    ],
    propSources: [jsonHighlighting],
    skippedNodes: [0],
    repeatNodeCount: 2,
    tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
    tokenizers: [0],
    topRules: {"JsonText":[0,1]},
    tokenPrec: 0
  });

  /**
  Calls
  [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
  on the document and, if that throws an error, reports it as a
  single diagnostic.
  */
  const jsonParseLinter = () => (view) => {
      try {
          JSON.parse(view.state.doc.toString());
      }
      catch (e) {
          if (!(e instanceof SyntaxError))
              throw e;
          const pos = getErrorPosition(e, view.state.doc);
          return [{
                  from: pos,
                  message: e.message,
                  severity: 'error',
                  to: pos
              }];
      }
      return [];
  };
  function getErrorPosition(error, doc) {
      let m;
      if (m = error.message.match(/at position (\d+)/))
          return Math.min(+m[1], doc.length);
      if (m = error.message.match(/at line (\d+) column (\d+)/))
          return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
      return 0;
  }

  /**
  A language provider that provides JSON parsing.
  */
  const jsonLanguage = /*@__PURE__*/LRLanguage.define({
      parser: /*@__PURE__*/parser.configure({
          props: [
              /*@__PURE__*/indentNodeProp.add({
                  Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                  Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
              }),
              /*@__PURE__*/foldNodeProp.add({
                  "Object Array": foldInside
              })
          ]
      }),
      languageData: {
          closeBrackets: { brackets: ["[", "{", '"'] },
          indentOnInput: /^\s*[\}\]]$/
      }
  });
  /**
  JSON language support.
  */
  function json() {
      return new LanguageSupport(jsonLanguage);
  }

  function Modal(props) {
    y(() => {
      function handleKey(event) {
        if (event.key === 'Escape') {
          event.stopPropagation();
          props.onClose();
        }
      }
      document.addEventListener('keydown', handleKey);
      return () => {
        document.removeEventListener('keydown', handleKey);
      };
    });
    return e$1("div", {
      class: "fjs-pgl-modal",
      children: [e$1("div", {
        class: "fjs-pgl-modal-backdrop",
        onClick: props.onClose
      }), e$1("div", {
        class: "fjs-pgl-modal-content",
        children: [e$1("h1", {
          class: "fjs-pgl-modal-header",
          children: props.name
        }), e$1("div", {
          class: "fjs-pgl-modal-body",
          children: props.children
        }), e$1("div", {
          class: "fjs-pgl-modal-footer",
          children: e$1("button", {
            class: "fjs-pgl-button fjs-pgl-button-default",
            onClick: props.onClose,
            children: "Close"
          })
        })]
      })]
    });
  }

  function EmbedModal(props) {
    const schema = serializeValue(props.schema);
    const data = serializeValue(props.data || {});
    const fieldRef = s$1();
    const snippet = `<!-- styles needed for rendering -->
<link rel="stylesheet" href="https://unpkg.com/@bpmn-io/form-js@0.2.4/dist/assets/form-js.css">

<!-- container to render the form into -->
<div class="fjs-pgl-form-container"></div>

<!-- scripts needed for embedding -->
<script src="https://unpkg.com/@bpmn-io/form-js@0.2.4/dist/form-viewer.umd.js"></script>

<!-- actual script to instantiate the form and load form schema + data -->
<script>
  const data = JSON.parse(${data});
  const schema = JSON.parse(${schema});

  const form = new FormViewer.Form({
    container: document.querySelector(".fjs-pgl-form-container")
  });

  form.on("submit", (event) => {
    console.log(event.data, event.errors);
  });

  form.importSchema(schema, data).catch(err => {
    console.error("Failed to render form", err);
  });
</script>
  `.trim();
    y(() => {
      fieldRef.current.select();
    });
    return e$1(Modal, {
      name: "Embed form",
      onClose: props.onClose,
      children: [e$1("p", {
        children: ["Use the following HTML snippet to embed your form with ", e$1("a", {
          href: "https://github.com/bpmn-io/form-js",
          children: "form-js"
        }), ":"]
      }), e$1("textarea", {
        spellCheck: "false",
        ref: fieldRef,
        children: snippet
      })]
    });
  }

  // helpers ///////////

  function serializeValue(obj) {
    return JSON.stringify(JSON.stringify(obj)).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  /**
   * @type {Facet<import('..').Variables>} Variables
   */
  const variablesFacet = Facet.define();

  function autocompletion () {
    return [autocompletion$2({
      override: [completions]
    })];
  }
  function completions(context) {
    const variables = context.state.facet(variablesFacet)[0];
    const options = variables.map(v => ({
      label: v,
      type: 'variable'
    }));
    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // handle inside property name as explicit call
    if (nodeBefore.type.name === 'PropertyName') {
      context.explicit = true;
    }
    let word = context.matchBefore(/\w*/);
    if (word.from == word.to && !context.explicit) {
      return null;
    }
    return {
      from: word.from,
      options
    };
  }

  function JSONEditor(options = {}) {
    const {
      readonly = false
    } = options;
    const emitter = mitt();
    let language = new Compartment().of(json());
    let tabSize = new Compartment().of(EditorState.tabSize.of(2));

    /**
     * @typedef {Array<string>} Variables
     */

    const autocompletionConf = new Compartment();
    const linterExtension = linter$1(jsonParseLinter());
    function createState(doc, extensions = [], variables = []) {
      return EditorState.create({
        doc,
        extensions: [basicSetup, language, tabSize, linterExtension, lintGutter(), autocompletionConf.of(variablesFacet.of(variables)), autocompletion(), keymap.of([indentWithTab]), ...extensions]
      });
    }
    function createView(readonly) {
      const updateListener = EditorView.updateListener.of(update => {
        if (update.docChanged) {
          emitter.emit('changed', {
            value: update.view.state.doc.toString()
          });
        }
      });
      const editable = EditorView.editable.of(!readonly);
      const view = new EditorView({
        state: createState('', [updateListener, editable])
      });
      view.setValue = function (value) {
        this.setState(createState(value, [updateListener, editable]));
      };
      view.setVariables = function (variables) {
        this.setState(createState(view.state.doc.toString(), [updateListener, editable], variables));
      };
      return view;
    }
    const view = this._view = createView(readonly);
    this.setValue = function (value) {
      view.setValue(value);
    };
    this.getValue = function () {
      return view.state.doc.toString();
    };

    /**
     * @param {Variables} variables
     */
    this.setVariables = function (variables) {
      view.setVariables(variables);
    };
    this.on = emitter.on;
    this.off = emitter.off;
    this.emit = emitter.emit;
    this.attachTo = function (container) {
      container.appendChild(view.dom);
    };
    this.destroy = function () {
      if (view.dom.parentNode) {
        view.dom.parentNode.removeChild(view.dom);
      }
      view.destroy();
    };
  }

  function Section(props) {
    const elements = Array.isArray(props.children) ? props.children : [props.children];
    const {
      headerItems,
      children
    } = elements.reduce((_, child) => {
      const bucket = child.type === Section.HeaderItem ? _.headerItems : _.children;
      bucket.push(child);
      return _;
    }, {
      headerItems: [],
      children: []
    });
    return e$1("div", {
      class: "fjs-pgl-section",
      children: [e$1("h1", {
        class: "header",
        children: [props.name, " ", headerItems.length ? e$1("span", {
          class: "header-items",
          children: headerItems
        }) : null]
      }), e$1("div", {
        class: "body",
        children: children
      })]
    });
  }
  Section.HeaderItem = function (props) {
    return props.children;
  };

  function PlaygroundRoot(props) {
    const {
      actions: actionsConfig = {},
      emit,
      exporter: exporterConfig = {}
    } = props;
    const {
      display: displayActions = true
    } = actionsConfig;
    const paletteContainerRef = s$1();
    const editorContainerRef = s$1();
    const formContainerRef = s$1();
    const dataContainerRef = s$1();
    const resultContainerRef = s$1();
    const propertiesPanelContainerRef = s$1();
    const paletteRef = s$1();
    const formEditorRef = s$1();
    const formRef = s$1();
    const dataEditorRef = s$1();
    const resultViewRef = s$1();
    const propertiesPanelRef = s$1();
    const [showEmbed, setShowEmbed] = l$2(false);
    const [initialData] = l$2(props.data || {});
    const [initialSchema, setInitialSchema] = l$2(props.schema);
    const [data, setData] = l$2(props.data || {});
    const [schema, setSchema] = l$2(props.schema);
    const [resultData, setResultData] = l$2({});

    // pipe to playground API
    y(() => {
      props.onInit({
        attachDataContainer: node => dataEditorRef.current.attachTo(node),
        attachEditorContainer: node => formEditorRef.current.attachTo(node),
        attachFormContainer: node => formRef.current.attachTo(node),
        attachPaletteContainer: node => paletteRef.current.attachTo(node),
        attachPropertiesPanelContainer: node => propertiesPanelRef.current.attachTo(node),
        attachResultContainer: node => resultViewRef.current.attachTo(node),
        get: (name, strict) => formEditorRef.current.get(name, strict),
        getDataEditor: () => dataEditorRef.current,
        getEditor: () => formEditorRef.current,
        getForm: () => formRef.current,
        getResultView: () => resultViewRef.current,
        getSchema: () => formEditorRef.current.getSchema(),
        setSchema: setInitialSchema,
        saveSchema: () => formEditorRef.current.saveSchema()
      });
    });
    y(() => {
      setInitialSchema(props.schema || {});
    }, [props.schema]);
    y(() => {
      const dataEditor = dataEditorRef.current = new JSONEditor({
        value: toString(data)
      });
      const resultView = resultViewRef.current = new JSONEditor({
        readonly: true,
        value: toString(resultData)
      });
      const form = formRef.current = new Form();
      const formEditor = formEditorRef.current = new FormEditor({
        renderer: {
          compact: true
        },
        palette: {
          parent: paletteContainerRef.current
        },
        propertiesPanel: {
          parent: propertiesPanelContainerRef.current
        },
        exporter: exporterConfig
      });
      paletteRef.current = formEditor.get('palette');
      propertiesPanelRef.current = formEditor.get('propertiesPanel');
      formEditor.on('changed', () => {
        setSchema(formEditor.getSchema());
      });
      formEditor.on('formEditor.rendered', () => {
        // notifiy interested parties after render
        emit('formPlayground.rendered');
      });
      form.on('changed', () => {
        setResultData(form._getSubmitData());
      });
      dataEditor.on('changed', event => {
        try {
          setData(JSON.parse(event.value));
        } catch (error) {
          // notify interested about input data error
          emit('formPlayground.inputDataError', error);
        }
      });
      const formContainer = formContainerRef.current;
      const editorContainer = editorContainerRef.current;
      const dataContainer = dataContainerRef.current;
      const resultContainer = resultContainerRef.current;
      dataEditor.attachTo(dataContainer);
      resultView.attachTo(resultContainer);
      form.attachTo(formContainer);
      formEditor.attachTo(editorContainer);
      return () => {
        dataEditor.destroy();
        resultView.destroy();
        form.destroy();
        formEditor.destroy();
      };
    }, []);
    y(() => {
      dataEditorRef.current.setValue(toString(initialData));
    }, [initialData]);
    y(() => {
      if (initialSchema) {
        formEditorRef.current.importSchema(initialSchema);
        dataEditorRef.current.setVariables(getSchemaVariables(initialSchema));
      }
    }, [initialSchema]);
    y(() => {
      if (schema && dataContainerRef.current) {
        const variables = getSchemaVariables(schema);
        dataEditorRef.current.setVariables(variables);
      }
    }, [schema]);
    y(() => {
      schema && formRef.current.importSchema(schema, data);
    }, [schema, data]);
    y(() => {
      resultViewRef.current.setValue(toString(resultData));
    }, [resultData]);
    y(() => {
      props.onStateChanged({
        schema,
        data
      });
    }, [schema, data]);
    const handleDownload = A$1(() => {
      download(JSON.stringify(schema, null, '  '), 'form.json', 'text/json');
    }, [schema]);
    const hideEmbedModal = A$1(() => {
      setShowEmbed(false);
    }, []);
    const showEmbedModal = A$1(() => {
      setShowEmbed(true);
    }, []);
    return e$1("div", {
      class: classNames('fjs-container', 'fjs-pgl-root'),
      children: [e$1("div", {
        class: "fjs-pgl-modals",
        children: showEmbed ? e$1(EmbedModal, {
          schema: schema,
          data: data,
          onClose: hideEmbedModal
        }) : null
      }), e$1("div", {
        class: "fjs-pgl-palette-container",
        ref: paletteContainerRef
      }), e$1("div", {
        class: "fjs-pgl-main",
        children: [e$1(Section, {
          name: "Form Definition",
          children: [displayActions && e$1(Section.HeaderItem, {
            children: e$1("button", {
              class: "fjs-pgl-button",
              title: "Download form definition",
              onClick: handleDownload,
              children: "Download"
            })
          }), displayActions && e$1(Section.HeaderItem, {
            children: e$1("button", {
              class: "fjs-pgl-button",
              onClick: showEmbedModal,
              children: "Embed"
            })
          }), e$1("div", {
            ref: editorContainerRef,
            class: "fjs-pgl-form-container"
          })]
        }), e$1(Section, {
          name: "Form Preview",
          children: e$1("div", {
            ref: formContainerRef,
            class: "fjs-pgl-form-container"
          })
        }), e$1(Section, {
          name: "Form Input",
          children: e$1("div", {
            ref: dataContainerRef,
            class: "fjs-pgl-text-container"
          })
        }), e$1(Section, {
          name: "Form Output",
          children: e$1("div", {
            ref: resultContainerRef,
            class: "fjs-pgl-text-container"
          })
        })]
      }), e$1("div", {
        class: "fjs-pgl-properties-container",
        ref: propertiesPanelContainerRef
      })]
    });
  }

  // helpers ///////////////

  function toString(obj) {
    return JSON.stringify(obj, null, '  ');
  }

  function Playground(options) {
    const {
      container: parent,
      schema,
      data,
      ...rest
    } = options;
    const emitter = mitt();
    let state = {
      data,
      schema
    };
    let ref;
    const container = document.createElement('div');
    container.classList.add('fjs-pgl-parent');
    if (parent) {
      parent.appendChild(container);
    }
    const handleDrop = fileDrop('Drop a form file', function (files) {
      const file = files[0];
      if (file) {
        try {
          ref.setSchema(JSON.parse(file.contents));
        } catch (err) {

          // TODO(nikku): indicate JSON parse error
        }
      }
    });
    const withRef = function (fn) {
      return function (...args) {
        if (!ref) {
          throw new Error('Playground is not initialized.');
        }
        return fn(...args);
      };
    };
    const onInit = function (_ref) {
      ref = _ref;
      emitter.emit('formPlayground.init');
    };
    container.addEventListener('dragover', handleDrop);
    S$1(e$1(PlaygroundRoot, {
      data: data,
      emit: emitter.emit,
      onInit: onInit,
      onStateChanged: _state => state = _state,
      schema: schema,
      ...rest
    }), container);
    this.on = emitter.on;
    this.off = emitter.off;
    this.emit = emitter.emit;
    this.on('destroy', function () {
      S$1(null, container);
    });
    this.on('destroy', function () {
      parent.removeChild(container);
    });
    this.getState = function () {
      return state;
    };
    this.getSchema = withRef(() => ref.getSchema());
    this.setSchema = withRef(schema => ref.setSchema(schema));
    this.saveSchema = withRef(() => ref.saveSchema());
    this.get = withRef((name, strict) => ref.get(name, strict));
    this.getDataEditor = withRef(() => ref.getDataEditor());
    this.getEditor = withRef(() => ref.getEditor());
    this.getForm = withRef((name, strict) => ref.getForm(name, strict));
    this.getResultView = withRef(() => ref.getResultView());
    this.destroy = function () {
      this.emit('destroy');
    };
    this.attachEditorContainer = withRef(node => ref.attachEditorContainer(node));
    this.attachPreviewContainer = withRef(node => ref.attachFormContainer(node));
    this.attachDataContainer = withRef(node => ref.attachDataContainer(node));
    this.attachResultContainer = withRef(node => ref.attachResultContainer(node));
    this.attachPaletteContainer = withRef(node => ref.attachPaletteContainer(node));
    this.attachPropertiesPanelContainer = withRef(node => ref.attachPropertiesPanelContainer(node));
  }

  exports.FormPlayground = Playground;

}));

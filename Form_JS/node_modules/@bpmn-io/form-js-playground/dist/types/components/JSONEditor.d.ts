export function JSONEditor(options?: {}): void;
export class JSONEditor {
    constructor(options?: {});
    _view: EditorView;
    setValue: (value: any) => void;
    getValue: () => string;
    /**
     * @param {Variables} variables
     */
    setVariables: (variables: string[]) => void;
    on: {
        <Key extends import("mitt").EventType>(type: Key, handler: import("mitt").Handler<Record<import("mitt").EventType, unknown>[Key]>): void;
        (type: "*", handler: import("mitt").WildcardHandler<Record<import("mitt").EventType, unknown>>): void;
    };
    off: {
        <Key_1 extends import("mitt").EventType>(type: Key_1, handler?: import("mitt").Handler<Record<import("mitt").EventType, unknown>[Key_1]>): void;
        (type: "*", handler: import("mitt").WildcardHandler<Record<import("mitt").EventType, unknown>>): void;
    };
    emit: {
        <Key_2 extends import("mitt").EventType>(type: Key_2, event: Record<import("mitt").EventType, unknown>[Key_2]): void;
        <Key_3 extends import("mitt").EventType>(type: undefined extends Record<import("mitt").EventType, unknown>[Key_3] ? Key_3 : never): void;
    };
    attachTo: (container: any) => void;
    destroy: () => void;
}
import { EditorView } from "@codemirror/view";

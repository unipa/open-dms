import { createVNode, createComponentVNode } from "inferno";
import { Component } from 'inferno';
export default class TableComponent extends Component {
  constructor(props) {
    super(props);
    const injector = this._injector = props.injector;
    this._sheet = injector.get('sheet');
    this._changeSupport = injector.get('changeSupport');
    this._components = injector.get('components');
    this._eventBus = injector.get('eventBus');
    const throttle = injector.get('throttle');
    this.onElementsChanged = this.onElementsChanged.bind(this);
    this.onScroll = throttle(this.onScroll.bind(this));
  }

  onElementsChanged() {
    this.forceUpdate();
  }

  onScroll() {
    this._eventBus.fire('sheet.scroll');
  }

  getChildContext() {
    return {
      changeSupport: this._changeSupport,
      components: this._components,
      injector: this._injector
    };
  }

  componentWillMount() {
    const {
      id
    } = this._sheet.getRoot();

    this._changeSupport.onElementsChanged(id, this.onElementsChanged);
  }

  componentWillUnmount() {
    const {
      id
    } = this._sheet.getRoot();

    this._changeSupport.offElementsChanged(id, this.onElementsChanged);
  }

  render() {
    const {
      rows,
      cols
    } = this._sheet.getRoot();

    const beforeTableComponents = this._components.getComponents('table.before');

    const afterTableComponents = this._components.getComponents('table.after');

    const Head = this._components.getComponent('table.head');

    const Body = this._components.getComponent('table.body');

    const Foot = this._components.getComponent('table.foot');

    return createVNode(1, "div", "tjs-container", [beforeTableComponents && beforeTableComponents.map((Component, index) => createComponentVNode(2, Component, null, index)), createVNode(1, "div", "tjs-table-container", createVNode(1, "table", "tjs-table", [Head && createComponentVNode(2, Head, {
      "rows": rows,
      "cols": cols
    }), Body && createComponentVNode(2, Body, {
      "rows": rows,
      "cols": cols
    }), Foot && createComponentVNode(2, Foot, {
      "rows": rows,
      "cols": cols
    })], 0), 2, {
      "onScroll": this.onScroll
    }), afterTableComponents && afterTableComponents.map((Component, index) => createComponentVNode(2, Component, null, index))], 0);
  }

}
//# sourceMappingURL=TableComponent.js.map
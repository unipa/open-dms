{"version":3,"file":"EditorActions.js","names":["forEach","NOT_REGISTERED_ERROR","IS_REGISTERED_ERROR","EditorActions","constructor","commandStack","eventBus","modeling","selection","_actions","undo","redo","select","cell","deselect","addRow","attrs","index","removeRow","row","moveRow","addCol","removeCol","col","moveCol","trigger","action","opts","error","register","actions","listener","_registerAction","isRegistered","unregister","undefined","$inject","message","Error"],"sources":["../../../src/features/editor-actions/EditorActions.js"],"sourcesContent":["import { forEach } from 'min-dash';\n\nconst NOT_REGISTERED_ERROR = 'is not a registered action',\n      IS_REGISTERED_ERROR = 'is already registered';\n\n\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´ and likewise\n * unregister existing ones with ´unregisterAction´.\n *\n */\nexport default class EditorActions {\n  constructor(commandStack, eventBus, modeling, selection) {\n\n    this._actions = {\n      undo() {\n        commandStack.undo();\n      },\n      redo() {\n        commandStack.redo();\n      },\n      select({ cell }) {\n        selection.select(cell);\n      },\n      deselect() {\n        selection.deselect();\n      },\n      addRow({ attrs, index }) {\n        modeling.addRow(attrs, index);\n      },\n      removeRow({ row }) {\n        modeling.removeRow(row);\n      },\n      moveRow({ row, index }) {\n        modeling.moveRow(row, index);\n      },\n      addCol({ attrs, index }) {\n        modeling.addCol(attrs, index);\n      },\n      removeCol({ col }) {\n        modeling.removeCol(col);\n      },\n      moveCol({ col, index }) {\n        modeling.moveCol(col, index);\n      }\n    };\n  }\n\n  /**\n   * Triggers a registered action\n   *\n   * @param  {String} action\n   * @param  {Object} opts\n   *\n   * @return {Unknown} Returns what the registered listener returns\n   */\n  trigger(action, opts) {\n    if (!this._actions[action]) {\n      throw error(action, NOT_REGISTERED_ERROR);\n    }\n\n    return this._actions[action](opts);\n  }\n\n  /**\n   * Registers a collections of actions.\n   * The key of the object will be the name of the action.\n   *\n   * @param  {Object} actions\n   */\n  register(actions, listener) {\n    if (typeof actions === 'string') {\n      return this._registerAction(actions, listener);\n    }\n\n    forEach(actions, (listener, action) => {\n      this._registerAction(action, listener);\n    }, this);\n  }\n\n  /**\n   * Registers a listener to an action key\n   *\n   * @param  {String} action\n   * @param  {Function} listener\n   */\n  _registerAction(action, listener) {\n    if (this.isRegistered(action)) {\n      throw error(action, IS_REGISTERED_ERROR);\n    }\n\n    this._actions[action] = listener;\n  }\n\n  /**\n   * Unregister an existing action\n   *\n   * @param {String} action\n   */\n  unregister(action) {\n    if (!this.isRegistered(action)) {\n      throw error(action, NOT_REGISTERED_ERROR);\n    }\n\n    this._actions[action] = undefined;\n  }\n\n\n  /**\n   * Checks wether the given action is registered\n   *\n   * @param {String} action\n   *\n   * @return {Boolean}\n   */\n  isRegistered(action) {\n    return !!this._actions[action];\n  }\n}\n\nEditorActions.$inject = [\n  'commandStack',\n  'eventBus',\n  'modeling',\n  'selection'\n];\n\n// helpers /////////////\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}"],"mappings":"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"}
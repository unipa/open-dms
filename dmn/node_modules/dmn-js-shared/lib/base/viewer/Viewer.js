const _excluded = ["modules"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Injector } from 'didi';
import core from './core';

/**
 * A base for React-style viewers.
 */
export default class Viewer {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let injector = options.injector;
    if (!injector) {
      let _this$_init = this._init(options),
        modules = _this$_init.modules,
        config = _this$_init.config;
      injector = createInjector(config, modules);
    }
    this.get = injector.get;
    this.invoke = injector.invoke;
    this.get('eventBus').fire('viewer.init');
  }

  /**
   * Intialize and return modules and config used for creation.
   *
   * @param  {Object} options
   *
   * @return {Object} { modules=[], config }
   */
  _init(options) {
    let modules = options.modules,
      config = _objectWithoutProperties(options, _excluded);
    return {
      modules,
      config
    };
  }

  /**
   * Destroy. This results in removing the attachment from the container.
   */
  destroy() {
    const eventBus = this.get('eventBus');
    eventBus.fire('viewer.destroy');
  }

  /**
   * Clear. Should be used to reset the state of any stateful services.
   */
  clear() {
    const eventBus = this.get('eventBus');
    eventBus.fire('viewer.clear');
  }
}

// helpers //////////////////////

function createInjector(config, modules) {
  const bootstrapModules = [{
    config: ['value', config]
  }, core].concat(modules || []);
  const injector = new Injector(bootstrapModules);
  injector.init();
  return injector;
}
//# sourceMappingURL=Viewer.js.map
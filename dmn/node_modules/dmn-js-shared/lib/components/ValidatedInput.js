import { createVNode, createComponentVNode } from "inferno";
import { Component } from 'inferno';

// eslint-disable-next-line
import Input from './Input';

/**
 * Input with optional validation.
 */
export default class ValidatedInput extends Component {
  constructor(props, context) {
    super(props, context);
    const validate = props.validate,
      value = props.value;
    const validationWarning = validate ? validate(value || '') : undefined;
    this.state = {
      validationWarning,
      value
    };
    this.onInput = this.onInput.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
  }
  componentWillReceiveProps(props) {
    const validate = props.validate,
      value = props.value;
    const validationWarning = validate ? validate(value || '') : undefined;
    this.setState({
      validationWarning,
      value
    });
  }
  onInput(value) {
    const _this$props = this.props,
      onInput = _this$props.onInput,
      validate = _this$props.validate;
    const validationWarning = validate ? validate(value) : undefined;
    this.setState({
      validationWarning,
      value
    });
    if (typeof onInput !== 'function') {
      return;
    }
    onInput && onInput({
      isValid: !validationWarning,
      value
    });
  }
  onKeyDown(event) {
    const target = event.target,
      value = target.value;
    const _this$props2 = this.props,
      onKeyDown = _this$props2.onKeyDown,
      validate = _this$props2.validate;
    const validationWarning = validate ? validate(value) : undefined;
    if (typeof onKeyDown !== 'function') {
      return;
    }
    onKeyDown({
      isValid: !validationWarning,
      value,
      event
    });
  }
  onKeyUp(event) {
    const target = event.target,
      value = target.value;
    const _this$props3 = this.props,
      onKeyUp = _this$props3.onKeyUp,
      validate = _this$props3.validate;
    const validationWarning = validate ? validate(value) : undefined;
    if (typeof onKeyUp !== 'function') {
      return;
    }
    onKeyUp({
      isValid: !validationWarning,
      value,
      event
    });
  }
  render() {
    const _this$props4 = this.props,
      placeholder = _this$props4.placeholder,
      type = _this$props4.type,
      className = _this$props4.className;
    const _this$state = this.state,
      validationWarning = _this$state.validationWarning,
      value = _this$state.value;
    const parentClasses = ['dms-validated-input', className].join(' ');
    const inputClasses = [];
    if (validationWarning) {
      inputClasses.push('invalid');
    }
    return createVNode(1, "div", parentClasses, [createComponentVNode(2, Input, {
      "className": inputClasses,
      "onInput": this.onInput,
      "onKeyDown": this.onKeyDown,
      "onKeyUp": this.onKeyUp,
      "placeholder": placeholder || '',
      "type": type,
      "value": value || ''
    }), validationWarning && createVNode(1, "p", "dms-hint dms-validation-warning", validationWarning, 0)], 0);
  }
}
//# sourceMappingURL=ValidatedInput.js.map
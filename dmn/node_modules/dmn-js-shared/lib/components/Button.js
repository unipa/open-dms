import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
export default class Button extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onClick", event => {
      const onClick = this.props.onClick;
      if (typeof onClick !== 'function') {
        return;
      }
      onClick(event);
    });
    _defineProperty(this, "onMouseDown", event => {
      const onMouseDown = this.props.onMouseDown;
      if (typeof onMouseDown !== 'function') {
        return;
      }
      onMouseDown(event);
    });
    _defineProperty(this, "onMouseUp", event => {
      const onMouseUp = this.props.onMouseUp;
      if (typeof onMouseUp !== 'function') {
        return;
      }
      onMouseUp(event);
    });
  }
  render() {
    const className = this.props.className;
    return createVNode(1, "button", [className || '', 'button'].join(' '), this.props.children, 0, {
      "onClick": this.onClick,
      "onMouseDown": this.onMouseDown,
      "onMouseUp": this.onMouseUp
    });
  }
}
//# sourceMappingURL=Button.js.map
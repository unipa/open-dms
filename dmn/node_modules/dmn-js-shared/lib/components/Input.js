import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
export default class Input extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onInput", event => {
      const onInput = this.props.onInput;
      if (typeof onInput !== 'function') {
        return;
      }
      onInput(event.target.value);
    });
    _defineProperty(this, "onKeyDown", event => {
      const onKeyDown = this.props.onKeyDown;
      if (typeof onKeyDown !== 'function') {
        return;
      }
      onKeyDown(event);
    });
    _defineProperty(this, "onKeyUp", event => {
      const onKeyUp = this.props.onKeyUp;
      if (typeof onKeyUp !== 'function') {
        return;
      }
      onKeyUp(event);
    });
  }
  render() {
    const _this$props = this.props,
      className = _this$props.className,
      placeholder = _this$props.placeholder,
      type = _this$props.type,
      value = _this$props.value;
    return createVNode(64, "input", [className || '', 'dms-input'].join(' '), null, 1, {
      "placeholder": placeholder || '',
      "onInput": this.onInput,
      "onKeyDown": this.onKeyDown,
      "onKeyUp": this.onKeyUp,
      "spellcheck": "false",
      "type": type || 'text',
      "value": value
    });
  }
}
//# sourceMappingURL=Input.js.map
import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
export default class Select extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onChange", event => {
      const value = event.target.value;
      this.setState({
        value
      });
      const onChange = this.props.onChange;
      if (typeof onChange !== 'function') {
        return;
      }
      onChange(value);
    });
    const _value = props.value;
    this.state = {
      value: _value
    };
  }
  componentWillReceiveProps(props) {
    const value = props.value;
    this.setState({
      value
    });
  }
  render() {
    const _this$props = this.props,
      className = _this$props.className,
      options = _this$props.options;
    const value = this.state.value;
    return createVNode(256, "select", [className || '', 'dms-select'].join(' '), (options || []).map(_ref => {
      let label = _ref.label,
        value = _ref.value;
      return createVNode(1, "option", "option", label, 0, {
        "value": value
      });
    }), 0, {
      "onChange": this.onChange,
      "value": value
    });
  }
}
//# sourceMappingURL=Select.js.map
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { isObject, isDefined, reduce } from 'min-dash';
import { getBusinessObject } from '../../../util/ModelUtil';
const ID = 'id';

/**
 * A generic handler that implements property editing.
 */
export default class EditPropertiesHandler {
  constructor(elementRegistry, moddle) {
    this._elementRegistry = elementRegistry;
    this._moddle = moddle;
  }

  /**
   * <do>
   */
  execute(context) {
    const element = context.element,
      properties = context.properties;
    const bo = getBusinessObject(element);
    const _this$updatePropertie = this.updateProperties(bo, properties),
      changed = _this$updatePropertie.changed,
      oldProperties = _this$updatePropertie.oldProperties;
    context.oldProperties = oldProperties;
    return [...changed, element];
  }

  /**
   * <undo>
   */
  revert(context) {
    const element = context.element,
      oldProperties = context.oldProperties;
    var bo = getBusinessObject(element);
    var _this$updatePropertie2 = this.updateProperties(bo, oldProperties),
      changed = _this$updatePropertie2.changed;
    return [...changed, element];
  }

  /**
   * Update properties of the given business object
   * and return { changed, oldProperties }.
   */
  updateProperties(bo, newProps) {
    const ids = this._moddle.ids;

    // Reduce over all new properties and return
    //
    // {
    //  changed,
    //  oldProperties
    // }
    return reduce(newProps, (result, value, key) => {
      const propertyValue = bo.get(key);

      // handle nested update
      if (isContainer(value)) {
        if (!isContainer(propertyValue)) {
          throw new Error("non-existing property <".concat(key, ">: cannot update values"));
        }
        let _this$updatePropertie3 = this.updateProperties(propertyValue, value),
          changed = _this$updatePropertie3.changed,
          oldProperties = _this$updatePropertie3.oldProperties;
        return {
          changed: [...result.changed, ...changed, propertyValue],
          oldProperties: _objectSpread(_objectSpread({}, result.oldProperties), {}, {
            [key]: oldProperties
          })
        };
      }

      // handle ID change
      if (key === ID && isIdChange(bo, value)) {
        ids.unclaim(bo[ID]);
        this._elementRegistry.updateId(bo, value);
        ids.claim(value, bo);
      }

      // handle plain update
      bo.set(key, value);
      return {
        changed: result.changed,
        oldProperties: _objectSpread(_objectSpread({}, result.oldProperties), {}, {
          [key]: propertyValue
        })
      };
    }, {
      changed: [],
      oldProperties: {}
    });
  }
}
EditPropertiesHandler.$inject = ['elementRegistry', 'moddle'];

// helpers //////////////////////

function isIdChange(element, newId) {
  return element[ID] !== newId;
}
function isContainer(o) {
  return isDefined(o) && isObject(o);
}
//# sourceMappingURL=UpdatePropertiesHandler.js.map
{"version":3,"file":"ExpressionLanguages.js","names":["assign","find","EXPRESSION_LANGUAGE_OPTIONS","label","value","ExpressionLanguages","constructor","injector","_injector","config","get","_config","options","defaults","editor","legacyDefaults","_getLegacyDefaults","getDefault","componentName","defaultFromConfig","_getLanguageByValue","getAll","getLabel","expressionLanguageValue","langauge","inputCellValue","outputCellValue","inputCell","outputCell","language","$inject"],"sources":["../../../src/features/expression-languages/ExpressionLanguages.js"],"sourcesContent":["import {\n  assign,\n  find\n} from 'min-dash';\n\n\nconst EXPRESSION_LANGUAGE_OPTIONS = [ {\n  label: 'FEEL',\n  value: 'feel'\n} ];\n\n/**\n * @typedef ExpressionLanguageDescriptor\n * @property {string} value - value inserted into XML\n * @property {string} label - human-readable label\n */\n\n/**\n * Provide options and defaults of expression languages via config.\n *\n * @example\n *\n * // there will be two languages available with FEEL as default\n * const editor = new DmnJS({\n *   common: {\n *     expressionLanguages: {\n *       options: [{\n *         value: 'feel',\n *         label: 'FEEL'\n *       }, {\n *         value: 'juel',\n *         label: 'JUEL'\n *       }],\n *       defaults: {\n *         editor: 'feel'\n *       }\n *     }\n *   }\n * })\n */\nexport default class ExpressionLanguages {\n  constructor(injector) {\n    this._injector = injector;\n\n    const config = injector.get('config.expressionLanguages') || {};\n\n    this._config = {\n      options: EXPRESSION_LANGUAGE_OPTIONS,\n      defaults: {\n        editor: 'feel'\n      }\n    };\n\n    // first assign the list of languages as it might be required for the legacy defaults\n    if (config.options) {\n      this._config.options = config.options;\n    }\n\n    const legacyDefaults = this._getLegacyDefaults();\n\n    assign(this._config.defaults, legacyDefaults, config.defaults);\n  }\n\n  /**\n   * Get default expression language for a component or the editor if `componentName`\n   * is not provided.\n   *\n   * @param {string} [componentName]\n   * @returns {ExpressionLanguageDescriptor}\n   */\n  getDefault(componentName) {\n    const { defaults } = this._config;\n    const defaultFromConfig = defaults[componentName] || defaults.editor;\n\n    return this._getLanguageByValue(defaultFromConfig) || this.getAll()[0];\n  }\n\n  /**\n   * Get label for provided expression language.\n   *\n   * @param {string} expressionLanguageValue - value from XML\n   * @returns {string}\n   */\n  getLabel(expressionLanguageValue) {\n    const langauge = this._getLanguageByValue(expressionLanguageValue);\n\n    return langauge ? langauge.label : expressionLanguageValue;\n  }\n\n  /**\n   * Get list of configured expression languages.\n   *\n   * @returns {ExpressionLanguageDescriptor[]}\n   */\n  getAll() {\n    return this._config.options;\n  }\n\n  _getLegacyDefaults() {\n    const defaults = {},\n          injector = this._injector;\n\n    const inputCellValue = injector.get('config.defaultInputExpressionLanguage');\n    const outputCellValue = injector.get('config.defaultOutputExpressionLanguage');\n\n    if (inputCellValue) {\n      defaults.inputCell = inputCellValue;\n    }\n\n    if (outputCellValue) {\n      defaults.outputCell = outputCellValue;\n    }\n\n    return defaults;\n  }\n\n  _getLanguageByValue(value) {\n    return find(this.getAll(), language => value === language.value);\n  }\n}\n\nExpressionLanguages.$inject = [ 'injector' ];\n"],"mappings":"AAAA,SACEA,MAAM,EACNC,IAAI,QACC,UAAU;AAGjB,MAAMC,2BAA2B,GAAG,CAAE;EACpCC,KAAK,EAAE,MAAM;EACbC,KAAK,EAAE;AACT,CAAC,CAAE;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,mBAAmB,CAAC;EACvCC,WAAW,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACC,SAAS,GAAGD,QAAQ;IAEzB,MAAME,MAAM,GAAGF,QAAQ,CAACG,GAAG,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;IAE/D,IAAI,CAACC,OAAO,GAAG;MACbC,OAAO,EAAEV,2BAA2B;MACpCW,QAAQ,EAAE;QACRC,MAAM,EAAE;MACV;IACF,CAAC;;IAED;IACA,IAAIL,MAAM,CAACG,OAAO,EAAE;MAClB,IAAI,CAACD,OAAO,CAACC,OAAO,GAAGH,MAAM,CAACG,OAAO;IACvC;IAEA,MAAMG,cAAc,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAEhDhB,MAAM,CAAC,IAAI,CAACW,OAAO,CAACE,QAAQ,EAAEE,cAAc,EAAEN,MAAM,CAACI,QAAQ,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,UAAU,CAACC,aAAa,EAAE;IACxB,MAAQL,QAAQ,GAAK,IAAI,CAACF,OAAO,CAAzBE,QAAQ;IAChB,MAAMM,iBAAiB,GAAGN,QAAQ,CAACK,aAAa,CAAC,IAAIL,QAAQ,CAACC,MAAM;IAEpE,OAAO,IAAI,CAACM,mBAAmB,CAACD,iBAAiB,CAAC,IAAI,IAAI,CAACE,MAAM,EAAE,CAAC,CAAC,CAAC;EACxE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,CAACC,uBAAuB,EAAE;IAChC,MAAMC,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACG,uBAAuB,CAAC;IAElE,OAAOC,QAAQ,GAAGA,QAAQ,CAACrB,KAAK,GAAGoB,uBAAuB;EAC5D;;EAEA;AACF;AACA;AACA;AACA;EACEF,MAAM,GAAG;IACP,OAAO,IAAI,CAACV,OAAO,CAACC,OAAO;EAC7B;EAEAI,kBAAkB,GAAG;IACnB,MAAMH,QAAQ,GAAG,CAAC,CAAC;MACbN,QAAQ,GAAG,IAAI,CAACC,SAAS;IAE/B,MAAMiB,cAAc,GAAGlB,QAAQ,CAACG,GAAG,CAAC,uCAAuC,CAAC;IAC5E,MAAMgB,eAAe,GAAGnB,QAAQ,CAACG,GAAG,CAAC,wCAAwC,CAAC;IAE9E,IAAIe,cAAc,EAAE;MAClBZ,QAAQ,CAACc,SAAS,GAAGF,cAAc;IACrC;IAEA,IAAIC,eAAe,EAAE;MACnBb,QAAQ,CAACe,UAAU,GAAGF,eAAe;IACvC;IAEA,OAAOb,QAAQ;EACjB;EAEAO,mBAAmB,CAAChB,KAAK,EAAE;IACzB,OAAOH,IAAI,CAAC,IAAI,CAACoB,MAAM,EAAE,EAAEQ,QAAQ,IAAIzB,KAAK,KAAKyB,QAAQ,CAACzB,KAAK,CAAC;EAClE;AACF;AAEAC,mBAAmB,CAACyB,OAAO,GAAG,CAAE,UAAU,CAAE"}
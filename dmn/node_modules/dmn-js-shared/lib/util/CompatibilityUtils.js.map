{"version":3,"file":"CompatibilityUtils.js","names":["isFunction","wrapForCompatibility","api","window","Promise","Error","argLen","arguments","length","callback","console","warn","replaceBoundPrefix","name","argsWithoutCallback","Array","prototype","slice","call","apply","then","result","firstKey","Object","keys","err","warnings","string","replace"],"sources":["../../src/util/CompatibilityUtils.js"],"sourcesContent":["import { isFunction } from 'min-dash';\n\n// TODO: remove with future dmn-js version\n\n/**\n * Wraps APIs to check:\n *\n * 1) If a callback is passed -> Warn users about callback deprecation.\n * 2) If Promise class is implemented in current environment.\n *\n * @private\n */\nexport function wrapForCompatibility(api) {\n\n  return function() {\n\n    if (!window.Promise) {\n      throw new Error('Promises is not supported in this environment.' +\n      ' Please polyfill Promise.');\n    }\n\n    var argLen = arguments.length;\n    if (argLen >= 1 && isFunction(arguments[argLen - 1])) {\n\n      var callback = arguments[argLen - 1];\n\n      console.warn(new Error(\n        'Passing callbacks to ' + replaceBoundPrefix(api.name) +\n        ' is deprecated and will be removed in a future major release. ' +\n        'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'\n      ));\n\n      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);\n\n      api.apply(this, argsWithoutCallback).then(function(result) {\n\n        var firstKey = Object.keys(result)[0];\n\n        // The APIs we are wrapping all resolve a single item depending on the API.\n        // For instance, importXML resolves { warnings } and saveXML returns { xml }.\n        // That's why we can call the callback with the first item of result.\n        return callback(null, result[firstKey]);\n\n        // Passing a second paramter instead of catch because we don't want to\n        // catch errors thrown by callback().\n      }, function(err) {\n\n        return callback(err, err.warnings);\n      });\n    } else {\n\n      return api.apply(this, arguments);\n    }\n  };\n}\n\n\n// helper ////////\n\n/**\n * replaceBoundPrefix - replace the <bound > prefix from a string. Can be used\n * when logging the name of an API, not being sure whether is was bound or not.\n *\n * @param  {string} string\n * @return {string} the string without the <bound > prefix. If no <bound > prefix\n * was present, the same string will be returned.\n */\nfunction replaceBoundPrefix(string) {\n  return string.replace('bound ', '');\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,CAACC,GAAG,EAAE;EAExC,OAAO,YAAW;IAEhB,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,gDAAgD,GAChE,2BAA2B,CAAC;IAC9B;IAEA,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAM;IAC7B,IAAIF,MAAM,IAAI,CAAC,IAAIN,UAAU,CAACO,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;MAEpD,IAAIG,QAAQ,GAAGF,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;MAEpCI,OAAO,CAACC,IAAI,CAAC,IAAIN,KAAK,CACpB,uBAAuB,GAAGO,kBAAkB,CAACV,GAAG,CAACW,IAAI,CAAC,GACtD,gEAAgE,GAChE,sEAAsE,CACvE,CAAC;MAEF,IAAIC,mBAAmB,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACX,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAEtEL,GAAG,CAACiB,KAAK,CAAC,IAAI,EAAEL,mBAAmB,CAAC,CAACM,IAAI,CAAC,UAASC,MAAM,EAAE;QAEzD,IAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;;QAErC;QACA;QACA;QACA,OAAOZ,QAAQ,CAAC,IAAI,EAAEY,MAAM,CAACC,QAAQ,CAAC,CAAC;;QAEvC;QACA;MACF,CAAC,EAAE,UAASG,GAAG,EAAE;QAEf,OAAOhB,QAAQ,CAACgB,GAAG,EAAEA,GAAG,CAACC,QAAQ,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,MAAM;MAEL,OAAOxB,GAAG,CAACiB,KAAK,CAAC,IAAI,EAAEZ,SAAS,CAAC;IACnC;EACF,CAAC;AACH;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,kBAAkB,CAACe,MAAM,EAAE;EAClC,OAAOA,MAAM,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;AACrC"}
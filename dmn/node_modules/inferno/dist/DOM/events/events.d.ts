import { NativeAnimationEvent, NativeClipboardEvent, NativeCompositionEvent, NativeDragEvent, NativeFocusEvent, NativeKeyboardEvent, NativeMouseEvent, NativeTouchEvent, NativeTransitionEvent, NativeUIEvent, NativeWheelEvent } from '../../JSX';
import { LinkedEvent } from './linkEvent';
export interface SemiSyntheticEvent<T> extends Event {
    /**
     * A reference to the element on which the event listener is registered.
     */
    currentTarget: EventTarget & T;
}
export declare type ClipboardEvent<T> = SemiSyntheticEvent<T> & NativeClipboardEvent;
export declare type CompositionEvent<T> = SemiSyntheticEvent<T> & NativeCompositionEvent;
export declare type DragEvent<T> = MouseEvent<T> & NativeDragEvent;
export declare type FocusEvent<T> = SemiSyntheticEvent<T> & NativeFocusEvent;
export declare type FormEvent<T> = SemiSyntheticEvent<T>;
export interface InvalidEvent<T> extends SemiSyntheticEvent<T> {
    target: EventTarget & T;
}
export interface ChangeEvent<T> extends SemiSyntheticEvent<T> {
    target: EventTarget & T;
}
export declare type KeyboardEvent<T> = SemiSyntheticEvent<T> & NativeKeyboardEvent;
export declare type MouseEvent<T> = SemiSyntheticEvent<T> & NativeMouseEvent;
export declare type TouchEvent<T> = SemiSyntheticEvent<T> & NativeTouchEvent;
export declare type UIEvent<T> = SemiSyntheticEvent<T> & NativeUIEvent;
export declare type WheelEvent<T> = MouseEvent<T> & NativeWheelEvent;
export declare type AnimationEvent<T> = SemiSyntheticEvent<T> & NativeAnimationEvent;
export declare type TransitionEvent<T> = SemiSyntheticEvent<T> & NativeTransitionEvent;
export declare type EventHandler<E extends SemiSyntheticEvent<any>> = {
    bivarianceHack(event: E): void;
}['bivarianceHack'] | LinkedEvent<any, E> | null;
export declare type InfernoEventHandler<T> = EventHandler<SemiSyntheticEvent<T>>;
export declare type ClipboardEventHandler<T> = EventHandler<ClipboardEvent<T>>;
export declare type CompositionEventHandler<T> = EventHandler<CompositionEvent<T>>;
export declare type DragEventHandler<T> = EventHandler<DragEvent<T>>;
export declare type FocusEventHandler<T> = EventHandler<FocusEvent<T>>;
export declare type FormEventHandler<T> = EventHandler<FormEvent<T>>;
export declare type ChangeEventHandler<T> = EventHandler<ChangeEvent<T>>;
export declare type KeyboardEventHandler<T> = EventHandler<KeyboardEvent<T>>;
export declare type MouseEventHandler<T> = EventHandler<MouseEvent<T>>;
export declare type TouchEventHandler<T> = EventHandler<TouchEvent<T>>;
export declare type UIEventHandler<T> = EventHandler<UIEvent<T>>;
export declare type WheelEventHandler<T> = EventHandler<WheelEvent<T>>;
export declare type AnimationEventHandler<T> = EventHandler<AnimationEvent<T>>;
export declare type TransitionEventHandler<T> = EventHandler<TransitionEvent<T>>;

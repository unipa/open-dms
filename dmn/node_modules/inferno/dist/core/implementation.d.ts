import { ChildFlags, VNodeFlags } from 'inferno-vnode-flags';
export interface VNode<P = {}> {
    children: InfernoChildren;
    childFlags: ChildFlags;
    dom: Element | null;
    className: string | null | undefined;
    flags: VNodeFlags;
    isValidated?: boolean;
    key: null | number | string;
    parentVNode: VNode | null;
    props: (Props<P> & P) | null;
    ref: Ref | Refs<P> | null;
    type: any;
}
export declare type InfernoInput = VNode | null | string;
export declare type Ref<T = Element> = {
    bivarianceHack(instance: T | null): any;
}['bivarianceHack'];
export declare type InfernoChildren = Element | string | number | boolean | undefined | VNode | Array<Element | boolean | string | number | VNode | null | undefined> | null;
export interface Props<P, T = Element> extends Refs<P> {
    children?: InfernoChildren;
    ref?: Ref<T> | Refs<P> | null;
    key?: any;
    className?: string;
}
export interface Refs<P> {
    onComponentDidMount?: (domNode: Element, nextProps: P) => void;
    onComponentWillMount?(): void;
    onComponentShouldUpdate?(lastProps: P, nextProps: P): boolean;
    onComponentWillUpdate?(lastProps: P, nextProps: P): void;
    onComponentDidUpdate?(lastProps: P, nextProps: P): void;
    onComponentWillUnmount?(domNode: Element): void;
}
export declare function createVNode<P>(flags: VNodeFlags, type: any, className?: string | null, children?: InfernoChildren, childFlags?: ChildFlags, props?: (Props<P> & P) | null, key?: string | number | null, ref?: Ref | Refs<P> | null): VNode;
export declare function createComponentVNode<P>(flags: VNodeFlags, type: any, props?: (Props<P> & P) | null, key?: null | string | number, ref?: Ref | Refs<P> | null): VNode<{}>;
export declare function createTextVNode(text?: string | number, key?: string | number | null): VNode;
export declare function normalizeProps(vNode: any): any;
export declare function directClone(vNodeToClone: VNode): VNode;
export declare function createVoidVNode(): VNode;
export declare function _normalizeVNodes(nodes: any[], result: VNode[], index: number, currentKey: string): void;
export declare function getFlagsForElementVnode(type: string): VNodeFlags;
export declare function normalizeChildren(vNode: VNode, children: any): VNode<{}>;
export declare const options: {
    afterRender: null | Function;
    beforeRender: null | Function;
    createVNode: null | Function;
    renderComplete: null | Function;
};

import { createVNode, createComponentVNode } from "inferno";
import { Component } from 'inferno';
import ContentEditable from 'dmn-js-shared/lib/components/ContentEditable';
export default class InputEditor extends Component {
  constructor(props, context) {
    super(props, context);
    this.translate = context.injector ? context.injector.get('translate') : noopTranslate;
    this.handleValue = text => {
      let change = {
        text
      };
      this.handleChange(change);
    };
    this.handleLabelChange = value => {
      // default to <undefined> for empty string
      var label = value || undefined;
      this.handleChange({
        label
      });
    };
  }
  handleChange(changes) {
    var onChange = this.props.onChange;
    if (typeof onChange === 'function') {
      onChange(changes);
    }
  }
  render() {
    const _this$props = this.props,
      label = _this$props.label,
      text = _this$props.text;
    return createVNode(1, "div", "context-menu-container ref-input-editor input-edit", [createVNode(1, "div", "dms-form-control", createComponentVNode(2, ContentEditable, {
      "className": "dms-input-label",
      "value": label || '',
      "placeholder": this.translate('Input'),
      "singleLine": true,
      "onInput": this.handleLabelChange
    }), 2), createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", this.translate('Expression'), 0), createComponentVNode(2, ContentEditable, {
      "placeholder": this.translate('enter expression'),
      "className": ['ref-text', 'dms-input'].join(' '),
      "onInput": this.handleValue,
      "value": text || ''
    })], 4)], 4);
  }
}
function noopTranslate(str) {
  return str;
}
//# sourceMappingURL=InputEditor.js.map
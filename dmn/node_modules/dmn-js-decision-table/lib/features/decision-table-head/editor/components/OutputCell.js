import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { mixin } from 'table-js/lib/components';
import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';
export default class OutputCell extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onClick", event => {
      const output = this.props.output;
      this._eventBus.fire('output.edit', {
        event,
        output
      });
    });
    _defineProperty(this, "onContextmenu", event => {
      const id = this.props.output.id;
      this._eventBus.fire('cell.contextmenu', {
        event,
        id
      });
    });
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    mixin(this, ComponentWithSlots);
    this._translate = context.injector.get('translate');
  }
  componentWillMount() {
    const injector = this.context.injector;
    this._changeSupport = this.context.changeSupport;
    this._eventBus = injector.get('eventBus');
    this._elementRegistry = injector.get('elementRegistry');
    const output = this.props.output;
    this._changeSupport.onElementsChanged(output.id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const output = this.props.output;
    this._changeSupport.offElementsChanged(output.id, this.onElementsChanged);
  }
  render() {
    const _this$props = this.props,
      output = _this$props.output,
      index = _this$props.index,
      outputsLength = _this$props.outputsLength;
    const label = output.label,
      name = output.name,
      outputValues = output.outputValues,
      typeRef = output.typeRef;
    const width = output.width ? output.width + 'px' : '192px';
    return createVNode(1, "th", "output-cell output-editor", [this.slotFills({
      type: 'cell-inner',
      context: {
        cellType: 'output-cell',
        col: this._elementRegistry.get(output.id),
        index,
        outputsLength
      },
      col: output
    }), createVNode(1, "div", "clause", index === 0 ? this._translate('Then') : this._translate('And'), 0), label ? createVNode(1, "div", "output-label", label, 0, {
      "title": this._translate('Output Label: ') + label
    }) : createVNode(1, "div", "output-name", name, 0, {
      "title": this._translate('Output Name: ') + name
    }), createVNode(1, "div", "output-variable", outputValues && outputValues.text || this._translate(typeRef || ''), 0, {
      "title": outputValues && outputValues.text ? this._translate('Output Values') : this._translate('Output Type')
    })], 0, {
      "data-col-id": output.id,
      "onDblClick": this.onClick,
      "onContextmenu": this.onContextmenu,
      "style": {
        width
      }
    });
  }
}
//# sourceMappingURL=OutputCell.js.map
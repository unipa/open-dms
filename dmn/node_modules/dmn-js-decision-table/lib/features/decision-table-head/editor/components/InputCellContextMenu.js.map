{"version":3,"file":"InputCellContextMenu.js","names":["Component","InputEditor","inject","InputCellContextMenu","constructor","props","context","input","unsaved","state","label","inputExpressionProperties","changes","hasKeys","inputExpression","modeling","updateProperties","setState","persistChanges","debounceInput","getValue","attr","target","get","render","handleChange","$inject","obj","Object","keys","length"],"sources":["../../../../../src/features/decision-table-head/editor/components/InputCellContextMenu.js"],"sourcesContent":["import { Component } from 'inferno';\n\nimport InputEditor from './InputEditor';\n\nimport {\n  inject\n} from 'table-js/lib/components';\n\n\nexport default class InputCellContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {};\n\n    inject(this);\n\n    this.persistChanges = this.debounceInput(this.persistChanges);\n  }\n\n  persistChanges = () => {\n    const { input } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    if (!unsaved) {\n      return;\n    }\n\n    const {\n      label,\n      ...inputExpressionProperties\n    } = unsaved;\n\n    var changes = { };\n\n    if ('label' in unsaved) {\n      changes.label = label;\n    }\n\n    if (hasKeys(inputExpressionProperties)) {\n      changes.inputExpression = inputExpressionProperties;\n    }\n\n    this.modeling.updateProperties(input, changes);\n\n    this.setState({\n      unsaved: false\n    });\n  };\n\n  handleChange = (changes) => {\n    this.setState({\n      unsaved: {\n        ...this.state.unsaved,\n        ...changes\n      }\n    }, this.persistChanges);\n  };\n\n  getValue(attr) {\n    let { input } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    let target = input;\n\n    // input variable stored in parent\n    if (attr === 'text') {\n      target = target.inputExpression;\n    }\n\n    return unsaved && attr in unsaved ? unsaved[attr] : target.get(attr);\n  }\n\n  render() {\n    return (\n      <InputEditor\n        label={ this.getValue('label') }\n        text={ this.getValue('text') }\n        onChange={ this.handleChange } />\n    );\n  }\n}\n\nInputCellContextMenu.$inject = [\n  'debounceInput',\n  'modeling',\n  'injector'\n];\n\n\n// helpers //////////////////////\n\nfunction hasKeys(obj) {\n  return Object.keys(obj).length;\n}"],"mappings":";;;;;;;;;AAAA,SAASA,SAAS,QAAQ,SAAS;AAEnC,OAAOC,WAAW,MAAM,eAAe;AAEvC,SACEC,MAAM,QACD,yBAAyB;AAGhC,eAAe,MAAMC,oBAAoB,SAASH,SAAS,CAAC;EAE1DI,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAE;IAC1B,KAAK,CAACD,KAAK,EAAEC,OAAO,CAAC;IAAC,wCASP,MAAM;MACrB,MAAQC,KAAK,GAAK,IAAI,CAACF,KAAK,CAACC,OAAO,CAA5BC,KAAK;MAEb,MAAQC,OAAO,GAAK,IAAI,CAACC,KAAK,CAAtBD,OAAO;MAEf,IAAI,CAACA,OAAO,EAAE;QACZ;MACF;MAEA,MACEE,KAAK,GAEHF,OAAO,CAFTE,KAAK;QACFC,yBAAyB,4BAC1BH,OAAO;MAEX,IAAII,OAAO,GAAG,CAAE,CAAC;MAEjB,IAAI,OAAO,IAAIJ,OAAO,EAAE;QACtBI,OAAO,CAACF,KAAK,GAAGA,KAAK;MACvB;MAEA,IAAIG,OAAO,CAACF,yBAAyB,CAAC,EAAE;QACtCC,OAAO,CAACE,eAAe,GAAGH,yBAAyB;MACrD;MAEA,IAAI,CAACI,QAAQ,CAACC,gBAAgB,CAACT,KAAK,EAAEK,OAAO,CAAC;MAE9C,IAAI,CAACK,QAAQ,CAAC;QACZT,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA,sCAEeI,OAAO,IAAK;MAC1B,IAAI,CAACK,QAAQ,CAAC;QACZT,OAAO,kCACF,IAAI,CAACC,KAAK,CAACD,OAAO,GAClBI,OAAO;MAEd,CAAC,EAAE,IAAI,CAACM,cAAc,CAAC;IACzB,CAAC;IA7CC,IAAI,CAACT,KAAK,GAAG,CAAC,CAAC;IAEfP,MAAM,CAAC,IAAI,CAAC;IAEZ,IAAI,CAACgB,cAAc,GAAG,IAAI,CAACC,aAAa,CAAC,IAAI,CAACD,cAAc,CAAC;EAC/D;EA0CAE,QAAQ,CAACC,IAAI,EAAE;IACb,IAAMd,KAAK,GAAK,IAAI,CAACF,KAAK,CAACC,OAAO,CAA5BC,KAAK;IAEX,MAAQC,OAAO,GAAK,IAAI,CAACC,KAAK,CAAtBD,OAAO;IAEf,IAAIc,MAAM,GAAGf,KAAK;;IAElB;IACA,IAAIc,IAAI,KAAK,MAAM,EAAE;MACnBC,MAAM,GAAGA,MAAM,CAACR,eAAe;IACjC;IAEA,OAAON,OAAO,IAAIa,IAAI,IAAIb,OAAO,GAAGA,OAAO,CAACa,IAAI,CAAC,GAAGC,MAAM,CAACC,GAAG,CAACF,IAAI,CAAC;EACtE;EAEAG,MAAM,GAAG;IACP;MAAA,SAEY,IAAI,CAACJ,QAAQ,CAAC,OAAO,CAAC;MAAA,QACvB,IAAI,CAACA,QAAQ,CAAC,MAAM,CAAC;MAAA,YACjB,IAAI,CAACK;IAAY;EAElC;AACF;AAEAtB,oBAAoB,CAACuB,OAAO,GAAG,CAC7B,eAAe,EACf,UAAU,EACV,UAAU,CACX;;AAGD;;AAEA,SAASb,OAAO,CAACc,GAAG,EAAE;EACpB,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM;AAChC"}
import { closest as domClosest, matches as domMatches } from 'min-dom';
import OutputCell from './components/OutputCell';
import OutputCellContextMenu from './components/OutputCellContextMenu';
export default class OutputEditingProvider {
  constructor(components, contextMenu, eventBus, renderer) {
    components.onGetComponent('cell', _ref => {
      let cellType = _ref.cellType;
      if (cellType === 'output-header') {
        return OutputCell;
      }
    });
    components.onGetComponent('context-menu', function () {
      let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (context.contextMenuType === 'output-edit') {
        return OutputCellContextMenu;
      }
    });
    eventBus.on('output.edit', _ref2 => {
      let event = _ref2.event,
        output = _ref2.output;
      const target = event.target;
      const node = domClosest(target, 'th', true);
      const _node$getBoundingClie = node.getBoundingClientRect(),
        left = _node$getBoundingClie.left,
        top = _node$getBoundingClie.top;
      const offset = getOffset(node);
      contextMenu.open({
        x: left,
        y: top,
        align: 'bottom-right'
      }, {
        contextMenuType: 'output-edit',
        output,
        offset
      });
    });
  }
}
OutputEditingProvider.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];
function getOffset(element) {
  if (!domMatches(element, '.output-cell + .output-cell')) {
    return {
      x: -1,
      y: 0
    };
  }
}
//# sourceMappingURL=OutputEditingProvider.js.map
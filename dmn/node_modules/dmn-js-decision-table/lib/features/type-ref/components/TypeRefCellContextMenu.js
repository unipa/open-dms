import { createVNode, createComponentVNode, createTextVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { is, isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';
export default class TypeRefCellContextMenu extends Component {
  constructor(props, context) {
    super(props);
    _defineProperty(this, "onTypeChange", value => {
      const element = this.getElement();
      const actualElement = is(element, 'dmn:LiteralExpression') ? element.$parent : element;
      let newProperties;
      if (isInput(actualElement)) {
        newProperties = {
          inputExpression: {
            typeRef: value
          }
        };
      } else if (isOutput(actualElement)) {
        newProperties = {
          typeRef: value
        };
      }
      this._modeling.updateProperties(actualElement, newProperties);
    });
    this._translate = context.injector.get('translate');
    this._modeling = context.injector.get('modeling');
    this._dataTypes = context.injector.get('dataTypes');
  }
  getElement() {
    return this.props.context.input || this.props.context.output;
  }
  render() {
    const element = this.getElement();
    const typeRef = (is(element, 'dmn:InputClause') ? element.inputExpression : element).typeRef;
    const typeRefOptions = this._dataTypes.getAll().map(t => {
      return {
        label: this._translate(t),
        value: t
      };
    });
    return createVNode(1, "div", "type-ref-edit context-menu-container", createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", [this._translate('Type'), createTextVNode(":")], 0), createComponentVNode(2, InputSelect, {
      "className": "type-ref-edit-select",
      "onChange": this.onTypeChange,
      "options": typeRefOptions,
      "value": typeRef
    })], 4), 2);
  }
}
//# sourceMappingURL=TypeRefCellContextMenu.js.map
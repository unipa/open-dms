{"version":3,"file":"CopyCutPasteKeyBindings.js","names":["getRange","event","domEvent","getFocusableNode","getNodeById","isCmd","isShift","CopyPasteKeyBindings","constructor","injector","eventBus","clipboard","cellSelection","elementRegistry","editorActions","renderer","_clipboard","clear","copy","key","modifiers","cell","_getSelectedCell","_editorActions","trigger","element","col","row","cut","paste","pasted","_cellSelection","selectCell","forEach","l","_keyboard","addListener","_elementRegistry","get","_renderer","on","_registerBindings","bind","document","_clearClipboard","unbind","elementId","getCellSelection","container","getContainer","node","focusableNode","activeElement","range","start","end","$inject"],"sources":["../../../../src/features/copy-cut-paste/key-bindings/CopyCutPasteKeyBindings.js"],"sourcesContent":["import {\n  getRange\n} from 'selection-ranges';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  getFocusableNode,\n  getNodeById\n} from '../../cell-selection/CellSelectionUtil';\n\nimport {\n  isCmd,\n  isShift\n} from '../../keyboard/KeyboardUtil';\n\n\n/**\n * Keybindings for Copy + Paste\n */\nexport default class CopyPasteKeyBindings {\n\n  constructor(\n      injector, eventBus, clipboard,\n      cellSelection, elementRegistry, editorActions,\n      renderer) {\n\n    this._clipboard = clipboard;\n    this._cellSelection = cellSelection;\n    this._elementRegistry = elementRegistry;\n    this._editorActions = editorActions;\n    this._keyboard = injector.get('keyboard', false);\n    this._renderer = renderer;\n\n    if (!this._keyboard) {\n      return;\n    }\n\n    eventBus.on('keyboard.init', this._registerBindings);\n\n    eventBus.on('keyboard.bind', () => {\n      domEvent.bind(document, 'copy', this._clearClipboard, true);\n      domEvent.bind(document, 'cut', this._clearClipboard, true);\n    });\n\n    eventBus.on('keyboard.unbind', () => {\n      domEvent.unbind(document, 'copy', this._clearClipboard, true);\n      domEvent.unbind(document, 'cut', this._clearClipboard, true);\n    });\n  }\n\n  _clearClipboard = () => {\n    this._clipboard.clear();\n  };\n\n  /**\n   * Return the selected cell within the decision table.\n   *\n   * This verifies that a cell ready for copy-or-paste is\n   * actual selected by the user, in the Browser UI.\n   *\n   * @return {Cell}\n   */\n  _getSelectedCell() {\n\n    const elementId = this._cellSelection.getCellSelection();\n\n    // we may have no selection\n    if (!elementId) {\n      return;\n    }\n\n    const cell = this._elementRegistry.get(elementId);\n\n    // selection may not be a cell\n    if (!cell) {\n      return;\n    }\n\n    const container = this._renderer.getContainer();\n\n    const node = getNodeById(elementId, container);\n\n    const focusableNode = getFocusableNode(node);\n\n    // focusable element in selection may not be actual\n    // browser focus, i.e. when a menu is open\n    if (document.activeElement !== focusableNode) {\n      return;\n    }\n\n    const range = getRange(node);\n\n    // user may attempt native copy-paste operation right now\n    // don't interfere with normal text copying\n    if (range && (range.start !== range.end)) {\n      return;\n    }\n\n    return cell;\n  }\n\n\n  _registerBindings = () => {\n\n    // copy\n    // CTRL/CMD + C\n    const copy = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 67)) {\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('copy', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('copy', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // cut\n    // CTRL/CMD + X\n    const cut = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 88)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('cut', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('cut', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // paste\n    // CTRL/CMD + V\n    const paste = (key, modifiers) => {\n\n      let pasted;\n\n      if (isCmd(modifiers) && (key === 86)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.col\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('right');\n          }\n        } else {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.row\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('below');\n          }\n        }\n      }\n\n      // indicate, whether we could paste\n      return typeof pasted !== 'undefined';\n    };\n\n    // register listeners\n    [ copy, cut, paste ].forEach((l) => {\n      this._keyboard.addListener(l);\n    });\n  };\n\n}\n\n\nCopyPasteKeyBindings.$inject = [\n  'injector',\n  'eventBus',\n  'clipboard',\n  'cellSelection',\n  'elementRegistry',\n  'editorActions',\n  'renderer'\n];"],"mappings":"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"}
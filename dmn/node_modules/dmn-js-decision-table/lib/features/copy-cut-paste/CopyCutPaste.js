function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { isArray } from 'min-dash';
import CutHandler from './cmd/CutHandler';
import PasteHandler from './cmd/PasteHandler';
import { createDescriptor } from './DescriptorUtil';
export default class CutPaste {
  constructor(clipboard, commandStack, eventBus, modeling, sheet, rules) {
    this._clipboard = clipboard;
    this._commandStack = commandStack;
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._sheet = sheet;
    this._rules = rules;
    commandStack.registerHandler('cut', CutHandler);
    commandStack.registerHandler('paste', PasteHandler);
  }

  /**
   * Copy elements.
   *
   * @param {Array} elements - Elements to be copied.
   */
  copy(elements) {
    if (!isArray(elements)) {
      elements = [elements];
    }
    const data = {
      elements: createDescriptor(elements)
    };
    this._eventBus.fire('copyCutPaste.copy', {
      data
    });
    this._clipboard.set(data);
  }

  /**
   * Cut elements thereby removing them temporarily.
   *
   * @param {Array} elements - Elements to be cut.
   */
  cut(elements) {
    if (!isArray(elements)) {
      elements = [elements];
    }
    const data = {
      elements: createDescriptor(elements),
      keepIds: true
    };
    const context = {
      elements,
      data
    };
    this._eventBus.fire('copyCutPaste.cut', {
      data
    });
    this._commandStack.execute('cut', context);
  }

  /**
   * Paste rows or cols before row or col.
   *
   * @param {Row|Col} element - Row or col to paste elements before.
   */
  pasteBefore(element) {
    return this._paste(element, {
      before: true
    });
  }

  /**
   * Paste rows or cols after row or col.
   *
   * @param {Row|Col} element - Row or col to paste elements after.
   */
  pasteAfter(element) {
    return this._paste(element, {
      after: true
    });
  }

  /**
   * Basic paste onto given target element.
   */
  _paste(target, position) {
    const clipboardData = this._clipboard.get();
    if (!clipboardData) {
      return undefined;
    }
    const allowed = this._rules.allowed('paste', {
      data: clipboardData.elements,
      target
    });
    if (!allowed) {
      return false;
    }
    this._commandStack.execute('paste', _objectSpread({
      element: target
    }, position));

    // @bpmn-io: Clear clipboard to work around
    // https://github.com/camunda/camunda-modeler/issues/1246 which breaks native copy &
    // paste when row or column is copied or cut
    this._clipboard.clear();

    // Return true to stop propagation and prevent native paste
    return true;
  }

  /**
   * Paste elements at.
   */
  pasteAt(element) {

    // TODO: implement for pasting cells
  }
}
CutPaste.$inject = ['clipboard', 'commandStack', 'eventBus', 'modeling', 'sheet', 'rules'];
//# sourceMappingURL=CopyCutPaste.js.map
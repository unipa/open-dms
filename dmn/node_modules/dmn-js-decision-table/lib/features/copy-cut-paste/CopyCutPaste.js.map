{"version":3,"file":"CopyCutPaste.js","names":["isArray","CutHandler","PasteHandler","createDescriptor","CutPaste","constructor","clipboard","commandStack","eventBus","modeling","sheet","rules","_clipboard","_commandStack","_eventBus","_modeling","_sheet","_rules","registerHandler","copy","elements","data","fire","set","cut","keepIds","context","execute","pasteBefore","element","_paste","before","pasteAfter","after","target","position","clipboardData","get","undefined","allowed","clear","pasteAt","$inject"],"sources":["../../../src/features/copy-cut-paste/CopyCutPaste.js"],"sourcesContent":["import { isArray } from 'min-dash';\r\n\r\nimport CutHandler from './cmd/CutHandler';\r\nimport PasteHandler from './cmd/PasteHandler';\r\n\r\nimport { createDescriptor } from './DescriptorUtil';\r\n\r\n\r\nexport default class CutPaste {\r\n\r\n  constructor(\r\n      clipboard, commandStack, eventBus,\r\n      modeling, sheet, rules) {\r\n\r\n    this._clipboard = clipboard;\r\n    this._commandStack = commandStack;\r\n    this._eventBus = eventBus;\r\n    this._modeling = modeling;\r\n    this._sheet = sheet;\r\n    this._rules = rules;\r\n\r\n    commandStack.registerHandler('cut', CutHandler);\r\n    commandStack.registerHandler('paste', PasteHandler);\r\n  }\r\n\r\n  /**\r\n   * Copy elements.\r\n   *\r\n   * @param {Array} elements - Elements to be copied.\r\n   */\r\n  copy(elements) {\r\n    if (!isArray(elements)) {\r\n      elements = [ elements ];\r\n    }\r\n\r\n    const data = {\r\n      elements: createDescriptor(elements)\r\n    };\r\n\r\n    this._eventBus.fire('copyCutPaste.copy', { data });\r\n\r\n    this._clipboard.set(data);\r\n  }\r\n\r\n  /**\r\n   * Cut elements thereby removing them temporarily.\r\n   *\r\n   * @param {Array} elements - Elements to be cut.\r\n   */\r\n  cut(elements) {\r\n    if (!isArray(elements)) {\r\n      elements = [ elements ];\r\n    }\r\n\r\n    const data = {\r\n      elements: createDescriptor(elements),\r\n      keepIds: true\r\n    };\r\n\r\n    const context = {\r\n      elements,\r\n      data\r\n    };\r\n\r\n    this._eventBus.fire('copyCutPaste.cut', { data });\r\n\r\n    this._commandStack.execute('cut', context);\r\n  }\r\n\r\n  /**\r\n   * Paste rows or cols before row or col.\r\n   *\r\n   * @param {Row|Col} element - Row or col to paste elements before.\r\n   */\r\n  pasteBefore(element) {\r\n    return this._paste(element, { before: true });\r\n  }\r\n\r\n  /**\r\n   * Paste rows or cols after row or col.\r\n   *\r\n   * @param {Row|Col} element - Row or col to paste elements after.\r\n   */\r\n  pasteAfter(element) {\r\n    return this._paste(element, { after: true });\r\n  }\r\n\r\n  /**\r\n   * Basic paste onto given target element.\r\n   */\r\n  _paste(target, position) {\r\n\r\n    const clipboardData = this._clipboard.get();\r\n\r\n    if (!clipboardData) {\r\n      return undefined;\r\n    }\r\n\r\n    const allowed = this._rules.allowed('paste', {\r\n      data: clipboardData.elements,\r\n      target\r\n    });\r\n\r\n    if (!allowed) {\r\n      return false;\r\n    }\r\n\r\n    this._commandStack.execute('paste', {\r\n      element: target,\r\n      ...position\r\n    });\r\n\r\n    // @bpmn-io: Clear clipboard to work around\r\n    // https://github.com/camunda/camunda-modeler/issues/1246 which breaks native copy &\r\n    // paste when row or column is copied or cut\r\n    this._clipboard.clear();\r\n\r\n    // Return true to stop propagation and prevent native paste\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Paste elements at.\r\n   */\r\n  pasteAt(element) {\r\n\r\n    // TODO: implement for pasting cells\r\n  }\r\n}\r\n\r\nCutPaste.$inject = [\r\n  'clipboard',\r\n  'commandStack',\r\n  'eventBus',\r\n  'modeling',\r\n  'sheet',\r\n  'rules'\r\n];\r\n"],"mappings":";;;;;AAAA,SAASA,OAAO,QAAQ,UAAU;AAElC,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,YAAY,MAAM,oBAAoB;AAE7C,SAASC,gBAAgB,QAAQ,kBAAkB;AAGnD,eAAe,MAAMC,QAAQ,CAAC;EAE5BC,WAAW,CACPC,SAAS,EAAEC,YAAY,EAAEC,QAAQ,EACjCC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAE1B,IAAI,CAACC,UAAU,GAAGN,SAAS;IAC3B,IAAI,CAACO,aAAa,GAAGN,YAAY;IACjC,IAAI,CAACO,SAAS,GAAGN,QAAQ;IACzB,IAAI,CAACO,SAAS,GAAGN,QAAQ;IACzB,IAAI,CAACO,MAAM,GAAGN,KAAK;IACnB,IAAI,CAACO,MAAM,GAAGN,KAAK;IAEnBJ,YAAY,CAACW,eAAe,CAAC,KAAK,EAAEjB,UAAU,CAAC;IAC/CM,YAAY,CAACW,eAAe,CAAC,OAAO,EAAEhB,YAAY,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;EACEiB,IAAI,CAACC,QAAQ,EAAE;IACb,IAAI,CAACpB,OAAO,CAACoB,QAAQ,CAAC,EAAE;MACtBA,QAAQ,GAAG,CAAEA,QAAQ,CAAE;IACzB;IAEA,MAAMC,IAAI,GAAG;MACXD,QAAQ,EAAEjB,gBAAgB,CAACiB,QAAQ;IACrC,CAAC;IAED,IAAI,CAACN,SAAS,CAACQ,IAAI,CAAC,mBAAmB,EAAE;MAAED;IAAK,CAAC,CAAC;IAElD,IAAI,CAACT,UAAU,CAACW,GAAG,CAACF,IAAI,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEG,GAAG,CAACJ,QAAQ,EAAE;IACZ,IAAI,CAACpB,OAAO,CAACoB,QAAQ,CAAC,EAAE;MACtBA,QAAQ,GAAG,CAAEA,QAAQ,CAAE;IACzB;IAEA,MAAMC,IAAI,GAAG;MACXD,QAAQ,EAAEjB,gBAAgB,CAACiB,QAAQ,CAAC;MACpCK,OAAO,EAAE;IACX,CAAC;IAED,MAAMC,OAAO,GAAG;MACdN,QAAQ;MACRC;IACF,CAAC;IAED,IAAI,CAACP,SAAS,CAACQ,IAAI,CAAC,kBAAkB,EAAE;MAAED;IAAK,CAAC,CAAC;IAEjD,IAAI,CAACR,aAAa,CAACc,OAAO,CAAC,KAAK,EAAED,OAAO,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;EACEE,WAAW,CAACC,OAAO,EAAE;IACnB,OAAO,IAAI,CAACC,MAAM,CAACD,OAAO,EAAE;MAAEE,MAAM,EAAE;IAAK,CAAC,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EACEC,UAAU,CAACH,OAAO,EAAE;IAClB,OAAO,IAAI,CAACC,MAAM,CAACD,OAAO,EAAE;MAAEI,KAAK,EAAE;IAAK,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;EACEH,MAAM,CAACI,MAAM,EAAEC,QAAQ,EAAE;IAEvB,MAAMC,aAAa,GAAG,IAAI,CAACxB,UAAU,CAACyB,GAAG,EAAE;IAE3C,IAAI,CAACD,aAAa,EAAE;MAClB,OAAOE,SAAS;IAClB;IAEA,MAAMC,OAAO,GAAG,IAAI,CAACtB,MAAM,CAACsB,OAAO,CAAC,OAAO,EAAE;MAC3ClB,IAAI,EAAEe,aAAa,CAAChB,QAAQ;MAC5Bc;IACF,CAAC,CAAC;IAEF,IAAI,CAACK,OAAO,EAAE;MACZ,OAAO,KAAK;IACd;IAEA,IAAI,CAAC1B,aAAa,CAACc,OAAO,CAAC,OAAO;MAChCE,OAAO,EAAEK;IAAM,GACZC,QAAQ,EACX;;IAEF;IACA;IACA;IACA,IAAI,CAACvB,UAAU,CAAC4B,KAAK,EAAE;;IAEvB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEC,OAAO,CAACZ,OAAO,EAAE;;IAEf;EAAA;AAEJ;AAEAzB,QAAQ,CAACsC,OAAO,GAAG,CACjB,WAAW,EACX,cAAc,EACd,UAAU,EACV,UAAU,EACV,OAAO,EACP,OAAO,CACR"}
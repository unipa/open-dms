import { createVNode, createTextVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { inject } from 'table-js/lib/components';
export default class CreateInputsCell extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onClick", event => {
      this.editorActions.trigger('addInput');
    });
    inject(this);
  }
  render() {
    return createVNode(1, "td", "input-cell create-inputs", createTextVNode("-"), 2, {
      "onClick": this.onClick,
      "title": this.translate('Add Input')
    });
  }
}
CreateInputsCell.$inject = ['editorActions', 'translate'];
//# sourceMappingURL=CreateInputCell.js.map
import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { isString } from 'min-dash';
import { isAny } from 'dmn-js-shared/lib/util/ModelUtil';
import { getNodeById } from '../cell-selection/CellSelectionUtil';
import DescriptionEditor from './components/DescriptionEditor';
const LOW_PRIORITY = 500;
const LOWER_PRIORITY = 750;
const OFFSET_X = 26;
export default class Description {
  constructor(components, contextMenu, elementRegistry, eventBus, modeling, renderer, translate) {
    var _this = this;
    _defineProperty(this, "addDescription", cell => {
      this._modeling.updateProperties(cell, {
        description: ''
      });
      const container = this._renderer.getContainer();
      const node = getNodeById(cell.id, container);
      const bounds = node.getBoundingClientRect();
      const position = getPosition(container, bounds);
      this._contextMenu.open(position, {
        contextMenuType: 'cell-description',
        id: cell.id,
        autoFocus: true,
        offset: {
          x: 4,
          y: 4
        }
      });
    });
    _defineProperty(this, "removeDescription", cell => {
      this._modeling.updateProperties(cell, {
        description: null
      });
      this._contextMenu.close();
    });
    this._contextMenu = contextMenu;
    this._modeling = modeling;
    this._renderer = renderer;
    this._translate = translate;
    eventBus.on('cell.click', LOWER_PRIORITY, event => {
      if (event.defaultPrevented) {
        return;
      }
      const target = event.target,
        id = event.id;
      const element = elementRegistry.get(id);
      if (!isAny(element, ['dmn:UnaryTests', 'dmn:LiteralExpression'])) {
        return;
      }
      const description = getDescription(element);
      if (!description) {
        // prevent focus
        event.preventDefault();
      }
      const container = renderer.getContainer(),
        bounds = target.getBoundingClientRect();
      const position = getPosition(container, bounds);
      contextMenu.open(position, {
        contextMenuType: 'cell-description',
        autoFocus: false,
        id,
        offset: {
          x: 4,
          y: 4
        }
      });
    });
    components.onGetComponent('context-menu', function () {
      let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (context.contextMenuType && context.contextMenuType === 'cell-description') {
        const element = elementRegistry.get(context.id);
        const description = getDescription(element);
        if (isString(description)) {
          return DescriptionEditor;
        }
      }
    });
    components.onGetComponent('context-menu-cell-additional', LOW_PRIORITY, function () {
      let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (context.contextMenuType && context.contextMenuType === 'context-menu') {
        const id = context.id;
        if (!id) {
          return;
        }
        const element = elementRegistry.get(id);

        // element might not be in element registry (e.g. cut)
        if (!element) {
          return;
        }
        const businessObject = element.businessObject;
        const description = businessObject.description;
        const existingDescription = isString(description);
        const className = existingDescription ? 'remove-description' : 'add-description';
        const onClick = existingDescription ? () => _this.removeDescription(element) : () => _this.addDescription(element);
        return createVNode(1, "div", "context-menu-group-entry ".concat(className), isString(description) ? _this._translate('Remove Cell Description') : _this._translate('Add Cell Description'), 0, {
          "onClick": onClick
        });
      }
    });
  }
}
Description.$inject = ['components', 'contextMenu', 'elementRegistry', 'eventBus', 'modeling', 'renderer', 'translate'];

// helpers //////////

function getPosition(container, bounds) {
  const top = bounds.top,
    left = bounds.left,
    width = bounds.width,
    height = bounds.height;
  return {
    x: left + container.parentNode.scrollLeft - OFFSET_X,
    y: top + container.parentNode.scrollTop,
    width: width + 2 * OFFSET_X,
    height
  };
}
function getDescription(element) {
  return element && element.businessObject && element.businessObject.description;
}
//# sourceMappingURL=Description.js.map
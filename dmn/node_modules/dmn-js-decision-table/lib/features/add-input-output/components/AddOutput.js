import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
export default class AddOutput extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "handleClick", e => {
      e.stopPropagation();
      this.add();
    });
    _defineProperty(this, "add", () => {
      this._eventBus.fire('addOutput');
    });
    this._sheet = context.injector.get('sheet');
    this._eventBus = context.injector.get('eventBus');
    this._changeSupport = context.changeSupport;
    this._translate = context.injector.get('translate');
  }
  componentWillMount() {
    const root = this.getRoot();
    this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const root = this.getRoot();
    this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
  }
  getRoot() {
    return this._sheet.getRoot();
  }
  render() {
    return createVNode(1, "div", "add-output actionable", createVNode(1, "span", "dmn-icon-plus action-icon"), 2, {
      "onClick": this.handleClick,
      "title": this._translate('Add Output')
    });
  }
}
//# sourceMappingURL=AddOutput.js.map
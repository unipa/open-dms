import { createVNode, createComponentVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { is } from 'dmn-js-shared/lib/util/ModelUtil';
import List from 'dmn-js-shared/lib/components/List';
import ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';
import { getValuesArray, parseString } from '../Utils';
export default class AllowedValuesEditing extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "setPredefinedValues", values => {
      // inputClause or outputClause
      const target = this.getAllowedValuesTarget();
      this.setState({
        values
      });
      this._modeling.editAllowedValues(target, values && getValuesArray(values));
    });
    _defineProperty(this, "onListChange", values => {
      this.setPredefinedValues(values);
    });
    _defineProperty(this, "onInput", _ref => {
      let isValid = _ref.isValid,
        value = _ref.value;
      this.setState({
        inputValue: value
      });
    });
    _defineProperty(this, "onKeyDown", _ref2 => {
      let isValid = _ref2.isValid,
        event = _ref2.event;
      if (!isEnter(event.keyCode)) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      if (isValid) {
        const _this$state = this.state,
          inputValue = _this$state.inputValue,
          values = _this$state.values;
        const parsedString = parseString(inputValue);
        this.onListChange((values || []).concat(parsedString.values.map(value => {
          return {
            value,
            isCheckable: false,
            isRemovable: true,
            group: this._translate('Predefined Values')
          };
        })));
        this.setState({
          inputValue: ''
        });
      }
    });
    _defineProperty(this, "handleRemovePredifinedValuesClick", e => {
      e.stopPropagation();
      this.removePredefinedValues();
    });
    _defineProperty(this, "removePredefinedValues", () => {
      this.setPredefinedValues(null);
    });
    this._translate = context.injector.get('translate');
    this._modeling = context.injector.get('modeling');
    this._changeSupport = context.changeSupport;
    const _target = this.getAllowedValuesTarget();
    const _parsedString = parseString(_target.inputValues && _target.inputValues.text || _target.outputValues && _target.outputValues.text || '');
    if (_parsedString) {
      this.state = {
        values: _parsedString.values.map(value => {
          return {
            value,
            isCheckable: false,
            isRemovable: true,
            group: this._translate('Predefined Values')
          };
        }),
        inputValue: ''
      };
    } else {
      this.state = {
        values: null,
        inputValue: ''
      };
    }
  }
  componentWillMount() {
    const target = this.getAllowedValuesTarget();
    this._changeSupport.onElementsChanged(target.id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const target = this.getAllowedValuesTarget();
    this._changeSupport.offElementsChanged(target.id, this.onElementsChanged);
  }
  getAllowedValuesTarget() {
    const element = this.getElement();
    if (is(element, 'dmn:LiteralExpression')) {
      return element.$parent;
    } else {
      return element;
    }
  }
  getElement() {
    return this.props.context.output || this.props.context.input.inputExpression;
  }
  render() {
    const element = this.getElement();
    const _this$state2 = this.state,
      inputValue = _this$state2.inputValue,
      values = _this$state2.values;
    return element.typeRef === 'string' ? createVNode(1, "div", "context-menu-container allowed-values-edit", createVNode(1, "div", "dms-form-control", [!isNull(values) && values.length > 0 && createComponentVNode(2, List, {
      "labelComponent": Label,
      "items": values,
      "onChange": this.onListChange
    }), !isNull(values) && !values.length && createVNode(1, "div", null, [createVNode(1, "label", "dms-label", this._translate('Predefined Values'), 0), createVNode(1, "span", "placeholder", this._translate('No values'), 0)], 4), !isNull(values) && createVNode(1, "p", "dms-hint", createVNode(1, "button", "del-values", this._translate('Clear predefined values.'), 0, {
      "type": "button",
      "onClick": this.handleRemovePredifinedValuesClick
    }), 2), createVNode(1, "label", "dms-label", this._translate('Add Predefined Values'), 0), createComponentVNode(2, ValidatedInput, {
      "onInput": this.onInput,
      "onKeyDown": this.onKeyDown,
      "placeholder": this._translate('"value", "value", ...'),
      "type": "text",
      "validate": value => {
        if (!parseString(value)) {
          return this._translate('Strings must be in double quotes.');
        }
      },
      "value": inputValue
    })], 0), 2) : null;
  }
}
function Label(label) {
  return createVNode(1, "label", "dms-label", label, 0);
}

// helpers //////////////////////

function isEnter(keyCode) {
  return keyCode === 13;
}
function isNull(value) {
  return value === null;
}
//# sourceMappingURL=AllowedValuesEditing.js.map
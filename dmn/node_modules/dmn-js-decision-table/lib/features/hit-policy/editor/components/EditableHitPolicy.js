import { createVNode, createComponentVNode } from "inferno";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { find } from 'min-dash';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';
import { inject } from 'table-js/lib/components';
import { HIT_POLICIES } from './../../HitPolicies';
export default class EditableHitPolicy extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onChange", _ref => {
      let aggregation = _ref.aggregation,
        hitPolicy = _ref.hitPolicy;
      this.modeling.editHitPolicy(hitPolicy, aggregation);
    });
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    this._translate = context.injector.get('translate');
    inject(this);
  }
  componentDidMount() {
    this.changeSupport.onElementsChanged(this.getRoot().id, this.onElementsChanged);
  }
  componentWillUnmount() {
    this.changeSupport.offElementsChanged(this.getRoot().id, this.onElementsChanged);
  }
  getRoot() {
    return this.sheet.getRoot();
  }
  render() {
    const root = this.getRoot(),
      businessObject = root.businessObject;
    const aggregation = businessObject.aggregation,
      hitPolicy = businessObject.hitPolicy;
    const hitPolicyEntry = find(HIT_POLICIES, entry => {
      return isEqualHitPolicy(entry.value, {
        aggregation,
        hitPolicy
      });
    });
    return createVNode(1, "div", "hit-policy", [createVNode(1, "label", "dms-label", this._translate('Hit Policy:'), 0), createComponentVNode(2, InputSelect, {
      "className": "hit-policy-edit-policy-select",
      "onChange": this.onChange,
      "options": HIT_POLICIES.map(entry => _objectSpread(_objectSpread({}, entry), {}, {
        label: this._translate(entry.label)
      })),
      "value": hitPolicyEntry.value,
      "data-hit-policy": "true",
      "noInput": true
    })], 4, {
      "title": this._translate(hitPolicyEntry.explanation)
    });
  }
}
EditableHitPolicy.$inject = ['changeSupport', 'sheet', 'modeling'];

// helpers //////////////////////
function isEqualHitPolicy(a, b) {
  return a.hitPolicy === b.hitPolicy && a.aggregation === b.aggregation;
}
//# sourceMappingURL=EditableHitPolicy.js.map
import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { inject } from 'table-js/lib/components';
import { closest as domClosest } from 'min-dom';
import { is, getBusinessObject } from 'dmn-js-shared/lib/util/ModelUtil';
export default class ResizeColumn extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "handleMouseDown", event => {
      const cell = domClosest(event.target, 'th', false);
      startResize({
        node: cell,
        event,
        minWidth: this.props.minWidth || 150,
        onEnd: this.saveWidth
      });
    });
    _defineProperty(this, "saveWidth", newWidth => {
      const col = this.props.col;
      const update = {};
      if (is(col, 'dmn:DecisionTable')) {
        update.annotationsWidth = newWidth;
      } else {
        update.width = newWidth;
      }
      this.modeling.updateProperties(col, update);
    });
    inject(this);
  }
  componentDidMount() {
    const root = this.getRoot();
    this.changeSupport.onElementsChanged(root, this.onElementsChanged);
  }
  componentWillUnmount() {
    const root = this.getRoot();
    this.changeSupport.offElementsChanged(root, this.onElementsChanged);
  }
  getRoot() {
    return this.sheet.getRoot();
  }
  isLastInputOrOutput() {
    const col = this.props.col,
      root = this.getRoot(),
      bo = getBusinessObject(root);
    if (is(col, 'dmn:InputClause')) {
      const inputs = bo.get('input');
      return inputs.indexOf(col) === inputs.length - 1;
    } else if (is(col, 'dmn:OutputClause')) {
      const outputs = bo.get('output');
      return outputs.indexOf(col) === outputs.length - 1;
    }
  }
  render() {
    const style = this.isLastInputOrOutput() ? {
      right: '-7px',
      width: '27px'
    } : null;
    return createVNode(1, "div", "resize-column-handle", null, 1, {
      "onMouseDown": this.handleMouseDown,
      "title": this.translate('Resize'),
      "style": style
    });
  }
}
ResizeColumn.$inject = ['sheet', 'changeSupport', 'translate', 'modeling'];

// helper
function startResize(_ref) {
  let node = _ref.node,
    event = _ref.event,
    minWidth = _ref.minWidth,
    _ref$onEnd = _ref.onEnd,
    onEnd = _ref$onEnd === void 0 ? noop : _ref$onEnd;
  event.preventDefault();
  const initialWidth = node.getBoundingClientRect().width;
  const initialX = event.clientX;
  let currentUpdate;
  document.addEventListener('mousemove', handleMouseMove);
  document.addEventListener('mouseup', handleMouseUp);
  function handleMouseMove(event) {
    event.preventDefault();
    const currentWidth = getResizedWidth(event.clientX);
    if (currentUpdate) {
      cancelAnimationFrame(currentUpdate);
    }
    currentUpdate = requestAnimationFrame(() => {
      node.style.width = currentWidth + 'px';
    });
  }
  function handleMouseUp(event) {
    event.preventDefault();
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
    const currentWidth = getResizedWidth(event.clientX);
    onEnd(currentWidth);
  }
  function getResizedWidth(currentX) {
    const delta = currentX - initialX;
    return Math.max(initialWidth + delta, minWidth);
  }
}
function noop() {}
//# sourceMappingURL=ResizeColumn.js.map
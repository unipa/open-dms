import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import { inject, mixin } from 'table-js/lib/components';
import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';
const MIN_WIDTH = 400;
export default class AnnotationHeader extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    mixin(this, ComponentWithSlots);
    inject(this);
  }
  componentDidMount() {
    this.changeSupport.onElementsChanged(this.getRoot(), this.onElementsChanged);
  }
  componentWillUnmount() {
    this.changeSupport.offElementsChanged(this.getRoot(), this.onElementsChanged);
  }
  getRoot() {
    return this.sheet.getRoot();
  }
  render() {
    const decisionTable = this.getRoot();
    const annotationsWidth = decisionTable.businessObject.get('annotationsWidth');
    const width = (annotationsWidth || MIN_WIDTH) + 'px';
    return createVNode(1, "th", "annotation header", [this.slotFills({
      type: 'cell-inner',
      context: {
        cellType: 'annotations',
        col: this.sheet.getRoot(),
        minWidth: MIN_WIDTH
      }
    }), this.translate('Annotations')], 0, {
      "style": {
        width
      }
    });
  }
}
AnnotationHeader.$inject = ['changeSupport', 'sheet', 'translate'];
//# sourceMappingURL=AnnotationHeader.js.map
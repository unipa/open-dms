import { createVNode, createComponentVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';
import { Cell, inject } from 'table-js/lib/components';
export default class EditableAnnotationCell extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "setAnnotationValue", text => {
      const row = this.props.row;
      this.modeling.editAnnotation(row.businessObject, text);
    });
    inject(this);
  }
  componentWillMount() {
    const row = this.props.row;
    this.changeSupport.onElementsChanged(row.id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const row = this.props.row;
    this.changeSupport.offElementsChanged(row.id, this.onElementsChanged);
  }
  render() {
    const _this$props = this.props,
      row = _this$props.row,
      rowIndex = _this$props.rowIndex;
    const _row$businessObject = row.businessObject,
      description = _row$businessObject.description,
      id = _row$businessObject.id;
    return createComponentVNode(2, Cell, {
      "className": "annotation",
      "onChange": this.setAnnotationValue,
      "coords": "".concat(rowIndex, ":annotation"),
      "value": description,
      "elementId": id,
      "data-row-id": row.id,
      children: createComponentVNode(2, AnnotationEditor, {
        "ctrlForNewline": true,
        "className": "annotation-editor",
        "onChange": this.setAnnotationValue,
        "value": description
      })
    });
  }
}
EditableAnnotationCell.$inject = ['changeSupport', 'modeling'];
class AnnotationEditor extends EditableComponent {
  render() {
    return createVNode(1, "div", this.getClassName(), this.getEditor(), 0);
  }
}
//# sourceMappingURL=AnnotationCell.js.map
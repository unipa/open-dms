import { createVNode, createComponentVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';
import { inject, mixin, classNames, SelectionAware } from 'table-js/lib/components';
export default class DecisionTablePropertiesComponent extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "setDecisionTableName", name => {
      this.modeling.editDecisionTableName(name);
    });
    inject(this);
  }
  componentWillMount() {
    this.setupChangeListeners({
      bind: this.getBusinessObject().id
    });
  }
  componentWillUnmount() {
    this.setupChangeListeners({
      unbind: this.getBusinessObject().id
    });
  }
  setupChangeListeners(_ref) {
    let bind = _ref.bind,
      unbind = _ref.unbind;
    if (typeof unbind === 'string') {
      this.changeSupport.offElementsChanged(unbind, this.onElementsChanged);
    }
    if (typeof bind === 'string') {
      this.changeSupport.onElementsChanged(bind, this.onElementsChanged);
    }
  }
  getBusinessObject() {
    return this.sheet.getRoot().businessObject.$parent;
  }
  render() {
    const bo = this.getBusinessObject();
    const name = bo.name;
    const HitPolicy = this.components.getComponent('hit-policy') || NullComponent;
    return createVNode(1, "div", "decision-table-properties", [createComponentVNode(2, DecisionTableName, {
      "className": "decision-table-name",
      "value": name,
      "ctrlForNewline": true,
      "onBlur": resetScroll,
      "onChange": this.setDecisionTableName,
      "elementId": '__decisionProperties_name',
      "coords": '0:__decisionProperties'
    }), createVNode(1, "div", "decision-table-header-separator"), createComponentVNode(2, HitPolicy)], 4);
  }
}
DecisionTablePropertiesComponent.$inject = ['sheet', 'modeling', 'changeSupport', 'components'];
class DecisionTableName extends EditableComponent {
  constructor(props, context) {
    super(props, context);
    this._translate = context.injector.get('translate');
    mixin(this, SelectionAware);
  }
  render() {
    const name = this.props.value;
    const className = classNames(this.getSelectionClasses(), this.getClassName());
    return createVNode(1, "div", className, this.getEditor(), 0, {
      "data-element-id": this.props.elementId,
      "data-coords": this.props.coords,
      "title": this._translate('Decision Name: ') + name
    });
  }
}
function NullComponent() {
  return null;
}
function resetScroll(event) {
  event.target.scroll(0, 0);
}
//# sourceMappingURL=DecisionTablePropertiesEditorComponent.js.map
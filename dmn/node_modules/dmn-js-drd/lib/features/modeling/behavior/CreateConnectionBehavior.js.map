{"version":3,"file":"CreateConnectionBehavior.js","names":["inherits","CommandInterceptor","is","CreateConnectionBehavior","drdFactory","injector","invoke","preExecute","context","connection","connectionBo","businessObject","source","target","elementRef","sourceRef","targetRef","create","href","id","$parent","getRequirementType","$inject"],"sources":["../../../../src/features/modeling/behavior/CreateConnectionBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\n\n/**\n * Creates DMN-specific refs for new connection.\n *\n * @param {DrdFactory} drdFactory\n * @param {Injector} injector\n */\nexport default function CreateConnectionBehavior(drdFactory, injector) {\n  injector.invoke(CommandInterceptor, this);\n\n  this.preExecute('connection.create', function(context) {\n    var connection = context.connection,\n        connectionBo = connection.businessObject,\n        source = context.source,\n        target = context.target,\n        elementRef,\n        sourceRef,\n        targetRef;\n\n    if (is(connection, 'dmn:Association')) {\n      sourceRef = connectionBo.sourceRef = drdFactory\n        .create('dmn:DMNElementReference', {\n          href: '#' + source.id\n        });\n\n      sourceRef.$parent = connectionBo;\n\n      targetRef = connectionBo.targetRef = drdFactory\n        .create('dmn:DMNElementReference', {\n          href: '#' + target.id\n        });\n\n      targetRef.$parent = connectionBo;\n    } else {\n      elementRef = connectionBo[ 'required' + getRequirementType(source) ] = drdFactory\n        .create('dmn:DMNElementReference', {\n          href: '#' + source.id\n        });\n\n      elementRef.$parent = connectionBo;\n    }\n  }, true);\n\n}\n\nCreateConnectionBehavior.$inject = [\n  'drdFactory',\n  'injector'\n];\n\ninherits(CreateConnectionBehavior, CommandInterceptor);\n\n\n// helpers //////////\n\nfunction getRequirementType(source) {\n  if (is(source, 'dmn:BusinessKnowledgeModel')) {\n    return 'Knowledge';\n  } else if (is(source, 'dmn:Decision')) {\n    return 'Decision';\n  } else if (is(source, 'dmn:InputData')) {\n    return 'Input';\n  } else if (is(source, 'dmn:KnowledgeSource')) {\n    return 'Authority';\n  }\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,kBAAkB,MAAM,2CAA2C;AAE1E,SAASC,EAAE,QAAQ,kCAAkC;;AAGrD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,wBAAwB,CAACC,UAAU,EAAEC,QAAQ,EAAE;EACrEA,QAAQ,CAACC,MAAM,CAACL,kBAAkB,EAAE,IAAI,CAAC;EAEzC,IAAI,CAACM,UAAU,CAAC,mBAAmB,EAAE,UAASC,OAAO,EAAE;IACrD,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;MAC/BC,YAAY,GAAGD,UAAU,CAACE,cAAc;MACxCC,MAAM,GAAGJ,OAAO,CAACI,MAAM;MACvBC,MAAM,GAAGL,OAAO,CAACK,MAAM;MACvBC,UAAU;MACVC,SAAS;MACTC,SAAS;IAEb,IAAId,EAAE,CAACO,UAAU,EAAE,iBAAiB,CAAC,EAAE;MACrCM,SAAS,GAAGL,YAAY,CAACK,SAAS,GAAGX,UAAU,CAC5Ca,MAAM,CAAC,yBAAyB,EAAE;QACjCC,IAAI,EAAE,GAAG,GAAGN,MAAM,CAACO;MACrB,CAAC,CAAC;MAEJJ,SAAS,CAACK,OAAO,GAAGV,YAAY;MAEhCM,SAAS,GAAGN,YAAY,CAACM,SAAS,GAAGZ,UAAU,CAC5Ca,MAAM,CAAC,yBAAyB,EAAE;QACjCC,IAAI,EAAE,GAAG,GAAGL,MAAM,CAACM;MACrB,CAAC,CAAC;MAEJH,SAAS,CAACI,OAAO,GAAGV,YAAY;IAClC,CAAC,MAAM;MACLI,UAAU,GAAGJ,YAAY,CAAE,UAAU,GAAGW,kBAAkB,CAACT,MAAM,CAAC,CAAE,GAAGR,UAAU,CAC9Ea,MAAM,CAAC,yBAAyB,EAAE;QACjCC,IAAI,EAAE,GAAG,GAAGN,MAAM,CAACO;MACrB,CAAC,CAAC;MAEJL,UAAU,CAACM,OAAO,GAAGV,YAAY;IACnC;EACF,CAAC,EAAE,IAAI,CAAC;AAEV;AAEAP,wBAAwB,CAACmB,OAAO,GAAG,CACjC,YAAY,EACZ,UAAU,CACX;AAEDtB,QAAQ,CAACG,wBAAwB,EAAEF,kBAAkB,CAAC;;AAGtD;;AAEA,SAASoB,kBAAkB,CAACT,MAAM,EAAE;EAClC,IAAIV,EAAE,CAACU,MAAM,EAAE,4BAA4B,CAAC,EAAE;IAC5C,OAAO,WAAW;EACpB,CAAC,MAAM,IAAIV,EAAE,CAACU,MAAM,EAAE,cAAc,CAAC,EAAE;IACrC,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIV,EAAE,CAACU,MAAM,EAAE,eAAe,CAAC,EAAE;IACtC,OAAO,OAAO;EAChB,CAAC,MAAM,IAAIV,EAAE,CAACU,MAAM,EAAE,qBAAqB,CAAC,EAAE;IAC5C,OAAO,WAAW;EACpB;AACF"}
import { createVNode, createComponentVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';
export default class DecisionPropertiesEditorComponent extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    _defineProperty(this, "setDecisionName", name => {
      this._modeling.editDecisionName(name);
    });
    this._viewer = context.injector.get('viewer');
    this._modeling = context.injector.get('modeling');
    this.setupChangeListeners({
      bind: this.getDecision().id
    });
  }
  componentWillUnmount() {
    this.setupChangeListeners({
      unbind: this.getDecision().id
    });
  }
  getDecision() {
    return this._viewer.getDecision();
  }
  setupChangeListeners(_ref) {
    let bind = _ref.bind,
      unbind = _ref.unbind;
    const changeSupport = this.context.changeSupport;
    if (typeof unbind === 'string') {
      changeSupport.offElementsChanged(unbind, this.onElementsChanged);
    }
    if (typeof bind === 'string') {
      changeSupport.onElementsChanged(bind, this.onElementsChanged);
    }
  }
  render() {
    const _this$getDecision = this.getDecision(),
      name = _this$getDecision.name;
    return createVNode(1, "header", "decision-properties", createComponentVNode(2, DecisionName, {
      "className": "decision-name editor",
      "value": name,
      "onBlur": resetScroll,
      "onChange": this.setDecisionName
    }), 2);
  }
}
class DecisionName extends EditableComponent {
  render() {
    return createVNode(1, "h3", this.getClassName(), this.getEditor(), 0);
  }
}
function resetScroll(event) {
  event.target.scroll(0, 0);
}
//# sourceMappingURL=DecisionPropertiesEditorComponent.js.map
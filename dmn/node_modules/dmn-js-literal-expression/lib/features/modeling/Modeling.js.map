{"version":3,"file":"Modeling.js","names":["forEach","UpdatePropertiesHandler","Modeling","constructor","commandStack","viewer","eventBus","_commandStack","_viewer","_eventBus","on","registerHandlers","getHandlers","_getHandlers","getDecision","editDecisionName","name","decision","context","element","properties","execute","editDecisionId","id","editLiteralExpressionText","text","literalExpression","decisionLogic","editExpressionLanguage","expressionLanguage","editVariableName","variable","editVariableType","typeRef","$inject","handlers","handler","registerHandler"],"sources":["../../../src/features/modeling/Modeling.js"],"sourcesContent":["import {\r\n  forEach\r\n} from 'min-dash';\r\n\r\nimport UpdatePropertiesHandler\r\n  from 'dmn-js-shared/lib/features/modeling/cmd/UpdatePropertiesHandler';\r\n\r\n\r\nexport default class Modeling {\r\n\r\n  constructor(commandStack, viewer, eventBus) {\r\n    this._commandStack = commandStack;\r\n    this._viewer = viewer;\r\n    this._eventBus = eventBus;\r\n\r\n    eventBus.on('viewer.init', () => {\r\n\r\n      // register modeling handlers\r\n      registerHandlers(this.getHandlers(), commandStack);\r\n    });\r\n  }\r\n\r\n  getHandlers() {\r\n    return Modeling._getHandlers();\r\n  }\r\n\r\n  static _getHandlers() {\r\n    return {\r\n      'element.updateProperties': UpdatePropertiesHandler\r\n    };\r\n  }\r\n\r\n  getDecision() {\r\n    return this._viewer.getDecision();\r\n  }\r\n\r\n  editDecisionName(name) {\r\n    const decision = this.getDecision();\r\n\r\n    const context = {\r\n      element: decision,\r\n      properties: {\r\n        name\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n\r\n  editDecisionId(id) {\r\n    const decision = this.getDecision();\r\n\r\n    const context = {\r\n      element: decision,\r\n      properties: {\r\n        id\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n\r\n  editLiteralExpressionText(text) {\r\n    const decision = this.getDecision(),\r\n          literalExpression = decision.decisionLogic;\r\n\r\n    const context = {\r\n      element: literalExpression,\r\n      properties: {\r\n        text\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n\r\n  editExpressionLanguage(expressionLanguage) {\r\n    const decision = this.getDecision(),\r\n          literalExpression = decision.decisionLogic;\r\n\r\n    const context = {\r\n      element: literalExpression,\r\n      properties: {\r\n        expressionLanguage\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n\r\n  editVariableName(name) {\r\n    const decision = this.getDecision(),\r\n          variable = decision.variable;\r\n\r\n    const context = {\r\n      element: variable,\r\n      properties: {\r\n        name\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n\r\n  editVariableType(typeRef) {\r\n    const decision = this.getDecision(),\r\n          variable = decision.variable;\r\n\r\n    const context = {\r\n      element: variable,\r\n      properties: {\r\n        typeRef\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('element.updateProperties', context);\r\n  }\r\n}\r\n\r\nModeling.$inject = [ 'commandStack', 'viewer', 'eventBus' ];\r\n\r\n\r\n// helpers //////////////////////\r\n\r\n/**\r\n * Register handlers with the command stack\r\n *\r\n * @param {Object} handlers { id -> Handler } map\r\n * @param {CommandStack} commandStack\r\n */\r\nfunction registerHandlers(handlers, commandStack) {\r\n  forEach(handlers, function(handler, id) {\r\n    commandStack.registerHandler(id, handler);\r\n  });\r\n}"],"mappings":"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"}
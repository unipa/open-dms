{"version":3,"file":"LiteralExpressionPropertiesEditorComponent.js","names":["Component","Input","InputSelect","LiteralExpressionPropertiesComponent","constructor","props","context","_translate","injector","get","_viewer","_modeling","_dataTypes","decision","getDecision","state","name","variable","typeRef","setVariableName","bind","setVariableType","editVariableName","setState","editVariableType","undefined","render","typeRefOptions","getAll","map","t","label","value","ExpressionLanguage","_expressionLanguages","setExpressionLanguage","expressionLanguage","editExpressionLanguage","_getExpressionLanguage","literalExpression","decisionLogic","toLowerCase","_getDefaultExpressionLanguage","getDefault","_shouldRender","expressionLanguages","length","languageOptions"],"sources":["../../../../src/features/literal-expression-properties/components/LiteralExpressionPropertiesEditorComponent.js"],"sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport Input from 'dmn-js-shared/lib/components/Input';\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\n\r\nexport default class LiteralExpressionPropertiesComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._translate = context.injector.get('translate');\r\n    this._viewer = context.injector.get('viewer');\r\n    this._modeling = context.injector.get('modeling');\r\n    this._dataTypes = context.injector.get('dataTypes');\r\n\r\n    const decision = this._viewer.getDecision();\r\n\r\n    this.state = {\r\n      name: decision.variable.name,\r\n      typeRef: decision.variable.typeRef\r\n    };\r\n\r\n    this.setVariableName = this.setVariableName.bind(this);\r\n    this.setVariableType = this.setVariableType.bind(this);\r\n  }\r\n\r\n  setVariableName(name) {\r\n    this._modeling.editVariableName(name);\r\n\r\n    this.setState({\r\n      name\r\n    });\r\n  }\r\n\r\n  setVariableType(typeRef) {\r\n    if (typeRef === '') {\r\n      this._modeling.editVariableType(undefined);\r\n\r\n      this.setState({\r\n        typeRef: undefined\r\n      });\r\n    } else {\r\n      this._modeling.editVariableType(typeRef);\r\n\r\n      this.setState({\r\n        typeRef\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, typeRef } = this.state;\r\n\r\n    const typeRefOptions = this._dataTypes.getAll().map(t => {\r\n      return {\r\n        label: this._translate(t),\r\n        value: t\r\n      };\r\n    });\r\n\r\n    return (\r\n      <div className=\"literal-expression-properties\">\r\n        <table>\r\n          <tr>\r\n            <td>{ this._translate('Variable Name:') }</td>\r\n            <td>\r\n              <Input\r\n                className=\"variable-name-input\"\r\n                onInput={ this.setVariableName }\r\n                placeholder={ 'name' }\r\n                value={ name || '' } />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>{ this._translate('Variable Type:') }</td>\r\n            <td>\r\n              <div className=\"dms-fill-row\">\r\n                <InputSelect\r\n                  onChange={ this.setVariableType }\r\n                  options={ typeRefOptions }\r\n                  value={ typeRef }\r\n                  className=\"variable-type-select dms-block\" />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n          <ExpressionLanguage />\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ExpressionLanguage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._translate = context.injector.get('translate');\r\n    this._viewer = context.injector.get('viewer');\r\n    this._modeling = context.injector.get('modeling');\r\n    this._expressionLanguages = context.injector.get('expressionLanguages');\r\n\r\n    this.setExpressionLanguage = this.setExpressionLanguage.bind(this);\r\n  }\r\n\r\n  setExpressionLanguage(expressionLanguage) {\r\n    if (expressionLanguage === '') {\r\n      this._modeling.editExpressionLanguage(undefined);\r\n    } else {\r\n      this._modeling.editExpressionLanguage(expressionLanguage);\r\n    }\r\n  }\r\n\r\n  _getExpressionLanguage() {\r\n    const decision = this._viewer.getDecision();\r\n    const literalExpression = decision.decisionLogic;\r\n\r\n    return (literalExpression && literalExpression.expressionLanguage)\r\n      ? literalExpression.expressionLanguage.toLowerCase()\r\n      : this._getDefaultExpressionLanguage();\r\n  }\r\n\r\n  _getDefaultExpressionLanguage() {\r\n    return this._expressionLanguages.getDefault().value;\r\n  }\r\n\r\n  _shouldRender() {\r\n    const expressionLanguages = this._expressionLanguages.getAll();\r\n\r\n    if (expressionLanguages.length > 1) {\r\n      return true;\r\n    }\r\n\r\n    const expressionLanguage = this._getExpressionLanguage();\r\n\r\n    return expressionLanguage !== this._getDefaultExpressionLanguage();\r\n  }\r\n\r\n  render() {\r\n    if (!this._shouldRender()) {\r\n      return null;\r\n    }\r\n\r\n    const expressionLanguage = this._getExpressionLanguage();\r\n\r\n    const languageOptions = this._expressionLanguages.getAll();\r\n\r\n    return (\r\n      <tr>\r\n        <td>{ this._translate('Expression Language:') }</td>\r\n        <td>\r\n          <div className=\"dms-fill-row\">\r\n            <InputSelect\r\n              onChange={ this.setExpressionLanguage }\r\n              options={ languageOptions }\r\n              value={ expressionLanguage }\r\n              className=\"expression-language-select dms-block\" />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}
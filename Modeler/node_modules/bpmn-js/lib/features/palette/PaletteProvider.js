import { assign } from "min-dash";
import { getDi } from "../../util/ModelUtil";
import customelem from "../../../../../app/descriptors/customelements.json";

/**
 * A palette provider for BPMN 2.0 elements.
 */

var customPaletteItems = [];

function getConfigForDomain(configFile) {
  const currentDomain = window.location.hostname + ":" + window.location.port;

  return fetch(configFile)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((json) => {
      const matchingConfig = json.urls.find(
        (config) => config.domain === currentDomain
      );

      if (!matchingConfig) {
        throw new Error("No configuration found for the current domain");
      }

      return matchingConfig;
    })
    .catch((error) => {
      console.error("There was a problem with the fetch operation:", error);
      return null;
    });
}

function fetchCustomPaletteItems() {
  var json = customelem;
  var mappedItems = json.flatMap((element) =>
    element.tasks.map((task) => ({
      type: "bpmn:ServiceTask",
      //ype: task.jobWorker || "bpmn:ServiceTask",
      group: task.group.toLowerCase().replaceAll(" ", ""),
      className: task.icon || "bpmn-icon-service",
      title: task.label || task.name,
      id: task.id,
      colorFill: task.colorFill || "",
      colorStroke: task.colorStroke || "",
      inputs: task.inputs, // Passo i campi "inputs" se necessario
    }))
  );
  return Promise.resolve(mappedItems);
}


export default function PaletteProvider(
  palette,
  create,
  elementFactory,
  spaceTool,
  lassoTool,
  handTool,
  globalConnect,
  translate
) {
  this._palette = palette;
  this._create = create;
  this._elementFactory = elementFactory;
  this._spaceTool = spaceTool;
  this._lassoTool = lassoTool;
  this._handTool = handTool;
  this._globalConnect = globalConnect;
  this._translate = translate;

  fetchCustomPaletteItems().then((items) => {
    customPaletteItems = items;
    palette.registerProvider(this);
  });
}

PaletteProvider.$inject = [
  "palette",
  "create",
  "elementFactory",
  "spaceTool",
  "lassoTool",
  "handTool",
  "globalConnect",
  "translate",
];

PaletteProvider.prototype.getPaletteEntries = function (element) {
  var actions = {},
    create = this._create,
    elementFactory = this._elementFactory,
    spaceTool = this._spaceTool,
    lassoTool = this._lassoTool,
    handTool = this._handTool,
    globalConnect = this._globalConnect,
    translate = this._translate;

  function createAction(type, group, className, title, options, itemData) {
    function createListener(event) {
      var shape = elementFactory.createShape(assign({ type: type }, options));

      if (options) {
        var di = getDi(shape);
        di.isExpanded = options.isExpanded;
      }
      // Aggiunta di dati personalizzati all'businessObject dell'elemento
      if (itemData) {
        // Ad esempio, aggiungere un identificatore univoco personalizzato
        shape.businessObject.customId = `${itemData.id}`;
      }

      create.start(event, shape);
    }

    var shortType = type.replace(/^bpmn:/, "");

    return {
      group: group,
      className: className,
      title: title || translate("Create {type}", { type: shortType }),
      action: {
        dragstart: createListener,
        click: createListener,
      },
    };
  }

  function createSubprocess(event) {
    var subProcess = elementFactory.createShape({
      type: "bpmn:SubProcess",
      x: 0,
      y: 0,
      isExpanded: true,
    });

    var startEvent = elementFactory.createShape({
      type: "bpmn:StartEvent",
      x: 40,
      y: 82,
      parent: subProcess,
    });

    create.start(event, [subProcess, startEvent], {
      hints: {
        autoSelect: [subProcess],
      },
    });
  }

  function createParticipant(event) {
    create.start(event, elementFactory.createParticipantShape());
  }

  assign(actions, {
    "hand-tool": {
      group: "standardbpmn",
      className: "bpmn-icon-hand-tool",
      title: translate("Activate the hand tool"),
      action: {
        click: function (event) {
          handTool.activateHand(event);
        },
      },
    },
    "lasso-tool": {
      group: "standardbpmn",
      className: "bpmn-icon-lasso-tool",
      title: translate("Activate the lasso tool"),
      action: {
        click: function (event) {
          lassoTool.activateSelection(event);
        },
      },
    },
    "space-tool": {
      group: "standardbpmn",
      className: "bpmn-icon-space-tool",
      title: translate("Activate the create/remove space tool"),
      action: {
        click: function (event) {
          spaceTool.activateSelection(event);
        },
      },
    },
    "global-connect-tool": {
      group: "standardbpmn",
      className: "bpmn-icon-connection-multi",
      title: translate("Activate the global connect tool"),
      action: {
        click: function (event) {
          globalConnect.start(event);
        },
      },
    },
    // 'tool-separator': {
    //   group: 'standardbpmn',
    //   separator: true
    // },
    "create.start-event": createAction(
      "bpmn:StartEvent",
      "standardbpmn",
      "bpmn-icon-start-event-none",
      translate("Create StartEvent")
    ),
    "create.intermediate-event": createAction(
      "bpmn:IntermediateThrowEvent",
      "standardbpmn",
      "bpmn-icon-intermediate-event-none",
      translate("Create Intermediate/Boundary Event")
    ),
    "create.end-event": createAction(
      "bpmn:EndEvent",
      "standardbpmn",
      "bpmn-icon-end-event-none",
      translate("Create EndEvent")
    ),
    "create.exclusive-gateway": createAction(
      "bpmn:ExclusiveGateway",
      "standardbpmn",
      "bpmn-icon-gateway-none",
      translate("Create Gateway")
    ),
    "create.task": createAction(
      "bpmn:Task",
      "standardbpmn",
      "bpmn-icon-task",
      translate("Create Task")
    ),
    "create.servicetask": createAction(
      "bpmn:ServiceTask",
      "standardbpmn",
      "bpmn-icon-service",
      translate("Create ServiceTask")
    ),
    "create.data-object": createAction(
      "bpmn:DataObjectReference",
      "standardbpmn",
      "bpmn-icon-data-object",
      translate("Create DataObjectReference")
    ),
    "create.data-store": createAction(
      "bpmn:DataStoreReference",
      "standardbpmn",
      "bpmn-icon-data-store",
      translate("Create DataStoreReference")
    ),
    "create.subprocess-expanded": {
      group: "standardbpmn",
      className: "bpmn-icon-subprocess-expanded",
      title: translate("Create expanded SubProcess"),
      action: {
        dragstart: createSubprocess,
        click: createSubprocess,
      },
    },
    "create.participant-expanded": {
      group: "standardbpmn",
      className: "bpmn-icon-participant",
      title: translate("Create Pool/Participant"),
      action: {
        dragstart: createParticipant,
        click: createParticipant,
      },
    },
    "create.group": createAction(
      "bpmn:Group",
      "standardbpmn",
      "bpmn-icon-group",
      translate("Create Group")
    ),
    // 'create.separatore-mattoncini-custom': {
    //   separator: true
    // },
  });

  //Add the custom palette items to actions
  customPaletteItems.forEach((item) => {
    // Assumendo che `customPaletteItems` sia un array di oggetti item derivanti dal tuo JSON
    const uniqueId = `custom-servicetask-${item.id}`;

    actions[uniqueId] = createAction(
      item.type || "bpmn:ServiceTask", // Ad esempio, potresti voler utilizzare item.JobWorker se appropriato
      item.group.replaceAll(" ", ""),
      item.className,
      translate(item.title),
      {}, // Opzioni, se necessarie
      item // Passa qui l'oggetto item come dati aggiuntivi
    );
  });

  return actions;
};
